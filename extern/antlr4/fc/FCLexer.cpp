
// Generated from FC.g4 by ANTLR 4.13.2


#include "FCLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct FCLexerStaticData final {
  FCLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  FCLexerStaticData(const FCLexerStaticData&) = delete;
  FCLexerStaticData(FCLexerStaticData&&) = delete;
  FCLexerStaticData& operator=(const FCLexerStaticData&) = delete;
  FCLexerStaticData& operator=(FCLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag fclexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<FCLexerStaticData> fclexerLexerStaticData = nullptr;

void fclexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (fclexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(fclexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<FCLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "FUNCTION", "REGION_FILTER", 
      "AND", "OR", "NOT", "IN", "NOT_IN", "EQ", "NQ", "GT", "LT", "GE", 
      "LE", "MUL", "DIV", "ADD", "SUB", "ID", "INTEGER", "SEP", "SEP_STR", 
      "INT_STRING", "STRING", "PIPE_INT_STR", "PIPE_STR_STR", "FLOAT", "DIGIT", 
      "WS", "LINE_COMMENT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'('", "')'", "','", "'['", "']'", "", "'region_filter'", "", 
      "", "'!'", "", "", "'='", "'!='", "'>'", "'<'", "'>='", "'<='", "'*'", 
      "'/'", "'+'", "'-'", "", "", "'|'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "FUNCTION", "REGION_FILTER", "AND", "OR", 
      "NOT", "IN", "NOT_IN", "EQ", "NQ", "GT", "LT", "GE", "LE", "MUL", 
      "DIV", "ADD", "SUB", "ID", "INTEGER", "SEP", "SEP_STR", "INT_STRING", 
      "STRING", "PIPE_INT_STR", "PIPE_STR_STR", "FLOAT", "WS", "LINE_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,33,362,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,1,0,1,1,1,
  	1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
  	1,5,1,5,1,5,1,5,1,5,3,5,96,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
  	6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,120,8,7,1,8,1,8,
  	1,8,1,8,1,8,1,8,3,8,128,8,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
  	1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,
  	152,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
  	1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
  	1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
  	1,11,1,11,1,11,1,11,3,11,198,8,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,
  	1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,
  	1,21,1,21,1,22,1,22,5,22,225,8,22,10,22,12,22,228,9,22,1,22,1,22,1,22,
  	5,22,233,8,22,10,22,12,22,236,9,22,5,22,238,8,22,10,22,12,22,241,9,22,
  	1,23,3,23,244,8,23,1,23,1,23,5,23,248,8,23,10,23,12,23,251,9,23,1,23,
  	3,23,254,8,23,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,
  	1,27,5,27,268,8,27,10,27,12,27,271,9,27,1,27,1,27,1,28,1,28,1,28,1,28,
  	1,28,5,28,280,8,28,10,28,12,28,283,9,28,1,28,1,28,1,29,1,29,1,29,1,29,
  	4,29,291,8,29,11,29,12,29,292,1,29,1,29,1,29,1,29,5,29,299,8,29,10,29,
  	12,29,302,9,29,5,29,304,8,29,10,29,12,29,307,9,29,1,29,1,29,1,30,3,30,
  	312,8,30,1,30,4,30,315,8,30,11,30,12,30,316,1,30,1,30,5,30,321,8,30,10,
  	30,12,30,324,9,30,1,30,1,30,4,30,328,8,30,11,30,12,30,329,3,30,332,8,
  	30,1,30,1,30,3,30,336,8,30,1,30,4,30,339,8,30,11,30,12,30,340,3,30,343,
  	8,30,1,31,1,31,1,32,4,32,348,8,32,11,32,12,32,349,1,32,1,32,1,33,1,33,
  	5,33,356,8,33,10,33,12,33,359,9,33,1,33,1,33,0,0,34,1,1,3,2,5,3,7,4,9,
  	5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
  	35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
  	29,59,30,61,31,63,0,65,32,67,33,1,0,10,3,0,65,90,95,95,97,122,4,0,48,
  	57,65,90,95,95,97,122,2,0,43,43,45,45,1,0,49,57,1,0,48,57,2,0,34,34,124,
  	124,2,0,34,34,92,92,2,0,69,69,101,101,3,0,9,10,13,13,32,32,2,0,10,10,
  	13,13,396,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
  	0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
  	1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
  	0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
  	0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
  	1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,65,1,0,
  	0,0,0,67,1,0,0,0,1,69,1,0,0,0,3,71,1,0,0,0,5,73,1,0,0,0,7,75,1,0,0,0,
  	9,77,1,0,0,0,11,95,1,0,0,0,13,97,1,0,0,0,15,119,1,0,0,0,17,127,1,0,0,
  	0,19,129,1,0,0,0,21,151,1,0,0,0,23,197,1,0,0,0,25,199,1,0,0,0,27,201,
  	1,0,0,0,29,204,1,0,0,0,31,206,1,0,0,0,33,208,1,0,0,0,35,211,1,0,0,0,37,
  	214,1,0,0,0,39,216,1,0,0,0,41,218,1,0,0,0,43,220,1,0,0,0,45,222,1,0,0,
  	0,47,253,1,0,0,0,49,255,1,0,0,0,51,257,1,0,0,0,53,261,1,0,0,0,55,265,
  	1,0,0,0,57,274,1,0,0,0,59,286,1,0,0,0,61,311,1,0,0,0,63,344,1,0,0,0,65,
  	347,1,0,0,0,67,353,1,0,0,0,69,70,5,40,0,0,70,2,1,0,0,0,71,72,5,41,0,0,
  	72,4,1,0,0,0,73,74,5,44,0,0,74,6,1,0,0,0,75,76,5,91,0,0,76,8,1,0,0,0,
  	77,78,5,93,0,0,78,10,1,0,0,0,79,80,5,70,0,0,80,81,5,85,0,0,81,82,5,78,
  	0,0,82,83,5,67,0,0,83,84,5,84,0,0,84,85,5,73,0,0,85,86,5,79,0,0,86,96,
  	5,78,0,0,87,88,5,102,0,0,88,89,5,117,0,0,89,90,5,110,0,0,90,91,5,99,0,
  	0,91,92,5,116,0,0,92,93,5,105,0,0,93,94,5,111,0,0,94,96,5,110,0,0,95,
  	79,1,0,0,0,95,87,1,0,0,0,96,12,1,0,0,0,97,98,5,114,0,0,98,99,5,101,0,
  	0,99,100,5,103,0,0,100,101,5,105,0,0,101,102,5,111,0,0,102,103,5,110,
  	0,0,103,104,5,95,0,0,104,105,5,102,0,0,105,106,5,105,0,0,106,107,5,108,
  	0,0,107,108,5,116,0,0,108,109,5,101,0,0,109,110,5,114,0,0,110,14,1,0,
  	0,0,111,112,5,65,0,0,112,113,5,78,0,0,113,120,5,68,0,0,114,115,5,97,0,
  	0,115,116,5,110,0,0,116,120,5,100,0,0,117,118,5,38,0,0,118,120,5,38,0,
  	0,119,111,1,0,0,0,119,114,1,0,0,0,119,117,1,0,0,0,120,16,1,0,0,0,121,
  	122,5,79,0,0,122,128,5,82,0,0,123,124,5,111,0,0,124,128,5,114,0,0,125,
  	126,5,124,0,0,126,128,5,124,0,0,127,121,1,0,0,0,127,123,1,0,0,0,127,125,
  	1,0,0,0,128,18,1,0,0,0,129,130,5,33,0,0,130,20,1,0,0,0,131,132,5,73,0,
  	0,132,152,5,78,0,0,133,134,5,105,0,0,134,152,5,110,0,0,135,136,5,77,0,
  	0,136,137,5,85,0,0,137,138,5,76,0,0,138,139,5,84,0,0,139,140,5,73,0,0,
  	140,141,5,95,0,0,141,142,5,73,0,0,142,152,5,78,0,0,143,144,5,109,0,0,
  	144,145,5,117,0,0,145,146,5,108,0,0,146,147,5,116,0,0,147,148,5,105,0,
  	0,148,149,5,95,0,0,149,150,5,105,0,0,150,152,5,110,0,0,151,131,1,0,0,
  	0,151,133,1,0,0,0,151,135,1,0,0,0,151,143,1,0,0,0,152,22,1,0,0,0,153,
  	154,5,78,0,0,154,155,5,79,0,0,155,156,5,84,0,0,156,157,5,95,0,0,157,158,
  	5,73,0,0,158,198,5,78,0,0,159,160,5,110,0,0,160,161,5,111,0,0,161,162,
  	5,116,0,0,162,163,5,95,0,0,163,164,5,105,0,0,164,198,5,110,0,0,165,166,
  	5,78,0,0,166,167,5,79,0,0,167,168,5,84,0,0,168,169,5,73,0,0,169,198,5,
  	78,0,0,170,171,5,110,0,0,171,172,5,111,0,0,172,173,5,116,0,0,173,174,
  	5,105,0,0,174,198,5,110,0,0,175,176,5,77,0,0,176,177,5,85,0,0,177,178,
  	5,76,0,0,178,179,5,84,0,0,179,180,5,73,0,0,180,181,5,95,0,0,181,182,5,
  	78,0,0,182,183,5,79,0,0,183,184,5,84,0,0,184,185,5,73,0,0,185,198,5,78,
  	0,0,186,187,5,109,0,0,187,188,5,117,0,0,188,189,5,108,0,0,189,190,5,116,
  	0,0,190,191,5,105,0,0,191,192,5,95,0,0,192,193,5,110,0,0,193,194,5,111,
  	0,0,194,195,5,116,0,0,195,196,5,105,0,0,196,198,5,110,0,0,197,153,1,0,
  	0,0,197,159,1,0,0,0,197,165,1,0,0,0,197,170,1,0,0,0,197,175,1,0,0,0,197,
  	186,1,0,0,0,198,24,1,0,0,0,199,200,5,61,0,0,200,26,1,0,0,0,201,202,5,
  	33,0,0,202,203,5,61,0,0,203,28,1,0,0,0,204,205,5,62,0,0,205,30,1,0,0,
  	0,206,207,5,60,0,0,207,32,1,0,0,0,208,209,5,62,0,0,209,210,5,61,0,0,210,
  	34,1,0,0,0,211,212,5,60,0,0,212,213,5,61,0,0,213,36,1,0,0,0,214,215,5,
  	42,0,0,215,38,1,0,0,0,216,217,5,47,0,0,217,40,1,0,0,0,218,219,5,43,0,
  	0,219,42,1,0,0,0,220,221,5,45,0,0,221,44,1,0,0,0,222,226,7,0,0,0,223,
  	225,7,1,0,0,224,223,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,227,1,
  	0,0,0,227,239,1,0,0,0,228,226,1,0,0,0,229,230,5,46,0,0,230,234,7,0,0,
  	0,231,233,7,1,0,0,232,231,1,0,0,0,233,236,1,0,0,0,234,232,1,0,0,0,234,
  	235,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,237,229,1,0,0,0,238,241,1,
  	0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,46,1,0,0,0,241,239,1,0,0,0,
  	242,244,7,2,0,0,243,242,1,0,0,0,243,244,1,0,0,0,244,245,1,0,0,0,245,249,
  	7,3,0,0,246,248,7,4,0,0,247,246,1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,
  	0,249,250,1,0,0,0,250,254,1,0,0,0,251,249,1,0,0,0,252,254,5,48,0,0,253,
  	243,1,0,0,0,253,252,1,0,0,0,254,48,1,0,0,0,255,256,5,124,0,0,256,50,1,
  	0,0,0,257,258,5,34,0,0,258,259,3,49,24,0,259,260,5,34,0,0,260,52,1,0,
  	0,0,261,262,5,34,0,0,262,263,3,47,23,0,263,264,5,34,0,0,264,54,1,0,0,
  	0,265,269,5,34,0,0,266,268,8,5,0,0,267,266,1,0,0,0,268,271,1,0,0,0,269,
  	267,1,0,0,0,269,270,1,0,0,0,270,272,1,0,0,0,271,269,1,0,0,0,272,273,5,
  	34,0,0,273,56,1,0,0,0,274,275,5,34,0,0,275,281,3,47,23,0,276,277,3,49,
  	24,0,277,278,3,47,23,0,278,280,1,0,0,0,279,276,1,0,0,0,280,283,1,0,0,
  	0,281,279,1,0,0,0,281,282,1,0,0,0,282,284,1,0,0,0,283,281,1,0,0,0,284,
  	285,5,34,0,0,285,58,1,0,0,0,286,290,5,34,0,0,287,291,8,6,0,0,288,289,
  	5,92,0,0,289,291,9,0,0,0,290,287,1,0,0,0,290,288,1,0,0,0,291,292,1,0,
  	0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,305,1,0,0,0,294,300,3,49,24,0,
  	295,299,8,6,0,0,296,297,5,92,0,0,297,299,9,0,0,0,298,295,1,0,0,0,298,
  	296,1,0,0,0,299,302,1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,304,1,
  	0,0,0,302,300,1,0,0,0,303,294,1,0,0,0,304,307,1,0,0,0,305,303,1,0,0,0,
  	305,306,1,0,0,0,306,308,1,0,0,0,307,305,1,0,0,0,308,309,5,34,0,0,309,
  	60,1,0,0,0,310,312,7,2,0,0,311,310,1,0,0,0,311,312,1,0,0,0,312,331,1,
  	0,0,0,313,315,3,63,31,0,314,313,1,0,0,0,315,316,1,0,0,0,316,314,1,0,0,
  	0,316,317,1,0,0,0,317,318,1,0,0,0,318,322,5,46,0,0,319,321,3,63,31,0,
  	320,319,1,0,0,0,321,324,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,332,
  	1,0,0,0,324,322,1,0,0,0,325,327,5,46,0,0,326,328,3,63,31,0,327,326,1,
  	0,0,0,328,329,1,0,0,0,329,327,1,0,0,0,329,330,1,0,0,0,330,332,1,0,0,0,
  	331,314,1,0,0,0,331,325,1,0,0,0,332,342,1,0,0,0,333,335,7,7,0,0,334,336,
  	7,2,0,0,335,334,1,0,0,0,335,336,1,0,0,0,336,338,1,0,0,0,337,339,3,63,
  	31,0,338,337,1,0,0,0,339,340,1,0,0,0,340,338,1,0,0,0,340,341,1,0,0,0,
  	341,343,1,0,0,0,342,333,1,0,0,0,342,343,1,0,0,0,343,62,1,0,0,0,344,345,
  	7,4,0,0,345,64,1,0,0,0,346,348,7,8,0,0,347,346,1,0,0,0,348,349,1,0,0,
  	0,349,347,1,0,0,0,349,350,1,0,0,0,350,351,1,0,0,0,351,352,6,32,0,0,352,
  	66,1,0,0,0,353,357,5,35,0,0,354,356,8,9,0,0,355,354,1,0,0,0,356,359,1,
  	0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,360,1,0,0,0,359,357,1,0,0,0,
  	360,361,6,33,0,0,361,68,1,0,0,0,29,0,95,119,127,151,197,226,234,239,243,
  	249,253,269,281,290,292,298,300,305,311,316,322,329,331,335,340,342,349,
  	357,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  fclexerLexerStaticData = std::move(staticData);
}

}

FCLexer::FCLexer(CharStream *input) : Lexer(input) {
  FCLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *fclexerLexerStaticData->atn, fclexerLexerStaticData->decisionToDFA, fclexerLexerStaticData->sharedContextCache);
}

FCLexer::~FCLexer() {
  delete _interpreter;
}

std::string FCLexer::getGrammarFileName() const {
  return "FC.g4";
}

const std::vector<std::string>& FCLexer::getRuleNames() const {
  return fclexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& FCLexer::getChannelNames() const {
  return fclexerLexerStaticData->channelNames;
}

const std::vector<std::string>& FCLexer::getModeNames() const {
  return fclexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& FCLexer::getVocabulary() const {
  return fclexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView FCLexer::getSerializedATN() const {
  return fclexerLexerStaticData->serializedATN;
}

const atn::ATN& FCLexer::getATN() const {
  return *fclexerLexerStaticData->atn;
}




void FCLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  fclexerLexerInitialize();
#else
  ::antlr4::internal::call_once(fclexerLexerOnceFlag, fclexerLexerInitialize);
#endif
}
