21
{"md5":"ignore_header_sys","language":1,"no_linkage":true,"lid2path":[],"import_file":"[GIT_TOP_DIR]/src/impl/FhtKacRotator.cpp","args":["clang","[GIT_TOP_DIR]/src/impl/FhtKacRotator.cpp","-working-directory=[GIT_TOP_DIR]/"],"dependencies":{"/usr/include/c++/10/bits/stl_numeric.h":"ignore_header_sys","/usr/include/ctype.h":"ignore_header_sys","/usr/include/bits/types/__mbstate_t.h":"ignore_header_sys","/usr/include/features.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/immintrin.h":"774d8f5fec0961c7f69eaa3c69870fd7","/usr/include/math.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_algobase.h":"ignore_header_sys","/usr/include/bits/byteswap.h":"ignore_header_sys","/usr/include/c++/10/vector":"ignore_header_sys","/usr/include/c++/10/bits/iterator_concepts.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avxintrin.h":"772d5fd2b95bf581b4338458db989424","/usr/include/string.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlintrin.h":"cd26383f2f06392556848bfb374034c1","/usr/local/ob-clang11/lib/clang/11.1.0/include/vaesintrin.h":"230da0a10bfb803dd07d1d4859b589b9","/usr/include/bits/types/struct_FILE.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vbmivlintrin.h":"7a23233bba4c34e5185e02ea4208670c","/usr/include/bits/types/cookie_io_functions_t.h":"ignore_header_sys","/usr/include/bits/fp-logb.h":"ignore_header_sys","/usr/include/sys/cdefs.h":"ignore_header_sys","/usr/include/bits/types/__fpos_t.h":"ignore_header_sys","/usr/include/bits/types/timer_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512bf16intrin.h":"4f5ef6213a91abea3f5d53232215497c","/usr/include/c++/10/bits/locale_classes.h":"ignore_header_sys","/usr/include/c++/10/bits/streambuf.tcc":"ignore_header_sys","/usr/include/c++/10/bits/basic_ios.tcc":"ignore_header_sys","/usr/include/bits/types/mbstate_t.h":"ignore_header_sys","/usr/include/c++/10/bits/locale_facets.h":"ignore_header_sys","/usr/include/bits/sched.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/xmmintrin.h":"04b4174745d9f46d48080aefb7d04c2c","/usr/include/bits/types/wint_t.h":"ignore_header_sys","/usr/include/c++/10/bits/charconv.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_pair.h":"ignore_header_sys","/usr/include/c++/10/bits/char_traits.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/vpclmulqdqintrin.h":"a0ef53b1374f1ff070c815a7572221fa","/usr/include/time.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/wmmintrin.h":"420e06fc7b100109fe408d8cf15dfbbc","/usr/include/c++/10/bits/stl_bvector.h":"ignore_header_sys","/usr/include/c++/10/istream":"ignore_header_sys","/usr/include/bits/types/__sigset_t.h":"ignore_header_sys","/usr/include/c++/10/bits/allocator.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/emmintrin.h":"15ee96a71ec1a4288c0b5ffdad114450","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsavesintrin.h":"dfeb07884315d36739e4aa9dfd1d72ed","/usr/local/ob-clang11/lib/clang/11.1.0/include/smmintrin.h":"dde1073b90fcdddf514ff14bf7b0a39b","/usr/include/sys/types.h":"ignore_header_sys","/usr/include/c++/10/ios":"ignore_header_sys","/usr/include/c++/10/bits/uniform_int_dist.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/lzcntintrin.h":"070db0e5ecc75a113daa65f1a9a569a5","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vpopcntdqintrin.h":"748799b7fb86515d202460f78d94a3c3","/usr/include/bits/time64.h":"ignore_header_sys","/usr/include/bits/uintn-identity.h":"ignore_header_sys","/usr/include/c++/10/bits/cpp_type_traits.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vbmi2intrin.h":"d2eaacea81a5a13e0f771f69d62529ec","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512erintrin.h":"d8a0db1358f0c4f5db208e20fece727d","/usr/include/c++/10/bits/move.h":"ignore_header_sys","/usr/include/c++/10/cstdint":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/c++config.h":"ignore_header_sys","/usr/include/bits/endian.h":"ignore_header_sys","/usr/include/bits/types/__locale_t.h":"ignore_header_sys","/usr/include/bits/fp-fast.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512bitalgintrin.h":"065b5f6c02ddf57ee43a304b33d301c4","/usr/include/bits/wordsize.h":"ignore_header_sys","/usr/include/stdio.h":"ignore_header_sys","/usr/include/c++/10/bits/istream.tcc":"ignore_header_sys","/usr/include/bits/setjmp.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512fintrin.h":"4ce3a9eff70ef9558590a27aa986fc0e","/usr/include/gnu/stubs-64.h":"ignore_header_sys","/usr/include/asm/errno.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/enqcmdintrin.h":"6d8136c8969e9c723c195c33da2bb768","/usr/include/c++/10/ext/type_traits.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512bwintrin.h":"64c1b4a5d84a0126158179cc8904e8bd","/usr/include/bits/types.h":"ignore_header_sys","/usr/include/c++/10/string":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vnniintrin.h":"7cd1a414c4acf95129406d966bc736b5","/usr/include/c++/10/x86_64-redhat-linux/bits/os_defines.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/__wmmintrin_aes.h":"b7829f7e5a4221574897b8e365715ced","/usr/include/c++/10/numeric":"ignore_header_sys","/usr/include/c++/10/type_traits":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/stdint.h":"d6abd57f44fe5f48dbfb05fd9adc130a","/usr/include/c++/10/x86_64-redhat-linux/bits/ctype_inline.h":"ignore_header_sys","/usr/include/c++/10/new":"ignore_header_sys","/usr/include/bits/iscanonical.h":"ignore_header_sys","/usr/include/c++/10/bits/memoryfwd.h":"ignore_header_sys","/usr/include/asm-generic/errno-base.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/__stddef_max_align_t.h":"48e8e2456f77e6cda35d245130fa7259","/usr/local/ob-clang11/lib/clang/11.1.0/include/gfniintrin.h":"e0e20e8bab44c33118878b2889b2f2c8","/usr/include/c++/10/ext/new_allocator.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512ifmaintrin.h":"f52649bdc1dc467b7eadc3e1a810a0e2","/usr/include/c++/10/bits/functexcept.h":"ignore_header_sys","/usr/include/c++/10/bits/functional_hash.h":"ignore_header_sys","/usr/include/bits/endianness.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/popcntintrin.h":"7c3573a43b1c0704aac4cb098811cbb1","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512cdintrin.h":"650ead4d3b72acc353b9327d5ae2a07e","/usr/include/c++/10/bits/random.tcc":"ignore_header_sys","/usr/include/c++/10/debug/assertions.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_iterator_base_funcs.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsavecintrin.h":"8d492bf7b081416e797300c239dba796","/usr/include/c++/10/bits/stl_vector.h":"ignore_header_sys","/usr/include/c++/10/bits/basic_string.tcc":"ignore_header_sys","/usr/include/stdint.h":"ignore_header_sys","/usr/include/bits/types/__fpos64_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/rtmintrin.h":"591e544f8d70825a4bbf807dd287584a","/usr/include/c++/10/iosfwd":"ignore_header_sys","/usr/include/c++/10/cstdlib":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vpopcntdqvlintrin.h":"6af0e4f4c55f44ba40bac27558c51b3c","/usr/include/c++/10/cstring":"ignore_header_sys","/usr/include/bits/struct_rwlock.h":"ignore_header_sys","/usr/include/c++/10/bits/range_access.h":"ignore_header_sys","/usr/include/bits/libc-header-start.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/c++locale.h":"ignore_header_sys","/usr/include/c++/10/bits/vector.tcc":"ignore_header_sys","/usr/include/bits/cpu-set.h":"ignore_header_sys","/usr/include/bits/pthreadtypes-arch.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/ctype_base.h":"ignore_header_sys","/usr/include/c++/10/bits/cxxabi_init_exception.h":"ignore_header_sys","/usr/include/c++/10/bits/concept_check.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/gthr.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_iterator.h":"ignore_header_sys","/usr/include/bits/timex.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/waitpkgintrin.h":"2d1c4c5484fb9ec3a2f974b84ccead3c","/usr/include/bits/errno.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/shaintrin.h":"dd1634de945b1ffc8c6b7f39fa8a60c8","/usr/include/bits/select.h":"ignore_header_sys","/usr/include/wctype.h":"ignore_header_sys","/usr/include/bits/mathcalls.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vbmiintrin.h":"54a67d8ab20b9961e36a3fe16b875d4b","[GIT_TOP_DIR]/src/impl/FhtKacRotator.h":"f2f44cb0ba5dc218fc37736f2bab2192","/usr/local/ob-clang11/lib/clang/11.1.0/include/cetintrin.h":"30568779db4d995828cfd0dc8ab749f3","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx2intrin.h":"b787b869cf3250697b509a53b8f84261","/usr/local/ob-clang11/lib/clang/11.1.0/include/rdseedintrin.h":"d5c4d6f9ca83aa6d76891aa467a9c442","/usr/include/bits/waitflags.h":"ignore_header_sys","/usr/include/stdc-predef.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_construct.h":"ignore_header_sys","/usr/include/bits/waitstatus.h":"ignore_header_sys","/usr/include/c++/10/bits/ostream_insert.h":"ignore_header_sys","/usr/include/c++/10/bits/exception.h":"ignore_header_sys","/usr/include/linux/errno.h":"ignore_header_sys","/usr/include/bits/flt-eval-method.h":"ignore_header_sys","/usr/include/c++/10/bits/basic_string.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/amxintrin.h":"df04c665cb8533b77392c57a15d0c13e","/usr/local/ob-clang11/lib/clang/11.1.0/include/stddef.h":"2499dd2361b915724b073282bea3a7bc","/usr/local/ob-clang11/lib/clang/11.1.0/include/xtestintrin.h":"ddbb320bafef81c16f4db301b5d692b4","/usr/include/c++/10/ext/alloc_traits.h":"ignore_header_sys","/usr/include/sched.h":"ignore_header_sys","/usr/include/bits/pthreadtypes.h":"ignore_header_sys","/usr/include/c++/10/bits/random.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512pfintrin.h":"4f558d52a120f2dbc17724370f698f70","/usr/local/ob-clang11/lib/clang/11.1.0/include/sgxintrin.h":"1d380dfee68686a7fa21e5c5888eaf05","/usr/local/ob-clang11/lib/clang/11.1.0/include/fxsrintrin.h":"2288062b986bd0a526c32df2bd2e2c7b","/usr/local/ob-clang11/lib/clang/11.1.0/include/mm_malloc.h":"ed68cf68a5b4db09df709fc93a5e9b12","/usr/local/ob-clang11/lib/clang/11.1.0/include/fmaintrin.h":"e5555b944d57763068cff3823905dcda","/usr/include/bits/mathcalls-narrow.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/bmiintrin.h":"30db6d08581335daa785b893e982ec21","/usr/include/bits/floatn-common.h":"ignore_header_sys","/usr/include/asm-generic/errno.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/gthr-default.h":"ignore_header_sys","/usr/include/c++/10/concepts":"ignore_header_sys","/usr/include/bits/wctype-wchar.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512dqintrin.h":"0a5f59d3a1b4c24596a35fc4d831362d","/usr/include/bits/timesize.h":"ignore_header_sys","/usr/include/bits/types/clock_t.h":"ignore_header_sys","/usr/include/bits/types/locale_t.h":"ignore_header_sys","/usr/include/strings.h":"ignore_header_sys","/usr/include/bits/types/__FILE.h":"ignore_header_sys","/usr/include/c++/10/bits/int_limits.h":"ignore_header_sys","/usr/include/bits/types/struct_itimerspec.h":"ignore_header_sys","/usr/include/c++/10/backward/binders.h":"ignore_header_sys","/usr/include/c++/10/typeinfo":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/c++allocator.h":"ignore_header_sys","/usr/include/c++/10/bits/predefined_ops.h":"ignore_header_sys","/usr/include/bits/time.h":"ignore_header_sys","/usr/include/bits/types/error_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/ptwriteintrin.h":"d07b5c84c015bb93867eab402d31ebca","/usr/include/c++/10/bits/stringfwd.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/cpu_defines.h":"ignore_header_sys","/usr/include/c++/10/bits/alloc_traits.h":"ignore_header_sys","/usr/include/c++/10/ext/string_conversions.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/serializeintrin.h":"9c34b27612aea430b36983691b4efe29","[GIT_TOP_DIR]/src/logger.h":"bc3e03e770b051e6cadc16e5f96c170f","/usr/include/c++/10/bits/ostream.tcc":"ignore_header_sys","/usr/include/c++/10/limits":"ignore_header_sys","/usr/include/c++/10/bits/cxxabi_forced.h":"ignore_header_sys","/usr/include/c++/10/ext/atomicity.h":"ignore_header_sys","/usr/include/wchar.h":"ignore_header_sys","/usr/include/c++/10/ext/numeric_traits.h":"ignore_header_sys","/usr/include/c++/10/ostream":"ignore_header_sys","/usr/include/endian.h":"ignore_header_sys","/usr/include/bits/types/sigset_t.h":"ignore_header_sys","/usr/include/c++/10/clocale":"ignore_header_sys","/usr/include/c++/10/bits/nested_exception.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsaveoptintrin.h":"30a5b7413ecc5157d3c788a4fc5f30f7","/usr/local/ob-clang11/lib/clang/11.1.0/include/invpcidintrin.h":"ff85318ef7dbac300480b3249673816b","/usr/include/c++/10/cwchar":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/atomic_word.h":"ignore_header_sys","/usr/include/pthread.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/stdarg.h":"4de3cbd931b589d291e5c39387aecf82","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsaveintrin.h":"bf0d37fbd9112292164e41d157229261","/usr/local/ob-clang11/lib/clang/11.1.0/include/f16cintrin.h":"e1d777f3170634f5a307f86472b0fb57","/usr/include/c++/10/cwctype":"ignore_header_sys","/usr/include/bits/types/clockid_t.h":"ignore_header_sys","/usr/include/c++/10/bits/basic_ios.h":"ignore_header_sys","/usr/include/c++/10/bits/locale_classes.tcc":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/tmmintrin.h":"d905b09b29cb36b015d25405cfbf8e5a","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlvnniintrin.h":"64180305ff9c6bfad63ee41cbd66093d","/usr/local/ob-clang11/lib/clang/11.1.0/include/pmmintrin.h":"3157414820008b3ad90647450dcf904b","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlcdintrin.h":"6f8f18f6874f9c1a5f19b1c55e3c0cb5","/usr/include/c++/10/stdexcept":"ignore_header_sys","/usr/include/c++/10/bits/exception_ptr.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/__wmmintrin_pclmul.h":"7cbd2793e783b90f193cebfa3675e55a","/usr/include/c++/10/random":"ignore_header_sys","/usr/include/c++/10/stdlib.h":"ignore_header_sys","/usr/include/bits/stdint-uintn.h":"ignore_header_sys","/usr/include/bits/types/struct_sched_param.h":"ignore_header_sys","/usr/include/c++/10/bits/range_cmp.h":"ignore_header_sys","/usr/include/gnu/stubs.h":"ignore_header_sys","/usr/include/c++/10/cerrno":"ignore_header_sys","/usr/include/bits/mathcalls-helper-functions.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/clflushoptintrin.h":"2a269418efbdd932851586bbfa8726a3","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlbwintrin.h":"449273cd1de2c72197e012c804a8c056","/usr/local/ob-clang11/lib/clang/11.1.0/include/tsxldtrkintrin.h":"317e5aa78e58a9618f04d7532a36a253","/usr/include/c++/10/exception":"ignore_header_sys","/usr/include/c++/10/bits/stl_function.h":"ignore_header_sys","/usr/include/bits/locale.h":"ignore_header_sys","/usr/include/c++/10/initializer_list":"ignore_header_sys","/usr/include/bits/wchar.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/error_constants.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vp2intersectintrin.h":"7f431ec4ddce958af8a75cc7a71b3a57","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlbitalgintrin.h":"50b7714a556eb5e52999b7dd18de7d4e","/usr/include/c++/10/cctype":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlbf16intrin.h":"da6bea340165f020a9142ab63fc1aecf","/usr/include/c++/10/bits/std_abs.h":"ignore_header_sys","/usr/include/bits/math-vector.h":"ignore_header_sys","/usr/include/bits/stdint-intn.h":"ignore_header_sys","/usr/include/bits/libm-simd-decl-stubs.h":"ignore_header_sys","/usr/include/c++/10/cmath":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlvbmi2intrin.h":"d09f75ea16d8f1302331016743dca38c","/usr/include/bits/types/struct_tm.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_uninitialized.h":"ignore_header_sys","/usr/include/c++/10/debug/debug.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/opt_random.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/cldemoteintrin.h":"6c282c2bb0cc618292bd47b69fc27641","/usr/include/c++/10/bits/exception_defines.h":"ignore_header_sys","/usr/include/bits/types/struct_timespec.h":"ignore_header_sys","/usr/include/bits/thread-shared-types.h":"ignore_header_sys","/usr/include/c++/10/bits/locale_facets.tcc":"ignore_header_sys","/usr/include/locale.h":"ignore_header_sys","/usr/include/bits/types/struct_timeval.h":"ignore_header_sys","/usr/include/c++/10/system_error":"ignore_header_sys","/usr/include/bits/typesizes.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/adxintrin.h":"6828d907a1be13a942ad62e7b4db6870","/usr/include/c++/10/bits/streambuf_iterator.h":"ignore_header_sys","/usr/include/bits/long-double.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512ifmavlintrin.h":"c3576813a57918c2734a8acf08e69b33","/usr/include/c++/10/bits/ios_base.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/bmi2intrin.h":"5421c86f7749d5b931a602c4c605aa59","/usr/include/c++/10/iostream":"ignore_header_sys","/usr/include/c++/10/bits/stl_iterator_base_types.h":"ignore_header_sys","/usr/include/c++/10/bits/hash_bytes.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlvp2intersectintrin.h":"e127597621c37f450875cdc70e9df509","/usr/include/bits/types/time_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/clwbintrin.h":"bc581022bcc5037ab8b06c9c95e15663","/usr/local/ob-clang11/lib/clang/11.1.0/include/mmintrin.h":"1de54663046d007c7b16e4f603262ad8","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vldqintrin.h":"8229c4851f85c40c1f62097dc173e420","/usr/local/ob-clang11/lib/clang/11.1.0/include/pkuintrin.h":"750db2cf252eb52d8e60ad6fffb80c8a","/usr/include/bits/stdio_lim.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/wbnoinvdintrin.h":"8d0e049f9ce4bbcc291c21fe7bc7a508","/usr/include/c++/10/bits/ptr_traits.h":"ignore_header_sys","/usr/include/sys/select.h":"ignore_header_sys","/usr/include/bits/floatn.h":"ignore_header_sys","/usr/include/c++/10/cstdio":"ignore_header_sys","/usr/include/alloca.h":"ignore_header_sys","/usr/include/bits/struct_mutex.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/movdirintrin.h":"4566737781d765bba033913dedfcaa83","/usr/include/c++/10/bits/localefwd.h":"ignore_header_sys","/usr/include/errno.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/pconfigintrin.h":"9da09fbffb9a78b478ac0ce6d43271d7","/usr/include/c++/10/bits/postypes.h":"ignore_header_sys","[GIT_TOP_DIR]/src/impl/matrix_rotator.h":"201b9e418b243731f34df19414d16ccb","/usr/include/stdlib.h":"ignore_header_sys","/usr/include/bits/types/FILE.h":"ignore_header_sys","/usr/include/bits/stdlib-float.h":"ignore_header_sys"},"includes":[{"line":37,"resolved_path":"/usr/include/c++/10/x86_64-redhat-linux/bits/c++config.h"},{"line":38,"resolved_path":"/usr/include/c++/10/iosfwd"},{"line":39,"resolved_path":"/usr/include/c++/10/bits/localefwd.h"},{"line":40,"resolved_path":"/usr/include/c++/10/bits/ios_base.h"},{"line":41,"resolved_path":"/usr/include/c++/10/bits/cpp_type_traits.h"},{"line":42,"resolved_path":"/usr/include/c++/10/ext/type_traits.h"},{"line":859,"resolved_path":"/usr/include/c++/10/bits/streambuf.tcc"}],"skipped_ranges":["807:1-809:6"],"usr2func":[{"usr":168625121511998982,"detailed_name":"basic_istream<_CharT2, _Traits2> &std::operator>>(basic_istream<_CharT2, _Traits2> &, basic_string<_CharT2, _Traits2, _Alloc> &)","qual_name_offset":34,"short_name_offset":39,"short_name_size":10,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":["175:9-175:17|174:9-176:47|1025|-1"],"derived":[],"uses":[]},{"usr":335868181075529052,"detailed_name":"std::basic_streambuf::pos_type std::basic_streambuf::pubseekoff(std::basic_streambuf::off_type __off, ios_base::seekdir __way, ios_base::openmode __mode)","qual_name_offset":31,"short_name_offset":53,"short_name_size":10,"spell":"258:7-258:17|257:7-260:54|1026|-1","hover":"","comments":" @brief  Alters the stream position.\n @param  __off  Offset.\n @param  __way  Value for ios_base::seekdir.\n @param  __mode Value for ios_base::openmode.\n\n Calls virtual seekoff function.","bases":[],"vars":[6911238007803675370,10326856898438103601,12374894931418988224],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":448570959682634389,"detailed_name":"virtual std::basic_streambuf::int_type std::basic_streambuf::overflow(std::basic_streambuf::int_type __c)","qual_name_offset":39,"short_name_offset":61,"short_name_size":8,"spell":"775:7-775:15|774:7-776:37|1090|-1","hover":"","comments":" @brief  Consumes data from the buffer; writes to the\n         controlled sequence.\n @param  __c  An additional character to consume.\n @return  eof() to indicate failure, something else (usually\n          @a __c, or not_eof())\n\n Informally, this function is called when the output buffer\n is full (or does not exist, as buffering need not actually\n be done).  If a buffer exists, it is @a consumed, with\n <em>some effect</em> on the controlled sequence.\n (Typically, the buffer is written out to the sequence\n verbatim.)  In either case, the character @a c is also\n written out, if @a __c is not @c eof().\n\n For a formal definition of this function, see a good text\n such as Langer & Kreft, or [27.5.2.4.5]/3-7.\n\n A functioning output streambuf can be created by overriding only\n this function (no buffer area will be used).\n\n @note  Base class version does nothing, returns eof().","bases":[],"vars":[3159472508037105645],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":473277476172340729,"detailed_name":"std::basic_streambuf::basic_streambuf<_CharT, _Traits>()","qual_name_offset":0,"short_name_offset":22,"short_name_size":32,"spell":"470:7-470:22|470:7-474:10|1026|-1","hover":"","comments":" @brief  Base constructor.\n\n Only called from derived constructors, and sets up all the\n buffer data to zero, including the pointers described in the\n basic_streambuf class description.  Note that, as a result,\n - the class starts with no read nor write positions available,\n - this is not an error","bases":[],"vars":[],"callees":["473:7-473:20|13161152319150781491|3|16676","473:21-473:27|16402713238272194112|3|16676"],"kind":9,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":478635221454272189,"detailed_name":"const std::locale &std::locale::operator=(const std::locale &__other) throw()","qual_name_offset":19,"short_name_offset":32,"short_name_size":9,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":[],"derived":[],"uses":["220:16-220:17|16420|-1"]},{"usr":1648155060180971145,"detailed_name":"virtual std::basic_streambuf::pos_type std::basic_streambuf::seekpos(std::basic_streambuf::pos_type, ios_base::openmode)","qual_name_offset":39,"short_name_offset":61,"short_name_size":7,"spell":"621:7-621:14|620:7-623:41|1090|-1","hover":"","comments":" @brief  Alters the stream positions.\n\n Each derived class provides its own appropriate behavior.\n @note  Base class version does nothing, returns a @c pos_type\n        that represents an invalid stream position.","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2137056949194569916,"detailed_name":"virtual std::basic_streambuf::pos_type std::basic_streambuf::seekoff(std::basic_streambuf::off_type, ios_base::seekdir, ios_base::openmode)","qual_name_offset":39,"short_name_offset":61,"short_name_size":7,"spell":"609:7-609:14|608:7-611:41|1090|-1","hover":"","comments":" @brief  Alters the stream positions.\n\n Each derived class provides its own appropriate behavior.\n @note  Base class version does nothing, returns a @c pos_type\n        that represents an invalid stream position.","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2391546545825660351,"detailed_name":"virtual std::streamsize std::basic_streambuf::xsputn(const std::basic_streambuf::char_type *__s, std::streamsize __n)","qual_name_offset":24,"short_name_offset":46,"short_name_size":6,"hover":"","comments":"Put area:\n\n@brief  Multiple character insertion.\n@param  __s  A buffer area.\n@param  __n  Maximum number of characters to write.\n@return  The number of characters written.\n\nWrites @a __s[0] through @a __s[__n-1] to the output sequence, as if\nby @c sputc().  Stops when either @a n characters have been\ncopied, or when @c sputc() would return @c traits::eof().\n\nIt is expected that derived classes provide a more efficient\nimplementation by overriding this definition.","bases":[],"vars":[3619641324654738124,14369477041811378406],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["749:7-749:13|748:7-749:51|1089|-1"],"derived":[],"uses":[]},{"usr":3189368072825569589,"detailed_name":"typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, void>::__type std::advance(int &, _Distance)","qual_name_offset":75,"short_name_offset":80,"short_name_size":7,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":["167:9-167:16|165:9-167:58|1025|-1"],"derived":[],"uses":[]},{"usr":3406045606520904446,"detailed_name":"std::streamsize std::__copy_streambufs_eof(basic_streambuf<_CharT, _Traits> *, basic_streambuf<_CharT, _Traits> *, bool &)","qual_name_offset":16,"short_name_offset":21,"short_name_size":21,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":["53:5-53:26|52:5-54:47|1025|-1"],"derived":[],"uses":[]},{"usr":3844965568091239492,"detailed_name":"virtual std::basic_streambuf::int_type std::basic_streambuf::pbackfail(std::basic_streambuf::int_type __c)","qual_name_offset":39,"short_name_offset":61,"short_name_size":9,"spell":"731:7-731:16|730:7-732:37|1090|-1","hover":"","comments":"[27.5.2.4.4] putback\n\n@brief  Tries to back up the input sequence.\n@param  __c  The character to be inserted back into the sequence.\n@return  eof() on failure, <em>some other value</em> on success\n@post  The constraints of @c gptr(), @c eback(), and @c pptr()\n       are the same as for @c underflow().\n\n@note  Base class version does nothing, returns eof().","bases":[],"vars":[15475560364200833478],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4384925542073084493,"detailed_name":"virtual basic_streambuf<std::basic_streambuf::char_type, _Traits> *std::basic_streambuf::setbuf(std::basic_streambuf::char_type *, std::streamsize)","qual_name_offset":67,"short_name_offset":89,"short_name_size":6,"spell":"598:7-598:13|597:7-599:23|1090|-1","hover":"","comments":"[27.5.2.4.2] buffer management and positioning\n\n@brief  Manipulates the buffer.\n\nEach derived class provides its own appropriate behavior.  See\nthe next-to-last paragraph of\nhttps://gcc.gnu.org/onlinedocs/libstdc++/manual/streambufs.html#io.streambuf.buffering\nfor more on this function.\n\n@note  Base class version does nothing, returns @c this.","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4546431254220506973,"detailed_name":"std::streamsize std::basic_streambuf::sputn(const std::basic_streambuf::char_type *__s, std::streamsize __n)","qual_name_offset":16,"short_name_offset":38,"short_name_size":5,"spell":"457:7-457:12|456:7-458:41|1026|-1","hover":"","comments":" @brief  Entry point for all single-character output functions.\n @param  __s  A buffer read area.\n @param  __n  A count.\n\n One of two public output functions.\n\n\n Returns xsputn(__s,__n).  The effect is to write @a __s[0] through\n @a __s[__n-1] to the output sequence, if possible.","bases":[],"vars":[3902583454325033268,2345506617254135059],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5237466546530810611,"detailed_name":"std::basic_streambuf::char_type *std::basic_streambuf::pbase() const","qual_name_offset":33,"short_name_offset":55,"short_name_size":5,"spell":"536:7-536:12|535:7-536:43|1026|-1","hover":"","comments":"[27.5.2.3.2] put area access\n@{\n\n@brief  Access to the put area.\n\nThese functions are only available to other protected functions,\nincluding derived classes.\n\n- pbase() returns the beginning pointer for the output sequence\n- pptr() returns the next pointer for the output sequence\n- epptr() returns the end pointer for the output sequence","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5776048126456438257,"detailed_name":"template <> std::streamsize std::__copy_streambufs_eof(int *__sbin, int *__sbout, bool &__ineof)","qual_name_offset":28,"short_name_offset":33,"short_name_size":21,"hover":"","comments":"Explicit specialization declarations, defined in src/streambuf.cc.","bases":[],"vars":[4422123979352466856,6386267296276861002,7887055016174361847,6833315007988397088,15660098870589938559,16022166532902296818],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":["846:5-846:26|844:3-847:52|1025|-1","851:5-851:26|849:3-852:55|1025|-1"],"derived":[],"uses":[]},{"usr":5889978017934802399,"detailed_name":"void std::basic_streambuf::gbump(int __n)","qual_name_offset":5,"short_name_offset":27,"short_name_size":5,"spell":"505:7-505:12|504:7-505:43|1026|-1","hover":"","comments":" @brief  Moving the read position.\n @param  __n  The delta by which to move.\n\n This just advances the read position without returning any data.","bases":[],"vars":[7220443846698413725],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5980397658402567697,"detailed_name":"inline constexpr std::_Ios_Openmode std::operator|(std::_Ios_Openmode __a, std::_Ios_Openmode __b)","qual_name_offset":36,"short_name_offset":41,"short_name_size":9,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":[],"derived":[],"uses":["259:45-259:46|36|-1","271:45-271:46|36|-1","610:53-610:54|36|-1","622:53-622:54|36|-1"]},{"usr":6120835236468537179,"detailed_name":"std::basic_streambuf::int_type std::basic_streambuf::sputbackc(std::basic_streambuf::char_type __c)","qual_name_offset":31,"short_name_offset":53,"short_name_size":9,"spell":"379:7-379:16|378:7-392:8|1026|-1","hover":"","comments":"[27.5.2.2.4] putback\n\n@brief  Pushing characters back into the input stream.\n@param  __c  The character to push back.\n@return  The previous character, if possible.\n\nSimilar to sungetc(), but @a __c is pushed onto the stream\ninstead of <em>the previous character.</em> If successful,\nthe next character fetched from the input stream will be @a\n__c.","bases":[],"vars":[4717241134912759197,4789797942834123876,1210286362051069772],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6433335738173300234,"detailed_name":"virtual int std::basic_streambuf::sync()","qual_name_offset":12,"short_name_offset":34,"short_name_size":4,"spell":"634:7-634:11|633:7-634:27|1090|-1","hover":"","comments":" @brief  Synchronizes the buffer arrays with the controlled sequences.\n @return  -1 on failure.\n\n Each derived class provides its own appropriate behavior,\n including the definition of @a failure.\n @note  Base class version does nothing, returns zero.","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6878274253247704418,"detailed_name":"basic_streambuf<_CharT, _Traits> &std::basic_streambuf::operator=(const basic_streambuf<_CharT, _Traits> &)","qual_name_offset":34,"short_name_offset":56,"short_name_size":9,"spell":"840:5-840:14|837:3-840:38|1026|-1","hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":["815:7-815:15|814:7-815:40|1025|-1"],"derived":[],"uses":[]},{"usr":6903634917358489868,"detailed_name":"std::locale std::basic_streambuf::pubimbue(const std::locale &__loc)","qual_name_offset":12,"short_name_offset":34,"short_name_size":8,"spell":"216:7-216:15|215:7-222:8|1026|-1","hover":"","comments":"[27.5.2.2.1] locales\n\n@brief  Entry point for imbue().\n@param  __loc  The new locale.\n@return  The previous locale.\n\nCalls the derived imbue(__loc).","bases":[],"vars":[6846671382994983482,10529618038423454829],"callees":["220:16-220:17|478635221454272189|3|16420","221:9-221:14|13161152319150781491|3|16676"],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7406436537456532084,"detailed_name":"std::basic_streambuf::int_type std::basic_streambuf::sputc(std::basic_streambuf::char_type __c)","qual_name_offset":31,"short_name_offset":53,"short_name_size":5,"spell":"431:7-431:12|430:7-443:8|1026|-1","hover":"","comments":"[27.5.2.2.5] put area\n\n@brief  Entry point for all single-character output functions.\n@param  __c  A character to output.\n@return  @a __c, if possible.\n\nOne of two public output functions.\n\nIf a write position is available for the output sequence (i.e.,\nthe buffer is not full), stores @a __c in that position, increments\nthe position, and returns @c traits::to_int_type(__c).  If a write\nposition is not available, returns @c overflow(__c).","bases":[],"vars":[549743555067687506,4786451737430269031],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7410587720548158848,"detailed_name":"std::basic_streambuf::int_type std::basic_streambuf::sungetc()","qual_name_offset":31,"short_name_offset":53,"short_name_size":7,"spell":"404:7-404:14|403:7-415:8|1026|-1","hover":"","comments":" @brief  Moving backwards in the input stream.\n @return  The previous character, if possible.\n\n If a putback position is available, this function decrements\n the input pointer and returns that character.  Otherwise,\n calls and returns pbackfail().  The effect is to @a unget\n the last character @a gotten.","bases":[],"vars":[18056685846151970685],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7464769401585469514,"detailed_name":"std::basic_streambuf::pos_type std::basic_streambuf::pubseekpos(std::basic_streambuf::pos_type __sp, ios_base::openmode __mode)","qual_name_offset":31,"short_name_offset":53,"short_name_size":10,"spell":"270:7-270:17|269:7-272:46|1026|-1","hover":"","comments":" @brief  Alters the stream position.\n @param  __sp  Position\n @param  __mode Value for ios_base::openmode.\n\n Calls virtual seekpos function.","bases":[],"vars":[12515502178181312215,17960524007486810397],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7805890696810642844,"detailed_name":"int std::find(int, int, const _CharT2 &)","qual_name_offset":4,"short_name_offset":9,"short_name_size":4,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":["161:9-161:13|159:9-162:22|1025|-1"],"derived":[],"uses":[]},{"usr":8517446849902221050,"detailed_name":"basic_istream<_CharT2, _Traits2> &std::operator>>(basic_istream<_CharT2, _Traits2> &, _CharT2 *)","qual_name_offset":34,"short_name_offset":39,"short_name_size":10,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":["171:9-171:17|170:9-171:64|1025|-1"],"derived":[],"uses":[]},{"usr":9049114614230967811,"detailed_name":"virtual std::basic_streambuf::~basic_streambuf<_CharT, _Traits>()","qual_name_offset":8,"short_name_offset":30,"short_name_size":33,"spell":"204:7-204:23|203:7-205:10|1090|-1","hover":"","comments":"Destructor deallocates no buffer space.","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9339590352908932167,"detailed_name":"void std::basic_streambuf::setp(std::basic_streambuf::char_type *__pbeg, std::basic_streambuf::char_type *__pend)","qual_name_offset":5,"short_name_offset":27,"short_name_size":4,"spell":"562:7-562:11|561:7-566:8|1026|-1","hover":"","comments":" @brief  Setting the three write area pointers.\n @param  __pbeg  A pointer.\n @param  __pend  A pointer.\n @post  @a __pbeg == @c pbase(), @a __pbeg == @c pptr(), and\n        @a __pend == @c epptr()","bases":[],"vars":[975596008448453504,10444669977058339366],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9444615363375221010,"detailed_name":"void std::basic_streambuf::setg(std::basic_streambuf::char_type *__gbeg, std::basic_streambuf::char_type *__gnext, std::basic_streambuf::char_type *__gend)","qual_name_offset":5,"short_name_offset":27,"short_name_size":4,"spell":"516:7-516:11|515:7-521:8|1026|-1","hover":"","comments":" @brief  Setting the three read area pointers.\n @param  __gbeg  A pointer.\n @param  __gnext  A pointer.\n @param  __gend  A pointer.\n @post  @a __gbeg == @c eback(), @a __gnext == @c gptr(), and\n        @a __gend == @c egptr()","bases":[],"vars":[12428528710452330850,15818663845347011421,9049609164988225363],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10064867989613092529,"detailed_name":"void std::basic_streambuf::swap(basic_streambuf<_CharT, _Traits> &__sb)","qual_name_offset":5,"short_name_offset":27,"short_name_size":4,"spell":"819:7-819:11|818:7-828:8|1026|-1","hover":"","comments":"","bases":[],"vars":[2963433907399367284],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10810180419018474021,"detailed_name":"typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, _CharT2 *>::__type std::__copy_move_a2(int, int, _CharT2 *)","qual_name_offset":80,"short_name_offset":85,"short_name_size":14,"hover":"","comments":"","bases":[],"vars":[16515472405752075068],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":["155:9-155:23|153:9-156:49|1025|-1"],"derived":[],"uses":[]},{"usr":10953219185216373456,"detailed_name":"std::basic_streambuf::basic_streambuf<_CharT, _Traits>(const basic_streambuf<_CharT, _Traits> &)","qual_name_offset":0,"short_name_offset":22,"short_name_size":32,"spell":"835:5-835:20|833:3-835:44|1026|-1","hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":9,"parent_kind":5,"storage":0,"declarations":["812:7-812:22|812:7-812:46|1025|-1"],"derived":[],"uses":[]},{"usr":11135963675931890851,"detailed_name":"void std::basic_streambuf::__safe_pbump(std::streamsize __n)","qual_name_offset":5,"short_name_offset":27,"short_name_size":12,"spell":"805:7-805:19|804:7-805:58|1026|-1","hover":"","comments":"","bases":[],"vars":[12104926287892073604],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":11151278360719841590,"detailed_name":"int std::basic_streambuf::pubsync()","qual_name_offset":4,"short_name_offset":26,"short_name_size":7,"spell":"278:7-278:14|277:7-278:41|1026|-1","hover":"","comments":" @brief  Calls virtual sync function.","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12065123045650270665,"detailed_name":"std::locale std::basic_streambuf::getloc() const","qual_name_offset":12,"short_name_offset":34,"short_name_size":6,"spell":"233:7-233:13|232:7-234:32|1026|-1","hover":"","comments":" @brief  Locale access.\n @return  The current locale in effect.\n\n If pubimbue(loc) has been called, then the most recent @c loc\n is returned.  Otherwise the global locale in effect at the time\n of construction is returned.","bases":[],"vars":[],"callees":["234:16-234:29|13161152319150781491|3|16676"],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12314390531438157325,"detailed_name":"void std::basic_streambuf::pbump(int __n)","qual_name_offset":5,"short_name_offset":27,"short_name_size":5,"spell":"552:7-552:12|551:7-552:44|1026|-1","hover":"","comments":" @brief  Moving the write position.\n @param  __n  The delta by which to move.\n\n This just advances the write position without returning any data.","bases":[],"vars":[12178442852206373311],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12638659132166016072,"detailed_name":"std::streamsize std::__copy_streambufs_eof(basic_streambuf<_CharT, _Traits> *, basic_streambuf<_CharT, _Traits> *, bool &)","qual_name_offset":16,"short_name_offset":21,"short_name_size":21,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":["150:7-150:28|149:7-150:73|1025|-1"],"derived":[],"uses":[]},{"usr":12882807614278994896,"detailed_name":"virtual std::streamsize std::basic_streambuf::showmanyc()","qual_name_offset":24,"short_name_offset":46,"short_name_size":9,"spell":"656:7-656:16|655:7-656:32|1090|-1","hover":"","comments":"[27.5.2.4.3] get area\n\n@brief  Investigating the data available.\n@return  An estimate of the number of characters available in the\n         input sequence, or -1.\n\n<em>If it returns a positive value, then successive calls to\n@c underflow() will not return @c traits::eof() until at\nleast that number of characters have been supplied.  If @c\nshowmanyc() returns -1, then calls to @c underflow() or @c\nuflow() will fail.</em> [27.5.2.4.3]/1\n\n@note  Base class version does nothing, returns zero.\n@note  The standard adds that <em>the intention is not only that the\n       calls [to underflow or uflow] will not return @c eof() but\n       that they will return immediately.</em>\n@note  The standard adds that <em>the morphemes of @c showmanyc are\n       @b es-how-many-see, not @b show-manic.</em>","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13122791203895903284,"detailed_name":"void std::basic_streambuf::__safe_gbump(std::streamsize __n)","qual_name_offset":5,"short_name_offset":27,"short_name_size":12,"spell":"802:7-802:19|801:7-802:57|1026|-1","hover":"","comments":"Also used by specializations for char and wchar_t in src.","bases":[],"vars":[11571600346108610509],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13161152319150781491,"detailed_name":"std::locale::locale(const std::locale &__other) throw()","qual_name_offset":0,"short_name_offset":13,"short_name_size":6,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":9,"parent_kind":0,"storage":0,"declarations":[],"derived":[],"uses":["221:9-221:14|16676|-1","234:16-234:29|16676|-1","473:7-473:20|16676|-1"]},{"usr":13435641196524181953,"detailed_name":"std::basic_streambuf::char_type *std::basic_streambuf::pptr() const","qual_name_offset":33,"short_name_offset":55,"short_name_size":4,"spell":"539:7-539:11|538:7-539:42|1026|-1","hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13622725330160962027,"detailed_name":"basic_istream<_CharT2, _Traits2> &std::getline(basic_istream<_CharT2, _Traits2> &, basic_string<_CharT2, _Traits2, _Alloc> &, _CharT2)","qual_name_offset":34,"short_name_offset":39,"short_name_size":7,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":["180:9-180:16|179:9-181:53|1025|-1"],"derived":[],"uses":[]},{"usr":13955518022063552335,"detailed_name":"virtual std::basic_streambuf::int_type std::basic_streambuf::uflow()","qual_name_offset":39,"short_name_offset":61,"short_name_size":5,"spell":"707:7-707:12|706:7-718:8|1090|-1","hover":"","comments":" @brief  Fetches more data from the controlled sequence.\n @return  The first character from the <em>pending sequence</em>.\n\n Informally, this function does the same thing as @c underflow(),\n and in fact is required to call that function.  It also returns\n the new character, like @c underflow() does.  However, this\n function also moves the read position forward by one.","bases":[],"vars":[1099672743878877508,8306625894802738495],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14292863881918470362,"detailed_name":"virtual std::basic_streambuf::int_type std::basic_streambuf::underflow()","qual_name_offset":39,"short_name_offset":61,"short_name_size":9,"spell":"694:7-694:16|693:7-695:37|1090|-1","hover":"","comments":" @brief  Fetches more data from the controlled sequence.\n @return  The first character from the <em>pending sequence</em>.\n\n Informally, this function is called when the input buffer is\n exhausted (or does not exist, as buffering need not actually be\n done).  If a buffer exists, it is @a refilled.  In either case, the\n next available character is returned, or @c traits::eof() to\n indicate a null pending sequence.\n\n For a formal definition of the pending sequence, see a good text\n such as Langer & Kreft, or [27.5.2.4.3]/7-14.\n\n A functioning input streambuf can be created by overriding only\n this function (no buffer area will be used).  For an example, see\n https://gcc.gnu.org/onlinedocs/libstdc++/manual/streambufs.html\n\n @note  Base class version does nothing, returns eof().","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14499592306887222123,"detailed_name":"virtual std::streamsize std::basic_streambuf::xsgetn(std::basic_streambuf::char_type *__s, std::streamsize __n)","qual_name_offset":24,"short_name_offset":46,"short_name_size":6,"hover":"","comments":" @brief  Multiple character extraction.\n @param  __s  A buffer area.\n @param  __n  Maximum number of characters to assign.\n @return  The number of characters assigned.\n\n Fills @a __s[0] through @a __s[__n-1] with characters from the input\n sequence, as if by @c sbumpc().  Stops when either @a __n characters\n have been copied, or when @c traits::eof() would be copied.\n\n It is expected that derived classes provide a more efficient\n implementation by overriding this definition.","bases":[],"vars":[2438844003466041444,15219805549750966638],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["672:7-672:13|671:7-672:45|1089|-1"],"derived":[],"uses":[]},{"usr":14599093997889022243,"detailed_name":"basic_streambuf<_CharT, _Traits> *std::basic_streambuf::pubsetbuf(std::basic_streambuf::char_type *__s, std::streamsize __n)","qual_name_offset":34,"short_name_offset":56,"short_name_size":9,"spell":"246:7-246:16|245:7-247:41|1026|-1","hover":"","comments":"[27.5.2.2.2] buffer management and positioning\n@{\n\n@brief  Entry points for derived buffer functions.\n\nThe public versions of @c pubfoo dispatch to the protected\nderived @c foo member functions, passing the arguments (if any)\nand returning the result unchanged.","bases":[],"vars":[7489774969130739227,10271075459470558894],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14730533127431293424,"detailed_name":"std::basic_streambuf::char_type *std::basic_streambuf::epptr() const","qual_name_offset":33,"short_name_offset":55,"short_name_size":5,"spell":"542:7-542:12|541:7-542:43|1026|-1","hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14961514279703006401,"detailed_name":"std::streamsize std::basic_streambuf::in_avail()","qual_name_offset":16,"short_name_offset":38,"short_name_size":8,"spell":"291:7-291:15|290:7-295:8|1026|-1","hover":"","comments":"[27.5.2.2.3] get area\n\n@brief  Looking ahead into the stream.\n@return  The number of characters available.\n\nIf a read position is available, returns the number of characters\navailable for reading before the buffer must be refilled.\nOtherwise returns the derived @c showmanyc().","bases":[],"vars":[3514772799352660135],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15380409498822389610,"detailed_name":"std::basic_streambuf::int_type std::basic_streambuf::sgetc()","qual_name_offset":31,"short_name_offset":53,"short_name_size":5,"spell":"345:7-345:12|344:7-353:8|1026|-1","hover":"","comments":" @brief  Getting the next character.\n @return  The next character, or eof.\n\n If the input read position is available, returns that character,\n otherwise calls and returns @c underflow().  Does not move the\n read position after fetching the character.","bases":[],"vars":[728496068081744663],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16235880801341028598,"detailed_name":"std::basic_streambuf::char_type *std::basic_streambuf::egptr() const","qual_name_offset":33,"short_name_offset":55,"short_name_size":5,"spell":"495:7-495:12|494:7-495:42|1026|-1","hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16402713238272194112,"detailed_name":"std::locale::locale() throw()","qual_name_offset":0,"short_name_offset":13,"short_name_size":6,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":9,"parent_kind":0,"storage":0,"declarations":[],"derived":[],"uses":["473:21-473:27|16676|-1"]},{"usr":16934076392978857756,"detailed_name":"virtual void std::basic_streambuf::imbue(const std::locale &__loc)","qual_name_offset":13,"short_name_offset":35,"short_name_size":5,"spell":"583:7-583:12|582:7-584:10|1090|-1","hover":"","comments":"[27.5.2.4] virtual functions\n[27.5.2.4.1] locales\n\n@brief  Changes translations.\n@param  __loc  A new locale.\n\nTranslations done during I/O which depend on the current\nlocale are changed by this call.  The standard adds,\n<em>Between invocations of this function a class derived\nfrom streambuf can safely cache results of calls to locale\nfunctions and to members of facets so obtained.</em>\n\n@note  Base class version does nothing.","bases":[],"vars":[13428383316237851390],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17672867959727899301,"detailed_name":"std::basic_streambuf::int_type std::basic_streambuf::snextc()","qual_name_offset":31,"short_name_offset":53,"short_name_size":6,"spell":"305:7-305:13|304:7-312:8|1026|-1","hover":"","comments":" @brief  Getting the next character.\n @return  The next character, or eof.\n\n Calls @c sbumpc(), and if that function returns\n @c traits::eof(), so does this function.  Otherwise, @c sgetc().","bases":[],"vars":[12152265096315989093],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17864263508423894830,"detailed_name":"void std::basic_streambuf::stossc()","qual_name_offset":5,"short_name_offset":27,"short_name_size":6,"spell":"791:7-791:13|789:7-797:8|1026|-1","hover":"","comments":" @brief  Tosses a character.\n\n Advances the read pointer, ignoring the character that would have\n been read.\n\n See http://gcc.gnu.org/ml/libstdc++/2002-05/msg00168.html","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":18024157248456225060,"detailed_name":"std::basic_streambuf::char_type *std::basic_streambuf::gptr() const","qual_name_offset":33,"short_name_offset":55,"short_name_size":4,"spell":"492:7-492:11|491:7-492:43|1026|-1","hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":18167902890251172986,"detailed_name":"std::basic_streambuf::char_type *std::basic_streambuf::eback() const","qual_name_offset":33,"short_name_offset":55,"short_name_size":5,"spell":"489:7-489:12|488:7-489:42|1026|-1","hover":"","comments":"[27.5.2.3.1] get area access\n@{\n\n@brief  Access to the get area.\n\nThese functions are only available to other protected functions,\nincluding derived classes.\n\n- eback() returns the beginning pointer for the input sequence\n- gptr() returns the next pointer for the input sequence\n- egptr() returns the end pointer for the input sequence","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":18307296600075415678,"detailed_name":"std::basic_streambuf::int_type std::basic_streambuf::sbumpc()","qual_name_offset":31,"short_name_offset":53,"short_name_size":6,"spell":"323:7-323:13|322:7-334:8|1026|-1","hover":"","comments":" @brief  Getting the next character.\n @return  The next character, or eof.\n\n If the input read position is available, returns that character\n and increments the read pointer, otherwise calls and returns\n @c uflow().","bases":[],"vars":[6252863187255113926],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":18378031917830288433,"detailed_name":"std::streamsize std::basic_streambuf::sgetn(std::basic_streambuf::char_type *__s, std::streamsize __n)","qual_name_offset":16,"short_name_offset":38,"short_name_size":5,"spell":"364:7-364:12|363:7-365:41|1026|-1","hover":"","comments":" @brief  Entry point for xsgetn.\n @param  __s  A buffer area.\n @param  __n  A count.\n\n Returns xsgetn(__s,__n).  The effect is to fill @a __s[0] through\n @a __s[__n-1] with characters from the input sequence, if possible.","bases":[],"vars":[2439300113437971747,11139854849752665744],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]}],"usr2type":[{"usr":98,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[16515472405752075068,1210286362051069772,8306625894802738495],"uses":[]},{"usr":114,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[7220443846698413725,12178442852206373311],"uses":[]},{"usr":115,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[10271075459470558894,3514772799352660135,11139854849752665744,2345506617254135059,15219805549750966638,14369477041811378406,11571600346108610509,12104926287892073604],"uses":[]},{"usr":219473249778472785,"detailed_name":"template <typename _Tp> struct std::__is_char {}","qual_name_offset":31,"short_name_offset":36,"short_name_size":9,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":23,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["153:48-153:57|4|-1","165:48-165:57|4|-1"]},{"usr":640567796162397819,"detailed_name":"_CharT2","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["152:39-152:46|152:30-152:46|1|-1"],"derived":[],"instances":[],"uses":["153:58-153:65|4|-1","154:13-154:20|4|-1","156:40-156:47|4|-1"]},{"usr":1059304418006431656,"detailed_name":"_Traits","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["51:38-51:45|51:29-51:45|1|-1"],"derived":[],"instances":[],"uses":["53:51-53:58|4|-1","54:30-54:37|4|-1"]},{"usr":1230330113907994147,"detailed_name":"class std::basic_streambuf {}","qual_name_offset":6,"short_name_offset":11,"short_name_size":15,"hover":"","comments":" @brief  The actual work of input and output (interface).\n @ingroup io\n\n @tparam _CharT  Type of character stream.\n @tparam _Traits  Traits for character type, defaults to\n                  char_traits<_CharT>.\n\n This is a base class.  Derived stream buffers each control a\n pair of character sequences:  one for input, and one for output.\n\n Section [27.5.1] of the standard describes the requirements and\n behavior of stream buffer classes.  That section (three paragraphs)\n is reproduced here, for simplicity and accuracy.\n\n -# Stream buffers can impose various constraints on the sequences\n    they control.  Some constraints are:\n    - The controlled input sequence can be not readable.\n    - The controlled output sequence can be not writable.\n    - The controlled sequences can be associated with the contents of\n      other representations for character sequences, such as external\n      files.\n    - The controlled sequences can support operations @e directly to or\n      from associated sequences.\n    - The controlled sequences can impose limitations on how the\n      program can read characters from a sequence, write characters to\n      a sequence, put characters back into an input sequence, or alter\n      the stream position.\n    .\n -# Each sequence is characterized by three pointers which, if non-null,\n    all point into the same @c charT array object.  The array object\n    represents, at any moment, a (sub)sequence of characters from the\n    sequence.  Operations performed on a sequence alter the values\n    stored in these pointers, perform reads and writes directly to or\n    from associated sequences, and alter <em>the stream position</em> and\n    conversion state as needed to maintain this subsequence relationship.\n    The three pointers are:\n    - the <em>beginning pointer</em>, or lowest element address in the\n      array (called @e xbeg here);\n    - the <em>next pointer</em>, or next element address that is a\n      current candidate for reading or writing (called @e xnext here);\n    - the <em>end pointer</em>, or first element address beyond the\n      end of the array (called @e xend here).\n    .\n -# The following semantic constraints shall always apply for any set\n    of three pointers for a sequence, using the pointer names given\n    immediately above:\n    - If @e xnext is not a null pointer, then @e xbeg and @e xend shall\n      also be non-null pointers into the same @c charT array, as\n      described above; otherwise, @e xbeg and @e xend shall also be null.\n    - If @e xnext is not a null pointer and @e xnext < @e xend for an\n      output sequence, then a <em>write position</em> is available.\n      In this case, @e *xnext shall be assignable as the next element\n      to write (to put, or to store a character value, into the sequence).\n    - If @e xnext is not a null pointer and @e xbeg < @e xnext for an\n      input sequence, then a <em>putback position</em> is available.\n      In this case, @e xnext[-1] shall have a defined value and is the\n      next (preceding) element to store a character that is put back\n      into the input sequence.\n    - If @e xnext is not a null pointer and @e xnext< @e xend for an\n      input sequence, then a <em>read position</em> is available.\n      In this case, @e *xnext shall have a defined value and is the\n      next element to read (to get, or to obtain a character value,\n      from the sequence).","spell":"122:11-122:26|122:5-830:6|1026|-1","bases":[],"funcs":[9049114614230967811,6903634917358489868,12065123045650270665,14599093997889022243,335868181075529052,7464769401585469514,11151278360719841590,14961514279703006401,17672867959727899301,18307296600075415678,15380409498822389610,18378031917830288433,6120835236468537179,7410587720548158848,7406436537456532084,4546431254220506973,473277476172340729,18167902890251172986,18024157248456225060,16235880801341028598,5889978017934802399,9444615363375221010,5237466546530810611,13435641196524181953,14730533127431293424,12314390531438157325,9339590352908932167,16934076392978857756,4384925542073084493,2137056949194569916,1648155060180971145,6433335738173300234,12882807614278994896,14499592306887222123,14292863881918470362,13955518022063552335,3844965568091239492,2391546545825660351,448570959682634389,17864263508423894830,13122791203895903284,11135963675931890851,10953219185216373456,6878274253247704418,10064867989613092529],"types":[4363979335033091322,15422250110235043373,5701988463589067398,11142038132460385186,11355078585672786774,16531278495925934289],"vars":[{"L":4030818368084970442,"R":-1},{"L":14573689641198293775,"R":-1},{"L":15172163771333820709,"R":-1},{"L":1970448534126533504,"R":-1},{"L":14566772811227790109,"R":-1},{"L":2546601071655927988,"R":-1},{"L":7868560186039343214,"R":-1}],"alias_of":0,"kind":5,"parent_kind":3,"declarations":[],"derived":[],"instances":[2963433907399367284],"uses":["53:27-53:42|4|-1","54:6-54:21|4|-1","140:15-140:30|4|-1","150:31-150:46|4|-1","150:49-150:64|4|-1","204:8-204:23|4|-1","245:7-245:22|4|-1","470:7-470:22|4|-1","597:15-597:30|4|-1","812:29-812:44|4|-1","812:7-812:22|4|-1","814:7-814:22|4|-1","815:23-815:38|4|-1","819:12-819:27|4|-1","835:27-835:42|4|-1","834:10-834:25|4|-1","835:5-835:20|4|-1","838:10-838:25|4|-1","840:21-840:36|4|-1","839:10-839:25|4|-1"]},{"usr":1266653111667332731,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["838:26-838:32|4|-1","839:26-839:32|4|-1"]},{"usr":1393197741476209464,"detailed_name":"typedef std::_Ios_Seekdir std::ios_base::seekdir","qual_name_offset":26,"short_name_offset":41,"short_name_size":7,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":4474214286850556758,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[10326856898438103601],"uses":["258:44-258:51|4|-1","609:35-609:42|4|-1"]},{"usr":1664137206873389287,"detailed_name":"template <typename _CharT, typename _Traits = char_traits<_CharT>> class std::ostreambuf_iterator","qual_name_offset":73,"short_name_offset":78,"short_name_size":19,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":5,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["147:20-147:39|4|-1"]},{"usr":2025469987416776750,"detailed_name":"template <typename _CharT, typename _Traits = char_traits<_CharT>> class std::istreambuf_iterator","qual_name_offset":73,"short_name_offset":78,"short_name_size":19,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":5,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["146:20-146:39|4|-1"]},{"usr":3546994897161196771,"detailed_name":"template <typename _CharT, typename _Traits = char_traits<_CharT>> class std::basic_ostream","qual_name_offset":73,"short_name_offset":78,"short_name_size":13,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":5,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["145:20-145:33|4|-1"]},{"usr":3744382866914065573,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["131:15-131:21|4|-1"]},{"usr":4363979335033091322,"detailed_name":"typedef _CharT std::basic_streambuf::char_type","qual_name_offset":15,"short_name_offset":37,"short_name_size":9,"hover":"","comments":"@{\n*\n These are standard types.  They permit a standardized way of\n referring to names of (or names dependent on) the template\n parameters, which are specific to the implementation.","spell":"131:27-131:36|131:7-131:36|1026|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":3744382866914065573,"kind":252,"parent_kind":5,"declarations":[],"derived":[],"instances":[4030818368084970442,14573689641198293775,15172163771333820709,1970448534126533504,14566772811227790109,2546601071655927988,7489774969130739227,2439300113437971747,4717241134912759197,549743555067687506,3902583454325033268,12428528710452330850,15818663845347011421,9049609164988225363,975596008448453504,10444669977058339366,2438844003466041444,3619641324654738124],"uses":["140:31-140:40|4|-1","143:30-143:39|4|-1","144:34-144:43|4|-1","145:34-145:43|4|-1","146:40-146:49|4|-1","147:40-147:49|4|-1","191:7-191:16|4|-1","192:7-192:16|4|-1","193:7-193:16|4|-1","194:7-194:16|4|-1","195:7-195:16|4|-1","196:7-196:16|4|-1","246:17-246:26|4|-1","364:13-364:22|4|-1","379:17-379:26|4|-1","431:13-431:22|4|-1","457:19-457:28|4|-1","488:7-488:16|4|-1","491:7-491:16|4|-1","494:7-494:16|4|-1","516:12-516:21|4|-1","516:31-516:40|4|-1","516:51-516:60|4|-1","535:7-535:16|4|-1","538:7-538:16|4|-1","541:7-541:16|4|-1","562:12-562:21|4|-1","562:31-562:40|4|-1","597:31-597:40|4|-1","598:14-598:23|4|-1","672:14-672:23|4|-1","749:20-749:29|4|-1"]},{"usr":4474214286850556758,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":[]},{"usr":4980346820909537411,"detailed_name":"namespace __gnu_cxx {}","qual_name_offset":10,"short_name_offset":10,"short_name_size":9,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":3,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["153:25-153:34|4|-1","165:25-165:34|4|-1"]},{"usr":5066136794000326618,"detailed_name":"_Distance","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["164:43-164:52|164:34-164:52|1|-1"],"derived":[],"instances":[],"uses":["167:48-167:57|4|-1"]},{"usr":5401847601697785946,"detailed_name":"namespace std {}","qual_name_offset":10,"short_name_offset":10,"short_name_size":3,"hover":"","comments":"This file provides the C++17 functions std::destroy_at, std::destroy, and\nstd::destroy_n, and the C++20 function std::construct_at.\nIt also provides std::_Construct, std::_Destroy,and std::_Destroy_n functions\nwhich are defined in all standard modes and so can be used in C++98-14 code.\nThe _Destroy functions will dispatch to destroy_at during constant\nevaluation, because calls to that function are intercepted by the compiler\nto allow use in constant expressions.","bases":[],"funcs":[3406045606520904446,12638659132166016072,10810180419018474021,7805890696810642844,3189368072825569589,8517446849902221050,168625121511998982,13622725330160962027,5776048126456438257],"types":[1230330113907994147],"vars":[],"alias_of":0,"kind":3,"parent_kind":0,"declarations":["45:11-45:14|45:1-858:2|1|-1"],"derived":[],"instances":[],"uses":["821:2-821:5|4|-1","822:2-822:5|4|-1","823:2-823:5|4|-1","824:2-824:5|4|-1","825:2-825:5|4|-1","826:2-826:5|4|-1","827:2-827:5|4|-1","834:5-834:8|4|-1","838:5-838:8|4|-1","839:5-839:8|4|-1"]},{"usr":5701988463589067398,"detailed_name":"typedef typename traits_type::int_type int_type","qual_name_offset":17,"short_name_offset":30,"short_name_size":8,"hover":"","comments":"","spell":"133:48-133:56|133:7-133:56|1026|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":5,"declarations":[],"derived":[],"instances":[12152265096315989093,6252863187255113926,728496068081744663,4789797942834123876,18056685846151970685,4786451737430269031,1099672743878877508,15475560364200833478,3159472508037105645],"uses":["304:7-304:15|4|-1","307:2-307:10|4|-1","322:7-322:15|4|-1","325:2-325:10|4|-1","344:7-344:15|4|-1","347:2-347:10|4|-1","378:7-378:15|4|-1","381:2-381:10|4|-1","403:7-403:15|4|-1","406:2-406:10|4|-1","430:7-430:15|4|-1","433:2-433:10|4|-1","693:15-693:23|4|-1","706:15-706:23|4|-1","709:2-709:10|4|-1","730:15-730:23|4|-1","731:17-731:25|4|-1","774:15-774:23|4|-1","775:16-775:24|4|-1"]},{"usr":6361022733173428656,"detailed_name":"_Alloc","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["178:62-178:68|178:53-178:68|1|-1"],"derived":[],"instances":[],"uses":["181:35-181:41|4|-1"]},{"usr":6601217294879815626,"detailed_name":"_Traits","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["834:34-834:41|4|-1"]},{"usr":6923399338875657974,"detailed_name":"_CharT2","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["164:25-164:32|164:16-164:32|1|-1"],"derived":[],"instances":[],"uses":["165:58-165:65|4|-1"]},{"usr":7679263804223851111,"detailed_name":"template <typename _CharT, typename _Traits = char_traits<_CharT>> class std::basic_ios","qual_name_offset":73,"short_name_offset":78,"short_name_size":9,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":5,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["143:20-143:29|4|-1"]},{"usr":7973036072010903031,"detailed_name":"_Traits","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["838:34-838:41|4|-1","839:34-839:41|4|-1"]},{"usr":8649704671294701091,"detailed_name":"_CharT2","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["173:25-173:32|173:16-173:32|1|-1"],"derived":[],"instances":[],"uses":["174:30-174:37|4|-1","175:34-175:41|4|-1","176:19-176:26|4|-1"]},{"usr":9782672352423520511,"detailed_name":"_CharT2","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["169:25-169:32|169:16-169:32|1|-1"],"derived":[],"instances":[],"uses":["170:30-170:37|4|-1","171:34-171:41|4|-1","171:55-171:62|4|-1"]},{"usr":9825384940092480788,"detailed_name":"typedef std::ptrdiff_t std::streamsize","qual_name_offset":23,"short_name_offset":28,"short_name_size":10,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":16813906027770061405,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["52:5-52:15|4|-1","149:14-149:24|4|-1","246:33-246:43|4|-1","290:7-290:17|4|-1","293:8-293:18|4|-1","363:7-363:17|4|-1","364:29-364:39|4|-1","456:7-456:17|4|-1","457:35-457:45|4|-1","598:26-598:36|4|-1","655:15-655:25|4|-1","671:15-671:25|4|-1","672:30-672:40|4|-1","748:15-748:25|4|-1","749:36-749:46|4|-1","802:20-802:30|4|-1","805:20-805:30|4|-1","845:5-845:15|4|-1","850:5-850:15|4|-1"]},{"usr":10959139298899772888,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":[]},{"usr":10991754556771681767,"detailed_name":"_Traits2","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["169:43-169:51|169:34-169:51|1|-1"],"derived":[],"instances":[],"uses":["170:39-170:47|4|-1","171:43-171:51|4|-1"]},{"usr":11142038132460385186,"detailed_name":"typedef typename traits_type::pos_type pos_type","qual_name_offset":17,"short_name_offset":30,"short_name_size":8,"hover":"","comments":"","spell":"134:48-134:56|134:7-134:56|1026|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":5,"declarations":[],"derived":[],"instances":[12515502178181312215],"uses":["257:7-257:15|4|-1","269:7-269:15|4|-1","270:18-270:26|4|-1","608:15-608:23|4|-1","611:16-611:24|4|-1","620:15-620:23|4|-1","621:15-621:23|4|-1","623:16-623:24|4|-1"]},{"usr":11355078585672786774,"detailed_name":"typedef typename traits_type::off_type off_type","qual_name_offset":17,"short_name_offset":30,"short_name_size":8,"hover":"","comments":"","spell":"135:48-135:56|135:7-135:56|1026|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":5,"declarations":[],"derived":[],"instances":[6911238007803675370],"uses":["258:18-258:26|4|-1","609:15-609:23|4|-1","611:25-611:33|4|-1","623:25-623:33|4|-1"]},{"usr":11726728191791050101,"detailed_name":"_Traits","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["132:15-132:22|4|-1","597:41-597:48|4|-1"]},{"usr":12655483914565919086,"detailed_name":"typedef std::_Ios_Openmode std::ios_base::openmode","qual_name_offset":27,"short_name_offset":42,"short_name_size":8,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":10959139298899772888,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[12374894931418988224,17960524007486810397],"uses":["259:14-259:22|4|-1","271:14-271:22|4|-1","610:18-610:26|4|-1","622:18-622:26|4|-1"]},{"usr":12676136746247562793,"detailed_name":"template <bool, typename> struct __gnu_cxx::__enable_if {}","qual_name_offset":33,"short_name_offset":44,"short_name_size":11,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":23,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["153:36-153:47|4|-1","165:36-165:47|4|-1"]},{"usr":12808996496078874369,"detailed_name":"_CharT2","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["158:25-158:32|158:16-158:32|1|-1"],"derived":[],"instances":[],"uses":[]},{"usr":13815459135658756055,"detailed_name":"_Traits2","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["173:43-173:51|173:34-173:51|1|-1"],"derived":[],"instances":[],"uses":["174:39-174:47|4|-1","175:43-175:51|4|-1","176:28-176:36|4|-1"]},{"usr":14824935569602768421,"detailed_name":"_Traits2","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["178:43-178:51|178:34-178:51|1|-1"],"derived":[],"instances":[],"uses":["179:39-179:47|4|-1","180:40-180:48|4|-1","181:25-181:33|4|-1"]},{"usr":14869396227946170430,"detailed_name":"template <typename _CharT, typename _Traits = char_traits<_CharT>, typename _Alloc = allocator<_CharT>> class std::__cxx11::basic_string {}","qual_name_offset":110,"short_name_offset":124,"short_name_size":12,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":5,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["176:6-176:18|4|-1","181:3-181:15|4|-1"]},{"usr":14911526508283337092,"detailed_name":"class std::ios_base {}","qual_name_offset":6,"short_name_offset":11,"short_name_size":8,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":5,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["258:34-258:42|4|-1","259:4-259:12|4|-1","259:32-259:40|4|-1","259:47-259:55|4|-1","271:4-271:12|4|-1","271:32-271:40|4|-1","271:47-271:55|4|-1","609:25-609:33|4|-1","610:8-610:16|4|-1","610:40-610:48|4|-1","610:55-610:63|4|-1","622:8-622:16|4|-1","622:40-622:48|4|-1","622:55-622:63|4|-1"]},{"usr":15066848551657545619,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["834:26-834:32|4|-1"]},{"usr":15106558785893715270,"detailed_name":"_Alloc","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["173:62-173:68|173:53-173:68|1|-1"],"derived":[],"instances":[],"uses":["176:38-176:44|4|-1"]},{"usr":15288937763540599420,"detailed_name":"class std::locale {}","qual_name_offset":6,"short_name_offset":11,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":5,"parent_kind":0,"declarations":[],"derived":[],"instances":[7868560186039343214,6846671382994983482,10529618038423454829,13428383316237851390],"uses":["199:7-199:13|4|-1","215:7-215:13|4|-1","216:22-216:28|4|-1","218:2-218:8|4|-1","232:7-232:13|4|-1","473:21-473:27|4|-1","583:19-583:25|4|-1"]},{"usr":15422250110235043373,"detailed_name":"typedef _Traits std::basic_streambuf::traits_type","qual_name_offset":16,"short_name_offset":38,"short_name_size":11,"hover":"","comments":"","spell":"132:28-132:39|132:7-132:39|1026|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":11726728191791050101,"kind":252,"parent_kind":5,"declarations":[],"derived":[],"instances":[],"uses":["133:24-133:35|4|-1","134:24-134:35|4|-1","135:24-135:35|4|-1","140:42-140:53|4|-1","143:41-143:52|4|-1","144:45-144:56|4|-1","145:45-145:56|4|-1","146:51-146:62|4|-1","147:51-147:62|4|-1","307:19-307:30|4|-1","308:24-308:35|4|-1","328:14-328:25|4|-1","349:12-349:23|4|-1","384:10-384:21|4|-1","385:28-385:39|4|-1","389:14-389:25|4|-1","410:14-410:25|4|-1","438:14-438:25|4|-1","441:27-441:38|4|-1","695:16-695:27|4|-1","709:19-709:30|4|-1","710:25-710:36|4|-1","714:14-714:25|4|-1","731:43-731:54|4|-1","732:16-732:27|4|-1","775:42-775:53|4|-1","776:16-776:27|4|-1"]},{"usr":15801590214611295654,"detailed_name":"template <typename _CharT, typename _Traits = char_traits<_CharT>> class std::basic_istream","qual_name_offset":73,"short_name_offset":78,"short_name_size":13,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":5,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["144:20-144:33|4|-1","170:16-170:29|4|-1","171:20-171:33|4|-1","174:16-174:29|4|-1","175:20-175:33|4|-1","179:16-179:29|4|-1","180:17-180:30|4|-1"]},{"usr":16294895761364984423,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["51:21-51:27|51:12-51:27|1|-1"],"derived":[],"instances":[],"uses":["53:43-53:49|4|-1","54:22-54:28|4|-1"]},{"usr":16531278495925934289,"detailed_name":"typedef basic_streambuf<std::basic_streambuf::char_type, std::basic_streambuf::traits_type> std::basic_streambuf::__streambuf_type","qual_name_offset":92,"short_name_offset":114,"short_name_size":16,"hover":"","comments":"@{\n/ This is a non-standard type.","spell":"140:57-140:73|140:7-140:73|1026|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":1230330113907994147,"kind":252,"parent_kind":5,"declarations":[],"derived":[],"instances":[],"uses":[]},{"usr":16813906027770061405,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":[]},{"usr":18277131656458758247,"detailed_name":"_CharT2","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["178:25-178:32|178:16-178:32|1|-1"],"derived":[],"instances":[],"uses":["179:30-179:37|4|-1","180:31-180:38|4|-1","181:16-181:23|4|-1","181:45-181:52|4|-1"]}],"usr2var":[{"usr":549743555067687506,"detailed_name":"std::basic_streambuf::char_type __c","qual_name_offset":32,"short_name_offset":32,"short_name_size":3,"hover":"","comments":"","spell":"431:23-431:26|431:13-431:26|1026|-1","type":4363979335033091322,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["436:22-436:25|4|-1","438:39-438:42|4|-1","441:52-441:55|4|-1"]},{"usr":728496068081744663,"detailed_name":"std::basic_streambuf::int_type __ret","qual_name_offset":31,"short_name_offset":31,"short_name_size":5,"hover":"","comments":"","spell":"347:11-347:16|347:2-347:16|2|-1","type":5701988463589067398,"kind":13,"parent_kind":6,"storage":0,"declarations":[],"uses":["349:4-349:9|20|-1","351:4-351:9|20|-1","352:9-352:14|4|-1"]},{"usr":975596008448453504,"detailed_name":"std::basic_streambuf::char_type *__pbeg","qual_name_offset":33,"short_name_offset":33,"short_name_size":6,"hover":"","comments":"","spell":"562:23-562:29|562:12-562:29|1026|-1","type":4363979335033091322,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["564:28-564:34|4|-1"]},{"usr":1099672743878877508,"detailed_name":"std::basic_streambuf::int_type __ret","qual_name_offset":31,"short_name_offset":31,"short_name_size":5,"hover":"std::basic_streambuf::int_type __ret = traits_type::eof()","comments":"","spell":"709:11-709:16|709:2-709:37|2|-1","type":5701988463589067398,"kind":13,"parent_kind":6,"storage":0,"declarations":[],"uses":["711:8-711:13|4|-1","714:6-714:11|20|-1","717:9-717:14|4|-1"]},{"usr":1210286362051069772,"detailed_name":"const bool __testpos","qual_name_offset":11,"short_name_offset":11,"short_name_size":9,"hover":"const bool __testpos = this->eback() < this->gptr()","comments":"","spell":"382:13-382:22|382:2-382:53|2|-1","type":98,"kind":13,"parent_kind":6,"storage":0,"declarations":[],"uses":["383:24-383:33|12|-1"]},{"usr":1970448534126533504,"detailed_name":"std::basic_streambuf::char_type *std::basic_streambuf::_M_out_beg","qual_name_offset":33,"short_name_offset":55,"short_name_size":10,"hover":"","comments":"Start of put area.","spell":"194:20-194:30|194:7-194:30|1026|-1","type":4363979335033091322,"kind":8,"parent_kind":5,"storage":0,"declarations":[],"uses":["472:7-472:17|20|-1","536:30-536:40|4|-1","564:2-564:12|20|-1","824:12-824:22|4|-1"]},{"usr":2345506617254135059,"detailed_name":"std::streamsize __n","qual_name_offset":16,"short_name_offset":16,"short_name_size":3,"hover":"","comments":"","spell":"457:46-457:49|457:35-457:49|1026|-1","type":115,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["458:34-458:37|4|-1"]},{"usr":2438844003466041444,"detailed_name":"std::basic_streambuf::char_type *__s","qual_name_offset":33,"short_name_offset":33,"short_name_size":3,"hover":"","comments":"","spell":"672:25-672:28|672:14-672:28|1026|-1","type":4363979335033091322,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":2439300113437971747,"detailed_name":"std::basic_streambuf::char_type *__s","qual_name_offset":33,"short_name_offset":33,"short_name_size":3,"hover":"","comments":"","spell":"364:24-364:27|364:13-364:27|1026|-1","type":4363979335033091322,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["365:29-365:32|4|-1"]},{"usr":2546601071655927988,"detailed_name":"std::basic_streambuf::char_type *std::basic_streambuf::_M_out_end","qual_name_offset":33,"short_name_offset":55,"short_name_size":10,"hover":"","comments":"End of put area.","spell":"196:20-196:30|196:7-196:30|1026|-1","type":4363979335033091322,"kind":8,"parent_kind":5,"storage":0,"declarations":[],"uses":["472:37-472:47|20|-1","542:30-542:40|4|-1","565:2-565:12|20|-1","826:12-826:22|4|-1"]},{"usr":2963433907399367284,"detailed_name":"basic_streambuf<_CharT, _Traits> &__sb","qual_name_offset":34,"short_name_offset":34,"short_name_size":4,"hover":"","comments":"","spell":"819:29-819:33|819:12-819:33|1026|-1","type":1230330113907994147,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["821:23-821:27|4|-1","822:23-822:27|4|-1","823:23-823:27|4|-1","824:24-824:28|4|-1","825:24-825:28|4|-1","826:24-826:28|4|-1","827:27-827:31|4|-1"]},{"usr":3159472508037105645,"detailed_name":"std::basic_streambuf::int_type __c","qual_name_offset":31,"short_name_offset":31,"short_name_size":3,"hover":"std::basic_streambuf::int_type __c = traits_type::eof()","comments":"","spell":"775:25-775:28|775:16-775:60|1026|-1","type":5701988463589067398,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":3514772799352660135,"detailed_name":"const std::streamsize __ret","qual_name_offset":22,"short_name_offset":22,"short_name_size":5,"hover":"const std::streamsize __ret = this->egptr() - this->gptr()","comments":"","spell":"293:19-293:24|293:2-293:55|2|-1","type":115,"kind":13,"parent_kind":6,"storage":0,"declarations":[],"uses":["294:9-294:14|12|-1","294:17-294:22|4|-1"]},{"usr":3619641324654738124,"detailed_name":"const std::basic_streambuf::char_type *__s","qual_name_offset":39,"short_name_offset":39,"short_name_size":3,"hover":"","comments":"","spell":"749:31-749:34|749:14-749:34|1026|-1","type":4363979335033091322,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":3902583454325033268,"detailed_name":"const std::basic_streambuf::char_type *__s","qual_name_offset":39,"short_name_offset":39,"short_name_size":3,"hover":"","comments":"","spell":"457:30-457:33|457:13-457:33|1026|-1","type":4363979335033091322,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["458:29-458:32|4|-1"]},{"usr":4030818368084970442,"detailed_name":"std::basic_streambuf::char_type *std::basic_streambuf::_M_in_beg","qual_name_offset":33,"short_name_offset":55,"short_name_size":9,"hover":"","comments":"Start of get area.","spell":"191:20-191:29|191:7-191:29|1026|-1","type":4363979335033091322,"kind":8,"parent_kind":5,"storage":0,"declarations":[],"uses":["471:9-471:18|20|-1","489:30-489:39|4|-1","518:2-518:11|20|-1","821:12-821:21|4|-1"]},{"usr":4422123979352466856,"detailed_name":"int *__sbin","qual_name_offset":5,"short_name_offset":5,"short_name_size":6,"hover":"","comments":"","spell":"846:50-846:56|846:27-846:56|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":[]},{"usr":4717241134912759197,"detailed_name":"std::basic_streambuf::char_type __c","qual_name_offset":32,"short_name_offset":32,"short_name_size":3,"hover":"","comments":"","spell":"379:27-379:30|379:17-379:30|1026|-1","type":4363979335033091322,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["384:26-384:29|4|-1","385:53-385:56|4|-1"]},{"usr":4786451737430269031,"detailed_name":"std::basic_streambuf::int_type __ret","qual_name_offset":31,"short_name_offset":31,"short_name_size":5,"hover":"","comments":"","spell":"433:11-433:16|433:2-433:16|2|-1","type":5701988463589067398,"kind":13,"parent_kind":6,"storage":0,"declarations":[],"uses":["438:6-438:11|20|-1","441:4-441:9|20|-1","442:9-442:14|4|-1"]},{"usr":4789797942834123876,"detailed_name":"std::basic_streambuf::int_type __ret","qual_name_offset":31,"short_name_offset":31,"short_name_size":5,"hover":"","comments":"","spell":"381:11-381:16|381:2-381:16|2|-1","type":5701988463589067398,"kind":13,"parent_kind":6,"storage":0,"declarations":[],"uses":["385:4-385:9|20|-1","389:6-389:11|20|-1","391:9-391:14|4|-1"]},{"usr":6149369424977047596,"detailed_name":"static const std::ios_base::openmode std::ios_base::in","qual_name_offset":37,"short_name_offset":52,"short_name_size":2,"hover":"static const std::ios_base::openmode std::ios_base::in = _S_in","comments":"","type":0,"kind":8,"parent_kind":0,"storage":2,"declarations":[],"uses":["259:42-259:44|12|-1","271:42-271:44|12|-1","610:50-610:52|12|-1","622:50-622:52|12|-1"]},{"usr":6252863187255113926,"detailed_name":"std::basic_streambuf::int_type __ret","qual_name_offset":31,"short_name_offset":31,"short_name_size":5,"hover":"","comments":"","spell":"325:11-325:16|325:2-325:16|2|-1","type":5701988463589067398,"kind":13,"parent_kind":6,"storage":0,"declarations":[],"uses":["328:6-328:11|20|-1","332:4-332:9|20|-1","333:9-333:14|4|-1"]},{"usr":6386267296276861002,"detailed_name":"int *__sbout","qual_name_offset":5,"short_name_offset":5,"short_name_size":7,"hover":"","comments":"","spell":"847:29-847:36|847:6-847:36|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":[]},{"usr":6833315007988397088,"detailed_name":"int *__sbin","qual_name_offset":5,"short_name_offset":5,"short_name_size":6,"hover":"","comments":"","spell":"851:53-851:59|851:27-851:59|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":[]},{"usr":6846671382994983482,"detailed_name":"const std::locale &__loc","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"216:30-216:35|216:16-216:35|1026|-1","type":15288937763540599420,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["219:14-219:19|4|-1","220:18-220:23|4|-1"]},{"usr":6911238007803675370,"detailed_name":"std::basic_streambuf::off_type __off","qual_name_offset":31,"short_name_offset":31,"short_name_size":5,"hover":"","comments":"","spell":"258:27-258:32|258:18-258:32|1026|-1","type":11355078585672786774,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["260:30-260:35|4|-1"]},{"usr":7220443846698413725,"detailed_name":"int __n","qual_name_offset":4,"short_name_offset":4,"short_name_size":3,"hover":"","comments":"","spell":"505:17-505:20|505:13-505:20|1026|-1","type":114,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["505:37-505:40|4|-1"]},{"usr":7489774969130739227,"detailed_name":"std::basic_streambuf::char_type *__s","qual_name_offset":33,"short_name_offset":33,"short_name_size":3,"hover":"","comments":"","spell":"246:28-246:31|246:17-246:31|1026|-1","type":4363979335033091322,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["247:29-247:32|4|-1"]},{"usr":7703514651570718800,"detailed_name":"std::__is_char::__value = 0","qual_name_offset":0,"short_name_offset":16,"short_name_size":7,"hover":"","comments":"","type":0,"kind":22,"parent_kind":0,"storage":0,"declarations":[],"uses":["153:68-153:75|4|-1","165:68-165:75|4|-1"]},{"usr":7868560186039343214,"detailed_name":"std::locale std::basic_streambuf::_M_buf_locale","qual_name_offset":12,"short_name_offset":34,"short_name_size":13,"hover":"","comments":"Current locale setting.","spell":"199:17-199:30|199:7-199:30|1026|-1","type":15288937763540599420,"kind":8,"parent_kind":5,"storage":0,"declarations":[],"uses":["220:2-220:15|20|-1","234:16-234:29|4|-1","473:7-473:20|20|-1","827:12-827:25|4|-1"]},{"usr":7887055016174361847,"detailed_name":"bool &__ineof","qual_name_offset":6,"short_name_offset":6,"short_name_size":7,"hover":"","comments":"","spell":"847:44-847:51|847:38-847:51|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":[]},{"usr":8306625894802738495,"detailed_name":"const bool __testeof","qual_name_offset":11,"short_name_offset":11,"short_name_size":9,"hover":"const bool __testeof = traits_type::eq_int_type(this->underflow(),\n\t\t\t\t\t\t\t__ret)","comments":"","spell":"710:13-710:22|710:2-711:14|2|-1","type":98,"kind":13,"parent_kind":6,"storage":0,"declarations":[],"uses":["712:7-712:16|12|-1"]},{"usr":8511520435762950733,"detailed_name":"_IsUnused","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _IsUnused __attribute__ ((__unused__))","comments":"","spell":"49:9-49:18|49:9-49:47|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":["583:33-583:42|64|-1","731:30-731:39|64|-1","775:29-775:38|64|-1","855:8-855:17|64|-1"]},{"usr":8953031363021428718,"detailed_name":"_GLIBXX_STREAMBUF","qual_name_offset":0,"short_name_offset":0,"short_name_size":17,"hover":"#define _GLIBXX_STREAMBUF 1","comments":"","spell":"34:9-34:26|34:9-34:28|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":9049609164988225363,"detailed_name":"std::basic_streambuf::char_type *__gend","qual_name_offset":33,"short_name_offset":33,"short_name_size":6,"hover":"","comments":"","spell":"516:62-516:68|516:51-516:68|1026|-1","type":4363979335033091322,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["520:14-520:20|4|-1"]},{"usr":10271075459470558894,"detailed_name":"std::streamsize __n","qual_name_offset":16,"short_name_offset":16,"short_name_size":3,"hover":"","comments":"","spell":"246:44-246:47|246:33-246:47|1026|-1","type":115,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["247:34-247:37|4|-1"]},{"usr":10326856898438103601,"detailed_name":"ios_base::seekdir __way","qual_name_offset":18,"short_name_offset":18,"short_name_size":5,"hover":"","comments":"","spell":"258:52-258:57|258:34-258:57|1026|-1","type":1393197741476209464,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["260:37-260:42|4|-1"]},{"usr":10444669977058339366,"detailed_name":"std::basic_streambuf::char_type *__pend","qual_name_offset":33,"short_name_offset":33,"short_name_size":6,"hover":"","comments":"","spell":"562:42-562:48|562:31-562:48|1026|-1","type":4363979335033091322,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["565:15-565:21|4|-1"]},{"usr":10529618038423454829,"detailed_name":"std::locale __tmp","qual_name_offset":12,"short_name_offset":12,"short_name_size":5,"hover":"std::locale __tmp = (this->getloc())","comments":"","spell":"218:9-218:14|218:2-218:30|2|-1","type":15288937763540599420,"kind":13,"parent_kind":6,"storage":0,"declarations":[],"uses":["221:9-221:14|4|-1"]},{"usr":11032615815424862987,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","type":0,"kind":0,"parent_kind":0,"storage":0,"declarations":[],"uses":["789:7-789:34|64|-1"]},{"usr":11139854849752665744,"detailed_name":"std::streamsize __n","qual_name_offset":16,"short_name_offset":16,"short_name_size":3,"hover":"","comments":"","spell":"364:40-364:43|364:29-364:43|1026|-1","type":115,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["365:34-365:37|4|-1"]},{"usr":11571600346108610509,"detailed_name":"std::streamsize __n","qual_name_offset":16,"short_name_offset":16,"short_name_size":3,"hover":"","comments":"","spell":"802:31-802:34|802:20-802:34|1026|-1","type":115,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["802:51-802:54|4|-1"]},{"usr":12013292041218960293,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","type":0,"kind":0,"parent_kind":0,"storage":0,"declarations":[],"uses":["47:1-47:33|64|-1"]},{"usr":12104926287892073604,"detailed_name":"std::streamsize __n","qual_name_offset":16,"short_name_offset":16,"short_name_size":3,"hover":"","comments":"","spell":"805:31-805:34|805:20-805:34|1026|-1","type":115,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["805:52-805:55|4|-1"]},{"usr":12152265096315989093,"detailed_name":"std::basic_streambuf::int_type __ret","qual_name_offset":31,"short_name_offset":31,"short_name_size":5,"hover":"std::basic_streambuf::int_type __ret = traits_type::eof()","comments":"","spell":"307:11-307:16|307:2-307:37|2|-1","type":5701988463589067398,"kind":13,"parent_kind":6,"storage":0,"declarations":[],"uses":["309:14-309:19|4|-1","310:4-310:9|20|-1","311:9-311:14|4|-1"]},{"usr":12178442852206373311,"detailed_name":"int __n","qual_name_offset":4,"short_name_offset":4,"short_name_size":3,"hover":"","comments":"","spell":"552:17-552:20|552:13-552:20|1026|-1","type":114,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["552:38-552:41|4|-1"]},{"usr":12374894931418988224,"detailed_name":"ios_base::openmode __mode","qual_name_offset":19,"short_name_offset":19,"short_name_size":6,"hover":"ios_base::openmode __mode = ios_base::in | ios_base::out","comments":"","spell":"259:23-259:29|259:4-259:60|1026|-1","type":12655483914565919086,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["260:44-260:50|4|-1"]},{"usr":12428528710452330850,"detailed_name":"std::basic_streambuf::char_type *__gbeg","qual_name_offset":33,"short_name_offset":33,"short_name_size":6,"hover":"","comments":"","spell":"516:23-516:29|516:12-516:29|1026|-1","type":4363979335033091322,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["518:14-518:20|4|-1"]},{"usr":12515502178181312215,"detailed_name":"std::basic_streambuf::pos_type __sp","qual_name_offset":31,"short_name_offset":31,"short_name_size":4,"hover":"","comments":"","spell":"270:27-270:31|270:18-270:31|1026|-1","type":11142038132460385186,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["272:30-272:34|4|-1"]},{"usr":12562402245551871367,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","type":0,"kind":0,"parent_kind":0,"storage":0,"declarations":[],"uses":["857:1-857:31|64|-1"]},{"usr":13340792950783279518,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","type":0,"kind":0,"parent_kind":0,"storage":0,"declarations":[],"uses":["778:5-778:28|64|-1"]},{"usr":13428383316237851390,"detailed_name":"const std::locale &__loc","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"583:27-583:32|583:13-583:32|1026|-1","type":15288937763540599420,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":14369477041811378406,"detailed_name":"std::streamsize __n","qual_name_offset":16,"short_name_offset":16,"short_name_size":3,"hover":"","comments":"","spell":"749:47-749:50|749:36-749:50|1026|-1","type":115,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":14566772811227790109,"detailed_name":"std::basic_streambuf::char_type *std::basic_streambuf::_M_out_cur","qual_name_offset":33,"short_name_offset":55,"short_name_size":10,"hover":"","comments":"Current put area.","spell":"195:20-195:30|195:7-195:30|1026|-1","type":4363979335033091322,"kind":8,"parent_kind":5,"storage":0,"declarations":[],"uses":["472:22-472:32|20|-1","539:29-539:39|4|-1","552:24-552:34|4|-1","564:15-564:25|20|-1","805:38-805:48|4|-1","825:12-825:22|4|-1"]},{"usr":14573689641198293775,"detailed_name":"std::basic_streambuf::char_type *std::basic_streambuf::_M_in_cur","qual_name_offset":33,"short_name_offset":55,"short_name_size":9,"hover":"","comments":"Current read area.","spell":"192:20-192:29|192:7-192:29|1026|-1","type":4363979335033091322,"kind":8,"parent_kind":5,"storage":0,"declarations":[],"uses":["471:23-471:32|20|-1","492:30-492:39|4|-1","505:24-505:33|4|-1","519:2-519:11|20|-1","802:38-802:47|4|-1","822:12-822:21|4|-1"]},{"usr":14624026118405427410,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","type":0,"kind":0,"parent_kind":0,"storage":0,"declarations":[],"uses":["45:15-45:34|64|-1"]},{"usr":15172163771333820709,"detailed_name":"std::basic_streambuf::char_type *std::basic_streambuf::_M_in_end","qual_name_offset":33,"short_name_offset":55,"short_name_size":9,"hover":"","comments":"End of get area.","spell":"193:20-193:29|193:7-193:29|1026|-1","type":4363979335033091322,"kind":8,"parent_kind":5,"storage":0,"declarations":[],"uses":["471:37-471:46|20|-1","495:30-495:39|4|-1","520:2-520:11|20|-1","823:12-823:21|4|-1"]},{"usr":15219805549750966638,"detailed_name":"std::streamsize __n","qual_name_offset":16,"short_name_offset":16,"short_name_size":3,"hover":"","comments":"","spell":"672:41-672:44|672:30-672:44|1026|-1","type":115,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":15475560364200833478,"detailed_name":"std::basic_streambuf::int_type __c","qual_name_offset":31,"short_name_offset":31,"short_name_size":3,"hover":"std::basic_streambuf::int_type __c = traits_type::eof()","comments":"","spell":"731:26-731:29|731:17-731:61|1026|-1","type":5701988463589067398,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":15660098870589938559,"detailed_name":"int *__sbout","qual_name_offset":5,"short_name_offset":5,"short_name_size":7,"hover":"","comments":"","spell":"852:32-852:39|852:6-852:39|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":[]},{"usr":15818663845347011421,"detailed_name":"std::basic_streambuf::char_type *__gnext","qual_name_offset":33,"short_name_offset":33,"short_name_size":7,"hover":"","comments":"","spell":"516:42-516:49|516:31-516:49|1026|-1","type":4363979335033091322,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["519:14-519:21|4|-1"]},{"usr":16022166532902296818,"detailed_name":"bool &__ineof","qual_name_offset":6,"short_name_offset":6,"short_name_size":7,"hover":"","comments":"","spell":"852:47-852:54|852:41-852:54|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":[]},{"usr":16515472405752075068,"detailed_name":"bool _IsMove","qual_name_offset":5,"short_name_offset":5,"short_name_size":7,"hover":"","comments":"","type":98,"kind":253,"parent_kind":12,"storage":0,"declarations":["152:21-152:28|152:16-152:28|1025|-1"],"uses":[]},{"usr":17558801303032041095,"detailed_name":"static const std::ios_base::openmode std::ios_base::out","qual_name_offset":37,"short_name_offset":52,"short_name_size":3,"hover":"static const std::ios_base::openmode std::ios_base::out = _S_out","comments":"","type":0,"kind":8,"parent_kind":0,"storage":2,"declarations":[],"uses":["259:57-259:60|12|-1","271:57-271:60|12|-1","610:65-610:68|12|-1","622:65-622:68|12|-1"]},{"usr":17960524007486810397,"detailed_name":"ios_base::openmode __mode","qual_name_offset":19,"short_name_offset":19,"short_name_size":6,"hover":"ios_base::openmode __mode = ios_base::in | ios_base::out","comments":"","spell":"271:23-271:29|271:4-271:60|1026|-1","type":12655483914565919086,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["272:36-272:42|4|-1"]},{"usr":18056685846151970685,"detailed_name":"std::basic_streambuf::int_type __ret","qual_name_offset":31,"short_name_offset":31,"short_name_size":5,"hover":"","comments":"","spell":"406:11-406:16|406:2-406:16|2|-1","type":5701988463589067398,"kind":13,"parent_kind":6,"storage":0,"declarations":[],"uses":["410:6-410:11|20|-1","413:4-413:9|20|-1","414:9-414:14|4|-1"]},{"usr":18105101044678724571,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","type":0,"kind":0,"parent_kind":0,"storage":0,"declarations":[],"uses":["778:32-778:43|64|-1","807:5-807:16|64|-1","817:5-817:16|64|-1","832:5-832:16|64|-1"]}]}