21
{"md5":"04b4174745d9f46d48080aefb7d04c2c","language":1,"no_linkage":true,"lid2path":[],"import_file":"[GIT_TOP_DIR]/src/impl/FhtKacRotator.cpp","args":["clang","[GIT_TOP_DIR]/src/impl/FhtKacRotator.cpp","-working-directory=[GIT_TOP_DIR]/"],"dependencies":{"/usr/include/c++/10/bits/stl_numeric.h":"ignore_header_sys","/usr/include/ctype.h":"ignore_header_sys","/usr/include/bits/types/__mbstate_t.h":"ignore_header_sys","/usr/include/features.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/immintrin.h":"774d8f5fec0961c7f69eaa3c69870fd7","/usr/include/math.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_algobase.h":"ignore_header_sys","/usr/include/bits/byteswap.h":"ignore_header_sys","/usr/include/c++/10/vector":"ignore_header_sys","/usr/include/c++/10/bits/iterator_concepts.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avxintrin.h":"772d5fd2b95bf581b4338458db989424","/usr/include/string.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlintrin.h":"cd26383f2f06392556848bfb374034c1","/usr/local/ob-clang11/lib/clang/11.1.0/include/vaesintrin.h":"230da0a10bfb803dd07d1d4859b589b9","/usr/include/bits/types/struct_FILE.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vbmivlintrin.h":"7a23233bba4c34e5185e02ea4208670c","/usr/include/bits/types/cookie_io_functions_t.h":"ignore_header_sys","/usr/include/bits/fp-logb.h":"ignore_header_sys","/usr/include/sys/cdefs.h":"ignore_header_sys","/usr/include/bits/types/__fpos_t.h":"ignore_header_sys","/usr/include/bits/types/timer_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512bf16intrin.h":"4f5ef6213a91abea3f5d53232215497c","/usr/include/c++/10/bits/locale_classes.h":"ignore_header_sys","/usr/include/c++/10/bits/streambuf.tcc":"ignore_header_sys","/usr/include/c++/10/bits/basic_ios.tcc":"ignore_header_sys","/usr/include/bits/types/mbstate_t.h":"ignore_header_sys","/usr/include/c++/10/bits/locale_facets.h":"ignore_header_sys","/usr/include/bits/sched.h":"ignore_header_sys","/usr/include/bits/types/wint_t.h":"ignore_header_sys","/usr/include/c++/10/bits/charconv.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_pair.h":"ignore_header_sys","/usr/include/c++/10/bits/char_traits.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/vpclmulqdqintrin.h":"a0ef53b1374f1ff070c815a7572221fa","/usr/include/time.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/wmmintrin.h":"420e06fc7b100109fe408d8cf15dfbbc","/usr/include/c++/10/bits/stl_bvector.h":"ignore_header_sys","/usr/include/c++/10/istream":"ignore_header_sys","/usr/include/bits/types/__sigset_t.h":"ignore_header_sys","/usr/include/c++/10/bits/allocator.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/emmintrin.h":"15ee96a71ec1a4288c0b5ffdad114450","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsavesintrin.h":"dfeb07884315d36739e4aa9dfd1d72ed","/usr/local/ob-clang11/lib/clang/11.1.0/include/smmintrin.h":"dde1073b90fcdddf514ff14bf7b0a39b","/usr/include/sys/types.h":"ignore_header_sys","/usr/include/c++/10/ios":"ignore_header_sys","/usr/include/c++/10/bits/uniform_int_dist.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/lzcntintrin.h":"070db0e5ecc75a113daa65f1a9a569a5","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vpopcntdqintrin.h":"748799b7fb86515d202460f78d94a3c3","/usr/include/bits/time64.h":"ignore_header_sys","/usr/include/bits/uintn-identity.h":"ignore_header_sys","/usr/include/c++/10/bits/cpp_type_traits.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vbmi2intrin.h":"d2eaacea81a5a13e0f771f69d62529ec","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512erintrin.h":"d8a0db1358f0c4f5db208e20fece727d","/usr/include/c++/10/bits/move.h":"ignore_header_sys","/usr/include/c++/10/cstdint":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/c++config.h":"ignore_header_sys","/usr/include/bits/endian.h":"ignore_header_sys","/usr/include/bits/types/__locale_t.h":"ignore_header_sys","/usr/include/bits/fp-fast.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512bitalgintrin.h":"065b5f6c02ddf57ee43a304b33d301c4","/usr/include/bits/wordsize.h":"ignore_header_sys","/usr/include/stdio.h":"ignore_header_sys","/usr/include/c++/10/bits/istream.tcc":"ignore_header_sys","/usr/include/bits/setjmp.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512fintrin.h":"4ce3a9eff70ef9558590a27aa986fc0e","/usr/include/gnu/stubs-64.h":"ignore_header_sys","/usr/include/asm/errno.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/enqcmdintrin.h":"6d8136c8969e9c723c195c33da2bb768","/usr/include/c++/10/ext/type_traits.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512bwintrin.h":"64c1b4a5d84a0126158179cc8904e8bd","/usr/include/bits/types.h":"ignore_header_sys","/usr/include/c++/10/string":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vnniintrin.h":"7cd1a414c4acf95129406d966bc736b5","/usr/include/c++/10/x86_64-redhat-linux/bits/os_defines.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/__wmmintrin_aes.h":"b7829f7e5a4221574897b8e365715ced","/usr/include/c++/10/numeric":"ignore_header_sys","/usr/include/c++/10/type_traits":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/stdint.h":"d6abd57f44fe5f48dbfb05fd9adc130a","/usr/include/c++/10/x86_64-redhat-linux/bits/ctype_inline.h":"ignore_header_sys","/usr/include/c++/10/new":"ignore_header_sys","/usr/include/bits/iscanonical.h":"ignore_header_sys","/usr/include/c++/10/bits/memoryfwd.h":"ignore_header_sys","/usr/include/asm-generic/errno-base.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/__stddef_max_align_t.h":"48e8e2456f77e6cda35d245130fa7259","/usr/local/ob-clang11/lib/clang/11.1.0/include/gfniintrin.h":"e0e20e8bab44c33118878b2889b2f2c8","/usr/include/c++/10/ext/new_allocator.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512ifmaintrin.h":"f52649bdc1dc467b7eadc3e1a810a0e2","/usr/include/c++/10/bits/functexcept.h":"ignore_header_sys","/usr/include/c++/10/bits/functional_hash.h":"ignore_header_sys","/usr/include/bits/endianness.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/popcntintrin.h":"7c3573a43b1c0704aac4cb098811cbb1","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512cdintrin.h":"650ead4d3b72acc353b9327d5ae2a07e","/usr/include/c++/10/bits/random.tcc":"ignore_header_sys","/usr/include/c++/10/debug/assertions.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_iterator_base_funcs.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsavecintrin.h":"8d492bf7b081416e797300c239dba796","/usr/include/c++/10/bits/stl_vector.h":"ignore_header_sys","/usr/include/c++/10/bits/basic_string.tcc":"ignore_header_sys","/usr/include/stdint.h":"ignore_header_sys","/usr/include/bits/types/__fpos64_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/rtmintrin.h":"591e544f8d70825a4bbf807dd287584a","/usr/include/c++/10/iosfwd":"ignore_header_sys","/usr/include/c++/10/cstdlib":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vpopcntdqvlintrin.h":"6af0e4f4c55f44ba40bac27558c51b3c","/usr/include/c++/10/cstring":"ignore_header_sys","/usr/include/bits/struct_rwlock.h":"ignore_header_sys","/usr/include/c++/10/bits/range_access.h":"ignore_header_sys","/usr/include/bits/libc-header-start.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/c++locale.h":"ignore_header_sys","/usr/include/c++/10/bits/vector.tcc":"ignore_header_sys","/usr/include/bits/cpu-set.h":"ignore_header_sys","/usr/include/bits/pthreadtypes-arch.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/ctype_base.h":"ignore_header_sys","/usr/include/c++/10/bits/cxxabi_init_exception.h":"ignore_header_sys","/usr/include/c++/10/bits/concept_check.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/gthr.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_iterator.h":"ignore_header_sys","/usr/include/bits/timex.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/waitpkgintrin.h":"2d1c4c5484fb9ec3a2f974b84ccead3c","/usr/include/bits/errno.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/shaintrin.h":"dd1634de945b1ffc8c6b7f39fa8a60c8","/usr/include/bits/select.h":"ignore_header_sys","/usr/include/wctype.h":"ignore_header_sys","/usr/include/bits/mathcalls.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vbmiintrin.h":"54a67d8ab20b9961e36a3fe16b875d4b","[GIT_TOP_DIR]/src/impl/FhtKacRotator.h":"f2f44cb0ba5dc218fc37736f2bab2192","/usr/local/ob-clang11/lib/clang/11.1.0/include/cetintrin.h":"30568779db4d995828cfd0dc8ab749f3","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx2intrin.h":"b787b869cf3250697b509a53b8f84261","/usr/local/ob-clang11/lib/clang/11.1.0/include/rdseedintrin.h":"d5c4d6f9ca83aa6d76891aa467a9c442","/usr/include/bits/waitflags.h":"ignore_header_sys","/usr/include/stdc-predef.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_construct.h":"ignore_header_sys","/usr/include/bits/waitstatus.h":"ignore_header_sys","/usr/include/c++/10/bits/ostream_insert.h":"ignore_header_sys","/usr/include/c++/10/bits/exception.h":"ignore_header_sys","/usr/include/linux/errno.h":"ignore_header_sys","/usr/include/bits/flt-eval-method.h":"ignore_header_sys","/usr/include/c++/10/bits/basic_string.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/amxintrin.h":"df04c665cb8533b77392c57a15d0c13e","/usr/local/ob-clang11/lib/clang/11.1.0/include/stddef.h":"2499dd2361b915724b073282bea3a7bc","/usr/local/ob-clang11/lib/clang/11.1.0/include/xtestintrin.h":"ddbb320bafef81c16f4db301b5d692b4","/usr/include/c++/10/ext/alloc_traits.h":"ignore_header_sys","/usr/include/sched.h":"ignore_header_sys","/usr/include/bits/pthreadtypes.h":"ignore_header_sys","/usr/include/c++/10/bits/random.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512pfintrin.h":"4f558d52a120f2dbc17724370f698f70","/usr/local/ob-clang11/lib/clang/11.1.0/include/sgxintrin.h":"1d380dfee68686a7fa21e5c5888eaf05","/usr/local/ob-clang11/lib/clang/11.1.0/include/fxsrintrin.h":"2288062b986bd0a526c32df2bd2e2c7b","/usr/local/ob-clang11/lib/clang/11.1.0/include/mm_malloc.h":"ed68cf68a5b4db09df709fc93a5e9b12","/usr/local/ob-clang11/lib/clang/11.1.0/include/fmaintrin.h":"e5555b944d57763068cff3823905dcda","/usr/include/bits/mathcalls-narrow.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/bmiintrin.h":"30db6d08581335daa785b893e982ec21","/usr/include/bits/floatn-common.h":"ignore_header_sys","/usr/include/asm-generic/errno.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/gthr-default.h":"ignore_header_sys","/usr/include/c++/10/concepts":"ignore_header_sys","/usr/include/bits/wctype-wchar.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512dqintrin.h":"0a5f59d3a1b4c24596a35fc4d831362d","/usr/include/bits/timesize.h":"ignore_header_sys","/usr/include/bits/types/clock_t.h":"ignore_header_sys","/usr/include/bits/types/locale_t.h":"ignore_header_sys","/usr/include/strings.h":"ignore_header_sys","/usr/include/bits/types/__FILE.h":"ignore_header_sys","/usr/include/c++/10/bits/int_limits.h":"ignore_header_sys","/usr/include/bits/types/struct_itimerspec.h":"ignore_header_sys","/usr/include/c++/10/backward/binders.h":"ignore_header_sys","/usr/include/c++/10/typeinfo":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/c++allocator.h":"ignore_header_sys","/usr/include/c++/10/bits/predefined_ops.h":"ignore_header_sys","/usr/include/bits/time.h":"ignore_header_sys","/usr/include/bits/types/error_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/ptwriteintrin.h":"d07b5c84c015bb93867eab402d31ebca","/usr/include/c++/10/bits/stringfwd.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/cpu_defines.h":"ignore_header_sys","/usr/include/c++/10/bits/alloc_traits.h":"ignore_header_sys","/usr/include/c++/10/ext/string_conversions.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/serializeintrin.h":"9c34b27612aea430b36983691b4efe29","[GIT_TOP_DIR]/src/logger.h":"bc3e03e770b051e6cadc16e5f96c170f","/usr/include/c++/10/bits/ostream.tcc":"ignore_header_sys","/usr/include/c++/10/limits":"ignore_header_sys","/usr/include/c++/10/bits/cxxabi_forced.h":"ignore_header_sys","/usr/include/c++/10/ext/atomicity.h":"ignore_header_sys","/usr/include/wchar.h":"ignore_header_sys","/usr/include/c++/10/ext/numeric_traits.h":"ignore_header_sys","/usr/include/c++/10/ostream":"ignore_header_sys","/usr/include/endian.h":"ignore_header_sys","/usr/include/bits/types/sigset_t.h":"ignore_header_sys","/usr/include/c++/10/clocale":"ignore_header_sys","/usr/include/c++/10/bits/nested_exception.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsaveoptintrin.h":"30a5b7413ecc5157d3c788a4fc5f30f7","/usr/local/ob-clang11/lib/clang/11.1.0/include/invpcidintrin.h":"ff85318ef7dbac300480b3249673816b","/usr/include/c++/10/cwchar":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/atomic_word.h":"ignore_header_sys","/usr/include/pthread.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/stdarg.h":"4de3cbd931b589d291e5c39387aecf82","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsaveintrin.h":"bf0d37fbd9112292164e41d157229261","/usr/local/ob-clang11/lib/clang/11.1.0/include/f16cintrin.h":"e1d777f3170634f5a307f86472b0fb57","/usr/include/c++/10/cwctype":"ignore_header_sys","/usr/include/bits/types/clockid_t.h":"ignore_header_sys","/usr/include/c++/10/bits/basic_ios.h":"ignore_header_sys","/usr/include/c++/10/bits/locale_classes.tcc":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/tmmintrin.h":"d905b09b29cb36b015d25405cfbf8e5a","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlvnniintrin.h":"64180305ff9c6bfad63ee41cbd66093d","/usr/local/ob-clang11/lib/clang/11.1.0/include/pmmintrin.h":"3157414820008b3ad90647450dcf904b","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlcdintrin.h":"6f8f18f6874f9c1a5f19b1c55e3c0cb5","/usr/include/c++/10/stdexcept":"ignore_header_sys","/usr/include/c++/10/bits/exception_ptr.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/__wmmintrin_pclmul.h":"7cbd2793e783b90f193cebfa3675e55a","/usr/include/c++/10/random":"ignore_header_sys","/usr/include/c++/10/stdlib.h":"ignore_header_sys","/usr/include/bits/stdint-uintn.h":"ignore_header_sys","/usr/include/bits/types/struct_sched_param.h":"ignore_header_sys","/usr/include/c++/10/bits/range_cmp.h":"ignore_header_sys","/usr/include/gnu/stubs.h":"ignore_header_sys","/usr/include/c++/10/cerrno":"ignore_header_sys","/usr/include/bits/mathcalls-helper-functions.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/clflushoptintrin.h":"2a269418efbdd932851586bbfa8726a3","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlbwintrin.h":"449273cd1de2c72197e012c804a8c056","/usr/local/ob-clang11/lib/clang/11.1.0/include/tsxldtrkintrin.h":"317e5aa78e58a9618f04d7532a36a253","/usr/include/c++/10/exception":"ignore_header_sys","/usr/include/c++/10/bits/stl_function.h":"ignore_header_sys","/usr/include/bits/locale.h":"ignore_header_sys","/usr/include/c++/10/initializer_list":"ignore_header_sys","/usr/include/bits/wchar.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/error_constants.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vp2intersectintrin.h":"7f431ec4ddce958af8a75cc7a71b3a57","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlbitalgintrin.h":"50b7714a556eb5e52999b7dd18de7d4e","/usr/include/c++/10/cctype":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlbf16intrin.h":"da6bea340165f020a9142ab63fc1aecf","/usr/include/c++/10/bits/std_abs.h":"ignore_header_sys","/usr/include/bits/math-vector.h":"ignore_header_sys","/usr/include/bits/stdint-intn.h":"ignore_header_sys","/usr/include/bits/libm-simd-decl-stubs.h":"ignore_header_sys","/usr/include/c++/10/cmath":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlvbmi2intrin.h":"d09f75ea16d8f1302331016743dca38c","/usr/include/bits/types/struct_tm.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_uninitialized.h":"ignore_header_sys","/usr/include/c++/10/debug/debug.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/opt_random.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/cldemoteintrin.h":"6c282c2bb0cc618292bd47b69fc27641","/usr/include/c++/10/streambuf":"ignore_header_sys","/usr/include/c++/10/bits/exception_defines.h":"ignore_header_sys","/usr/include/bits/types/struct_timespec.h":"ignore_header_sys","/usr/include/bits/thread-shared-types.h":"ignore_header_sys","/usr/include/c++/10/bits/locale_facets.tcc":"ignore_header_sys","/usr/include/locale.h":"ignore_header_sys","/usr/include/bits/types/struct_timeval.h":"ignore_header_sys","/usr/include/c++/10/system_error":"ignore_header_sys","/usr/include/bits/typesizes.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/adxintrin.h":"6828d907a1be13a942ad62e7b4db6870","/usr/include/c++/10/bits/streambuf_iterator.h":"ignore_header_sys","/usr/include/bits/long-double.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512ifmavlintrin.h":"c3576813a57918c2734a8acf08e69b33","/usr/include/c++/10/bits/ios_base.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/bmi2intrin.h":"5421c86f7749d5b931a602c4c605aa59","/usr/include/c++/10/iostream":"ignore_header_sys","/usr/include/c++/10/bits/stl_iterator_base_types.h":"ignore_header_sys","/usr/include/c++/10/bits/hash_bytes.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlvp2intersectintrin.h":"e127597621c37f450875cdc70e9df509","/usr/include/bits/types/time_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/clwbintrin.h":"bc581022bcc5037ab8b06c9c95e15663","/usr/local/ob-clang11/lib/clang/11.1.0/include/mmintrin.h":"1de54663046d007c7b16e4f603262ad8","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vldqintrin.h":"8229c4851f85c40c1f62097dc173e420","/usr/local/ob-clang11/lib/clang/11.1.0/include/pkuintrin.h":"750db2cf252eb52d8e60ad6fffb80c8a","/usr/include/bits/stdio_lim.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/wbnoinvdintrin.h":"8d0e049f9ce4bbcc291c21fe7bc7a508","/usr/include/c++/10/bits/ptr_traits.h":"ignore_header_sys","/usr/include/sys/select.h":"ignore_header_sys","/usr/include/bits/floatn.h":"ignore_header_sys","/usr/include/c++/10/cstdio":"ignore_header_sys","/usr/include/alloca.h":"ignore_header_sys","/usr/include/bits/struct_mutex.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/movdirintrin.h":"4566737781d765bba033913dedfcaa83","/usr/include/c++/10/bits/localefwd.h":"ignore_header_sys","/usr/include/errno.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/pconfigintrin.h":"9da09fbffb9a78b478ac0ce6d43271d7","/usr/include/c++/10/bits/postypes.h":"ignore_header_sys","[GIT_TOP_DIR]/src/impl/matrix_rotator.h":"201b9e418b243731f34df19414d16ccb","/usr/include/stdlib.h":"ignore_header_sys","/usr/include/bits/types/FILE.h":"ignore_header_sys","/usr/include/bits/stdlib-float.h":"ignore_header_sys"},"includes":[{"line":12,"resolved_path":"/usr/local/ob-clang11/lib/clang/11.1.0/include/mmintrin.h"},{"line":26,"resolved_path":"/usr/local/ob-clang11/lib/clang/11.1.0/include/mm_malloc.h"},{"line":3004,"resolved_path":"/usr/local/ob-clang11/lib/clang/11.1.0/include/emmintrin.h"}],"skipped_ranges":[],"usr2func":[{"usr":144245987262007653,"detailed_name":"static inline __m128 _mm_cmpge_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":12,"spell":"677:1-677:13|676:1-680:2|2|-1","hover":"","comments":"Compares each of the corresponding 32-bit float values of the\n   128-bit vectors of [4 x float] to determine if the values in the first\n   operand are greater than or equal to those in the second operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPLEPS / CMPLEPS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\param __b\n   A 128-bit vector of [4 x float].\n\\returns A 128-bit vector of [4 x float] containing the comparison results.","bases":[],"vars":[8242935267509526723,7022922123539809201],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":185873693486239686,"detailed_name":"static inline __m64 _mm_unpacklo_pi8(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":16,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":[],"derived":[],"uses":["2794:9-2794:25|16420|-1","2818:9-2818:25|16420|-1"]},{"usr":536520566697921142,"detailed_name":"static inline __m128 _mm_and_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":10,"spell":"404:1-404:11|403:1-407:2|2|-1","hover":"","comments":"Performs a bitwise AND of two 128-bit vectors of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VANDPS / ANDPS </c> instructions.\n\n\\param __a\n   A 128-bit vector containing one of the source operands.\n\\param __b\n   A 128-bit vector containing one of the source operands.\n\\returns A 128-bit vector of [4 x float] containing the bitwise AND of the\n   values between both operands.","bases":[],"vars":[7265974332853717377,2540803199646741375],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":975199492151468350,"detailed_name":"static inline __m64 _mm_cvtt_ps2pi(__m128 __a)","qual_name_offset":20,"short_name_offset":20,"short_name_size":14,"spell":"1468:1-1468:15|1467:1-1471:2|2|-1","hover":"","comments":"Converts two low-order float values in a 128-bit vector of [4 x\n   float] into a 64-bit vector of [2 x i32], truncating the result when it\n   is inexact.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> CVTTPS2PI </c> instruction.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\returns A 64-bit integer vector containing the converted values.","bases":[],"vars":[807958812196795676],"callees":["1470:10-1470:25|1768669383506842845|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1034843073460038072,"detailed_name":"static inline __m64 _mm_cvtps_pi32(__m128 __a)","qual_name_offset":20,"short_name_offset":20,"short_name_size":14,"spell":"1358:1-1358:15|1357:1-1361:2|2|-1","hover":"","comments":"Converts two low-order float values in a 128-bit vector of\n   [4 x float] into a 64-bit vector of [2 x i32].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> CVTPS2PI </c> instruction.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\returns A 64-bit integer vector containing the converted values.","bases":[],"vars":[17844346939842094004],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["1376:10-1376:24|16420|-1","2873:9-2873:23|16420|-1","2875:9-2875:23|16420|-1"]},{"usr":1117835913993572865,"detailed_name":"static inline __m64 _mm_avg_pu16(__m64 __a, __m64 __b)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"2426:1-2426:13|2425:1-2429:2|2|-1","hover":"","comments":"Computes the rounded averages of the packed unsigned 16-bit integer\n   values and writes the averages to the corresponding bits in the\n   destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PAVGW </c> instruction.\n\n\\param __a\n   A 64-bit integer vector containing one of the source operands.\n\\param __b\n   A 64-bit integer vector containing one of the source operands.\n\\returns A 64-bit integer vector containing the averages of both operands.","bases":[],"vars":[7512976729805946340,9092086189855237100],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1159777935870344166,"detailed_name":"static inline int _mm_movemask_ps(__m128 __a)","qual_name_offset":18,"short_name_offset":18,"short_name_size":15,"spell":"2924:1-2924:16|2923:1-2927:2|2|-1","hover":"","comments":"Extracts the sign bits from each single-precision floating-point\n   element of a 128-bit floating-point vector of [4 x float] and returns the\n   sign bits in bits [0:3] of the result. Bits [31:4] of the result are set\n   to zero.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVMSKPS / MOVMSKPS </c> instruction.\n\n\\param __a\n   A 128-bit floating-point vector of [4 x float].\n\\returns A 32-bit integer value. Bits [3:0] contain the sign bits from each\n   single-precision floating-point element of the parameter. Bits [31:4] are\n   set to zero.","bases":[],"vars":[5910358512237868612],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1255947856129024486,"detailed_name":"static inline __m128 _mm_cmpunord_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":15,"spell":"992:1-992:16|991:1-995:2|2|-1","hover":"","comments":"Compares each of the corresponding 32-bit float values of the\n   128-bit vectors of [4 x float] to determine if the values in the first\n   operand are unordered with respect to those in the second operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPUNORDPS / CMPUNORDPS </c>\n  instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\param __b\n   A 128-bit vector of [4 x float].\n\\returns A 128-bit vector of [4 x float] containing the comparison results.","bases":[],"vars":[15872562081860688394,16042413496034369936],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1325030659435900544,"detailed_name":"static inline void _mm_storel_pi(__m64 *__p, __m128 __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":13,"spell":"1941:1-1941:14|1940:1-1948:2|2|-1","hover":"","comments":"Stores the lower 64 bits of a 128-bit vector of [4 x float] to a\n    memory location.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVLPS / MOVLPS </c> instruction.\n\n\\param __p\n   A pointer to a memory location that will receive the float values.\n\\param __a\n   A 128-bit vector of [4 x float] containing the values to be stored.","bases":[],"vars":[8279305112788558143,6870143985318432705],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1333009515901968066,"detailed_name":"static inline __m128 _mm_sub_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":10,"spell":"113:1-113:11|112:1-116:2|2|-1","hover":"","comments":"Subtracts each of the values of the second operand from the first\n   operand, both of which are 128-bit vectors of [4 x float] and returns\n   the results of the subtraction.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VSUBPS / SUBPS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing the minuend.\n\\param __b\n   A 128-bit vector of [4 x float] containing the subtrahend.\n\\returns A 128-bit vector of [4 x float] containing the differences between\n   both operands.","bases":[],"vars":[4839252061152861137,2954396844382632468],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1545283015620889834,"detailed_name":"static inline void _mm_store1_ps(float *__p, __m128 __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":13,"spell":"2023:1-2023:14|2022:1-2027:2|2|-1","hover":"","comments":"Stores the lower 32 bits of a 128-bit vector of [4 x float] into\n   four contiguous elements in an aligned memory location.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to <c> VMOVAPS / MOVAPS + shuffling </c>\n   instruction.\n\n\\param __p\n   A pointer to a 128-bit memory location.\n\\param __a\n   A 128-bit vector of [4 x float] whose lower 32 bits are stored to each\n   of the four contiguous elements pointed by \\a __p.","bases":[],"vars":[15143372126820725757,1579206707381775747],"callees":["2026:3-2026:15|2505770692726653663|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["2045:3-2045:16|16420|-1"]},{"usr":1670518992304204724,"detailed_name":"static inline __m128 _mm_cmpngt_ss(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"833:1-833:14|832:1-838:2|2|-1","hover":"","comments":"Compares two 32-bit float values in the low-order bits of both\n   operands to determine if the value in the first operand is not greater\n   than the corresponding value in the second operand and returns the\n   result of the comparison in the low-order bits of a vector of\n   [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPNLTSS / CMPNLTSS </c>\n  instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\returns A 128-bit vector of [4 x float] containing the comparison results\n   in the low-order bits.","bases":[],"vars":[6205088598352667165,16632316161275815143],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1717428866158681583,"detailed_name":"static inline __m64 _mm_max_pu8(__m64 __a, __m64 __b)","qual_name_offset":20,"short_name_offset":20,"short_name_size":11,"spell":"2250:1-2250:12|2249:1-2253:2|2|-1","hover":"","comments":"Compares each of the corresponding packed 8-bit unsigned integer\n   values of the 64-bit integer vectors, and writes the greater value to the\n   corresponding bits in the destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PMAXUB </c> instruction.\n\n\\param __a\n   A 64-bit integer vector containing one of the source operands.\n\\param __b\n   A 64-bit integer vector containing one of the source operands.\n\\returns A 64-bit integer vector containing the comparison results.","bases":[],"vars":[914041537216610530,10034600514275767655],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1722034042433665637,"detailed_name":"static inline __m128 _mm_setr_ps(float __z, float __y, float __x, float __w)","qual_name_offset":21,"short_name_offset":21,"short_name_size":11,"spell":"1888:1-1888:12|1887:1-1891:2|2|-1","hover":"","comments":"Constructs a 128-bit floating-point vector of [4 x float],\n   initialized in reverse order with the specified 32-bit single-precision\n   float-point values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __z\n   A single-precision floating-point value used to initialize bits [31:0]\n   of the result.\n\\param __y\n   A single-precision floating-point value used to initialize bits [63:32]\n   of the result.\n\\param __x\n   A single-precision floating-point value used to initialize bits [95:64]\n   of the result.\n\\param __w\n   A single-precision floating-point value used to initialize bits [127:96]\n   of the result.\n\\returns An initialized 128-bit floating-point vector of [4 x float].","bases":[],"vars":[10416971859981937944,7865450177671027781,17633085183157285041,13260628061323705666],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1768669383506842845,"detailed_name":"static inline __m64 _mm_cvttps_pi32(__m128 __a)","qual_name_offset":20,"short_name_offset":20,"short_name_size":15,"spell":"1451:1-1451:16|1450:1-1454:2|2|-1","hover":"","comments":"Converts two low-order float values in a 128-bit vector of\n   [4 x float] into a 64-bit vector of [2 x i32], truncating the result\n   when it is inexact.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> CVTTPS2PI / VTTPS2PI </c>\n  instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\returns A 64-bit integer vector containing the converted values.","bases":[],"vars":[12566703206160841318],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["1470:10-1470:25|16420|-1"]},{"usr":2085305140936889061,"detailed_name":"static inline __m128 _mm_set1_ps(float __w)","qual_name_offset":21,"short_name_offset":21,"short_name_size":11,"spell":"1814:1-1814:12|1813:1-1817:2|2|-1","hover":"","comments":"Constructs a 128-bit floating-point vector of [4 x float], with each\n   of the four single-precision floating-point vector elements set to the\n   specified single-precision floating-point value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPERMILPS / PERMILPS </c> instruction.\n\n\\param __w\n   A single-precision floating-point value used to initialize each vector\n   element of the result.\n\\returns An initialized 128-bit floating-point vector of [4 x float].","bases":[],"vars":[12839793558909395694],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["1835:12-1835:23|16420|-1"]},{"usr":2136721542637909740,"detailed_name":"static inline __m128 _mm_cmpnle_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"808:1-808:14|807:1-811:2|2|-1","hover":"","comments":"Compares each of the corresponding 32-bit float values of the\n   128-bit vectors of [4 x float] to determine if the values in the first\n   operand are not less than or equal to those in the second operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPNLEPS / CMPNLEPS </c>\n  instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\param __b\n   A 128-bit vector of [4 x float].\n\\returns A 128-bit vector of [4 x float] containing the comparison results.","bases":[],"vars":[14737310073004639928,11742017573037723121],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2137186952274529022,"detailed_name":"static inline __m128 _mm_loadr_ps(const float *__p)","qual_name_offset":21,"short_name_offset":21,"short_name_size":12,"spell":"1762:1-1762:13|1761:1-1766:2|2|-1","hover":"","comments":"Loads four packed float values, in reverse order, from an aligned\n   memory location to 32-bit elements in a 128-bit vector of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVAPS / MOVAPS + shuffling </c>\n   instruction.\n\n\\param __p\n   A pointer to a 128-bit memory location. The address of the memory\n   location has to be 128-bit aligned.\n\\returns A 128-bit vector of [4 x float] containing the moved values, loaded\n   in reverse order.","bases":[],"vars":[4209949898908728928,14463889567471092782],"callees":["1764:16-1764:27|16585704699695186264|3|16420","1764:16-1764:27|16585704699695186264|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2189396577697793452,"detailed_name":"static inline __m128 _mm_div_ss(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":10,"spell":"177:1-177:11|176:1-181:2|2|-1","hover":"","comments":"Divides the value in the low-order 32 bits of the first operand by\n   the corresponding value in the second operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VDIVSS / DIVSS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing the dividend. The lower 32\n   bits of this operand are used in the calculation.\n\\param __b\n   A 128-bit vector of [4 x float] containing the divisor. The lower 32 bits\n   of this operand are used in the calculation.\n\\returns A 128-bit vector of [4 x float] containing the quotients of the\n   lower 32 bits of both operands. The upper 96 bits are copied from the\n   upper 96 bits of the first source operand.","bases":[],"vars":[11450751798111934518,13753576347281232591],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2276102994657586564,"detailed_name":"static inline void _mm_store_ps1(float *__p, __m128 __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":13,"spell":"2043:1-2043:14|2042:1-2046:2|2|-1","hover":"","comments":"Stores the lower 32 bits of a 128-bit vector of [4 x float] into\n   four contiguous elements in an aligned memory location.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to <c> VMOVAPS / MOVAPS + shuffling </c>\n   instruction.\n\n\\param __p\n   A pointer to a 128-bit memory location.\n\\param __a\n   A 128-bit vector of [4 x float] whose lower 32 bits are stored to each\n   of the four contiguous elements pointed by \\a __p.","bases":[],"vars":[6729903690428959420,3445838285564834386],"callees":["2045:3-2045:16|1545283015620889834|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2505770692726653663,"detailed_name":"static inline void _mm_store_ps(float *__p, __m128 __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":12,"spell":"2004:1-2004:13|2003:1-2007:2|2|-1","hover":"","comments":"Stores a 128-bit vector of [4 x float] into an aligned memory\n   location.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVAPS / MOVAPS </c> instruction.\n\n\\param __p\n   A pointer to a 128-bit memory location. The address of the memory\n   location has to be 16-byte aligned.\n\\param __a\n   A 128-bit vector of [4 x float] containing the values to be stored.","bases":[],"vars":[11789133289833376031,8737033205253210030],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["2026:3-2026:15|16420|-1","2065:3-2065:15|16420|-1"]},{"usr":2877335125640494578,"detailed_name":"static inline __m128 _mm_cmpnle_ss(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"788:1-788:14|787:1-791:2|2|-1","hover":"","comments":"Compares two 32-bit float values in the low-order bits of both\n   operands to determine if the value in the first operand is not less than\n   or equal to the corresponding value in the second operand and returns\n   the result of the comparison in the low-order bits of a vector of\n   [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPNLESS / CMPNLESS </c>\n  instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\returns A 128-bit vector of [4 x float] containing the comparison results\n   in the low-order bits.","bases":[],"vars":[13843472374385089409,8575064807671988155],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3083183657917778751,"detailed_name":"static inline __m128 _mm_cvtpu8_ps(__m64 __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"2813:1-2813:14|2812:1-2821:2|2|-1","hover":"","comments":"Converts the lower four unsigned 8-bit integer values from a 64-bit\n   vector of [8 x u8] into a 128-bit vector of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> CVTPI2PS + COMPOSITE </c> instruction.\n\n\\param __a\n   A 64-bit vector of unsigned 8-bit integer values. The elements of the\n   destination are copied from the corresponding lower 4 elements in this\n   operand.\n\\returns A 128-bit vector of [4 x float] containing the copied and converted\n   values from the source operand.","bases":[],"vars":[17359452771803778081,8859117749554266394],"callees":["2817:9-2817:25|5641900611694457481|3|16420","2818:9-2818:25|185873693486239686|3|16420","2820:10-2820:24|6319061095484485109|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3261759218519702316,"detailed_name":"static inline __m128 _mm_or_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":9,"spell":"444:1-444:10|443:1-447:2|2|-1","hover":"","comments":"Performs a bitwise OR of two 128-bit vectors of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VORPS / ORPS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing one of the source operands.\n\\param __b\n   A 128-bit vector of [4 x float] containing one of the source operands.\n\\returns A 128-bit vector of [4 x float] containing the bitwise OR of the\n   values between both operands.","bases":[],"vars":[15894447760381880389,5016911898339359614],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3368461135461286775,"detailed_name":"static inline __m128 _mm_loadu_ps(const float *__p)","qual_name_offset":21,"short_name_offset":21,"short_name_size":12,"spell":"1740:1-1740:13|1739:1-1746:2|2|-1","hover":"","comments":"Loads a 128-bit floating-point vector of [4 x float] from an\n   unaligned memory location.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVUPS / MOVUPS </c> instruction.\n\n\\param __p\n   A pointer to a 128-bit memory location. The address of the memory\n   location does not have to be aligned.\n\\returns A 128-bit vector of [4 x float] containing the loaded values.","bases":[],"vars":[1410988936468200186],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3488532318397109885,"detailed_name":"extern void _mm_sfence() noexcept","qual_name_offset":12,"short_name_offset":12,"short_name_size":10,"hover":"","comments":"Forces strong memory ordering (serialization) between store\n   instructions preceding this instruction and store instructions following\n   this instruction, ensuring the system completes all previous stores\n   before executing subsequent stores.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> SFENCE </c> instruction.","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":["2157:6-2157:16|2157:1-2157:22|1|-1"],"derived":[],"uses":[]},{"usr":3502591990852854764,"detailed_name":"static inline __m128 _mm_movelh_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"2711:1-2711:14|2710:1-2714:2|2|-1","hover":"","comments":"Constructs a 128-bit floating-point vector of [4 x float]. The lower\n   64 bits are set to the lower 64 bits of the first parameter. The upper\n   64 bits are set to the lower 64 bits of the second parameter.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VUNPCKLPD / UNPCKLPD </c> instruction.\n\n\\param __a\n   A 128-bit floating-point vector of [4 x float]. The lower 64 bits are\n   written to the lower 64 bits of the result.\n\\param __b\n   A 128-bit floating-point vector of [4 x float]. The lower 64 bits are\n   written to the upper 64 bits of the result.\n\\returns A 128-bit floating-point vector of [4 x float].","bases":[],"vars":[6719809832419407483,11565508968446442335],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["2739:9-2739:22|16420|-1","2768:9-2768:22|16420|-1","2846:9-2846:22|16420|-1"]},{"usr":3724390960443719546,"detailed_name":"static inline void _mm_storer_ps(float *__p, __m128 __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":13,"spell":"2062:1-2062:14|2061:1-2066:2|2|-1","hover":"","comments":"Stores float values from a 128-bit vector of [4 x float] to an\n   aligned memory location in reverse order.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVAPS / MOVAPS + shuffling </c>\n   instruction.\n\n\\param __p\n   A pointer to a 128-bit memory location. The address of the memory\n   location has to be 128-bit aligned.\n\\param __a\n   A 128-bit vector of [4 x float] containing the values to be stored.","bases":[],"vars":[17163202913409695733,13866852334359291837],"callees":["2065:3-2065:15|2505770692726653663|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3755456971524714829,"detailed_name":"static inline __m128 _mm_max_ss(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":10,"spell":"367:1-367:11|366:1-370:2|2|-1","hover":"","comments":"Compares two 32-bit float values in the low-order bits of both\n   operands and returns the greater value in the low-order bits of a 128-bit\n   vector of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMAXSS / MAXSS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\returns A 128-bit vector of [4 x float] whose lower 32 bits contain the\n   maximum value between both operands. The upper 96 bits are copied from\n   the upper 96 bits of the first source operand.","bases":[],"vars":[10454107471466202253,2381550919918630842],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3802391542557961577,"detailed_name":"static inline __m64 _mm_sad_pu8(__m64 __a, __m64 __b)","qual_name_offset":20,"short_name_offset":20,"short_name_size":11,"spell":"2448:1-2448:12|2447:1-2451:2|2|-1","hover":"","comments":"Subtracts the corresponding 8-bit unsigned integer values of the two\n   64-bit vector operands and computes the absolute value for each of the\n   difference. Then sum of the 8 absolute differences is written to the\n   bits [15:0] of the destination; the remaining bits [63:16] are cleared.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PSADBW </c> instruction.\n\n\\param __a\n   A 64-bit integer vector containing one of the source operands.\n\\param __b\n   A 64-bit integer vector containing one of the source operands.\n\\returns A 64-bit integer vector whose lower 16 bits contain the sums of the\n   sets of absolute differences between both operands. The upper bits are\n   cleared.","bases":[],"vars":[6205970716789075895,5161263089527970132],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3907199731996902070,"detailed_name":"static inline __m64 _mm_cmpgt_pi16(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":14,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":[],"derived":[],"uses":["2735:9-2735:23|16420|-1"]},{"usr":4162784153883923497,"detailed_name":"static inline __m128 _mm_cvtpu16_ps(__m64 __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":14,"spell":"2759:1-2759:15|2758:1-2773:2|2|-1","hover":"","comments":"Converts a 64-bit vector of 16-bit unsigned integer values into a\n   128-bit vector of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> CVTPI2PS + COMPOSITE </c> instruction.\n\n\\param __a\n   A 64-bit vector of 16-bit unsigned integer values. The elements of the\n   destination are copied from the corresponding elements in this operand.\n\\returns A 128-bit vector of [4 x float] containing the copied and converted\n   values from the operand.","bases":[],"vars":[6771472525602521469,9421317078949697557,16619094008656590223,8832425981629827130],"callees":["2764:9-2764:25|5641900611694457481|3|16420","2765:9-2765:26|10911929593521044614|3|16420","2766:9-2766:23|16504083108470122509|3|16420","2767:9-2767:23|11299920269772280828|3|16420","2768:9-2768:22|3502591990852854764|3|16420","2769:9-2769:26|9235587841370172812|3|16420","2770:9-2770:23|11299920269772280828|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4268531233111544064,"detailed_name":"static inline int _mm_comieq_ss(__m128 __a, __m128 __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":13,"spell":"1016:1-1016:14|1015:1-1019:2|2|-1","hover":"","comments":"Compares two 32-bit float values in the low-order bits of both\n   operands for equality and returns the result of the comparison.\n\n   If either of the two lower 32-bit values is NaN, 0 is returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCOMISS / COMISS </c>\n  instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the comparison.\n\\returns An integer containing the comparison results. If either of the\n   two lower 32-bit values is NaN, 0 is returned.","bases":[],"vars":[4847900194950855134,1881175984715072504],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4324916506158259881,"detailed_name":"static inline __m128 _mm_mul_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":10,"spell":"155:1-155:11|154:1-158:2|2|-1","hover":"","comments":"Multiplies two 128-bit vectors of [4 x float] and returns the\n   results of the multiplication.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMULPS / MULPS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing one of the source operands.\n\\param __b\n   A 128-bit vector of [4 x float] containing one of the source operands.\n\\returns A 128-bit vector of [4 x float] containing the products of both\n   operands.","bases":[],"vars":[934804397509920961,4252862690543919986],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4355754506918534044,"detailed_name":"static inline void _mm_storeu_ps(float *__p, __m128 __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":13,"spell":"1983:1-1983:14|1982:1-1989:2|2|-1","hover":"","comments":"Stores a 128-bit vector of [4 x float] to an unaligned memory\n   location.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVUPS / MOVUPS </c> instruction.\n\n\\param __p\n   A pointer to a 128-bit memory location. The address of the memory\n   location does not have to be aligned.\n\\param __a\n   A 128-bit vector of [4 x float] containing the values to be stored.","bases":[],"vars":[505826242233458443,4482623433660672874],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4607156451732800250,"detailed_name":"static inline __m128 _mm_cvt_pi2ps(__m128 __a, __m64 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"1586:1-1586:14|1585:1-1589:2|2|-1","hover":"","comments":"Converts two elements of a 64-bit vector of [2 x i32] into two\n   floating point values and writes them to the lower 64-bits of the\n   destination. The remaining higher order elements of the destination are\n   copied from the corresponding elements in the first operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> CVTPI2PS </c> instruction.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\param __b\n   A 64-bit vector of [2 x i32]. The elements in this vector are converted\n   and written to the corresponding low-order elements in the destination.\n\\returns A 128-bit vector of [4 x float] whose lower 64 bits contain the\n   converted value from the second operand. The upper 64 bits are copied\n   from the upper 64 bits of the first operand.","bases":[],"vars":[13224989009315029686,7666180581496407116],"callees":["1588:10-1588:24|11299920269772280828|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4861025220353997434,"detailed_name":"static inline int _mm_cvttss_si32(__m128 __a)","qual_name_offset":18,"short_name_offset":18,"short_name_size":15,"spell":"1393:1-1393:16|1392:1-1396:2|2|-1","hover":"","comments":"Converts a float value contained in the lower 32 bits of a vector of\n   [4 x float] into a 32-bit integer, truncating the result when it is\n   inexact.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTTSS2SI / CVTTSS2SI </c>\n  instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the conversion.\n\\returns A 32-bit integer containing the converted value.","bases":[],"vars":[3830078565325559415],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["1414:10-1414:25|16420|-1"]},{"usr":5641900611694457481,"detailed_name":"static inline __m64 _mm_setzero_si64()","qual_name_offset":20,"short_name_offset":20,"short_name_size":16,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":[],"derived":[],"uses":["2734:9-2734:25|16420|-1","2764:9-2764:25|16420|-1","2792:9-2792:25|16420|-1","2817:9-2817:25|16420|-1","2904:9-2904:25|16420|-1"]},{"usr":6007687074841581813,"detailed_name":"static inline __m128 _mm_cmple_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":12,"spell":"588:1-588:13|587:1-591:2|2|-1","hover":"","comments":"Compares each of the corresponding 32-bit float values of the\n   128-bit vectors of [4 x float] to determine if the values in the first\n   operand are less than or equal to those in the second operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPLEPS / CMPLEPS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\param __b\n   A 128-bit vector of [4 x float].\n\\returns A 128-bit vector of [4 x float] containing the comparison results.","bases":[],"vars":[5366674967953792174,1278099899392436351],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6127166786962890077,"detailed_name":"static inline __m128 _mm_load_ss(const float *__p)","qual_name_offset":21,"short_name_offset":21,"short_name_size":11,"spell":"1678:1-1678:12|1677:1-1685:2|2|-1","hover":"","comments":"Constructs a 128-bit floating-point vector of [4 x float]. The lower\n   32 bits of the vector are initialized with the single-precision\n   floating-point value loaded from a specified memory location. The upper\n   96 bits are set to zero.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVSS / MOVSS </c> instruction.\n\n\\param __p\n   A pointer to a 32-bit memory location containing a single-precision\n   floating-point value.\n\\returns An initialized 128-bit floating-point vector of [4 x float]. The\n   lower 32 bits contain the value loaded from the memory location. The\n   upper 96 bits are set to zero.","bases":[],"vars":[5959208524750396916,7910086000676767710],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6188300169709015657,"detailed_name":"static inline __m128 _mm_rsqrt_ss(__m128 __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":12,"spell":"285:1-285:13|284:1-288:2|2|-1","hover":"","comments":"Calculates the approximate reciprocal of the square root of the value\n   stored in the low-order bits of a 128-bit vector of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VRSQRTSS / RSQRTSS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the calculation.\n\\returns A 128-bit vector of [4 x float] containing the approximate\n   reciprocal of the square root of the value in the low-order bits of the\n   operand.","bases":[],"vars":[2987250076985918061],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6319061095484485109,"detailed_name":"static inline __m128 _mm_cvtpi16_ps(__m64 __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":14,"spell":"2729:1-2729:15|2728:1-2744:2|2|-1","hover":"","comments":"Converts a 64-bit vector of [4 x i16] into a 128-bit vector of [4 x\n   float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> CVTPI2PS + COMPOSITE </c> instruction.\n\n\\param __a\n   A 64-bit vector of [4 x i16]. The elements of the destination are copied\n   from the corresponding elements in this operand.\n\\returns A 128-bit vector of [4 x float] containing the copied and converted\n   values from the operand.","bases":[],"vars":[5707283488797744711,14728664415620849954,8349630410072249348,12443736207341154523],"callees":["2734:9-2734:25|5641900611694457481|3|16420","2735:9-2735:23|3907199731996902070|3|16420","2736:9-2736:26|10911929593521044614|3|16420","2737:9-2737:23|16504083108470122509|3|16420","2738:9-2738:23|11299920269772280828|3|16420","2739:9-2739:22|3502591990852854764|3|16420","2740:9-2740:26|9235587841370172812|3|16420","2741:9-2741:23|11299920269772280828|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["2796:10-2796:24|16420|-1","2820:10-2820:24|16420|-1"]},{"usr":6354471467068173380,"detailed_name":"static inline __m128 _mm_cvtpi8_ps(__m64 __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"2788:1-2788:14|2787:1-2797:2|2|-1","hover":"","comments":"Converts the lower four 8-bit values from a 64-bit vector of [8 x i8]\n   into a 128-bit vector of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> CVTPI2PS + COMPOSITE </c> instruction.\n\n\\param __a\n   A 64-bit vector of [8 x i8]. The elements of the destination are copied\n   from the corresponding lower 4 elements in this operand.\n\\returns A 128-bit vector of [4 x float] containing the copied and converted\n   values from the operand.","bases":[],"vars":[4773281959425810022,3758225354417958743],"callees":["2792:9-2792:25|5641900611694457481|3|16420","2793:9-2793:22|13913432530391351865|3|16420","2794:9-2794:25|185873693486239686|3|16420","2796:10-2796:24|6319061095484485109|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6515638219463840827,"detailed_name":"static inline int _mm_ucomile_ss(__m128 __a, __m128 __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":14,"spell":"1210:1-1210:15|1209:1-1213:2|2|-1","hover":"","comments":"Performs an unordered comparison of two 32-bit float values using\n   the low-order bits of both operands to determine if the first operand is\n   less than or equal to the second operand and returns the result of the\n   comparison.\n\n   If either of the two lower 32-bit values is NaN, 0 is returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VUCOMISS / UCOMISS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the comparison.\n\\returns An integer containing the comparison results. If either of the two\n    lower 32-bit values is NaN, 0 is returned.","bases":[],"vars":[1797446222363442815,12475506227686358454],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6714863433802586216,"detailed_name":"static inline __m128 _mm_cvt_si2ss(__m128 __a, int __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"1513:1-1513:14|1512:1-1516:2|2|-1","hover":"","comments":"Converts a 32-bit signed integer value into a floating point value\n   and writes it to the lower 32 bits of the destination. The remaining\n   higher order elements of the destination are copied from the\n   corresponding elements in the first operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTSI2SS / CVTSI2SS </c> instruction.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\param __b\n   A 32-bit signed integer operand containing the value to be converted.\n\\returns A 128-bit vector of [4 x float] whose lower 32 bits contain the\n   converted value of the second operand. The upper 96 bits are copied from\n   the upper 96 bits of the first operand.","bases":[],"vars":[13014989013538423889,5219317217669496575],"callees":["1515:10-1515:24|9473942619869688053|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7118565775264117300,"detailed_name":"static inline __m128 _mm_div_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":10,"spell":"196:1-196:11|195:1-199:2|2|-1","hover":"","comments":"Divides two 128-bit vectors of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VDIVPS / DIVPS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing the dividend.\n\\param __b\n   A 128-bit vector of [4 x float] containing the divisor.\n\\returns A 128-bit vector of [4 x float] containing the quotients of both\n   operands.","bases":[],"vars":[6379422703669542600,18092140275123231390],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7201383085732735502,"detailed_name":"static inline __m128 _mm_cmpnge_ss(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"880:1-880:14|879:1-885:2|2|-1","hover":"","comments":"Compares two 32-bit float values in the low-order bits of both\n   operands to determine if the value in the first operand is not greater\n   than or equal to the corresponding value in the second operand and\n   returns the result of the comparison in the low-order bits of a vector\n   of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPNLESS / CMPNLESS </c>\n  instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\returns A 128-bit vector of [4 x float] containing the comparison results\n   in the low-order bits.","bases":[],"vars":[9386527020081510896,13353439283488229970],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7275804160154133205,"detailed_name":"static inline __m128 _mm_load1_ps(const float *__p)","qual_name_offset":21,"short_name_offset":21,"short_name_size":12,"spell":"1700:1-1700:13|1699:1-1707:2|2|-1","hover":"","comments":"Loads a 32-bit float value and duplicates it to all four vector\n   elements of a 128-bit vector of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VBROADCASTSS / MOVSS + shuffling </c>\n   instruction.\n\n\\param __p\n   A pointer to a float value to be loaded and duplicated.\n\\returns A 128-bit vector of [4 x float] containing the loaded and\n   duplicated values.","bases":[],"vars":[15381320600864862630,7435794011640919976],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7385364714556989546,"detailed_name":"static inline __m128 _mm_cmpneq_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"719:1-719:14|718:1-722:2|2|-1","hover":"","comments":"Compares each of the corresponding 32-bit float values of the\n   128-bit vectors of [4 x float] for inequality.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPNEQPS / CMPNEQPS </c>\n  instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\param __b\n   A 128-bit vector of [4 x float].\n\\returns A 128-bit vector of [4 x float] containing the comparison results.","bases":[],"vars":[793476843278776739,11140643588768260787],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7387276371732052842,"detailed_name":"static inline int _mm_cvtt_ss2si(__m128 __a)","qual_name_offset":18,"short_name_offset":18,"short_name_size":14,"spell":"1412:1-1412:15|1411:1-1415:2|2|-1","hover":"","comments":"Converts a float value contained in the lower 32 bits of a vector of\n   [4 x float] into a 32-bit integer, truncating the result when it is\n   inexact.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTTSS2SI / CVTTSS2SI </c>\n  instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the conversion.\n\\returns A 32-bit integer containing the converted value.","bases":[],"vars":[4171645238337982359],"callees":["1414:10-1414:25|4861025220353997434|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7688999274566310710,"detailed_name":"static inline long long _mm_cvtss_si64(__m128 __a)","qual_name_offset":24,"short_name_offset":24,"short_name_size":14,"spell":"1340:1-1340:15|1339:1-1343:2|2|-1","hover":"","comments":"Converts a float value contained in the lower 32 bits of a vector of\n   [4 x float] into a 64-bit integer.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTSS2SI / CVTSS2SI </c>\n  instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the conversion.\n\\returns A 64-bit integer containing the converted value.","bases":[],"vars":[1969695227823666278],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8197030479102476743,"detailed_name":"static inline __m128 _mm_cmpge_ss(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":12,"spell":"656:1-656:13|655:1-661:2|2|-1","hover":"","comments":"Compares two 32-bit float values in the low-order bits of both\n   operands to determine if the value in the first operand is greater than\n   or equal to the corresponding value in the second operand and returns\n   the result of the comparison in the low-order bits of a vector of\n   [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPLESS / CMPLESS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\returns A 128-bit vector of [4 x float] containing the comparison results\n   in the low-order bits.","bases":[],"vars":[2198216006188749934,10700863929281050690],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8263718668891107441,"detailed_name":"static inline void _mm_store_ss(float *__p, __m128 __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":12,"spell":"1962:1-1962:13|1961:1-1968:2|2|-1","hover":"","comments":"Stores the lower 32 bits of a 128-bit vector of [4 x float] to a\n    memory location.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVSS / MOVSS </c> instruction.\n\n\\param __p\n   A pointer to a 32-bit memory location.\n\\param __a\n   A 128-bit vector of [4 x float] containing the value to be stored.","bases":[],"vars":[11296276270203251993,11895304855125775627],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8455111920227281254,"detailed_name":"static inline __m128 _mm_rcp_ps(__m128 __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":10,"spell":"266:1-266:11|265:1-269:2|2|-1","hover":"","comments":"Calculates the approximate reciprocals of the values stored in a\n   128-bit vector of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VRCPPS / RCPPS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\returns A 128-bit vector of [4 x float] containing the approximate\n   reciprocals of the values in the operand.","bases":[],"vars":[10870667779953976747],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8681701257253842288,"detailed_name":"static inline __m128 _mm_cmpnlt_ss(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"743:1-743:14|742:1-746:2|2|-1","hover":"","comments":"Compares two 32-bit float values in the low-order bits of both\n   operands to determine if the value in the first operand is not less than\n   the corresponding value in the second operand and returns the result of\n   the comparison in the low-order bits of a vector of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPNLTSS / CMPNLTSS </c>\n  instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\returns A 128-bit vector of [4 x float] containing the comparison results\n   in the low-order bits.","bases":[],"vars":[9661749557218725639,17647519179929894726],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8770843962805930233,"detailed_name":"static inline __m128 _mm_min_ss(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":10,"spell":"325:1-325:11|324:1-328:2|2|-1","hover":"","comments":"Compares two 32-bit float values in the low-order bits of both\n   operands and returns the lesser value in the low-order bits of the\n   vector of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMINSS / MINSS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\returns A 128-bit vector of [4 x float] whose lower 32 bits contain the\n   minimum value between both operands. The upper 96 bits are copied from\n   the upper 96 bits of the first source operand.","bases":[],"vars":[7388400993547782999,17857590582467642971],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8802168963117094673,"detailed_name":"static inline float _mm_cvtss_f32(__m128 __a)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"1603:1-1603:14|1602:1-1606:2|2|-1","hover":"","comments":"Extracts a float value contained in the lower 32 bits of a vector of\n   [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\param __a\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the extraction.\n\\returns A 32-bit float containing the extracted value.","bases":[],"vars":[3429100407312639906],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8904959392630250160,"detailed_name":"static inline __m128 _mm_cmpeq_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":12,"spell":"503:1-503:13|502:1-506:2|2|-1","hover":"","comments":"Compares each of the corresponding 32-bit float values of the\n   128-bit vectors of [4 x float] for equality.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPEQPS / CMPEQPS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\param __b\n   A 128-bit vector of [4 x float].\n\\returns A 128-bit vector of [4 x float] containing the comparison results.","bases":[],"vars":[4259247489133415667,17696265632002812883],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8930522422805513461,"detailed_name":"extern void _mm_setcsr(unsigned int) noexcept","qual_name_offset":12,"short_name_offset":12,"short_name_size":10,"hover":"","comments":"Sets the MXCSR register with the 32-bit unsigned integer value.\n\n   There are several groups of macros associated with this intrinsic,\n   including:\n   <ul>\n   <li>\n     For setting exception states: _MM_EXCEPT_INVALID, _MM_EXCEPT_DIV_ZERO,\n     _MM_EXCEPT_DENORM, _MM_EXCEPT_OVERFLOW, _MM_EXCEPT_UNDERFLOW,\n     _MM_EXCEPT_INEXACT. There is a convenience wrapper\n     _MM_SET_EXCEPTION_STATE(x) where x is one of these macros.\n   </li>\n   <li>\n     For setting exception masks: _MM_MASK_UNDERFLOW, _MM_MASK_OVERFLOW,\n     _MM_MASK_INVALID, _MM_MASK_DENORM, _MM_MASK_DIV_ZERO, _MM_MASK_INEXACT.\n     There is a convenience wrapper _MM_SET_EXCEPTION_MASK(x) where x is one\n     of these macros.\n   </li>\n   <li>\n     For setting rounding modes: _MM_ROUND_NEAREST, _MM_ROUND_DOWN,\n     _MM_ROUND_UP, _MM_ROUND_TOWARD_ZERO. There is a convenience wrapper\n     _MM_SET_ROUNDING_MODE(x) where x is one of these macros.\n   </li>\n   <li>\n     For setting flush-to-zero mode: _MM_FLUSH_ZERO_ON, _MM_FLUSH_ZERO_OFF.\n     There is a convenience wrapper _MM_SET_FLUSH_ZERO_MODE(x) where x is\n     one of these macros.\n   </li>\n   <li>\n     For setting denormals-are-zero mode: _MM_DENORMALS_ZERO_ON,\n     _MM_DENORMALS_ZERO_OFF. There is a convenience wrapper\n     _MM_SET_DENORMALS_ZERO_MODE(x) where x is one of these macros.\n   </li>\n   </ul>\n\n   For example, the following expression causes subsequent floating-point\n   operations to round up:\n     _mm_setcsr(_mm_getcsr() | _MM_ROUND_UP)\n\n   The following example sets the DAZ and FTZ flags:\n   \\code\n   void setFlags() {\n     _MM_SET_FLUSH_ZERO_MODE(_MM_FLUSH_ZERO_ON);\n     _MM_SET_DENORMALS_ZERO_MODE(_MM_DENORMALS_ZERO_ON);\n   }\n   \\endcode\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VLDMXCSR / LDMXCSR </c> instruction.\n\n\\param __i\n   A 32-bit unsigned integer value to be written to the MXCSR register.","bases":[],"vars":[4775472263388561918],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":["2561:6-2561:16|2561:1-2561:34|1|-1"],"derived":[],"uses":[]},{"usr":9063678149172483603,"detailed_name":"static inline int _mm_comile_ss(__m128 __a, __m128 __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":13,"spell":"1065:1-1065:14|1064:1-1068:2|2|-1","hover":"","comments":"Compares two 32-bit float values in the low-order bits of both\n   operands to determine if the first operand is less than or equal to the\n   second operand and returns the result of the comparison.\n\n   If either of the two lower 32-bit values is NaN, 0 is returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCOMISS / COMISS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the comparison.\n\\returns An integer containing the comparison results. If either of the two\n    lower 32-bit values is NaN, 0 is returned.","bases":[],"vars":[10736615465270431590,13622161711315332616],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9142469575164937285,"detailed_name":"static inline __m64 _mm_packs_pi16(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":14,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":[],"derived":[],"uses":["2906:10-2906:24|16420|-1"]},{"usr":9235587841370172812,"detailed_name":"static inline __m64 _mm_unpacklo_pi16(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":17,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":[],"derived":[],"uses":["2740:9-2740:26|16420|-1","2769:9-2769:26|16420|-1"]},{"usr":9254185889008620479,"detailed_name":"static inline __m128 _mm_xor_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":10,"spell":"463:1-463:11|462:1-466:2|2|-1","hover":"","comments":"Performs a bitwise exclusive OR of two 128-bit vectors of\n   [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VXORPS / XORPS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing one of the source operands.\n\\param __b\n   A 128-bit vector of [4 x float] containing one of the source operands.\n\\returns A 128-bit vector of [4 x float] containing the bitwise exclusive OR\n   of the values between both operands.","bases":[],"vars":[2729458717464774052,1819427274228864104],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9313446760013451640,"detailed_name":"static inline __m128 _mm_max_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":10,"spell":"386:1-386:11|385:1-389:2|2|-1","hover":"","comments":"Compares two 128-bit vectors of [4 x float] and returns the greater\n   of each pair of values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMAXPS / MAXPS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing one of the operands.\n\\param __b\n   A 128-bit vector of [4 x float] containing one of the operands.\n\\returns A 128-bit vector of [4 x float] containing the maximum values\n   between both operands.","bases":[],"vars":[2063845459755564497,14200383260136494270],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9473942619869688053,"detailed_name":"static inline __m128 _mm_cvtsi32_ss(__m128 __a, int __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":14,"spell":"1490:1-1490:15|1489:1-1494:2|2|-1","hover":"","comments":"Converts a 32-bit signed integer value into a floating point value\n   and writes it to the lower 32 bits of the destination. The remaining\n   higher order elements of the destination vector are copied from the\n   corresponding elements in the first operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTSI2SS / CVTSI2SS </c> instruction.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\param __b\n   A 32-bit signed integer operand containing the value to be converted.\n\\returns A 128-bit vector of [4 x float] whose lower 32 bits contain the\n   converted value of the second operand. The upper 96 bits are copied from\n   the upper 96 bits of the first operand.","bases":[],"vars":[4120226299568099232,18192788282496896241],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["1515:10-1515:24|16420|-1"]},{"usr":9513068245731162083,"detailed_name":"static inline int _mm_comigt_ss(__m128 __a, __m128 __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":13,"spell":"1089:1-1089:14|1088:1-1092:2|2|-1","hover":"","comments":"Compares two 32-bit float values in the low-order bits of both\n   operands to determine if the first operand is greater than the second\n   operand and returns the result of the comparison.\n\n   If either of the two lower 32-bit values is NaN, 0 is returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCOMISS / COMISS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the comparison.\n\\returns An integer containing the comparison results. If either of the\n    two lower 32-bit values is NaN, 0 is returned.","bases":[],"vars":[11615402099239064229,8313179622603684073],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9881571217979772217,"detailed_name":"static inline __m128 _mm_cmplt_ss(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":12,"spell":"526:1-526:13|525:1-529:2|2|-1","hover":"","comments":"Compares two 32-bit float values in the low-order bits of both\n   operands to determine if the value in the first operand is less than the\n   corresponding value in the second operand and returns the result of the\n   comparison in the low-order bits of a vector of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPLTSS / CMPLTSS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\returns A 128-bit vector of [4 x float] containing the comparison results\n   in the low-order bits.","bases":[],"vars":[9307636303103156841,15721277866624839770],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9921334235991683712,"detailed_name":"static inline int _mm_comige_ss(__m128 __a, __m128 __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":13,"spell":"1113:1-1113:14|1112:1-1116:2|2|-1","hover":"","comments":"Compares two 32-bit float values in the low-order bits of both\n   operands to determine if the first operand is greater than or equal to\n   the second operand and returns the result of the comparison.\n\n   If either of the two lower 32-bit values is NaN, 0 is returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCOMISS / COMISS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the comparison.\n\\returns An integer containing the comparison results. If either of the two\n   lower 32-bit values is NaN, 0 is returned.","bases":[],"vars":[13838289372944276481,4580890126259230617],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10059099911770246489,"detailed_name":"static inline __m64 _mm_packs_pi32(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":14,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":[],"derived":[],"uses":["2877:10-2877:24|16420|-1"]},{"usr":10498700764248211066,"detailed_name":"static inline __m128 _mm_cmpnge_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"902:1-902:14|901:1-905:2|2|-1","hover":"","comments":"Compares each of the corresponding 32-bit float values of the\n   128-bit vectors of [4 x float] to determine if the values in the first\n   operand are not greater than or equal to those in the second operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPNLEPS / CMPNLEPS </c>\n  instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\param __b\n   A 128-bit vector of [4 x float].\n\\returns A 128-bit vector of [4 x float] containing the comparison results.","bases":[],"vars":[7515888359184060450,8122321822531794924],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10736553648887891452,"detailed_name":"static inline __m64 _mm_avg_pu8(__m64 __a, __m64 __b)","qual_name_offset":20,"short_name_offset":20,"short_name_size":11,"spell":"2407:1-2407:12|2406:1-2410:2|2|-1","hover":"","comments":"Computes the rounded averages of the packed unsigned 8-bit integer\n   values and writes the averages to the corresponding bits in the\n   destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PAVGB </c> instruction.\n\n\\param __a\n   A 64-bit integer vector containing one of the source operands.\n\\param __b\n   A 64-bit integer vector containing one of the source operands.\n\\returns A 64-bit integer vector containing the averages of both operands.","bases":[],"vars":[4825472638955002365,17550435256203029056],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10911929593521044614,"detailed_name":"static inline __m64 _mm_unpackhi_pi16(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":17,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":[],"derived":[],"uses":["2736:9-2736:26|16420|-1","2765:9-2765:26|16420|-1"]},{"usr":10925425171778339602,"detailed_name":"static inline int _mm_ucomineq_ss(__m128 __a, __m128 __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":15,"spell":"1284:1-1284:16|1283:1-1287:2|2|-1","hover":"","comments":"Performs an unordered comparison of two 32-bit float values using\n   the low-order bits of both operands to determine inequality and returns\n   the result of the comparison.\n\n   If either of the two lower 32-bit values is NaN, 1 is returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VUCOMISS / UCOMISS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the comparison.\n\\returns An integer containing the comparison results. If either of the two\n   lower 32-bit values is NaN, 1 is returned.","bases":[],"vars":[459278672683888161,5909783587365346946],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":11060707654458728076,"detailed_name":"static inline __m128 _mm_set_ps1(float __w)","qual_name_offset":21,"short_name_offset":21,"short_name_size":11,"spell":"1833:1-1833:12|1832:1-1836:2|2|-1","hover":"","comments":"Microsoft specific. */\n Constructs a 128-bit floating-point vector of [4 x float], with each\n    of the four single-precision floating-point vector elements set to the\n    specified single-precision floating-point value.\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VPERMILPS / PERMILPS </c> instruction.\n\n \\param __w\n    A single-precision floating-point value used to initialize each vector\n    element of the result.\n \\returns An initialized 128-bit floating-point vector of [4 x float].","bases":[],"vars":[4852025416058423242],"callees":["1835:12-1835:23|2085305140936889061|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":11299920269772280828,"detailed_name":"static inline __m128 _mm_cvtpi32_ps(__m128 __a, __m64 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":14,"spell":"1563:1-1563:15|1562:1-1566:2|2|-1","hover":"","comments":"Converts two elements of a 64-bit vector of [2 x i32] into two\n   floating point values and writes them to the lower 64-bits of the\n   destination. The remaining higher order elements of the destination are\n   copied from the corresponding elements in the first operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> CVTPI2PS </c> instruction.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\param __b\n   A 64-bit vector of [2 x i32]. The elements in this vector are converted\n   and written to the corresponding low-order elements in the destination.\n\\returns A 128-bit vector of [4 x float] whose lower 64 bits contain the\n   converted value of the second operand. The upper 64 bits are copied from\n   the upper 64 bits of the first operand.","bases":[],"vars":[18351131886126644179,13971344769252333569],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["1588:10-1588:24|16420|-1","2738:9-2738:23|16420|-1","2741:9-2741:23|16420|-1","2767:9-2767:23|16420|-1","2770:9-2770:23|16420|-1","2845:9-2845:23|16420|-1","2848:10-2848:24|16420|-1"]},{"usr":11425080249993411962,"detailed_name":"static inline int _mm_cvtss_si32(__m128 __a)","qual_name_offset":18,"short_name_offset":18,"short_name_size":14,"spell":"1302:1-1302:15|1301:1-1305:2|2|-1","hover":"","comments":"Converts a float value contained in the lower 32 bits of a vector of\n   [4 x float] into a 32-bit integer.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTSS2SI / CVTSS2SI </c>\n  instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the conversion.\n\\returns A 32-bit integer containing the converted value.","bases":[],"vars":[17781867583555846471],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["1322:10-1322:24|16420|-1"]},{"usr":11585331467838427096,"detailed_name":"static inline __m128 _mm_sqrt_ss(__m128 __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":11,"spell":"214:1-214:12|213:1-217:2|2|-1","hover":"","comments":"Calculates the square root of the value stored in the low-order bits\n   of a 128-bit vector of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VSQRTSS / SQRTSS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the calculation.\n\\returns A 128-bit vector of [4 x float] containing the square root of the\n   value in the low-order bits of the operand.","bases":[],"vars":[5954713147074031539],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":11609934397090604746,"detailed_name":"static inline int _mm_comilt_ss(__m128 __a, __m128 __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":13,"spell":"1041:1-1041:14|1040:1-1044:2|2|-1","hover":"","comments":"Compares two 32-bit float values in the low-order bits of both\n   operands to determine if the first operand is less than the second\n   operand and returns the result of the comparison.\n\n   If either of the two lower 32-bit values is NaN, 0 is returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCOMISS / COMISS </c>\n  instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the comparison.\n\\returns An integer containing the comparison results. If either of the two\n    lower 32-bit values is NaN, 0 is returned.","bases":[],"vars":[15904725835151762888,3321766536040515498],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":11889534434993793667,"detailed_name":"static inline int _mm_cvt_ss2si(__m128 __a)","qual_name_offset":18,"short_name_offset":18,"short_name_size":13,"spell":"1320:1-1320:14|1319:1-1323:2|2|-1","hover":"","comments":"Converts a float value contained in the lower 32 bits of a vector of\n   [4 x float] into a 32-bit integer.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTSS2SI / CVTSS2SI </c>\n  instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the conversion.\n\\returns A 32-bit integer containing the converted value.","bases":[],"vars":[3289215509144355806],"callees":["1322:10-1322:24|11425080249993411962|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":11979475606472144379,"detailed_name":"static inline __m128 _mm_cmplt_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":12,"spell":"545:1-545:13|544:1-548:2|2|-1","hover":"","comments":"Compares each of the corresponding 32-bit float values of the\n   128-bit vectors of [4 x float] to determine if the values in the first\n   operand are less than those in the second operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPLTPS / CMPLTPS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\param __b\n   A 128-bit vector of [4 x float].\n\\returns A 128-bit vector of [4 x float] containing the comparison results.","bases":[],"vars":[18336928029833875030,9225001350773185845],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12085367718243258944,"detailed_name":"static inline void _mm_stream_ps(float *__p, __m128 __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":13,"spell":"2139:1-2139:14|2138:1-2142:2|2|-1","hover":"","comments":"Moves packed float values from a 128-bit vector of [4 x float] to a\n   128-bit aligned memory location. To minimize caching, the data is flagged\n   as non-temporal (unlikely to be used again soon).\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVNTPS / MOVNTPS </c> instruction.\n\n\\param __p\n   A pointer to a 128-bit aligned memory location that will receive the\n   single-precision floating-point values.\n\\param __a\n   A 128-bit vector of [4 x float] containing the values to be moved.","bases":[],"vars":[6433530955438435627,8019748648676351942],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12164430292654512482,"detailed_name":"static inline __m64 _mm_min_pu8(__m64 __a, __m64 __b)","qual_name_offset":20,"short_name_offset":20,"short_name_size":11,"spell":"2288:1-2288:12|2287:1-2291:2|2|-1","hover":"","comments":"Compares each of the corresponding packed 8-bit unsigned integer\n   values of the 64-bit integer vectors, and writes the lesser value to the\n   corresponding bits in the destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PMINUB </c> instruction.\n\n\\param __a\n   A 64-bit integer vector containing one of the source operands.\n\\param __b\n   A 64-bit integer vector containing one of the source operands.\n\\returns A 64-bit integer vector containing the comparison results.","bases":[],"vars":[11389044897092791944,10107883828291123831],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12239939914382953569,"detailed_name":"static inline void _mm_stream_pi(__m64 *__p, __m64 __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":13,"spell":"2120:1-2120:14|2119:1-2123:2|2|-1","hover":"","comments":"Stores a 64-bit integer in the specified aligned memory location. To\n   minimize caching, the data is flagged as non-temporal (unlikely to be\n   used again soon).\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> MOVNTQ </c> instruction.\n\n\\param __p\n   A pointer to an aligned memory location used to store the register value.\n\\param __a\n   A 64-bit integer containing the value to be stored.","bases":[],"vars":[3062317696053502265,537380644108351252],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12417735945984556499,"detailed_name":"static inline __m128 _mm_cmpunord_ss(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":15,"spell":"972:1-972:16|971:1-975:2|2|-1","hover":"","comments":"Compares two 32-bit float values in the low-order bits of both\n   operands to determine if the value in the first operand is unordered\n   with respect to the corresponding value in the second operand and\n   returns the result of the comparison in the low-order bits of a vector\n   of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPUNORDSS / CMPUNORDSS </c>\n  instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\returns A 128-bit vector of [4 x float] containing the comparison results\n   in the low-order bits.","bases":[],"vars":[5933224690297617350,4271953284252356904],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12581362571217368492,"detailed_name":"static inline long long _mm_cvttss_si64(__m128 __a)","qual_name_offset":24,"short_name_offset":24,"short_name_size":15,"spell":"1432:1-1432:16|1431:1-1435:2|2|-1","hover":"","comments":"Converts a float value contained in the lower 32 bits of a vector of\n   [4 x float] into a 64-bit integer, truncating the result when it is\n   inexact.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTTSS2SI / CVTTSS2SI </c>\n  instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the conversion.\n\\returns A 64-bit integer containing the converted value.","bases":[],"vars":[1478530835857239561],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12599408604673762646,"detailed_name":"static inline __m128 _mm_movehl_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"2690:1-2690:14|2689:1-2693:2|2|-1","hover":"","comments":"Constructs a 128-bit floating-point vector of [4 x float]. The lower\n   64 bits are set to the upper 64 bits of the second parameter. The upper\n   64 bits are set to the upper 64 bits of the first parameter.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VUNPCKHPD / UNPCKHPD </c> instruction.\n\n\\param __a\n   A 128-bit floating-point vector of [4 x float]. The upper 64 bits are\n   written to the upper 64 bits of the result.\n\\param __b\n   A 128-bit floating-point vector of [4 x float]. The upper 64 bits are\n   written to the lower 64 bits of the result.\n\\returns A 128-bit floating-point vector of [4 x float].","bases":[],"vars":[17344883304932205944,17986138401194667961],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["2874:9-2874:22|16420|-1"]},{"usr":12793006636192303816,"detailed_name":"static inline __m128 _mm_add_ss(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":10,"spell":"50:1-50:11|49:1-54:2|2|-1","hover":"","comments":"Adds the 32-bit float values in the low-order bits of the operands.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VADDSS / ADDSS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing one of the source operands.\n   The lower 32 bits of this operand are used in the calculation.\n\\param __b\n   A 128-bit vector of [4 x float] containing one of the source operands.\n   The lower 32 bits of this operand are used in the calculation.\n\\returns A 128-bit vector of [4 x float] whose lower 32 bits contain the sum\n   of the lower 32 bits of both operands. The upper 96 bits are copied from\n   the upper 96 bits of the first source operand.","bases":[],"vars":[555487648611874278,4201552604967542501],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12826217763175901582,"detailed_name":"static inline int _mm_ucomigt_ss(__m128 __a, __m128 __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":14,"spell":"1235:1-1235:15|1234:1-1238:2|2|-1","hover":"","comments":"Performs an unordered comparison of two 32-bit float values using\n   the low-order bits of both operands to determine if the first operand is\n   greater than the second operand and returns the result of the\n   comparison.\n\n   If either of the two lower 32-bit values is NaN, 0 is returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VUCOMISS / UCOMISS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the comparison.\n\\returns An integer containing the comparison results. If either of the two\n    lower 32-bit values is NaN, 0 is returned.","bases":[],"vars":[14525938812295049457,13251319418389570643],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13179720109506694355,"detailed_name":"static inline __m128 _mm_mul_ss(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":10,"spell":"135:1-135:11|134:1-139:2|2|-1","hover":"","comments":"Multiplies two 32-bit float values in the low-order bits of the\n   operands.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMULSS / MULSS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing one of the source operands.\n   The lower 32 bits of this operand are used in the calculation.\n\\param __b\n   A 128-bit vector of [4 x float] containing one of the source operands.\n   The lower 32 bits of this operand are used in the calculation.\n\\returns A 128-bit vector of [4 x float] containing the product of the lower\n   32 bits of both operands. The upper 96 bits are copied from the upper 96\n   bits of the first source operand.","bases":[],"vars":[10944729545817516068,16092742761180368784],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13296043243875639280,"detailed_name":"static inline __m128 _mm_cmpgt_ss(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":12,"spell":"611:1-611:13|610:1-616:2|2|-1","hover":"","comments":"Compares two 32-bit float values in the low-order bits of both\n   operands to determine if the value in the first operand is greater than\n   the corresponding value in the second operand and returns the result of\n   the comparison in the low-order bits of a vector of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPLTSS / CMPLTSS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\returns A 128-bit vector of [4 x float] containing the comparison results\n   in the low-order bits.","bases":[],"vars":[11105468322478515725,12851576791877283520],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13297990032460413233,"detailed_name":"static inline int _mm_ucomilt_ss(__m128 __a, __m128 __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":14,"spell":"1185:1-1185:15|1184:1-1188:2|2|-1","hover":"","comments":"Performs an unordered comparison of two 32-bit float values using\n   the low-order bits of both operands to determine if the first operand is\n   less than the second operand and returns the result of the comparison.\n\n   If either of the two lower 32-bit values is NaN, 0 is returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VUCOMISS / UCOMISS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the comparison.\n\\returns An integer containing the comparison results. If either of the two\n   lower 32-bit values is NaN, 0 is returned.","bases":[],"vars":[5773075647059291468,9202836608713212098],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13423234318587257880,"detailed_name":"static inline __m64 _mm_cvt_ps2pi(__m128 __a)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"1374:1-1374:14|1373:1-1377:2|2|-1","hover":"","comments":"Converts two low-order float values in a 128-bit vector of\n   [4 x float] into a 64-bit vector of [2 x i32].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> CVTPS2PI </c> instruction.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\returns A 64-bit integer vector containing the converted values.","bases":[],"vars":[2045644744644539142],"callees":["1376:10-1376:24|1034843073460038072|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13438913384931076552,"detailed_name":"static inline __m128 _mm_cmpnlt_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"763:1-763:14|762:1-766:2|2|-1","hover":"","comments":"Compares each of the corresponding 32-bit float values of the\n   128-bit vectors of [4 x float] to determine if the values in the first\n   operand are not less than those in the second operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPNLTPS / CMPNLTPS </c>\n  instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\param __b\n   A 128-bit vector of [4 x float].\n\\returns A 128-bit vector of [4 x float] containing the comparison results.","bases":[],"vars":[11926982010019139573,16725706039741993667],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13462133471052959130,"detailed_name":"static inline void _mm_storeh_pi(__m64 *__p, __m128 __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":13,"spell":"1920:1-1920:14|1919:1-1927:2|2|-1","hover":"","comments":"Stores the upper 64 bits of a 128-bit vector of [4 x float] to a\n   memory location.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPEXTRQ / PEXTRQ </c> instruction.\n\n\\param __p\n   A pointer to a 64-bit memory location.\n\\param __a\n   A 128-bit vector of [4 x float] containing the values to be stored.","bases":[],"vars":[8325380334316610250,5494633450254042212],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13558909540056260017,"detailed_name":"static inline __m128 _mm_cmpord_ss(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"927:1-927:14|926:1-930:2|2|-1","hover":"","comments":"Compares two 32-bit float values in the low-order bits of both\n   operands to determine if the value in the first operand is ordered with\n   respect to the corresponding value in the second operand and returns the\n   result of the comparison in the low-order bits of a vector of\n   [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPORDSS / CMPORDSS </c>\n  instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\returns A 128-bit vector of [4 x float] containing the comparison results\n   in the low-order bits.","bases":[],"vars":[12269975987347473803,16557205913711713194],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13684566867506973372,"detailed_name":"static inline __m128 _mm_cmpgt_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":12,"spell":"632:1-632:13|631:1-635:2|2|-1","hover":"","comments":"Compares each of the corresponding 32-bit float values of the\n   128-bit vectors of [4 x float] to determine if the values in the first\n   operand are greater than those in the second operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPLTPS / CMPLTPS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\param __b\n   A 128-bit vector of [4 x float].\n\\returns A 128-bit vector of [4 x float] containing the comparison results.","bases":[],"vars":[7408159506116435861,14103130408608504249],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13855466810920131960,"detailed_name":"static inline __m128 _mm_cmpngt_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"855:1-855:14|854:1-858:2|2|-1","hover":"","comments":"Compares each of the corresponding 32-bit float values of the\n   128-bit vectors of [4 x float] to determine if the values in the first\n   operand are not greater than those in the second operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPNLTPS / CMPNLTPS </c>\n  instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\param __b\n   A 128-bit vector of [4 x float].\n\\returns A 128-bit vector of [4 x float] containing the comparison results.","bases":[],"vars":[3046189802891595077,4488824199020054438],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13913432530391351865,"detailed_name":"static inline __m64 _mm_cmpgt_pi8(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":[],"derived":[],"uses":["2793:9-2793:22|16420|-1"]},{"usr":14175274399035174819,"detailed_name":"static inline int _mm_movemask_pi8(__m64 __a)","qual_name_offset":18,"short_name_offset":18,"short_name_size":16,"spell":"2306:1-2306:17|2305:1-2309:2|2|-1","hover":"","comments":"Takes the most significant bit from each 8-bit element in a 64-bit\n   integer vector to create an 8-bit mask value. Zero-extends the value to\n   32-bit integer and writes it to the destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PMOVMSKB </c> instruction.\n\n\\param __a\n   A 64-bit integer vector containing the values with bits to be extracted.\n\\returns The most significant bit from each 8-bit element in \\a __a,\n   written to bits [7:0].","bases":[],"vars":[15307383673320983062],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14475830165451877274,"detailed_name":"static inline __m64 _mm_cvtps_pi16(__m128 __a)","qual_name_offset":20,"short_name_offset":20,"short_name_size":14,"spell":"2869:1-2869:15|2868:1-2878:2|2|-1","hover":"","comments":"Converts each single-precision floating-point element of a 128-bit\n   floating-point vector of [4 x float] into a 16-bit signed integer, and\n   packs the results into a 64-bit integer vector of [4 x i16].\n\n   If the floating-point element is NaN or infinity, or if the\n   floating-point element is greater than 0x7FFFFFFF or less than -0x8000,\n   it is converted to 0x8000. Otherwise if the floating-point element is\n   greater than 0x7FFF, it is converted to 0x7FFF.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> CVTPS2PI + COMPOSITE </c> instruction.\n\n\\param __a\n   A 128-bit floating-point vector of [4 x float].\n\\returns A 64-bit integer vector of [4 x i16] containing the converted\n   values.","bases":[],"vars":[712349346089860466,12037794003750317127,894379443065538537],"callees":["2873:9-2873:23|1034843073460038072|3|16420","2874:9-2874:22|12599408604673762646|3|16420","2875:9-2875:23|1034843073460038072|3|16420","2877:10-2877:24|10059099911770246489|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["2903:9-2903:23|16420|-1"]},{"usr":14502995923798233972,"detailed_name":"static inline __m128 _mm_rsqrt_ps(__m128 __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":12,"spell":"302:1-302:13|301:1-305:2|2|-1","hover":"","comments":"Calculates the approximate reciprocals of the square roots of the\n   values stored in a 128-bit vector of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VRSQRTPS / RSQRTPS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\returns A 128-bit vector of [4 x float] containing the approximate\n   reciprocals of the square roots of the values in the operand.","bases":[],"vars":[15173285642147372190],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14585200966410708374,"detailed_name":"static inline void _mm_maskmove_si64(__m64 __d, __m64 __n, char *__p)","qual_name_offset":19,"short_name_offset":19,"short_name_size":17,"spell":"2388:1-2388:18|2387:1-2391:2|2|-1","hover":"","comments":"Conditionally copies the values from each 8-bit element in the first\n   64-bit integer vector operand to the specified memory location, as\n   specified by the most significant bit in the corresponding element in the\n   second 64-bit integer vector operand.\n\n   To minimize caching, the data is flagged as non-temporal\n   (unlikely to be used again soon).\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> MASKMOVQ </c> instruction.\n\n\\param __d\n   A 64-bit integer vector containing the values with elements to be copied.\n\\param __n\n   A 64-bit integer vector operand. The most significant bit from each 8-bit\n   element determines whether the corresponding element in operand \\a __d\n   is copied. If the most significant bit of a given element is 1, the\n   corresponding element in operand \\a __d is copied.\n\\param __p\n   A pointer to a 64-bit memory location that will receive the conditionally\n   copied integer values. The address of the memory location does not have\n   to be aligned.","bases":[],"vars":[9237994854287616587,16396922735244776865,9896341135987221150],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14604275093003622666,"detailed_name":"static inline __m128 _mm_set_ps(float __z, float __y, float __x, float __w)","qual_name_offset":21,"short_name_offset":21,"short_name_size":10,"spell":"1860:1-1860:11|1859:1-1863:2|2|-1","hover":"","comments":"Constructs a 128-bit floating-point vector of [4 x float]\n   initialized with the specified single-precision floating-point values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __z\n   A single-precision floating-point value used to initialize bits [127:96]\n   of the result.\n\\param __y\n   A single-precision floating-point value used to initialize bits [95:64]\n   of the result.\n\\param __x\n   A single-precision floating-point value used to initialize bits [63:32]\n   of the result.\n\\param __w\n   A single-precision floating-point value used to initialize bits [31:0]\n   of the result.\n\\returns An initialized 128-bit floating-point vector of [4 x float].","bases":[],"vars":[2478659732259435322,6055228682744163515,7375779283115138970,87434927592228289],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14622164912524297743,"detailed_name":"static inline int _mm_comineq_ss(__m128 __a, __m128 __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":14,"spell":"1137:1-1137:15|1136:1-1140:2|2|-1","hover":"","comments":"Compares two 32-bit float values in the low-order bits of both\n   operands to determine if the first operand is not equal to the second\n   operand and returns the result of the comparison.\n\n   If either of the two lower 32-bit values is NaN, 1 is returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCOMISS / COMISS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the comparison.\n\\returns An integer containing the comparison results. If either of the\n    two lower 32-bit values is NaN, 1 is returned.","bases":[],"vars":[1691248786673583782,11589740608847537135],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14664703377958540205,"detailed_name":"static inline __m128 _mm_cmple_ss(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":12,"spell":"569:1-569:13|568:1-572:2|2|-1","hover":"","comments":"Compares two 32-bit float values in the low-order bits of both\n   operands to determine if the value in the first operand is less than or\n   equal to the corresponding value in the second operand and returns the\n   result of the comparison in the low-order bits of a vector of\n   [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPLESS / CMPLESS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\returns A 128-bit vector of [4 x float] containing the comparison results\n   in the low-order bits.","bases":[],"vars":[10657732946006903417,9663638928923342051],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14903250941481259081,"detailed_name":"static inline __m128 _mm_cvtpi32x2_ps(__m64 __a, __m64 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":16,"spell":"2840:1-2840:17|2839:1-2849:2|2|-1","hover":"","comments":"Converts the two 32-bit signed integer values from each 64-bit vector\n   operand of [2 x i32] into a 128-bit vector of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> CVTPI2PS + COMPOSITE </c> instruction.\n\n\\param __a\n   A 64-bit vector of [2 x i32]. The lower elements of the destination are\n   copied from the elements in this operand.\n\\param __b\n   A 64-bit vector of [2 x i32]. The upper elements of the destination are\n   copied from the elements in this operand.\n\\returns A 128-bit vector of [4 x float] whose lower 64 bits contain the\n   copied and converted values from the first operand. The upper 64 bits\n   contain the copied and converted values from the second operand.","bases":[],"vars":[2643117600512646094,4139471623782623667,14374269741244688134],"callees":["2844:9-2844:23|16504083108470122509|3|16420","2845:9-2845:23|11299920269772280828|3|16420","2846:9-2846:22|3502591990852854764|3|16420","2848:10-2848:24|11299920269772280828|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15105508746563843703,"detailed_name":"static inline __m128 _mm_sub_ss(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":10,"spell":"92:1-92:11|91:1-96:2|2|-1","hover":"","comments":"Subtracts the 32-bit float value in the low-order bits of the second\n   operand from the corresponding value in the first operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VSUBSS / SUBSS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing the minuend. The lower 32 bits\n   of this operand are used in the calculation.\n\\param __b\n   A 128-bit vector of [4 x float] containing the subtrahend. The lower 32\n   bits of this operand are used in the calculation.\n\\returns A 128-bit vector of [4 x float] whose lower 32 bits contain the\n   difference of the lower 32 bits of both operands. The upper 96 bits are\n   copied from the upper 96 bits of the first source operand.","bases":[],"vars":[9536942087906218803,17854017892245081646],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15144285893117867635,"detailed_name":"static inline __m128 _mm_loadl_pi(__m128 __a, const __m64 *__p)","qual_name_offset":21,"short_name_offset":21,"short_name_size":12,"spell":"1651:1-1651:13|1650:1-1660:2|2|-1","hover":"","comments":"Loads two packed float values from the address \\a __p into the\n   low-order bits of a 128-bit vector of [4 x float]. The high-order bits\n   are copied from the high-order bits of the first operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVLPD / MOVLPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [4 x float]. Bits [127:64] are written to bits\n   [127:64] of the destination.\n\\param __p\n   A pointer to two packed float values. Bits [63:0] are written to bits\n   [63:0] of the destination.\n\\returns A 128-bit vector of [4 x float] containing the moved values.","bases":[],"vars":[8193746663994514787,10971336760273329772,2797015632790413858,14662202672514000845],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15256012677226343981,"detailed_name":"static inline __m128 _mm_cmpneq_ss(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"700:1-700:14|699:1-703:2|2|-1","hover":"","comments":"Compares two 32-bit float values in the low-order bits of both\n   operands for inequality and returns the result of the comparison in the\n   low-order bits of a vector of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPNEQSS / CMPNEQSS </c>\n  instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\returns A 128-bit vector of [4 x float] containing the comparison results\n   in the low-order bits.","bases":[],"vars":[15478569053682605207,7362765245754793217],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15509748032723939020,"detailed_name":"static inline int _mm_ucomige_ss(__m128 __a, __m128 __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":14,"spell":"1260:1-1260:15|1259:1-1263:2|2|-1","hover":"","comments":"Performs an unordered comparison of two 32-bit float values using\n   the low-order bits of both operands to determine if the first operand is\n   greater than or equal to the second operand and returns the result of\n   the comparison.\n\n   If either of the two lower 32-bit values is NaN, 0 is returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VUCOMISS / UCOMISS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the comparison.\n\\returns An integer containing the comparison results. If either of the two\n    lower 32-bit values is NaN, 0 is returned.","bases":[],"vars":[12817348473017366114,3678275427377611073],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15615588998878522900,"detailed_name":"static inline int _mm_ucomieq_ss(__m128 __a, __m128 __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":14,"spell":"1161:1-1161:15|1160:1-1164:2|2|-1","hover":"","comments":"Performs an unordered comparison of two 32-bit float values using\n   the low-order bits of both operands to determine equality and returns\n   the result of the comparison.\n\n   If either of the two lower 32-bit values is NaN, 0 is returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VUCOMISS / UCOMISS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the comparison.\n\\returns An integer containing the comparison results. If either of the two\n    lower 32-bit values is NaN, 0 is returned.","bases":[],"vars":[2930066988415868896,9190381175270270930],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15719899654762280070,"detailed_name":"static inline __m128 _mm_andnot_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"426:1-426:14|425:1-429:2|2|-1","hover":"","comments":"Performs a bitwise AND of two 128-bit vectors of [4 x float], using\n   the one's complement of the values contained in the first source\n   operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VANDNPS / ANDNPS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing the first source operand. The\n   one's complement of this value is used in the bitwise AND.\n\\param __b\n   A 128-bit vector of [4 x float] containing the second source operand.\n\\returns A 128-bit vector of [4 x float] containing the bitwise AND of the\n   one's complement of the first operand and the values in the second\n   operand.","bases":[],"vars":[5269954268999039663,12276396262922842202],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15903250088756154538,"detailed_name":"static inline __m128 _mm_move_ss(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":11,"spell":"2668:1-2668:12|2667:1-2672:2|2|-1","hover":"","comments":"Constructs a 128-bit floating-point vector of [4 x float]. The lower\n   32 bits are set to the lower 32 bits of the second parameter. The upper\n   96 bits are set to the upper 96 bits of the first parameter.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VBLENDPS / BLENDPS / MOVSS </c>\n   instruction.\n\n\\param __a\n   A 128-bit floating-point vector of [4 x float]. The upper 96 bits are\n   written to the upper 96 bits of the result.\n\\param __b\n   A 128-bit floating-point vector of [4 x float]. The lower 32 bits are\n   written to the lower 32 bits of the result.\n\\returns A 128-bit floating-point vector of [4 x float].","bases":[],"vars":[4009902609704539411,10921437052188935215],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15906591905972922823,"detailed_name":"static inline __m128 _mm_sqrt_ps(__m128 __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":11,"spell":"231:1-231:12|230:1-234:2|2|-1","hover":"","comments":"Calculates the square roots of the values stored in a 128-bit vector\n   of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VSQRTPS / SQRTPS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\returns A 128-bit vector of [4 x float] containing the square roots of the\n   values in the operand.","bases":[],"vars":[8132311888298929336],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15957821289233237481,"detailed_name":"static inline __m128 _mm_rcp_ss(__m128 __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":10,"spell":"249:1-249:11|248:1-252:2|2|-1","hover":"","comments":"Calculates the approximate reciprocal of the value stored in the\n   low-order bits of a 128-bit vector of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VRCPSS / RCPSS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float]. The lower 32 bits of this operand are\n   used in the calculation.\n\\returns A 128-bit vector of [4 x float] containing the approximate\n   reciprocal of the value in the low-order bits of the operand.","bases":[],"vars":[5429628544576467812],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16146464149353105306,"detailed_name":"static inline __m128 _mm_cmpord_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"947:1-947:14|946:1-950:2|2|-1","hover":"","comments":"Compares each of the corresponding 32-bit float values of the\n   128-bit vectors of [4 x float] to determine if the values in the first\n   operand are ordered with respect to those in the second operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPORDPS / CMPORDPS </c>\n  instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\param __b\n   A 128-bit vector of [4 x float].\n\\returns A 128-bit vector of [4 x float] containing the comparison results.","bases":[],"vars":[15311633513004149405,12004674911092412995],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16273237600446464682,"detailed_name":"static inline __m128 _mm_unpacklo_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":15,"spell":"2646:1-2646:16|2645:1-2649:2|2|-1","hover":"","comments":"Unpacks the low-order (index 0,1) values from two 128-bit vectors of\n   [4 x float] and interleaves them into a 128-bit vector of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VUNPCKLPS / UNPCKLPS </c> instruction.\n\n\\param __a\n   A 128-bit vector of [4 x float]. \\n\n   Bits [31:0] are written to bits [31:0] of the destination.  \\n\n   Bits [63:32] are written to bits [95:64] of the destination.\n\\param __b\n   A 128-bit vector of [4 x float]. \\n\n   Bits [31:0] are written to bits [63:32] of the destination. \\n\n   Bits [63:32] are written to bits [127:96] of the destination.\n\\returns A 128-bit vector of [4 x float] containing the interleaved values.","bases":[],"vars":[16286779204006879041,1239324971459025799],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16340280184756464348,"detailed_name":"static inline __m64 _mm_min_pi16(__m64 __a, __m64 __b)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"2269:1-2269:13|2268:1-2272:2|2|-1","hover":"","comments":"Compares each of the corresponding packed 16-bit integer values of\n   the 64-bit integer vectors, and writes the lesser value to the\n   corresponding bits in the destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PMINSW </c> instruction.\n\n\\param __a\n   A 64-bit integer vector containing one of the source operands.\n\\param __b\n   A 64-bit integer vector containing one of the source operands.\n\\returns A 64-bit integer vector containing the comparison results.","bases":[],"vars":[16841598162709502018,6677727274711596173],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16344603344855940876,"detailed_name":"static inline __m128 _mm_add_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":10,"spell":"70:1-70:11|69:1-73:2|2|-1","hover":"","comments":"Adds two 128-bit vectors of [4 x float], and returns the results of\n   the addition.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VADDPS / ADDPS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing one of the source operands.\n\\param __b\n   A 128-bit vector of [4 x float] containing one of the source operands.\n\\returns A 128-bit vector of [4 x float] containing the sums of both\n   operands.","bases":[],"vars":[7721770828950171156,1535570703523371840],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16353619190484321612,"detailed_name":"static inline __m128 _mm_min_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":10,"spell":"344:1-344:11|343:1-347:2|2|-1","hover":"","comments":"Compares two 128-bit vectors of [4 x float] and returns the lesser\n   of each pair of values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMINPS / MINPS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing one of the operands.\n\\param __b\n   A 128-bit vector of [4 x float] containing one of the operands.\n\\returns A 128-bit vector of [4 x float] containing the minimum values\n   between both operands.","bases":[],"vars":[4239786079636600728,5492990493067123877],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16504083108470122509,"detailed_name":"static inline __m128 _mm_setzero_ps()","qual_name_offset":21,"short_name_offset":21,"short_name_size":14,"spell":"1903:1-1903:15|1902:1-1906:2|2|-1","hover":"","comments":"Constructs a 128-bit floating-point vector of [4 x float] initialized\n   to zero.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VXORPS / XORPS </c> instruction.\n\n\\returns An initialized 128-bit floating-point vector of [4 x float] with\n   all elements set to zero.","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["2737:9-2737:23|16420|-1","2766:9-2766:23|16420|-1","2844:9-2844:23|16420|-1"]},{"usr":16585704699695186264,"detailed_name":"static inline __m128 _mm_load_ps(const float *__p)","qual_name_offset":21,"short_name_offset":21,"short_name_size":11,"spell":"1723:1-1723:12|1722:1-1726:2|2|-1","hover":"","comments":"Loads a 128-bit floating-point vector of [4 x float] from an aligned\n   memory location.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVAPS / MOVAPS </c> instruction.\n\n\\param __p\n   A pointer to a 128-bit memory location. The address of the memory\n   location has to be 128-bit aligned.\n\\returns A 128-bit vector of [4 x float] containing the loaded values.","bases":[],"vars":[12328926416367997571],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["1764:16-1764:27|16420|-1"]},{"usr":16960831302531266071,"detailed_name":"static inline __m64 _mm_cvtps_pi8(__m128 __a)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"2899:1-2899:14|2898:1-2907:2|2|-1","hover":"","comments":"Converts each single-precision floating-point element of a 128-bit\n   floating-point vector of [4 x float] into an 8-bit signed integer, and\n   packs the results into the lower 32 bits of a 64-bit integer vector of\n   [8 x i8]. The upper 32 bits of the vector are set to 0.\n\n   If the floating-point element is NaN or infinity, or if the\n   floating-point element is greater than 0x7FFFFFFF or less than -0x80, it\n   is converted to 0x80. Otherwise if the floating-point element is greater\n   than 0x7F, it is converted to 0x7F.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> CVTPS2PI + COMPOSITE </c> instruction.\n\n\\param __a\n   128-bit floating-point vector of [4 x float].\n\\returns A 64-bit integer vector of [8 x i8]. The lower 32 bits contain the\n   converted values and the uppper 32 bits are set to zero.","bases":[],"vars":[14678780290959611995,14206235733446105972,3651668805947478378],"callees":["2903:9-2903:23|14475830165451877274|3|16420","2904:9-2904:25|5641900611694457481|3|16420","2906:10-2906:24|9142469575164937285|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17151217325802536732,"detailed_name":"static inline __m128 _mm_loadh_pi(__m128 __a, const __m64 *__p)","qual_name_offset":21,"short_name_offset":21,"short_name_size":12,"spell":"1624:1-1624:13|1623:1-1633:2|2|-1","hover":"","comments":"Loads two packed float values from the address \\a __p into the\n    high-order bits of a 128-bit vector of [4 x float]. The low-order bits\n    are copied from the low-order bits of the first operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVHPD / MOVHPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [4 x float]. Bits [63:0] are written to bits [63:0]\n   of the destination.\n\\param __p\n   A pointer to two packed float values. Bits [63:0] are written to bits\n   [127:64] of the destination.\n\\returns A 128-bit vector of [4 x float] containing the moved values.","bases":[],"vars":[15765519313708814579,11590250024156659795,7935491974207249107,15495043190892298458],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17406602932551579477,"detailed_name":"static inline __m128 _mm_cvtsi64_ss(__m128 __a, long long __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":14,"spell":"1537:1-1537:15|1536:1-1541:2|2|-1","hover":"","comments":"Converts a 64-bit signed integer value into a floating point value\n   and writes it to the lower 32 bits of the destination. The remaining\n   higher order elements of the destination are copied from the\n   corresponding elements in the first operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTSI2SS / CVTSI2SS </c> instruction.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\param __b\n   A 64-bit signed integer operand containing the value to be converted.\n\\returns A 128-bit vector of [4 x float] whose lower 32 bits contain the\n   converted value of the second operand. The upper 96 bits are copied from\n   the upper 96 bits of the first operand.","bases":[],"vars":[589060071860451974,1136512980523616016],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17659440348994897930,"detailed_name":"static inline __m64 _mm_max_pi16(__m64 __a, __m64 __b)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"2231:1-2231:13|2230:1-2234:2|2|-1","hover":"","comments":"Compares each of the corresponding packed 16-bit integer values of\n   the 64-bit integer vectors, and writes the greater value to the\n   corresponding bits in the destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PMAXSW </c> instruction.\n\n\\param __a\n   A 64-bit integer vector containing one of the source operands.\n\\param __b\n   A 64-bit integer vector containing one of the source operands.\n\\returns A 64-bit integer vector containing the comparison results.","bases":[],"vars":[9147782833885340686,4553229219198459660],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17728709998573513004,"detailed_name":"static inline __m128 _mm_set_ss(float __w)","qual_name_offset":21,"short_name_offset":21,"short_name_size":10,"spell":"1796:1-1796:11|1795:1-1799:2|2|-1","hover":"","comments":"Constructs a 128-bit floating-point vector of [4 x float]. The lower\n   32 bits of the vector are initialized with the specified single-precision\n   floating-point value. The upper 96 bits are set to zero.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVSS / MOVSS </c> instruction.\n\n\\param __w\n   A single-precision floating-point value used to initialize the lower 32\n   bits of the result.\n\\returns An initialized 128-bit floating-point vector of [4 x float]. The\n   lower 32 bits contain the value provided in the source operand. The\n   upper 96 bits are set to zero.","bases":[],"vars":[6887222518221640982],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17775835005818832180,"detailed_name":"static inline __m128 _mm_undefined_ps()","qual_name_offset":21,"short_name_offset":21,"short_name_size":16,"spell":"1776:1-1776:17|1775:1-1779:2|2|-1","hover":"","comments":"Create a 128-bit vector of [4 x float] with undefined values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\returns A 128-bit vector of [4 x float] containing undefined values.","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17967765238788796538,"detailed_name":"static inline __m128 _mm_cmpeq_ss(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":12,"spell":"485:1-485:13|484:1-488:2|2|-1","hover":"","comments":"Compares two 32-bit float values in the low-order bits of both\n   operands for equality and returns the result of the comparison in the\n   low-order bits of a vector [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPEQSS / CMPEQSS </c> instructions.\n\n\\param __a\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\param __b\n   A 128-bit vector of [4 x float] containing one of the operands. The lower\n   32 bits of this operand are used in the comparison.\n\\returns A 128-bit vector of [4 x float] containing the comparison results\n   in the low-order bits.","bases":[],"vars":[17022530035147388780,3177283725239253967],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":18058389203334909878,"detailed_name":"static inline __m128 _mm_unpackhi_ps(__m128 __a, __m128 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":15,"spell":"2624:1-2624:16|2623:1-2627:2|2|-1","hover":"","comments":"Unpacks the high-order (index 2,3) values from two 128-bit vectors of\n   [4 x float] and interleaves them into a 128-bit vector of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VUNPCKHPS / UNPCKHPS </c> instruction.\n\n\\param __a\n   A 128-bit vector of [4 x float]. \\n\n   Bits [95:64] are written to bits [31:0] of the destination. \\n\n   Bits [127:96] are written to bits [95:64] of the destination.\n\\param __b\n   A 128-bit vector of [4 x float].\n   Bits [95:64] are written to bits [63:32] of the destination. \\n\n   Bits [127:96] are written to bits [127:96] of the destination.\n\\returns A 128-bit vector of [4 x float] containing the interleaved values.","bases":[],"vars":[17233439258078182967,10331747393202509513],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":18217833134608789748,"detailed_name":"static inline __m64 _mm_mulhi_pu16(__m64 __a, __m64 __b)","qual_name_offset":20,"short_name_offset":20,"short_name_size":14,"spell":"2325:1-2325:15|2324:1-2328:2|2|-1","hover":"","comments":"Multiplies packed 16-bit unsigned integer values and writes the\n   high-order 16 bits of each 32-bit product to the corresponding bits in\n   the destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PMULHUW </c> instruction.\n\n\\param __a\n   A 64-bit integer vector containing one of the source operands.\n\\param __b\n   A 64-bit integer vector containing one of the source operands.\n\\returns A 64-bit integer vector containing the products of both operands.","bases":[],"vars":[6422686372053752522,17200572025776201729],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":18363102401539873152,"detailed_name":"extern unsigned int _mm_getcsr() noexcept","qual_name_offset":20,"short_name_offset":20,"short_name_size":10,"hover":"","comments":"Returns the contents of the MXCSR register as a 32-bit unsigned\n   integer value.\n\n   There are several groups of macros associated with this\n   intrinsic, including:\n   <ul>\n   <li>\n     For checking exception states: _MM_EXCEPT_INVALID, _MM_EXCEPT_DIV_ZERO,\n     _MM_EXCEPT_DENORM, _MM_EXCEPT_OVERFLOW, _MM_EXCEPT_UNDERFLOW,\n     _MM_EXCEPT_INEXACT. There is a convenience wrapper\n     _MM_GET_EXCEPTION_STATE().\n   </li>\n   <li>\n     For checking exception masks: _MM_MASK_UNDERFLOW, _MM_MASK_OVERFLOW,\n     _MM_MASK_INVALID, _MM_MASK_DENORM, _MM_MASK_DIV_ZERO, _MM_MASK_INEXACT.\n     There is a convenience wrapper _MM_GET_EXCEPTION_MASK().\n   </li>\n   <li>\n     For checking rounding modes: _MM_ROUND_NEAREST, _MM_ROUND_DOWN,\n     _MM_ROUND_UP, _MM_ROUND_TOWARD_ZERO. There is a convenience wrapper\n     _MM_GET_ROUNDING_MODE().\n   </li>\n   <li>\n     For checking flush-to-zero mode: _MM_FLUSH_ZERO_ON, _MM_FLUSH_ZERO_OFF.\n     There is a convenience wrapper _MM_GET_FLUSH_ZERO_MODE().\n   </li>\n   <li>\n     For checking denormals-are-zero mode: _MM_DENORMALS_ZERO_ON,\n     _MM_DENORMALS_ZERO_OFF. There is a convenience wrapper\n     _MM_GET_DENORMALS_ZERO_MODE().\n   </li>\n   </ul>\n\n   For example, the following expression checks if an overflow exception has\n   occurred:\n   \\code\n     ( _mm_getcsr() & _MM_EXCEPT_OVERFLOW )\n   \\endcode\n\n   The following expression gets the current rounding mode:\n   \\code\n     _MM_GET_ROUNDING_MODE()\n   \\endcode\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VSTMXCSR / STMXCSR </c> instruction.\n\n\\returns A 32-bit unsigned integer containing the contents of the MXCSR\n   register.","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":["2507:14-2507:24|2507:1-2507:30|1|-1"],"derived":[],"uses":[]}],"usr2type":[{"usr":106,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[4775472263388561918],"uses":[]},{"usr":114,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[18192788282496896241,5219317217669496575],"uses":[]},{"usr":116,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[1136512980523616016],"uses":[]},{"usr":143,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[7695903632354445191,7910086000676767710,7099449162603520976,7435794011640919976,6887222518221640982,12839793558909395694,4852025416058423242,2478659732259435322,6055228682744163515,7375779283115138970,87434927592228289,10416971859981937944,7865450177671027781,17633085183157285041,13260628061323705666,5434509035781586717],"uses":[]},{"usr":1190554259452593755,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(float)))) float __v4sf","qual_name_offset":66,"short_name_offset":66,"short_name_size":6,"hover":"","comments":"","spell":"16:15-16:21|16:1-16:21|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[],"uses":["72:20-72:26|4|-1","72:34-72:40|4|-1","115:20-115:26|4|-1","115:34-115:40|4|-1","157:20-157:26|4|-1","157:34-157:40|4|-1","198:20-198:26|4|-1","198:34-198:40|4|-1","216:41-216:47|4|-1","233:33-233:39|4|-1","251:40-251:46|4|-1","268:40-268:46|4|-1","287:34-287:40|4|-1","304:34-304:40|4|-1","327:32-327:38|4|-1","327:45-327:51|4|-1","346:32-346:38|4|-1","346:45-346:51|4|-1","369:32-369:38|4|-1","369:45-369:51|4|-1","388:32-388:38|4|-1","388:45-388:51|4|-1","487:42-487:48|4|-1","487:55-487:61|4|-1","505:42-505:48|4|-1","505:55-505:61|4|-1","528:42-528:48|4|-1","528:55-528:61|4|-1","547:42-547:48|4|-1","547:55-547:61|4|-1","571:42-571:48|4|-1","571:55-571:61|4|-1","590:42-590:48|4|-1","590:55-590:61|4|-1","613:43-613:49|4|-1","614:43-614:49|4|-1","614:74-614:80|4|-1","614:87-614:93|4|-1","634:42-634:48|4|-1","634:55-634:61|4|-1","658:43-658:49|4|-1","659:43-659:49|4|-1","659:74-659:80|4|-1","659:87-659:93|4|-1","679:42-679:48|4|-1","679:55-679:61|4|-1","702:43-702:49|4|-1","702:56-702:62|4|-1","721:43-721:49|4|-1","721:56-721:62|4|-1","745:43-745:49|4|-1","745:56-745:62|4|-1","765:43-765:49|4|-1","765:56-765:62|4|-1","790:43-790:49|4|-1","790:56-790:62|4|-1","810:43-810:49|4|-1","810:56-810:62|4|-1","835:43-835:49|4|-1","836:43-836:49|4|-1","836:75-836:81|4|-1","836:88-836:94|4|-1","857:43-857:49|4|-1","857:56-857:62|4|-1","882:43-882:49|4|-1","883:43-883:49|4|-1","883:75-883:81|4|-1","883:88-883:94|4|-1","904:43-904:49|4|-1","904:56-904:62|4|-1","929:43-929:49|4|-1","929:56-929:62|4|-1","949:43-949:49|4|-1","949:56-949:62|4|-1","974:45-974:51|4|-1","974:58-974:64|4|-1","994:45-994:51|4|-1","994:58-994:64|4|-1","1018:33-1018:39|4|-1","1018:46-1018:52|4|-1","1043:33-1043:39|4|-1","1043:46-1043:52|4|-1","1067:33-1067:39|4|-1","1067:46-1067:52|4|-1","1091:33-1091:39|4|-1","1091:46-1091:52|4|-1","1115:33-1115:39|4|-1","1115:46-1115:52|4|-1","1139:34-1139:40|4|-1","1139:47-1139:53|4|-1","1163:34-1163:40|4|-1","1163:47-1163:53|4|-1","1187:34-1187:40|4|-1","1187:47-1187:53|4|-1","1212:34-1212:40|4|-1","1212:47-1212:53|4|-1","1237:34-1237:40|4|-1","1237:47-1237:53|4|-1","1262:34-1262:40|4|-1","1262:47-1262:53|4|-1","1286:35-1286:41|4|-1","1286:48-1286:54|4|-1","1304:35-1304:41|4|-1","1342:37-1342:43|4|-1","1360:42-1360:48|4|-1","1395:36-1395:42|4|-1","1434:38-1434:44|4|-1","1453:43-1453:49|4|-1","1565:35-1565:41|4|-1","1765:35-1765:41|4|-1","1765:48-1765:54|4|-1","2025:34-2025:40|4|-1","2025:47-2025:53|4|-1","2064:34-2064:40|4|-1","2064:47-2064:53|4|-1","2141:32-2141:38|4|-1","2141:45-2141:51|4|-1","2626:35-2626:41|4|-1","2626:48-2626:54|4|-1","2648:35-2648:41|4|-1","2648:48-2648:54|4|-1","2692:35-2692:41|4|-1","2692:48-2692:54|4|-1","2713:35-2713:41|4|-1","2713:48-2713:54|4|-1","2926:35-2926:41|4|-1"]},{"usr":2594275604639658272,"detailed_name":"typedef __attribute__((__vector_size__(2 * sizeof(float)))) float __mm_storeh_pi_v2f32","qual_name_offset":66,"short_name_offset":66,"short_name_size":20,"hover":"","comments":"","spell":"1943:17-1943:37|1943:3-1943:37|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":12,"declarations":[],"derived":[],"instances":[9171920177269591747],"uses":["1945:5-1945:25|4|-1"]},{"usr":2627131249136563950,"detailed_name":"struct __loadu_ps {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":10,"hover":"","comments":"","spell":"1742:10-1742:20|1742:3-1744:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":13082303143719898272,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["1745:25-1745:35|4|-1"]},{"usr":3393148622557572183,"detailed_name":"struct __mm_load1_ps_struct {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":20,"hover":"","comments":"","spell":"1702:10-1702:30|1702:3-1704:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":7099449162603520976,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["1705:30-1705:50|4|-1"]},{"usr":3609722921950041192,"detailed_name":"struct __storeu_ps {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":11,"hover":"","comments":"","spell":"1985:10-1985:21|1985:3-1987:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":16988441666726293938,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["1988:12-1988:23|4|-1"]},{"usr":4499364731336723897,"detailed_name":"typedef __attribute__((__vector_size__(2 * sizeof(float)))) float __mm_loadl_pi_v2f32","qual_name_offset":66,"short_name_offset":66,"short_name_size":19,"hover":"","comments":"","spell":"1653:17-1653:36|1653:3-1653:36|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":12,"declarations":[],"derived":[],"instances":[10635966820918218296,2797015632790413858],"uses":["1655:5-1655:24|4|-1","1657:3-1657:22|4|-1"]},{"usr":6689565180204117334,"detailed_name":"struct __mm_load_ss_struct {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":19,"hover":"","comments":"","spell":"1680:10-1680:29|1680:3-1682:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":7695903632354445191,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["1683:30-1683:49|4|-1"]},{"usr":6694484644766561266,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(int)))) int __v4si","qual_name_offset":62,"short_name_offset":62,"short_name_size":6,"hover":"","comments":"","spell":"15:13-15:19|15:1-15:19|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[],"uses":[]},{"usr":6780605504120274783,"detailed_name":"struct __mm_loadl_pi_struct {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":20,"hover":"","comments":"","spell":"1654:10-1654:30|1654:3-1656:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":10635966820918218296,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["1657:44-1657:64|4|-1"]},{"usr":8534292580219847256,"detailed_name":"typedef __attribute__((__vector_size__(8 * sizeof(char)))) char __v8qi","qual_name_offset":64,"short_name_offset":64,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["2252:40-2252:46|4|-1","2252:53-2252:59|4|-1","2290:40-2290:46|4|-1","2290:53-2290:59|4|-1","2308:35-2308:41|4|-1","2390:28-2390:34|4|-1","2390:41-2390:47|4|-1","2409:39-2409:45|4|-1","2409:52-2409:58|4|-1","2450:40-2450:46|4|-1","2450:53-2450:59|4|-1"]},{"usr":8788115492869736674,"detailed_name":"typedef __attribute__((__vector_size__(1 * sizeof(long long)))) long long __m64","qual_name_offset":74,"short_name_offset":74,"short_name_size":5,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[13971344769252333569,7666180581496407116,11590250024156659795,10971336760273329772,8325380334316610250,8279305112788558143,3062317696053502265,537380644108351252,9147782833885340686,4553229219198459660,914041537216610530,10034600514275767655,16841598162709502018,6677727274711596173,11389044897092791944,10107883828291123831,15307383673320983062,6422686372053752522,17200572025776201729,9237994854287616587,16396922735244776865,4825472638955002365,17550435256203029056,7512976729805946340,9092086189855237100,6205970716789075895,5161263089527970132,5707283488797744711,14728664415620849954,8349630410072249348,6771472525602521469,9421317078949697557,16619094008656590223,4773281959425810022,3758225354417958743,17359452771803778081,8859117749554266394,2643117600512646094,4139471623782623667,12037794003750317127,894379443065538537,14206235733446105972,3651668805947478378],"uses":["1357:19-1357:24|4|-1","1360:11-1360:16|4|-1","1373:19-1373:24|4|-1","1450:19-1450:24|4|-1","1453:11-1453:16|4|-1","1467:19-1467:24|4|-1","1563:28-1563:33|4|-1","1586:27-1586:32|4|-1","1624:32-1624:37|4|-1","1651:32-1651:37|4|-1","1920:15-1920:20|4|-1","1941:15-1941:20|4|-1","2120:15-2120:20|4|-1","2120:27-2120:32|4|-1","2230:19-2230:24|4|-1","2231:14-2231:19|4|-1","2231:25-2231:30|4|-1","2233:11-2233:16|4|-1","2249:19-2249:24|4|-1","2250:13-2250:18|4|-1","2250:24-2250:29|4|-1","2252:11-2252:16|4|-1","2268:19-2268:24|4|-1","2269:14-2269:19|4|-1","2269:25-2269:30|4|-1","2271:11-2271:16|4|-1","2287:19-2287:24|4|-1","2288:13-2288:18|4|-1","2288:24-2288:29|4|-1","2290:11-2290:16|4|-1","2306:18-2306:23|4|-1","2324:19-2324:24|4|-1","2325:16-2325:21|4|-1","2325:27-2325:32|4|-1","2327:11-2327:16|4|-1","2388:19-2388:24|4|-1","2388:30-2388:35|4|-1","2406:19-2406:24|4|-1","2407:13-2407:18|4|-1","2407:24-2407:29|4|-1","2409:11-2409:16|4|-1","2425:19-2425:24|4|-1","2426:14-2426:19|4|-1","2426:25-2426:30|4|-1","2428:11-2428:16|4|-1","2447:19-2447:24|4|-1","2448:13-2448:18|4|-1","2448:24-2448:29|4|-1","2450:11-2450:16|4|-1","2729:16-2729:21|4|-1","2731:3-2731:8|4|-1","2759:16-2759:21|4|-1","2761:3-2761:8|4|-1","2788:15-2788:20|4|-1","2790:3-2790:8|4|-1","2813:15-2813:20|4|-1","2815:3-2815:8|4|-1","2840:18-2840:23|4|-1","2840:29-2840:34|4|-1","2868:19-2868:24|4|-1","2871:3-2871:8|4|-1","2898:19-2898:24|4|-1","2901:3-2901:8|4|-1"]},{"usr":8975352893736947550,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(short)))) short __v4hi","qual_name_offset":66,"short_name_offset":66,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["2233:40-2233:46|4|-1","2233:53-2233:59|4|-1","2271:40-2271:46|4|-1","2271:53-2271:59|4|-1","2327:41-2327:47|4|-1","2327:54-2327:60|4|-1","2428:39-2428:45|4|-1","2428:52-2428:58|4|-1"]},{"usr":9787341394710254332,"detailed_name":"typedef __attribute__((__vector_size__(2 * sizeof(int)))) int __v2si","qual_name_offset":62,"short_name_offset":62,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["1565:48-1565:54|4|-1"]},{"usr":9966681395791421959,"detailed_name":"struct __mm_storeh_pi_struct {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":21,"hover":"","comments":"","spell":"1923:10-1923:31|1923:3-1925:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":6200953239860339635,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["1926:12-1926:33|4|-1"]},{"usr":11228835467077860401,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(float)))) float __m128_u","qual_name_offset":66,"short_name_offset":66,"short_name_size":8,"hover":"","comments":"","spell":"19:15-19:23|19:1-19:23|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[13082303143719898272,16988441666726293938],"uses":["1743:5-1743:13|4|-1","1986:5-1986:13|4|-1"]},{"usr":13502329238466274212,"detailed_name":"typedef __attribute__((__vector_size__(2 * sizeof(float)))) float __mm_loadh_pi_v2f32","qual_name_offset":66,"short_name_offset":66,"short_name_size":19,"hover":"","comments":"","spell":"1626:17-1626:36|1626:3-1626:36|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":12,"declarations":[],"derived":[],"instances":[10943830828807549636,7935491974207249107],"uses":["1628:5-1628:24|4|-1","1630:3-1630:22|4|-1"]},{"usr":14756210806964439033,"detailed_name":"typedef __attribute__((__vector_size__(2 * sizeof(float)))) float __mm_storeh_pi_v2f32","qual_name_offset":66,"short_name_offset":66,"short_name_size":20,"hover":"","comments":"","spell":"1922:17-1922:37|1922:3-1922:37|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":12,"declarations":[],"derived":[],"instances":[6200953239860339635],"uses":["1924:5-1924:25|4|-1"]},{"usr":15205211258358236568,"detailed_name":"struct __mm_store_ss_struct {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":20,"hover":"","comments":"","spell":"1964:10-1964:30|1964:3-1966:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":5434509035781586717,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["1967:12-1967:32|4|-1"]},{"usr":15504093239174731100,"detailed_name":"struct __mm_loadh_pi_struct {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":20,"hover":"","comments":"","spell":"1627:10-1627:30|1627:3-1629:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":10943830828807549636,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["1630:44-1630:64|4|-1"]},{"usr":15682930942610409926,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(float)))) float __m128","qual_name_offset":66,"short_name_offset":66,"short_name_size":6,"hover":"","comments":"","spell":"17:15-17:21|17:1-17:21|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[555487648611874278,4201552604967542501,7721770828950171156,1535570703523371840,9536942087906218803,17854017892245081646,4839252061152861137,2954396844382632468,10944729545817516068,16092742761180368784,934804397509920961,4252862690543919986,11450751798111934518,13753576347281232591,6379422703669542600,18092140275123231390,5954713147074031539,8132311888298929336,5429628544576467812,10870667779953976747,2987250076985918061,15173285642147372190,7388400993547782999,17857590582467642971,4239786079636600728,5492990493067123877,10454107471466202253,2381550919918630842,2063845459755564497,14200383260136494270,7265974332853717377,2540803199646741375,5269954268999039663,12276396262922842202,15894447760381880389,5016911898339359614,2729458717464774052,1819427274228864104,17022530035147388780,3177283725239253967,4259247489133415667,17696265632002812883,9307636303103156841,15721277866624839770,18336928029833875030,9225001350773185845,10657732946006903417,9663638928923342051,5366674967953792174,1278099899392436351,11105468322478515725,12851576791877283520,7408159506116435861,14103130408608504249,2198216006188749934,10700863929281050690,8242935267509526723,7022922123539809201,15478569053682605207,7362765245754793217,793476843278776739,11140643588768260787,9661749557218725639,17647519179929894726,11926982010019139573,16725706039741993667,13843472374385089409,8575064807671988155,14737310073004639928,11742017573037723121,6205088598352667165,16632316161275815143,3046189802891595077,4488824199020054438,9386527020081510896,13353439283488229970,7515888359184060450,8122321822531794924,12269975987347473803,16557205913711713194,15311633513004149405,12004674911092412995,5933224690297617350,4271953284252356904,15872562081860688394,16042413496034369936,4847900194950855134,1881175984715072504,15904725835151762888,3321766536040515498,10736615465270431590,13622161711315332616,11615402099239064229,8313179622603684073,13838289372944276481,4580890126259230617,1691248786673583782,11589740608847537135,2930066988415868896,9190381175270270930,5773075647059291468,9202836608713212098,1797446222363442815,12475506227686358454,14525938812295049457,13251319418389570643,12817348473017366114,3678275427377611073,459278672683888161,5909783587365346946,17781867583555846471,3289215509144355806,1969695227823666278,17844346939842094004,2045644744644539142,3830078565325559415,4171645238337982359,1478530835857239561,12566703206160841318,807958812196795676,4120226299568099232,13014989013538423889,589060071860451974,18351131886126644179,13224989009315029686,3429100407312639906,15765519313708814579,15495043190892298458,8193746663994514787,14662202672514000845,14463889567471092782,5494633450254042212,6870143985318432705,11895304855125775627,4482623433660672874,8737033205253210030,1579206707381775747,3445838285564834386,13866852334359291837,8019748648676351942,17233439258078182967,10331747393202509513,16286779204006879041,1239324971459025799,4009902609704539411,10921437052188935215,17344883304932205944,17986138401194667961,6719809832419407483,11565508968446442335,12443736207341154523,8832425981629827130,14374269741244688134,712349346089860466,14678780290959611995,5910358512237868612],"uses":["49:19-49:25|4|-1","50:12-50:18|4|-1","50:24-50:30|4|-1","69:19-69:25|4|-1","70:12-70:18|4|-1","70:24-70:30|4|-1","72:11-72:17|4|-1","91:19-91:25|4|-1","92:12-92:18|4|-1","92:24-92:30|4|-1","112:19-112:25|4|-1","113:12-113:18|4|-1","113:24-113:30|4|-1","115:11-115:17|4|-1","134:19-134:25|4|-1","135:12-135:18|4|-1","135:24-135:30|4|-1","154:19-154:25|4|-1","155:12-155:18|4|-1","155:24-155:30|4|-1","157:11-157:17|4|-1","176:19-176:25|4|-1","177:12-177:18|4|-1","177:24-177:30|4|-1","195:19-195:25|4|-1","196:12-196:18|4|-1","196:24-196:30|4|-1","198:11-198:17|4|-1","213:19-213:25|4|-1","214:13-214:19|4|-1","216:11-216:17|4|-1","230:19-230:25|4|-1","231:13-231:19|4|-1","248:19-248:25|4|-1","249:12-249:18|4|-1","251:11-251:17|4|-1","265:19-265:25|4|-1","266:12-266:18|4|-1","268:11-268:17|4|-1","284:19-284:25|4|-1","285:14-285:20|4|-1","301:19-301:25|4|-1","302:14-302:20|4|-1","324:19-324:25|4|-1","325:12-325:18|4|-1","325:24-325:30|4|-1","343:19-343:25|4|-1","344:12-344:18|4|-1","344:24-344:30|4|-1","366:19-366:25|4|-1","367:12-367:18|4|-1","367:24-367:30|4|-1","385:19-385:25|4|-1","386:12-386:18|4|-1","386:24-386:30|4|-1","403:19-403:25|4|-1","404:12-404:18|4|-1","404:24-404:30|4|-1","406:11-406:17|4|-1","425:19-425:25|4|-1","426:15-426:21|4|-1","426:27-426:33|4|-1","428:11-428:17|4|-1","443:19-443:25|4|-1","444:11-444:17|4|-1","444:23-444:29|4|-1","446:11-446:17|4|-1","462:19-462:25|4|-1","463:12-463:18|4|-1","463:24-463:30|4|-1","465:11-465:17|4|-1","484:19-484:25|4|-1","485:14-485:20|4|-1","485:26-485:32|4|-1","487:11-487:17|4|-1","502:19-502:25|4|-1","503:14-503:20|4|-1","503:26-503:32|4|-1","505:11-505:17|4|-1","525:19-525:25|4|-1","526:14-526:20|4|-1","526:26-526:32|4|-1","528:11-528:17|4|-1","544:19-544:25|4|-1","545:14-545:20|4|-1","545:26-545:32|4|-1","547:11-547:17|4|-1","568:19-568:25|4|-1","569:14-569:20|4|-1","569:26-569:32|4|-1","571:11-571:17|4|-1","587:19-587:25|4|-1","588:14-588:20|4|-1","588:26-588:32|4|-1","590:11-590:17|4|-1","610:19-610:25|4|-1","611:14-611:20|4|-1","611:26-611:32|4|-1","613:11-613:17|4|-1","631:19-631:25|4|-1","632:14-632:20|4|-1","632:26-632:32|4|-1","634:11-634:17|4|-1","655:19-655:25|4|-1","656:14-656:20|4|-1","656:26-656:32|4|-1","658:11-658:17|4|-1","676:19-676:25|4|-1","677:14-677:20|4|-1","677:26-677:32|4|-1","679:11-679:17|4|-1","699:19-699:25|4|-1","700:15-700:21|4|-1","700:27-700:33|4|-1","702:11-702:17|4|-1","718:19-718:25|4|-1","719:15-719:21|4|-1","719:27-719:33|4|-1","721:11-721:17|4|-1","742:19-742:25|4|-1","743:15-743:21|4|-1","743:27-743:33|4|-1","745:11-745:17|4|-1","762:19-762:25|4|-1","763:15-763:21|4|-1","763:27-763:33|4|-1","765:11-765:17|4|-1","787:19-787:25|4|-1","788:15-788:21|4|-1","788:27-788:33|4|-1","790:11-790:17|4|-1","807:19-807:25|4|-1","808:15-808:21|4|-1","808:27-808:33|4|-1","810:11-810:17|4|-1","832:19-832:25|4|-1","833:15-833:21|4|-1","833:27-833:33|4|-1","835:11-835:17|4|-1","854:19-854:25|4|-1","855:15-855:21|4|-1","855:27-855:33|4|-1","857:11-857:17|4|-1","879:19-879:25|4|-1","880:15-880:21|4|-1","880:27-880:33|4|-1","882:11-882:17|4|-1","901:19-901:25|4|-1","902:15-902:21|4|-1","902:27-902:33|4|-1","904:11-904:17|4|-1","926:19-926:25|4|-1","927:15-927:21|4|-1","927:27-927:33|4|-1","929:11-929:17|4|-1","946:19-946:25|4|-1","947:15-947:21|4|-1","947:27-947:33|4|-1","949:11-949:17|4|-1","971:19-971:25|4|-1","972:17-972:23|4|-1","972:29-972:35|4|-1","974:11-974:17|4|-1","991:19-991:25|4|-1","992:17-992:23|4|-1","992:29-992:35|4|-1","994:11-994:17|4|-1","1016:15-1016:21|4|-1","1016:27-1016:33|4|-1","1041:15-1041:21|4|-1","1041:27-1041:33|4|-1","1065:15-1065:21|4|-1","1065:27-1065:33|4|-1","1089:15-1089:21|4|-1","1089:27-1089:33|4|-1","1113:15-1113:21|4|-1","1113:27-1113:33|4|-1","1137:16-1137:22|4|-1","1137:28-1137:34|4|-1","1161:16-1161:22|4|-1","1161:28-1161:34|4|-1","1185:16-1185:22|4|-1","1185:28-1185:34|4|-1","1210:16-1210:22|4|-1","1210:28-1210:34|4|-1","1235:16-1235:22|4|-1","1235:28-1235:34|4|-1","1260:16-1260:22|4|-1","1260:28-1260:34|4|-1","1284:17-1284:23|4|-1","1284:29-1284:35|4|-1","1302:16-1302:22|4|-1","1320:15-1320:21|4|-1","1340:16-1340:22|4|-1","1358:16-1358:22|4|-1","1374:15-1374:21|4|-1","1393:17-1393:23|4|-1","1412:16-1412:22|4|-1","1432:17-1432:23|4|-1","1451:17-1451:23|4|-1","1468:16-1468:22|4|-1","1489:19-1489:25|4|-1","1490:16-1490:22|4|-1","1512:19-1512:25|4|-1","1513:15-1513:21|4|-1","1536:19-1536:25|4|-1","1537:16-1537:22|4|-1","1562:19-1562:25|4|-1","1563:16-1563:22|4|-1","1585:19-1585:25|4|-1","1586:15-1586:21|4|-1","1603:15-1603:21|4|-1","1623:19-1623:25|4|-1","1624:14-1624:20|4|-1","1631:3-1631:9|4|-1","1650:19-1650:25|4|-1","1651:14-1651:20|4|-1","1658:3-1658:9|4|-1","1677:19-1677:25|4|-1","1684:25-1684:31|4|-1","1699:19-1699:25|4|-1","1706:25-1706:31|4|-1","1722:19-1722:25|4|-1","1725:18-1725:24|4|-1","1739:19-1739:25|4|-1","1761:19-1761:25|4|-1","1764:3-1764:9|4|-1","1775:19-1775:25|4|-1","1778:11-1778:17|4|-1","1795:19-1795:25|4|-1","1798:25-1798:31|4|-1","1813:19-1813:25|4|-1","1816:25-1816:31|4|-1","1832:19-1832:25|4|-1","1859:19-1859:25|4|-1","1862:25-1862:31|4|-1","1887:19-1887:25|4|-1","1890:25-1890:31|4|-1","1902:19-1902:25|4|-1","1905:25-1905:31|4|-1","1920:27-1920:33|4|-1","1941:27-1941:33|4|-1","1962:26-1962:32|4|-1","1983:27-1983:33|4|-1","2004:26-2004:32|4|-1","2006:5-2006:11|4|-1","2023:27-2023:33|4|-1","2043:27-2043:33|4|-1","2062:27-2062:33|4|-1","2139:27-2139:33|4|-1","2623:19-2623:25|4|-1","2624:17-2624:23|4|-1","2624:29-2624:35|4|-1","2645:19-2645:25|4|-1","2646:17-2646:23|4|-1","2646:29-2646:35|4|-1","2667:19-2667:25|4|-1","2668:13-2668:19|4|-1","2668:25-2668:31|4|-1","2689:19-2689:25|4|-1","2690:15-2690:21|4|-1","2690:27-2690:33|4|-1","2710:19-2710:25|4|-1","2711:15-2711:21|4|-1","2711:27-2711:33|4|-1","2728:19-2728:25|4|-1","2732:3-2732:9|4|-1","2758:19-2758:25|4|-1","2762:3-2762:9|4|-1","2787:19-2787:25|4|-1","2812:19-2812:25|4|-1","2839:19-2839:25|4|-1","2842:3-2842:9|4|-1","2869:16-2869:22|4|-1","2899:15-2899:21|4|-1","2924:17-2924:23|4|-1"]},{"usr":16257475749305741879,"detailed_name":"struct __mm_storeh_pi_struct {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":21,"hover":"","comments":"","spell":"1944:10-1944:31|1944:3-1946:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":9171920177269591747,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["1947:12-1947:33|4|-1"]},{"usr":17688558412358925216,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(unsigned int)))) unsigned int __v4su","qual_name_offset":80,"short_name_offset":80,"short_name_size":6,"hover":"","comments":"Unsigned types","spell":"22:22-22:28|22:1-22:28|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[],"uses":["406:20-406:26|4|-1","406:34-406:40|4|-1","428:21-428:27|4|-1","428:35-428:41|4|-1","446:20-446:26|4|-1","446:34-446:40|4|-1","465:20-465:26|4|-1","465:34-465:40|4|-1"]}],"usr2var":[{"usr":16181773607350984,"detailed_name":"_MM_GET_EXCEPTION_MASK","qual_name_offset":0,"short_name_offset":0,"short_name_size":22,"hover":"#define _MM_GET_EXCEPTION_MASK() (_mm_getcsr() & _MM_MASK_MASK)","comments":"","spell":"2960:9-2960:31|2960:9-2960:64|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":87434927592228289,"detailed_name":"float __w","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"1860:51-1860:54|1860:45-1860:54|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1862:34-1862:37|12|-1"]},{"usr":127197721756651027,"detailed_name":"_m_pavgw","qual_name_offset":0,"short_name_offset":0,"short_name_size":8,"hover":"#define _m_pavgw _mm_avg_pu16","comments":"","spell":"2995:9-2995:17|2995:9-2995:30|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":196098519087066308,"detailed_name":"_MM_SET_FLUSH_ZERO_MODE","qual_name_offset":0,"short_name_offset":0,"short_name_size":23,"hover":"#define _MM_SET_FLUSH_ZERO_MODE(x) (_mm_setcsr((_mm_getcsr() & ~_MM_FLUSH_ZERO_MASK) | (x)))","comments":"","spell":"2967:9-2967:32|2967:9-2967:93|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":459278672683888161,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1284:24-1284:27|1284:17-1284:27|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1286:42-1286:45|12|-1"]},{"usr":468947794838505812,"detailed_name":"_MM_ROUND_MASK","qual_name_offset":0,"short_name_offset":0,"short_name_size":14,"hover":"#define _MM_ROUND_MASK        (0x6000U)","comments":"","spell":"2954:9-2954:23|2954:9-2954:40|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":505826242233458443,"detailed_name":"float *__p","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1983:22-1983:25|1983:15-1983:25|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1988:25-1988:28|12|-1"]},{"usr":537380644108351252,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2120:33-2120:36|2120:27-2120:36|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2122:30-2122:33|12|-1"]},{"usr":555487648611874278,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"50:19-50:22|50:12-50:22|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["52:3-52:6|4|-1","53:10-53:13|12|-1"]},{"usr":589060071860451974,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1537:23-1537:26|1537:16-1537:26|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1539:3-1539:6|4|-1","1540:10-1540:13|12|-1"]},{"usr":712349346089860466,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2869:23-2869:26|2869:16-2869:26|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2873:24-2873:27|12|-1","2874:3-2874:6|20|-1","2874:23-2874:26|12|-1","2874:28-2874:31|12|-1","2875:24-2875:27|12|-1"]},{"usr":793476843278776739,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"719:22-719:25|719:15-719:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["721:50-721:53|12|-1"]},{"usr":807958812196795676,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1468:23-1468:26|1468:16-1468:26|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1470:26-1470:29|12|-1"]},{"usr":894379443065538537,"detailed_name":"__m64 __c","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2871:14-2871:17|2871:3-2871:17|2|-1","type":8788115492869736674,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["2875:3-2875:6|20|-1","2877:30-2877:33|12|-1"]},{"usr":914041537216610530,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2250:19-2250:22|2250:13-2250:22|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2252:47-2252:50|12|-1"]},{"usr":934804397509920961,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"155:19-155:22|155:12-155:22|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["157:27-157:30|12|-1"]},{"usr":963079137835547762,"detailed_name":"_mm_shuffle_pi16","qual_name_offset":0,"short_name_offset":0,"short_name_size":16,"hover":"#define _mm_shuffle_pi16(a, n) \\\n  (__m64)__builtin_ia32_pshufw((__v4hi)(__m64)(a), (n))","comments":"","spell":"2361:9-2361:25|2361:9-2362:56|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":1136512980523616016,"detailed_name":"long long __b","qual_name_offset":10,"short_name_offset":10,"short_name_size":3,"hover":"","comments":"","spell":"1537:38-1537:41|1537:28-1537:41|1026|-1","type":116,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1539:12-1539:15|12|-1"]},{"usr":1239324971459025799,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2646:36-2646:39|2646:29-2646:39|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2648:55-2648:58|12|-1"]},{"usr":1278099899392436351,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"588:33-588:36|588:26-588:36|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["590:62-590:65|12|-1"]},{"usr":1410988936468200186,"detailed_name":"const float *__p","qual_name_offset":13,"short_name_offset":13,"short_name_size":3,"hover":"","comments":"","spell":"1740:27-1740:30|1740:14-1740:30|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1745:37-1745:40|12|-1"]},{"usr":1478530835857239561,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1432:24-1432:27|1432:17-1432:27|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1434:45-1434:48|12|-1"]},{"usr":1535570703523371840,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"70:31-70:34|70:24-70:34|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["72:41-72:44|12|-1"]},{"usr":1579206707381775747,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2023:34-2023:37|2023:27-2023:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2025:3-2025:6|20|-1","2025:41-2025:44|12|-1","2025:54-2025:57|12|-1","2026:21-2026:24|12|-1"]},{"usr":1691248786673583782,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1137:23-1137:26|1137:16-1137:26|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1139:41-1139:44|12|-1"]},{"usr":1797446222363442815,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1210:23-1210:26|1210:16-1210:26|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1212:41-1212:44|12|-1"]},{"usr":1819427274228864104,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"463:31-463:34|463:24-463:34|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["465:41-465:44|12|-1"]},{"usr":1881175984715072504,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1016:34-1016:37|1016:27-1016:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1018:53-1018:56|12|-1"]},{"usr":1931600870343510824,"detailed_name":"_MM_SET_EXCEPTION_MASK","qual_name_offset":0,"short_name_offset":0,"short_name_size":22,"hover":"#define _MM_SET_EXCEPTION_MASK(x) (_mm_setcsr((_mm_getcsr() & ~_MM_MASK_MASK) | (x)))","comments":"","spell":"2965:9-2965:31|2965:9-2965:86|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":1969695227823666278,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1340:23-1340:26|1340:16-1340:26|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1342:44-1342:47|12|-1"]},{"usr":2020116925844745609,"detailed_name":"_MM_HINT_T1","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _MM_HINT_T1  2","comments":"","spell":"2071:9-2071:20|2071:9-2071:23|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":2045644744644539142,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1374:22-1374:25|1374:15-1374:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1376:25-1376:28|12|-1"]},{"usr":2063845459755564497,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"386:19-386:22|386:12-386:22|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["388:39-388:42|12|-1"]},{"usr":2183609559424824227,"detailed_name":"_m_pshufw","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _m_pshufw _mm_shuffle_pi16","comments":"","spell":"2992:9-2992:18|2992:9-2992:35|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":2198216006188749934,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"656:21-656:24|656:14-656:24|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["658:50-658:53|12|-1","659:94-659:97|12|-1"]},{"usr":2381550919918630842,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"367:31-367:34|367:24-367:34|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["369:52-369:55|12|-1"]},{"usr":2418471416372815800,"detailed_name":"_MM_HINT_ET1","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _MM_HINT_ET1 6","comments":"","spell":"2069:9-2069:21|2069:9-2069:23|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":2478659732259435322,"detailed_name":"float __z","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"1860:18-1860:21|1860:12-1860:21|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1862:49-1862:52|12|-1"]},{"usr":2540803199646741375,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"404:31-404:34|404:24-404:34|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["406:41-406:44|12|-1"]},{"usr":2643117600512646094,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2840:24-2840:27|2840:18-2840:27|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2848:30-2848:33|12|-1"]},{"usr":2729458717464774052,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"463:19-463:22|463:12-463:22|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["465:27-465:30|12|-1"]},{"usr":2747671984506315255,"detailed_name":"_MM_EXCEPT_OVERFLOW","qual_name_offset":0,"short_name_offset":0,"short_name_size":19,"hover":"#define _MM_EXCEPT_OVERFLOW   (0x0008U)","comments":"","spell":"2937:9-2937:28|2937:9-2937:40|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":2797015632790413858,"detailed_name":"__mm_loadl_pi_v2f32 __b","qual_name_offset":20,"short_name_offset":20,"short_name_size":3,"hover":"__mm_loadl_pi_v2f32 __b = ((const struct __mm_loadl_pi_struct*)__p)->__u","comments":"","spell":"1657:23-1657:26|1657:3-1657:75|2|-1","type":4499364731336723897,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["1658:41-1658:44|4|-1","1658:46-1658:49|4|-1"]},{"usr":2803245721756220324,"detailed_name":"_m_","qual_name_offset":0,"short_name_offset":0,"short_name_size":3,"hover":"#define _m_ _mm_","comments":"","spell":"2998:9-2998:12|2998:9-2998:17|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":["2997:9-2997:12|2997:9-2997:17|2|-1"],"uses":[]},{"usr":2878757047363226475,"detailed_name":"_MM_SET_ROUNDING_MODE","qual_name_offset":0,"short_name_offset":0,"short_name_size":21,"hover":"#define _MM_SET_ROUNDING_MODE(x) (_mm_setcsr((_mm_getcsr() & ~_MM_ROUND_MASK) | (x)))","comments":"","spell":"2968:9-2968:30|2968:9-2968:86|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":2884436121269655429,"detailed_name":"_MM_TRANSPOSE4_PS","qual_name_offset":0,"short_name_offset":0,"short_name_size":17,"hover":"#define _MM_TRANSPOSE4_PS(row0, row1, row2, row3) \\\ndo { \\\n  __m128 tmp3, tmp2, tmp1, tmp0; \\\n  tmp0 = _mm_unpacklo_ps((row0), (row1)); \\\n  tmp2 = _mm_unpacklo_ps((row2), (row3)); \\\n  tmp1 = _mm_unpackhi_ps((row0), (row1)); \\\n  tmp3 = _mm_unpackhi_ps((row2), (row3)); \\\n  (row0) = _mm_movelh_ps(tmp0, tmp2); \\\n  (row1) = _mm_movehl_ps(tmp2, tmp0); \\\n  (row2) = _mm_movelh_ps(tmp1, tmp3); \\\n  (row3) = _mm_movehl_ps(tmp3, tmp1); \\\n} while (0)","comments":"","spell":"2970:9-2970:26|2970:9-2981:12|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":2921042784038610878,"detailed_name":"__XMMINTRIN_H","qual_name_offset":0,"short_name_offset":0,"short_name_size":13,"hover":"#define __XMMINTRIN_H","comments":"","spell":"11:9-11:22|11:9-11:22|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":2930066988415868896,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1161:23-1161:26|1161:16-1161:26|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1163:41-1163:44|12|-1"]},{"usr":2954396844382632468,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"113:31-113:34|113:24-113:34|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["115:41-115:44|12|-1"]},{"usr":2987250076985918061,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"285:21-285:24|285:14-285:24|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["287:41-287:44|12|-1"]},{"usr":3046189802891595077,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"855:22-855:25|855:15-855:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["857:63-857:66|12|-1"]},{"usr":3062317696053502265,"detailed_name":"__m64 *__p","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2120:22-2120:25|2120:15-2120:25|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2122:25-2122:28|12|-1"]},{"usr":3106566813082458486,"detailed_name":"_MM_HINT_T2","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _MM_HINT_T2  1","comments":"","spell":"2072:9-2072:20|2072:9-2072:23|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":3177283725239253967,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"485:33-485:36|485:26-485:36|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["487:62-487:65|12|-1"]},{"usr":3289215509144355806,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1320:22-1320:25|1320:15-1320:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1322:25-1322:28|12|-1"]},{"usr":3321766536040515498,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1041:34-1041:37|1041:27-1041:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1043:53-1043:56|12|-1"]},{"usr":3360532469676266243,"detailed_name":"_MM_EXCEPT_MASK","qual_name_offset":0,"short_name_offset":0,"short_name_size":15,"hover":"#define _MM_EXCEPT_MASK       (0x003fU)","comments":"","spell":"2940:9-2940:24|2940:9-2940:40|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":3429100407312639906,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1603:22-1603:25|1603:15-1603:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1605:10-1605:13|4|-1"]},{"usr":3445838285564834386,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2043:34-2043:37|2043:27-2043:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2045:22-2045:25|12|-1"]},{"usr":3651668805947478378,"detailed_name":"__m64 __c","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2901:14-2901:17|2901:3-2901:17|2|-1","type":8788115492869736674,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["2904:3-2904:6|20|-1","2906:30-2906:33|12|-1"]},{"usr":3678275427377611073,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1260:35-1260:38|1260:28-1260:38|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1262:54-1262:57|12|-1"]},{"usr":3758225354417958743,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2790:9-2790:12|2790:3-2790:12|2|-1","type":8788115492869736674,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["2792:3-2792:6|20|-1","2793:3-2793:6|20|-1","2793:23-2793:26|12|-1","2794:3-2794:6|20|-1","2794:31-2794:34|12|-1","2796:25-2796:28|12|-1"]},{"usr":3789516487945681185,"detailed_name":"_MM_SET_EXCEPTION_STATE","qual_name_offset":0,"short_name_offset":0,"short_name_size":23,"hover":"#define _MM_SET_EXCEPTION_STATE(x) (_mm_setcsr((_mm_getcsr() & ~_MM_EXCEPT_MASK) | (x)))","comments":"","spell":"2966:9-2966:32|2966:9-2966:89|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":3830078565325559415,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1393:24-1393:27|1393:17-1393:27|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1395:43-1395:46|12|-1"]},{"usr":3921480041024180222,"detailed_name":"_MM_EXCEPT_DIV_ZERO","qual_name_offset":0,"short_name_offset":0,"short_name_size":19,"hover":"#define _MM_EXCEPT_DIV_ZERO   (0x0004U)","comments":"","spell":"2936:9-2936:28|2936:9-2936:40|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":4009902609704539411,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2668:20-2668:23|2668:13-2668:23|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2670:3-2670:6|4|-1","2671:10-2671:13|12|-1"]},{"usr":4120226299568099232,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1490:23-1490:26|1490:16-1490:26|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1492:3-1492:6|4|-1","1493:10-1493:13|12|-1"]},{"usr":4139471623782623667,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2840:35-2840:38|2840:29-2840:38|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2845:29-2845:32|12|-1"]},{"usr":4171645238337982359,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1412:23-1412:26|1412:16-1412:26|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1414:26-1414:29|12|-1"]},{"usr":4201552604967542501,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"50:31-50:34|50:24-50:34|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["52:13-52:16|4|-1"]},{"usr":4209949898908728928,"detailed_name":"const float *__p","qual_name_offset":13,"short_name_offset":13,"short_name_size":3,"hover":"","comments":"","spell":"1762:27-1762:30|1762:14-1762:30|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1764:28-1764:31|12|-1"]},{"usr":4224412052228745005,"detailed_name":"_m_pmovmskb","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _m_pmovmskb _mm_movemask_pi8","comments":"","spell":"2990:9-2990:20|2990:9-2990:37|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":4239786079636600728,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"344:19-344:22|344:12-344:22|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["346:39-346:42|12|-1"]},{"usr":4250802333620742022,"detailed_name":"_MM_HINT_NTA","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _MM_HINT_NTA 0","comments":"","spell":"2073:9-2073:21|2073:9-2073:23|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":4252862690543919986,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"155:31-155:34|155:24-155:34|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["157:41-157:44|12|-1"]},{"usr":4259247489133415667,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"503:21-503:24|503:14-503:24|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["505:49-505:52|12|-1"]},{"usr":4271953284252356904,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"972:36-972:39|972:29-972:39|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["974:65-974:68|12|-1"]},{"usr":4482623433660672874,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1983:34-1983:37|1983:27-1983:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1988:37-1988:40|12|-1"]},{"usr":4488824199020054438,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"855:34-855:37|855:27-855:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["857:50-857:53|12|-1"]},{"usr":4553229219198459660,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2231:31-2231:34|2231:25-2231:34|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2233:60-2233:63|12|-1"]},{"usr":4580890126259230617,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1113:34-1113:37|1113:27-1113:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1115:53-1115:56|12|-1"]},{"usr":4619299027787433963,"detailed_name":"_m_pminsw","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _m_pminsw _mm_min_pi16","comments":"","spell":"2988:9-2988:18|2988:9-2988:31|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":4773281959425810022,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2788:21-2788:24|2788:15-2788:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2793:28-2793:31|12|-1","2794:26-2794:29|12|-1"]},{"usr":4775472263388561918,"detailed_name":"unsigned int __i","qual_name_offset":13,"short_name_offset":13,"short_name_size":3,"hover":"","comments":"","spell":"2561:30-2561:33|2561:17-2561:33|1026|-1","type":106,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":[]},{"usr":4825472638955002365,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2407:19-2407:22|2407:13-2407:22|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2409:46-2409:49|12|-1"]},{"usr":4839252061152861137,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"113:19-113:22|113:12-113:22|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["115:27-115:30|12|-1"]},{"usr":4847900194950855134,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1016:22-1016:25|1016:15-1016:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1018:40-1018:43|12|-1"]},{"usr":4852025416058423242,"detailed_name":"float __w","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"1833:19-1833:22|1833:13-1833:22|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1835:24-1835:27|12|-1"]},{"usr":5016911898339359614,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"444:30-444:33|444:23-444:33|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["446:41-446:44|12|-1"]},{"usr":5067836695056138901,"detailed_name":"_MM_ALIGN16","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _MM_ALIGN16 __attribute__((aligned(16)))","comments":"","spell":"2930:9-2930:20|2930:9-2930:49|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":5071495876373041238,"detailed_name":"_MM_MASK_UNDERFLOW","qual_name_offset":0,"short_name_offset":0,"short_name_size":18,"hover":"#define _MM_MASK_UNDERFLOW    (0x0800U)","comments":"","spell":"2946:9-2946:27|2946:9-2946:40|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":5161263089527970132,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2448:30-2448:33|2448:24-2448:33|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2450:60-2450:63|12|-1"]},{"usr":5219317217669496575,"detailed_name":"int __b","qual_name_offset":4,"short_name_offset":4,"short_name_size":3,"hover":"","comments":"","spell":"1513:31-1513:34|1513:27-1513:34|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1515:30-1515:33|12|-1"]},{"usr":5269954268999039663,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"426:22-426:25|426:15-426:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["428:28-428:31|12|-1"]},{"usr":5366674967953792174,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"588:21-588:24|588:14-588:24|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["590:49-590:52|12|-1"]},{"usr":5429628544576467812,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"249:19-249:22|249:12-249:22|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["251:47-251:50|12|-1"]},{"usr":5434509035781586717,"detailed_name":"float _mm_store_ss(float *, __m128)::__mm_store_ss_struct::__u","qual_name_offset":6,"short_name_offset":59,"short_name_size":3,"hover":"","comments":"","spell":"1965:11-1965:14|1965:5-1965:14|2|-1","type":143,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1967:40-1967:43|20|-1"]},{"usr":5492990493067123877,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"344:31-344:34|344:24-344:34|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["346:52-346:55|12|-1"]},{"usr":5494633450254042212,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1920:34-1920:37|1920:27-1920:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1926:71-1926:74|4|-1","1926:76-1926:79|4|-1"]},{"usr":5639902718882285318,"detailed_name":"_MM_HINT_T0","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _MM_HINT_T0  3","comments":"","spell":"2070:9-2070:20|2070:9-2070:23|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":5707283488797744711,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2729:22-2729:25|2729:16-2729:25|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2735:29-2735:32|12|-1","2736:27-2736:30|12|-1","2740:27-2740:30|12|-1"]},{"usr":5742458001999066171,"detailed_name":"_mm_prefetch","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_prefetch(a, sel) (__builtin_prefetch((const void *)(a), \\\n                                                 ((sel) >> 2) & 1, (sel) & 0x3))","comments":"","spell":"2103:9-2103:21|2103:9-2104:81|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":5773075647059291468,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1185:23-1185:26|1185:16-1185:26|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1187:41-1187:44|12|-1"]},{"usr":5909783587365346946,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1284:36-1284:39|1284:29-1284:39|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1286:55-1286:58|12|-1"]},{"usr":5910358512237868612,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2924:24-2924:27|2924:17-2924:27|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2926:42-2926:45|12|-1"]},{"usr":5933224690297617350,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"972:24-972:27|972:17-972:27|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["974:52-974:55|12|-1"]},{"usr":5954713147074031539,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"214:20-214:23|214:13-214:23|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["216:48-216:51|12|-1"]},{"usr":5959208524750396916,"detailed_name":"const float *__p","qual_name_offset":13,"short_name_offset":13,"short_name_size":3,"hover":"","comments":"","spell":"1678:26-1678:29|1678:13-1678:29|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1683:51-1683:54|12|-1"]},{"usr":6055228682744163515,"detailed_name":"float __y","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"1860:29-1860:32|1860:23-1860:32|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1862:44-1862:47|12|-1"]},{"usr":6200953239860339635,"detailed_name":"__mm_storeh_pi_v2f32 _mm_storeh_pi(__m64 *, __m128)::__mm_storeh_pi_struct::__u","qual_name_offset":21,"short_name_offset":76,"short_name_size":3,"hover":"","comments":"","spell":"1924:26-1924:29|1924:5-1924:29|2|-1","type":14756210806964439033,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1926:41-1926:44|20|-1"]},{"usr":6205088598352667165,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"833:22-833:25|833:15-833:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["835:50-835:53|12|-1","836:95-836:98|12|-1"]},{"usr":6205970716789075895,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2448:19-2448:22|2448:13-2448:22|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2450:47-2450:50|12|-1"]},{"usr":6244783094694707624,"detailed_name":"_m_pmaxsw","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _m_pmaxsw _mm_max_pi16","comments":"","spell":"2986:9-2986:18|2986:9-2986:31|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":6379422703669542600,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"196:19-196:22|196:12-196:22|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["198:27-198:30|12|-1"]},{"usr":6422686372053752522,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2325:22-2325:25|2325:16-2325:25|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2327:48-2327:51|12|-1"]},{"usr":6433530955438435627,"detailed_name":"float *__p","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2139:22-2139:25|2139:15-2139:25|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2141:53-2141:56|12|-1"]},{"usr":6677727274711596173,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2269:31-2269:34|2269:25-2269:34|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2271:60-2271:63|12|-1"]},{"usr":6719809832419407483,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2711:22-2711:25|2711:15-2711:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2713:42-2713:45|12|-1"]},{"usr":6729903690428959420,"detailed_name":"float *__p","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2043:22-2043:25|2043:15-2043:25|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2045:17-2045:20|12|-1"]},{"usr":6771472525602521469,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2759:22-2759:25|2759:16-2759:25|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2765:27-2765:30|12|-1","2769:27-2769:30|12|-1"]},{"usr":6785961253359204381,"detailed_name":"_MM_MASK_DIV_ZERO","qual_name_offset":0,"short_name_offset":0,"short_name_size":17,"hover":"#define _MM_MASK_DIV_ZERO     (0x0200U)","comments":"","spell":"2944:9-2944:26|2944:9-2944:40|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":6815401986734572933,"detailed_name":"_MM_FLUSH_ZERO_ON","qual_name_offset":0,"short_name_offset":0,"short_name_size":17,"hover":"#define _MM_FLUSH_ZERO_ON     (0x8000U)","comments":"","spell":"2957:9-2957:26|2957:9-2957:40|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":6870143985318432705,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1941:34-1941:37|1941:27-1941:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1947:71-1947:74|4|-1","1947:76-1947:79|4|-1"]},{"usr":6887222518221640982,"detailed_name":"float __w","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"1796:18-1796:21|1796:12-1796:21|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1798:34-1798:37|12|-1"]},{"usr":7022922123539809201,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"677:33-677:36|677:26-677:36|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["679:49-679:52|12|-1"]},{"usr":7099449162603520976,"detailed_name":"float _mm_load1_ps(const float *)::__mm_load1_ps_struct::__u","qual_name_offset":6,"short_name_offset":57,"short_name_size":3,"hover":"","comments":"","spell":"1703:11-1703:14|1703:5-1703:14|2|-1","type":143,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1705:58-1705:61|12|-1"]},{"usr":7237724390375796775,"detailed_name":"_MM_EXCEPT_UNDERFLOW","qual_name_offset":0,"short_name_offset":0,"short_name_size":20,"hover":"#define _MM_EXCEPT_UNDERFLOW  (0x0010U)","comments":"","spell":"2938:9-2938:29|2938:9-2938:40|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":7265974332853717377,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"404:19-404:22|404:12-404:22|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["406:27-406:30|12|-1"]},{"usr":7362765245754793217,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"700:34-700:37|700:27-700:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["702:63-702:66|12|-1"]},{"usr":7375779283115138970,"detailed_name":"float __x","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"1860:40-1860:43|1860:34-1860:43|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1862:39-1862:42|12|-1"]},{"usr":7388400993547782999,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"325:19-325:22|325:12-325:22|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["327:39-327:42|12|-1"]},{"usr":7408159506116435861,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"632:21-632:24|632:14-632:24|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["634:62-634:65|12|-1"]},{"usr":7435794011640919976,"detailed_name":"float __u","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"float __u = ((const struct __mm_load1_ps_struct*)__p)->__u","comments":"","spell":"1705:9-1705:12|1705:3-1705:61|2|-1","type":143,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["1706:34-1706:37|12|-1","1706:39-1706:42|12|-1","1706:44-1706:47|12|-1","1706:49-1706:52|12|-1"]},{"usr":7487980420661028467,"detailed_name":"_MM_ROUND_DOWN","qual_name_offset":0,"short_name_offset":0,"short_name_size":14,"hover":"#define _MM_ROUND_DOWN        (0x2000U)","comments":"","spell":"2951:9-2951:23|2951:9-2951:40|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":7512976729805946340,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2426:20-2426:23|2426:14-2426:23|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2428:46-2428:49|12|-1"]},{"usr":7515888359184060450,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"902:22-902:25|902:15-902:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["904:63-904:66|12|-1"]},{"usr":7610058419918029857,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","type":0,"kind":0,"parent_kind":0,"storage":0,"declarations":[],"uses":["26:5-26:20|64|-1"]},{"usr":7666180581496407116,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"1586:33-1586:36|1586:27-1586:36|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1588:30-1588:33|12|-1"]},{"usr":7695903632354445191,"detailed_name":"float _mm_load_ss(const float *)::__mm_load_ss_struct::__u","qual_name_offset":6,"short_name_offset":55,"short_name_size":3,"hover":"","comments":"","spell":"1681:11-1681:14|1681:5-1681:14|2|-1","type":143,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1683:57-1683:60|12|-1"]},{"usr":7721770828950171156,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"70:19-70:22|70:12-70:22|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["72:27-72:30|12|-1"]},{"usr":7814202550933025407,"detailed_name":"_MM_ROUND_TOWARD_ZERO","qual_name_offset":0,"short_name_offset":0,"short_name_size":21,"hover":"#define _MM_ROUND_TOWARD_ZERO (0x6000U)","comments":"","spell":"2953:9-2953:30|2953:9-2953:40|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":7865450177671027781,"detailed_name":"float __y","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"1888:30-1888:33|1888:24-1888:33|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1890:39-1890:42|12|-1"]},{"usr":7910086000676767710,"detailed_name":"float __u","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"float __u = ((const struct __mm_load_ss_struct*)__p)->__u","comments":"","spell":"1683:9-1683:12|1683:3-1683:60|2|-1","type":143,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["1684:34-1684:37|12|-1"]},{"usr":7935491974207249107,"detailed_name":"__mm_loadh_pi_v2f32 __b","qual_name_offset":20,"short_name_offset":20,"short_name_size":3,"hover":"__mm_loadh_pi_v2f32 __b = ((const struct __mm_loadh_pi_struct*)__p)->__u","comments":"","spell":"1630:23-1630:26|1630:3-1630:75|2|-1","type":13502329238466274212,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["1631:41-1631:44|4|-1","1631:46-1631:49|4|-1"]},{"usr":8019748648676351942,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2139:34-2139:37|2139:27-2139:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2141:39-2141:42|12|-1"]},{"usr":8040068194526281800,"detailed_name":"_MM_GET_FLUSH_ZERO_MODE","qual_name_offset":0,"short_name_offset":0,"short_name_size":23,"hover":"#define _MM_GET_FLUSH_ZERO_MODE() (_mm_getcsr() & _MM_FLUSH_ZERO_MASK)","comments":"","spell":"2962:9-2962:32|2962:9-2962:71|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":8122321822531794924,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"902:34-902:37|902:27-902:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["904:50-904:53|12|-1"]},{"usr":8132311888298929336,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"231:20-231:23|231:13-231:23|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["233:40-233:43|12|-1"]},{"usr":8193746663994514787,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1651:21-1651:24|1651:14-1651:24|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1659:34-1659:37|4|-1"]},{"usr":8242935267509526723,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"677:21-677:24|677:14-677:24|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["679:62-679:65|12|-1"]},{"usr":8279305112788558143,"detailed_name":"__m64 *__p","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1941:22-1941:25|1941:15-1941:25|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1947:35-1947:38|12|-1"]},{"usr":8313179622603684073,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1089:34-1089:37|1089:27-1089:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1091:53-1091:56|12|-1"]},{"usr":8325380334316610250,"detailed_name":"__m64 *__p","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1920:22-1920:25|1920:15-1920:25|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1926:35-1926:38|12|-1"]},{"usr":8349630410072249348,"detailed_name":"__m64 __c","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2731:14-2731:17|2731:3-2731:17|2|-1","type":8788115492869736674,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["2736:3-2736:6|20|-1","2738:29-2738:32|12|-1","2740:3-2740:6|20|-1","2741:29-2741:32|12|-1"]},{"usr":8471276017866606197,"detailed_name":"_mm_insert_pi16","qual_name_offset":0,"short_name_offset":0,"short_name_size":15,"hover":"#define _mm_insert_pi16(a, d, n) \\\n  (__m64)__builtin_ia32_vec_set_v4hi((__v4hi)a, (int)d, (int)n)","comments":"","spell":"2214:9-2214:24|2214:9-2215:64|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":8575064807671988155,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"788:34-788:37|788:27-788:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["790:63-790:66|12|-1"]},{"usr":8620324560491641645,"detailed_name":"_MM_MASK_OVERFLOW","qual_name_offset":0,"short_name_offset":0,"short_name_size":17,"hover":"#define _MM_MASK_OVERFLOW     (0x0400U)","comments":"","spell":"2945:9-2945:26|2945:9-2945:40|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":8737033205253210030,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2004:33-2004:36|2004:26-2004:36|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2006:19-2006:22|12|-1"]},{"usr":8832425981629827130,"detailed_name":"__m128 __r","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2762:10-2762:13|2762:3-2762:13|2|-1","type":15682930942610409926,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["2766:3-2766:6|20|-1","2767:3-2767:6|20|-1","2767:24-2767:27|12|-1","2768:3-2768:6|20|-1","2768:23-2768:26|12|-1","2768:28-2768:31|12|-1","2770:3-2770:6|20|-1","2770:24-2770:27|12|-1","2772:10-2772:13|12|-1"]},{"usr":8859117749554266394,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2815:9-2815:12|2815:3-2815:12|2|-1","type":8788115492869736674,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["2817:3-2817:6|20|-1","2818:3-2818:6|20|-1","2818:31-2818:34|12|-1","2820:25-2820:28|12|-1"]},{"usr":9092086189855237100,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2426:31-2426:34|2426:25-2426:34|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2428:59-2428:62|12|-1"]},{"usr":9147782833885340686,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2231:20-2231:23|2231:14-2231:23|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2233:47-2233:50|12|-1"]},{"usr":9171920177269591747,"detailed_name":"__mm_storeh_pi_v2f32 _mm_storel_pi(__m64 *, __m128)::__mm_storeh_pi_struct::__u","qual_name_offset":21,"short_name_offset":76,"short_name_size":3,"hover":"","comments":"","spell":"1945:26-1945:29|1945:5-1945:29|2|-1","type":2594275604639658272,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1947:41-1947:44|20|-1"]},{"usr":9190381175270270930,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1161:35-1161:38|1161:28-1161:38|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1163:54-1163:57|12|-1"]},{"usr":9202836608713212098,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1185:35-1185:38|1185:28-1185:38|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1187:54-1187:57|12|-1"]},{"usr":9225001350773185845,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"545:33-545:36|545:26-545:36|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["547:62-547:65|12|-1"]},{"usr":9237994854287616587,"detailed_name":"__m64 __d","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2388:25-2388:28|2388:19-2388:28|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2390:35-2390:38|12|-1"]},{"usr":9307636303103156841,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"526:21-526:24|526:14-526:24|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["528:49-528:52|12|-1"]},{"usr":9386527020081510896,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"880:22-880:25|880:15-880:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["882:50-882:53|12|-1","883:95-883:98|12|-1"]},{"usr":9421317078949697557,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2761:9-2761:12|2761:3-2761:12|2|-1","type":8788115492869736674,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["2764:3-2764:6|20|-1","2765:32-2765:35|12|-1","2769:32-2769:35|12|-1"]},{"usr":9536942087906218803,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"92:19-92:22|92:12-92:22|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["94:3-94:6|4|-1","95:10-95:13|12|-1"]},{"usr":9661749557218725639,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"743:22-743:25|743:15-743:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["745:50-745:53|12|-1"]},{"usr":9663638928923342051,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"569:33-569:36|569:26-569:36|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["571:62-571:65|12|-1"]},{"usr":9731206639367214007,"detailed_name":"_m_pminub","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _m_pminub _mm_min_pu8","comments":"","spell":"2989:9-2989:18|2989:9-2989:30|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":9849531877377296428,"detailed_name":"_MM_FLUSH_ZERO_MASK","qual_name_offset":0,"short_name_offset":0,"short_name_size":19,"hover":"#define _MM_FLUSH_ZERO_MASK   (0x8000U)","comments":"","spell":"2956:9-2956:28|2956:9-2956:40|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":9877844235464973100,"detailed_name":"_mm_load_ps1","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_load_ps1(p) _mm_load1_ps(p)","comments":"","spell":"1709:16-1709:28|1709:16-1709:47|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":9896341135987221150,"detailed_name":"char *__p","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2388:47-2388:50|2388:41-2388:50|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2390:53-2390:56|12|-1"]},{"usr":10034600514275767655,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2250:30-2250:33|2250:24-2250:33|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2252:60-2252:63|12|-1"]},{"usr":10042183191335595206,"detailed_name":"_MM_SHUFFLE","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _MM_SHUFFLE(z, y, x, w) (((z) << 6) | ((y) << 4) | ((x) << 2) | (w))","comments":"","spell":"2932:9-2932:20|2932:9-2932:77|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":10107883828291123831,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2288:30-2288:33|2288:24-2288:33|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2290:60-2290:63|12|-1"]},{"usr":10331747393202509513,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2624:36-2624:39|2624:29-2624:39|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2626:55-2626:58|12|-1"]},{"usr":10416971859981937944,"detailed_name":"float __z","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"1888:19-1888:22|1888:13-1888:22|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1890:34-1890:37|12|-1"]},{"usr":10452316733921528856,"detailed_name":"_MM_EXCEPT_INEXACT","qual_name_offset":0,"short_name_offset":0,"short_name_size":18,"hover":"#define _MM_EXCEPT_INEXACT    (0x0020U)","comments":"","spell":"2939:9-2939:27|2939:9-2939:40|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":10454107471466202253,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"367:19-367:22|367:12-367:22|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["369:39-369:42|12|-1"]},{"usr":10635966820918218296,"detailed_name":"__mm_loadl_pi_v2f32 _mm_loadl_pi(__m128, const __m64 *)::__mm_loadl_pi_struct::__u","qual_name_offset":20,"short_name_offset":79,"short_name_size":3,"hover":"","comments":"","spell":"1655:25-1655:28|1655:5-1655:28|2|-1","type":4499364731336723897,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1657:72-1657:75|12|-1"]},{"usr":10657732946006903417,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"569:21-569:24|569:14-569:24|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["571:49-571:52|12|-1"]},{"usr":10700863929281050690,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"656:33-656:36|656:26-656:36|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["659:81-659:84|12|-1"]},{"usr":10736615465270431590,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1065:22-1065:25|1065:15-1065:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1067:40-1067:43|12|-1"]},{"usr":10870667779953976747,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"266:19-266:22|266:12-266:22|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["268:47-268:50|12|-1"]},{"usr":10921437052188935215,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2668:32-2668:35|2668:25-2668:35|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2670:12-2670:15|4|-1"]},{"usr":10935249183515629732,"detailed_name":"_m_pmulhuw","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _m_pmulhuw _mm_mulhi_pu16","comments":"","spell":"2991:9-2991:19|2991:9-2991:34|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":10943830828807549636,"detailed_name":"__mm_loadh_pi_v2f32 _mm_loadh_pi(__m128, const __m64 *)::__mm_loadh_pi_struct::__u","qual_name_offset":20,"short_name_offset":79,"short_name_size":3,"hover":"","comments":"","spell":"1628:25-1628:28|1628:5-1628:28|2|-1","type":13502329238466274212,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1630:72-1630:75|12|-1"]},{"usr":10944729545817516068,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"135:19-135:22|135:12-135:22|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["137:3-137:6|4|-1","138:10-138:13|12|-1"]},{"usr":10971336760273329772,"detailed_name":"const __m64 *__p","qual_name_offset":13,"short_name_offset":13,"short_name_size":3,"hover":"","comments":"","spell":"1651:39-1651:42|1651:26-1651:42|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1657:66-1657:69|12|-1"]},{"usr":11105468322478515725,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"611:21-611:24|611:14-611:24|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["613:50-613:53|12|-1","614:94-614:97|12|-1"]},{"usr":11140643588768260787,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"719:34-719:37|719:27-719:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["721:63-721:66|12|-1"]},{"usr":11296276270203251993,"detailed_name":"float *__p","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1962:21-1962:24|1962:14-1962:24|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1967:34-1967:37|12|-1"]},{"usr":11389044897092791944,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2288:19-2288:22|2288:13-2288:22|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2290:47-2290:50|12|-1"]},{"usr":11450751798111934518,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"177:19-177:22|177:12-177:22|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["179:3-179:6|4|-1","180:10-180:13|12|-1"]},{"usr":11565508968446442335,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2711:34-2711:37|2711:27-2711:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2713:55-2713:58|12|-1"]},{"usr":11589740608847537135,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1137:35-1137:38|1137:28-1137:38|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1139:54-1139:57|12|-1"]},{"usr":11590250024156659795,"detailed_name":"const __m64 *__p","qual_name_offset":13,"short_name_offset":13,"short_name_size":3,"hover":"","comments":"","spell":"1624:39-1624:42|1624:26-1624:42|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1630:66-1630:69|12|-1"]},{"usr":11615402099239064229,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1089:22-1089:25|1089:15-1089:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1091:40-1091:43|12|-1"]},{"usr":11742017573037723121,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"808:34-808:37|808:27-808:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["810:63-810:66|12|-1"]},{"usr":11789133289833376031,"detailed_name":"float *__p","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2004:21-2004:24|2004:14-2004:24|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2006:13-2006:16|12|-1"]},{"usr":11895304855125775627,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1962:33-1962:36|1962:26-1962:36|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1967:46-1967:49|4|-1"]},{"usr":11926982010019139573,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"763:22-763:25|763:15-763:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["765:50-765:53|12|-1"]},{"usr":12004674911092412995,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"947:34-947:37|947:27-947:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["949:63-949:66|12|-1"]},{"usr":12037794003750317127,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2871:9-2871:12|2871:3-2871:12|2|-1","type":8788115492869736674,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["2873:3-2873:6|20|-1","2877:25-2877:28|12|-1"]},{"usr":12140277634088827908,"detailed_name":"__DEFAULT_FN_ATTRS","qual_name_offset":0,"short_name_offset":0,"short_name_size":18,"hover":"#define __DEFAULT_FN_ATTRS __attribute__((__always_inline__, __nodebug__, __target__(\"sse\"), __min_vector_width__(128)))","comments":"","spell":"31:9-31:27|31:9-31:121|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":["49:26-49:44|64|-1","69:26-69:44|64|-1","91:26-91:44|64|-1","112:26-112:44|64|-1","134:26-134:44|64|-1","154:26-154:44|64|-1","176:26-176:44|64|-1","195:26-195:44|64|-1","213:26-213:44|64|-1","230:26-230:44|64|-1","248:26-248:44|64|-1","265:26-265:44|64|-1","284:26-284:44|64|-1","301:26-301:44|64|-1","324:26-324:44|64|-1","343:26-343:44|64|-1","366:26-366:44|64|-1","385:26-385:44|64|-1","403:26-403:44|64|-1","425:26-425:44|64|-1","443:26-443:44|64|-1","462:26-462:44|64|-1","484:26-484:44|64|-1","502:26-502:44|64|-1","525:26-525:44|64|-1","544:26-544:44|64|-1","568:26-568:44|64|-1","587:26-587:44|64|-1","610:26-610:44|64|-1","631:26-631:44|64|-1","655:26-655:44|64|-1","676:26-676:44|64|-1","699:26-699:44|64|-1","718:26-718:44|64|-1","742:26-742:44|64|-1","762:26-762:44|64|-1","787:26-787:44|64|-1","807:26-807:44|64|-1","832:26-832:44|64|-1","854:26-854:44|64|-1","879:26-879:44|64|-1","901:26-901:44|64|-1","926:26-926:44|64|-1","946:26-946:44|64|-1","971:26-971:44|64|-1","991:26-991:44|64|-1","1015:23-1015:41|64|-1","1040:23-1040:41|64|-1","1064:23-1064:41|64|-1","1088:23-1088:41|64|-1","1112:23-1112:41|64|-1","1136:23-1136:41|64|-1","1160:23-1160:41|64|-1","1184:23-1184:41|64|-1","1209:23-1209:41|64|-1","1234:23-1234:41|64|-1","1259:23-1259:41|64|-1","1283:23-1283:41|64|-1","1301:23-1301:41|64|-1","1319:23-1319:41|64|-1","1339:29-1339:47|64|-1","1392:23-1392:41|64|-1","1411:23-1411:41|64|-1","1431:29-1431:47|64|-1","1489:26-1489:44|64|-1","1512:26-1512:44|64|-1","1536:26-1536:44|64|-1","1602:25-1602:43|64|-1","1623:26-1623:44|64|-1","1650:26-1650:44|64|-1","1677:26-1677:44|64|-1","1699:26-1699:44|64|-1","1722:26-1722:44|64|-1","1739:26-1739:44|64|-1","1761:26-1761:44|64|-1","1775:26-1775:44|64|-1","1795:26-1795:44|64|-1","1813:26-1813:44|64|-1","1832:26-1832:44|64|-1","1859:26-1859:44|64|-1","1887:26-1887:44|64|-1","1902:26-1902:44|64|-1","1919:24-1919:42|64|-1","1940:24-1940:42|64|-1","1961:24-1961:42|64|-1","1982:24-1982:42|64|-1","2003:24-2003:42|64|-1","2022:24-2022:42|64|-1","2042:24-2042:42|64|-1","2061:24-2061:42|64|-1","2138:24-2138:42|64|-1","2623:26-2623:44|64|-1","2645:26-2645:44|64|-1","2667:26-2667:44|64|-1","2689:26-2689:44|64|-1","2710:26-2710:44|64|-1","2923:23-2923:41|64|-1","3000:8-3000:26|64|-1"]},{"usr":12269975987347473803,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"927:22-927:25|927:15-927:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["929:50-929:53|12|-1"]},{"usr":12276396262922842202,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"426:34-426:37|426:27-426:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["428:42-428:45|12|-1"]},{"usr":12328926416367997571,"detailed_name":"const float *__p","qual_name_offset":13,"short_name_offset":13,"short_name_size":3,"hover":"","comments":"","spell":"1723:26-1723:29|1723:13-1723:29|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1725:26-1725:29|12|-1"]},{"usr":12443736207341154523,"detailed_name":"__m128 __r","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2732:10-2732:13|2732:3-2732:13|2|-1","type":15682930942610409926,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["2737:3-2737:6|20|-1","2738:3-2738:6|20|-1","2738:24-2738:27|12|-1","2739:3-2739:6|20|-1","2739:23-2739:26|12|-1","2739:28-2739:31|12|-1","2741:3-2741:6|20|-1","2741:24-2741:27|12|-1","2743:10-2743:13|12|-1"]},{"usr":12475506227686358454,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1210:35-1210:38|1210:28-1210:38|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1212:54-1212:57|12|-1"]},{"usr":12566703206160841318,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1451:24-1451:27|1451:17-1451:27|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1453:50-1453:53|12|-1"]},{"usr":12763344878742533739,"detailed_name":"_m_pextrw","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _m_pextrw _mm_extract_pi16","comments":"","spell":"2984:9-2984:18|2984:9-2984:35|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":12817348473017366114,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1260:23-1260:26|1260:16-1260:26|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1262:41-1262:44|12|-1"]},{"usr":12839793558909395694,"detailed_name":"float __w","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"1814:19-1814:22|1814:13-1814:22|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1816:34-1816:37|12|-1","1816:39-1816:42|12|-1","1816:44-1816:47|12|-1","1816:49-1816:52|12|-1"]},{"usr":12851576791877283520,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"611:33-611:36|611:26-611:36|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["614:81-614:84|12|-1"]},{"usr":13014989013538423889,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1513:22-1513:25|1513:15-1513:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1515:25-1515:28|12|-1"]},{"usr":13082303143719898272,"detailed_name":"__m128_u _mm_loadu_ps(const float *)::__loadu_ps::__v","qual_name_offset":9,"short_name_offset":50,"short_name_size":3,"hover":"","comments":"","spell":"1743:14-1743:17|1743:5-1743:17|2|-1","type":11228835467077860401,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1745:43-1745:46|12|-1"]},{"usr":13113134434013817177,"detailed_name":"_MM_ROUND_UP","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _MM_ROUND_UP          (0x4000U)","comments":"","spell":"2952:9-2952:21|2952:9-2952:40|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":13186301895290732128,"detailed_name":"_mm_extract_pi16","qual_name_offset":0,"short_name_offset":0,"short_name_size":16,"hover":"#define _mm_extract_pi16(a, n) \\\n  (int)__builtin_ia32_vec_ext_v4hi((__v4hi)a, (int)n)","comments":"","spell":"2183:9-2183:25|2183:9-2184:54|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":13224989009315029686,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1586:22-1586:25|1586:15-1586:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1588:25-1588:28|12|-1"]},{"usr":13251319418389570643,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1235:35-1235:38|1235:28-1235:38|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1237:54-1237:57|12|-1"]},{"usr":13260628061323705666,"detailed_name":"float __w","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"1888:52-1888:55|1888:46-1888:55|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1890:49-1890:52|12|-1"]},{"usr":13353439283488229970,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"880:34-880:37|880:27-880:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["883:82-883:85|12|-1"]},{"usr":13524652726480305401,"detailed_name":"_m_pinsrw","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _m_pinsrw _mm_insert_pi16","comments":"","spell":"2985:9-2985:18|2985:9-2985:34|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":13622161711315332616,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1065:34-1065:37|1065:27-1065:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1067:53-1067:56|12|-1"]},{"usr":13753576347281232591,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"177:31-177:34|177:24-177:34|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["179:13-179:16|4|-1"]},{"usr":13790110245572938694,"detailed_name":"__DEFAULT_FN_ATTRS_MMX","qual_name_offset":0,"short_name_offset":0,"short_name_size":22,"hover":"#define __DEFAULT_FN_ATTRS_MMX __attribute__((__always_inline__, __nodebug__, __target__(\"mmx,sse\"), __min_vector_width__(64)))","comments":"","spell":"32:9-32:31|32:9-32:128|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":["1357:25-1357:47|64|-1","1373:25-1373:47|64|-1","1450:25-1450:47|64|-1","1467:25-1467:47|64|-1","1562:26-1562:48|64|-1","1585:26-1585:48|64|-1","2119:24-2119:46|64|-1","2230:25-2230:47|64|-1","2249:25-2249:47|64|-1","2268:25-2268:47|64|-1","2287:25-2287:47|64|-1","2305:23-2305:45|64|-1","2324:25-2324:47|64|-1","2387:24-2387:46|64|-1","2406:25-2406:47|64|-1","2425:25-2425:47|64|-1","2447:25-2447:47|64|-1","2728:26-2728:48|64|-1","2758:26-2758:48|64|-1","2787:26-2787:48|64|-1","2812:26-2812:48|64|-1","2839:26-2839:48|64|-1","2868:25-2868:47|64|-1","2898:25-2898:47|64|-1","3001:8-3001:30|64|-1"]},{"usr":13838289372944276481,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1113:22-1113:25|1113:15-1113:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1115:40-1115:43|12|-1"]},{"usr":13843472374385089409,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"788:22-788:25|788:15-788:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["790:50-790:53|12|-1"]},{"usr":13866852334359291837,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2062:34-2062:37|2062:27-2062:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2064:3-2064:6|20|-1","2064:41-2064:44|12|-1","2064:54-2064:57|12|-1","2065:21-2065:24|12|-1"]},{"usr":13942531393390496203,"detailed_name":"_MM_MASK_INEXACT","qual_name_offset":0,"short_name_offset":0,"short_name_size":16,"hover":"#define _MM_MASK_INEXACT      (0x1000U)","comments":"","spell":"2947:9-2947:25|2947:9-2947:40|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":13954867898150320670,"detailed_name":"_m_maskmovq","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _m_maskmovq _mm_maskmove_si64","comments":"","spell":"2993:9-2993:20|2993:9-2993:38|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":13971344769252333569,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"1563:34-1563:37|1563:28-1563:37|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1565:55-1565:58|12|-1"]},{"usr":14103130408608504249,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"632:33-632:36|632:26-632:36|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["634:49-634:52|12|-1"]},{"usr":14173379081577850081,"detailed_name":"_MM_GET_ROUNDING_MODE","qual_name_offset":0,"short_name_offset":0,"short_name_size":21,"hover":"#define _MM_GET_ROUNDING_MODE() (_mm_getcsr() & _MM_ROUND_MASK)","comments":"","spell":"2963:9-2963:30|2963:9-2963:64|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":14200383260136494270,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"386:31-386:34|386:24-386:34|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["388:52-388:55|12|-1"]},{"usr":14206235733446105972,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2901:9-2901:12|2901:3-2901:12|2|-1","type":8788115492869736674,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["2903:3-2903:6|20|-1","2906:25-2906:28|12|-1"]},{"usr":14374269741244688134,"detailed_name":"__m128 __c","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2842:10-2842:13|2842:3-2842:13|2|-1","type":15682930942610409926,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["2844:3-2844:6|20|-1","2845:3-2845:6|20|-1","2845:24-2845:27|12|-1","2846:3-2846:6|20|-1","2846:23-2846:26|12|-1","2846:28-2846:31|12|-1","2848:25-2848:28|12|-1"]},{"usr":14463889567471092782,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"__m128 __a = _mm_load_ps(__p)","comments":"","spell":"1764:10-1764:13|1764:3-1764:32|2|-1","type":15682930942610409926,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["1765:42-1765:45|12|-1","1765:55-1765:58|12|-1"]},{"usr":14525938812295049457,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1235:23-1235:26|1235:16-1235:26|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1237:41-1237:44|12|-1"]},{"usr":14559126713949950029,"detailed_name":"_MM_HINT_ET0","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _MM_HINT_ET0 7","comments":"","spell":"2068:9-2068:21|2068:9-2068:23|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":14662202672514000845,"detailed_name":"__m128 __bb","qual_name_offset":7,"short_name_offset":7,"short_name_size":4,"hover":"__m128 __bb = __builtin_shufflevector(__b, __b, 0, 1, 0, 1)","comments":"","spell":"1658:10-1658:14|1658:3-1658:62|2|-1","type":15682930942610409926,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["1659:39-1659:43|4|-1"]},{"usr":14678780290959611995,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2899:22-2899:25|2899:15-2899:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2903:24-2903:27|12|-1"]},{"usr":14728664415620849954,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2731:9-2731:12|2731:3-2731:12|2|-1","type":8788115492869736674,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["2734:3-2734:6|20|-1","2735:3-2735:6|20|-1","2735:24-2735:27|12|-1","2736:32-2736:35|12|-1","2740:32-2740:35|12|-1"]},{"usr":14737310073004639928,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"808:22-808:25|808:15-808:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["810:50-810:53|12|-1"]},{"usr":15101628850422035865,"detailed_name":"_MM_EXCEPT_INVALID","qual_name_offset":0,"short_name_offset":0,"short_name_size":18,"hover":"#define _MM_EXCEPT_INVALID    (0x0001U)","comments":"","spell":"2934:9-2934:27|2934:9-2934:40|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":15118577315986721543,"detailed_name":"_MM_MASK_MASK","qual_name_offset":0,"short_name_offset":0,"short_name_size":13,"hover":"#define _MM_MASK_MASK         (0x1f80U)","comments":"","spell":"2948:9-2948:22|2948:9-2948:40|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":15143372126820725757,"detailed_name":"float *__p","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2023:22-2023:25|2023:15-2023:25|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2026:16-2026:19|12|-1"]},{"usr":15160704757101854121,"detailed_name":"_m_psadbw","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _m_psadbw _mm_sad_pu8","comments":"","spell":"2996:9-2996:18|2996:9-2996:30|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":15173285642147372190,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"302:21-302:24|302:14-302:24|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["304:41-304:44|12|-1"]},{"usr":15192560601704751963,"detailed_name":"_MM_MASK_INVALID","qual_name_offset":0,"short_name_offset":0,"short_name_size":16,"hover":"#define _MM_MASK_INVALID      (0x0080U)","comments":"","spell":"2942:9-2942:25|2942:9-2942:40|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":15307383673320983062,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2306:24-2306:27|2306:18-2306:27|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2308:42-2308:45|12|-1"]},{"usr":15311633513004149405,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"947:22-947:25|947:15-947:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["949:50-949:53|12|-1"]},{"usr":15381320600864862630,"detailed_name":"const float *__p","qual_name_offset":13,"short_name_offset":13,"short_name_size":3,"hover":"","comments":"","spell":"1700:27-1700:30|1700:14-1700:30|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1705:52-1705:55|12|-1"]},{"usr":15478569053682605207,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"700:22-700:25|700:15-700:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["702:50-702:53|12|-1"]},{"usr":15495043190892298458,"detailed_name":"__m128 __bb","qual_name_offset":7,"short_name_offset":7,"short_name_size":4,"hover":"__m128 __bb = __builtin_shufflevector(__b, __b, 0, 1, 0, 1)","comments":"","spell":"1631:10-1631:14|1631:3-1631:62|2|-1","type":15682930942610409926,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["1632:39-1632:43|4|-1"]},{"usr":15618034077036970094,"detailed_name":"_mm_shuffle_ps","qual_name_offset":0,"short_name_offset":0,"short_name_size":14,"hover":"#define _mm_shuffle_ps(a, b, mask) \\\n  (__m128)__builtin_ia32_shufps((__v4sf)(__m128)(a), (__v4sf)(__m128)(b), \\\n                                (int)(mask))","comments":"","spell":"2603:9-2603:23|2603:9-2605:45|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":15721277866624839770,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"526:33-526:36|526:26-526:36|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["528:62-528:65|12|-1"]},{"usr":15765519313708814579,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1624:21-1624:24|1624:14-1624:24|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1632:34-1632:37|4|-1"]},{"usr":15872562081860688394,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"992:24-992:27|992:17-992:27|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["994:52-994:55|12|-1"]},{"usr":15894447760381880389,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"444:18-444:21|444:11-444:21|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["446:27-446:30|12|-1"]},{"usr":15904725835151762888,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1041:22-1041:25|1041:15-1041:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1043:40-1043:43|12|-1"]},{"usr":16042413496034369936,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"992:36-992:39|992:29-992:39|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["994:65-994:68|12|-1"]},{"usr":16052303295452671644,"detailed_name":"_m_pavgb","qual_name_offset":0,"short_name_offset":0,"short_name_size":8,"hover":"#define _m_pavgb _mm_avg_pu8","comments":"","spell":"2994:9-2994:17|2994:9-2994:29|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":16092742761180368784,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"135:31-135:34|135:24-135:34|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["137:13-137:16|4|-1"]},{"usr":16286779204006879041,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2646:24-2646:27|2646:17-2646:27|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2648:42-2648:45|12|-1"]},{"usr":16396922735244776865,"detailed_name":"__m64 __n","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2388:36-2388:39|2388:30-2388:39|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2390:48-2390:51|12|-1"]},{"usr":16557205913711713194,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"927:34-927:37|927:27-927:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["929:63-929:66|12|-1"]},{"usr":16619094008656590223,"detailed_name":"__m64 __c","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2761:14-2761:17|2761:3-2761:17|2|-1","type":8788115492869736674,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["2765:3-2765:6|20|-1","2767:29-2767:32|12|-1","2769:3-2769:6|20|-1","2770:29-2770:32|12|-1"]},{"usr":16632316161275815143,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"833:34-833:37|833:27-833:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["836:82-836:85|12|-1"]},{"usr":16725706039741993667,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"763:34-763:37|763:27-763:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["765:63-765:66|12|-1"]},{"usr":16741411125471245869,"detailed_name":"_MM_ROUND_NEAREST","qual_name_offset":0,"short_name_offset":0,"short_name_size":17,"hover":"#define _MM_ROUND_NEAREST     (0x0000U)","comments":"","spell":"2950:9-2950:26|2950:9-2950:40|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":16841598162709502018,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2269:20-2269:23|2269:14-2269:23|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2271:47-2271:50|12|-1"]},{"usr":16897082187010020926,"detailed_name":"_MM_EXCEPT_DENORM","qual_name_offset":0,"short_name_offset":0,"short_name_size":17,"hover":"#define _MM_EXCEPT_DENORM     (0x0002U)","comments":"","spell":"2935:9-2935:26|2935:9-2935:40|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":16988441666726293938,"detailed_name":"__m128_u _mm_storeu_ps(float *, __m128)::__storeu_ps::__v","qual_name_offset":9,"short_name_offset":54,"short_name_size":3,"hover":"","comments":"","spell":"1986:14-1986:17|1986:5-1986:17|2|-1","type":11228835467077860401,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1988:31-1988:34|20|-1"]},{"usr":17022530035147388780,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"485:21-485:24|485:14-485:24|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["487:49-487:52|12|-1"]},{"usr":17068105486457687276,"detailed_name":"_MM_FLUSH_ZERO_OFF","qual_name_offset":0,"short_name_offset":0,"short_name_size":18,"hover":"#define _MM_FLUSH_ZERO_OFF    (0x0000U)","comments":"","spell":"2958:9-2958:27|2958:9-2958:40|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":17163202913409695733,"detailed_name":"float *__p","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2062:22-2062:25|2062:15-2062:25|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2065:16-2065:19|12|-1"]},{"usr":17200572025776201729,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2325:33-2325:36|2325:27-2325:36|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2327:61-2327:64|12|-1"]},{"usr":17233439258078182967,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2624:24-2624:27|2624:17-2624:27|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2626:42-2626:45|12|-1"]},{"usr":17344883304932205944,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2690:22-2690:25|2690:15-2690:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2692:42-2692:45|12|-1"]},{"usr":17359452771803778081,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2813:21-2813:24|2813:15-2813:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2818:26-2818:29|12|-1"]},{"usr":17495880378379442912,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","type":0,"kind":0,"parent_kind":0,"storage":0,"declarations":[],"uses":["3004:27-3004:44|64|-1"]},{"usr":17550435256203029056,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2407:30-2407:33|2407:24-2407:33|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2409:59-2409:62|12|-1"]},{"usr":17567503531611730880,"detailed_name":"_MM_GET_EXCEPTION_STATE","qual_name_offset":0,"short_name_offset":0,"short_name_size":23,"hover":"#define _MM_GET_EXCEPTION_STATE() (_mm_getcsr() & _MM_EXCEPT_MASK)","comments":"","spell":"2961:9-2961:32|2961:9-2961:67|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":17633085183157285041,"detailed_name":"float __x","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"1888:41-1888:44|1888:35-1888:44|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1890:44-1890:47|12|-1"]},{"usr":17647519179929894726,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"743:34-743:37|743:27-743:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["745:63-745:66|12|-1"]},{"usr":17696265632002812883,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"503:33-503:36|503:26-503:36|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["505:62-505:65|12|-1"]},{"usr":17781867583555846471,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1302:23-1302:26|1302:16-1302:26|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1304:42-1304:45|12|-1"]},{"usr":17844346939842094004,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1358:23-1358:26|1358:16-1358:26|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1360:49-1360:52|12|-1"]},{"usr":17854017892245081646,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"92:31-92:34|92:24-92:34|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["94:13-94:16|4|-1"]},{"usr":17857590582467642971,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"325:31-325:34|325:24-325:34|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["327:52-327:55|12|-1"]},{"usr":17965461191783003248,"detailed_name":"_m_pmaxub","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _m_pmaxub _mm_max_pu8","comments":"","spell":"2987:9-2987:18|2987:9-2987:30|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":17986138401194667961,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2690:34-2690:37|2690:27-2690:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2692:55-2692:58|12|-1"]},{"usr":18092140275123231390,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"196:31-196:34|196:24-196:34|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["198:41-198:44|12|-1"]},{"usr":18192788282496896241,"detailed_name":"int __b","qual_name_offset":4,"short_name_offset":4,"short_name_size":3,"hover":"","comments":"","spell":"1490:32-1490:35|1490:28-1490:35|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1492:12-1492:15|12|-1"]},{"usr":18335020774563507638,"detailed_name":"_MM_MASK_DENORM","qual_name_offset":0,"short_name_offset":0,"short_name_size":15,"hover":"#define _MM_MASK_DENORM       (0x0100U)","comments":"","spell":"2943:9-2943:24|2943:9-2943:40|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":18336928029833875030,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"545:21-545:24|545:14-545:24|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["547:49-547:52|12|-1"]},{"usr":18351131886126644179,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1563:23-1563:26|1563:16-1563:26|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1565:42-1565:45|12|-1"]}]}