21
{"md5":"d905b09b29cb36b015d25405cfbf8e5a","language":0,"no_linkage":true,"lid2path":[],"import_file":"[GIT_TOP_DIR]/src/impl/FhtKacRotator.cpp","args":["clang","[GIT_TOP_DIR]/src/impl/FhtKacRotator.cpp","-working-directory=[GIT_TOP_DIR]/"],"dependencies":{"/usr/include/c++/10/bits/stl_numeric.h":"ignore_header_sys","/usr/include/ctype.h":"ignore_header_sys","/usr/include/bits/types/__mbstate_t.h":"ignore_header_sys","/usr/include/features.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/immintrin.h":"774d8f5fec0961c7f69eaa3c69870fd7","/usr/include/math.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_algobase.h":"ignore_header_sys","/usr/include/bits/byteswap.h":"ignore_header_sys","/usr/include/c++/10/vector":"ignore_header_sys","/usr/include/c++/10/bits/iterator_concepts.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avxintrin.h":"772d5fd2b95bf581b4338458db989424","/usr/include/string.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlintrin.h":"cd26383f2f06392556848bfb374034c1","/usr/local/ob-clang11/lib/clang/11.1.0/include/vaesintrin.h":"230da0a10bfb803dd07d1d4859b589b9","/usr/include/bits/types/struct_FILE.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vbmivlintrin.h":"7a23233bba4c34e5185e02ea4208670c","/usr/include/bits/types/cookie_io_functions_t.h":"ignore_header_sys","/usr/include/bits/fp-logb.h":"ignore_header_sys","/usr/include/sys/cdefs.h":"ignore_header_sys","/usr/include/bits/types/__fpos_t.h":"ignore_header_sys","/usr/include/bits/types/timer_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512bf16intrin.h":"4f5ef6213a91abea3f5d53232215497c","/usr/include/c++/10/bits/locale_classes.h":"ignore_header_sys","/usr/include/c++/10/bits/streambuf.tcc":"ignore_header_sys","/usr/include/c++/10/bits/basic_ios.tcc":"ignore_header_sys","/usr/include/bits/types/mbstate_t.h":"ignore_header_sys","/usr/include/c++/10/bits/locale_facets.h":"ignore_header_sys","/usr/include/bits/sched.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/xmmintrin.h":"04b4174745d9f46d48080aefb7d04c2c","/usr/include/bits/types/wint_t.h":"ignore_header_sys","/usr/include/c++/10/bits/charconv.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_pair.h":"ignore_header_sys","/usr/include/c++/10/bits/char_traits.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/vpclmulqdqintrin.h":"a0ef53b1374f1ff070c815a7572221fa","/usr/include/time.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/wmmintrin.h":"420e06fc7b100109fe408d8cf15dfbbc","/usr/include/c++/10/bits/stl_bvector.h":"ignore_header_sys","/usr/include/c++/10/istream":"ignore_header_sys","/usr/include/bits/types/__sigset_t.h":"ignore_header_sys","/usr/include/c++/10/bits/allocator.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/emmintrin.h":"15ee96a71ec1a4288c0b5ffdad114450","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsavesintrin.h":"dfeb07884315d36739e4aa9dfd1d72ed","/usr/local/ob-clang11/lib/clang/11.1.0/include/smmintrin.h":"dde1073b90fcdddf514ff14bf7b0a39b","/usr/include/sys/types.h":"ignore_header_sys","/usr/include/c++/10/ios":"ignore_header_sys","/usr/include/c++/10/bits/uniform_int_dist.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/lzcntintrin.h":"070db0e5ecc75a113daa65f1a9a569a5","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vpopcntdqintrin.h":"748799b7fb86515d202460f78d94a3c3","/usr/include/bits/time64.h":"ignore_header_sys","/usr/include/bits/uintn-identity.h":"ignore_header_sys","/usr/include/c++/10/bits/cpp_type_traits.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vbmi2intrin.h":"d2eaacea81a5a13e0f771f69d62529ec","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512erintrin.h":"d8a0db1358f0c4f5db208e20fece727d","/usr/include/c++/10/bits/move.h":"ignore_header_sys","/usr/include/c++/10/cstdint":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/c++config.h":"ignore_header_sys","/usr/include/bits/endian.h":"ignore_header_sys","/usr/include/bits/types/__locale_t.h":"ignore_header_sys","/usr/include/bits/fp-fast.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512bitalgintrin.h":"065b5f6c02ddf57ee43a304b33d301c4","/usr/include/bits/wordsize.h":"ignore_header_sys","/usr/include/stdio.h":"ignore_header_sys","/usr/include/c++/10/bits/istream.tcc":"ignore_header_sys","/usr/include/bits/setjmp.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512fintrin.h":"4ce3a9eff70ef9558590a27aa986fc0e","/usr/include/gnu/stubs-64.h":"ignore_header_sys","/usr/include/asm/errno.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/enqcmdintrin.h":"6d8136c8969e9c723c195c33da2bb768","/usr/include/c++/10/ext/type_traits.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512bwintrin.h":"64c1b4a5d84a0126158179cc8904e8bd","/usr/include/bits/types.h":"ignore_header_sys","/usr/include/c++/10/string":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vnniintrin.h":"7cd1a414c4acf95129406d966bc736b5","/usr/include/c++/10/x86_64-redhat-linux/bits/os_defines.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/__wmmintrin_aes.h":"b7829f7e5a4221574897b8e365715ced","/usr/include/c++/10/numeric":"ignore_header_sys","/usr/include/c++/10/type_traits":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/stdint.h":"d6abd57f44fe5f48dbfb05fd9adc130a","/usr/include/c++/10/x86_64-redhat-linux/bits/ctype_inline.h":"ignore_header_sys","/usr/include/c++/10/new":"ignore_header_sys","/usr/include/bits/iscanonical.h":"ignore_header_sys","/usr/include/c++/10/bits/memoryfwd.h":"ignore_header_sys","/usr/include/asm-generic/errno-base.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/__stddef_max_align_t.h":"48e8e2456f77e6cda35d245130fa7259","/usr/local/ob-clang11/lib/clang/11.1.0/include/gfniintrin.h":"e0e20e8bab44c33118878b2889b2f2c8","/usr/include/c++/10/ext/new_allocator.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512ifmaintrin.h":"f52649bdc1dc467b7eadc3e1a810a0e2","/usr/include/c++/10/bits/functexcept.h":"ignore_header_sys","/usr/include/c++/10/bits/functional_hash.h":"ignore_header_sys","/usr/include/bits/endianness.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/popcntintrin.h":"7c3573a43b1c0704aac4cb098811cbb1","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512cdintrin.h":"650ead4d3b72acc353b9327d5ae2a07e","/usr/include/c++/10/bits/random.tcc":"ignore_header_sys","/usr/include/c++/10/debug/assertions.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_iterator_base_funcs.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsavecintrin.h":"8d492bf7b081416e797300c239dba796","/usr/include/c++/10/bits/stl_vector.h":"ignore_header_sys","/usr/include/c++/10/bits/basic_string.tcc":"ignore_header_sys","/usr/include/stdint.h":"ignore_header_sys","/usr/include/bits/types/__fpos64_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/rtmintrin.h":"591e544f8d70825a4bbf807dd287584a","/usr/include/c++/10/iosfwd":"ignore_header_sys","/usr/include/c++/10/cstdlib":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vpopcntdqvlintrin.h":"6af0e4f4c55f44ba40bac27558c51b3c","/usr/include/c++/10/cstring":"ignore_header_sys","/usr/include/bits/struct_rwlock.h":"ignore_header_sys","/usr/include/c++/10/bits/range_access.h":"ignore_header_sys","/usr/include/bits/libc-header-start.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/c++locale.h":"ignore_header_sys","/usr/include/c++/10/bits/vector.tcc":"ignore_header_sys","/usr/include/bits/cpu-set.h":"ignore_header_sys","/usr/include/bits/pthreadtypes-arch.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/ctype_base.h":"ignore_header_sys","/usr/include/c++/10/bits/cxxabi_init_exception.h":"ignore_header_sys","/usr/include/c++/10/bits/concept_check.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/gthr.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_iterator.h":"ignore_header_sys","/usr/include/bits/timex.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/waitpkgintrin.h":"2d1c4c5484fb9ec3a2f974b84ccead3c","/usr/include/bits/errno.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/shaintrin.h":"dd1634de945b1ffc8c6b7f39fa8a60c8","/usr/include/bits/select.h":"ignore_header_sys","/usr/include/wctype.h":"ignore_header_sys","/usr/include/bits/mathcalls.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vbmiintrin.h":"54a67d8ab20b9961e36a3fe16b875d4b","[GIT_TOP_DIR]/src/impl/FhtKacRotator.h":"f2f44cb0ba5dc218fc37736f2bab2192","/usr/local/ob-clang11/lib/clang/11.1.0/include/cetintrin.h":"30568779db4d995828cfd0dc8ab749f3","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx2intrin.h":"b787b869cf3250697b509a53b8f84261","/usr/local/ob-clang11/lib/clang/11.1.0/include/rdseedintrin.h":"d5c4d6f9ca83aa6d76891aa467a9c442","/usr/include/bits/waitflags.h":"ignore_header_sys","/usr/include/stdc-predef.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_construct.h":"ignore_header_sys","/usr/include/bits/waitstatus.h":"ignore_header_sys","/usr/include/c++/10/bits/ostream_insert.h":"ignore_header_sys","/usr/include/c++/10/bits/exception.h":"ignore_header_sys","/usr/include/linux/errno.h":"ignore_header_sys","/usr/include/bits/flt-eval-method.h":"ignore_header_sys","/usr/include/c++/10/bits/basic_string.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/amxintrin.h":"df04c665cb8533b77392c57a15d0c13e","/usr/local/ob-clang11/lib/clang/11.1.0/include/stddef.h":"2499dd2361b915724b073282bea3a7bc","/usr/local/ob-clang11/lib/clang/11.1.0/include/xtestintrin.h":"ddbb320bafef81c16f4db301b5d692b4","/usr/include/c++/10/ext/alloc_traits.h":"ignore_header_sys","/usr/include/sched.h":"ignore_header_sys","/usr/include/bits/pthreadtypes.h":"ignore_header_sys","/usr/include/c++/10/bits/random.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512pfintrin.h":"4f558d52a120f2dbc17724370f698f70","/usr/local/ob-clang11/lib/clang/11.1.0/include/sgxintrin.h":"1d380dfee68686a7fa21e5c5888eaf05","/usr/local/ob-clang11/lib/clang/11.1.0/include/fxsrintrin.h":"2288062b986bd0a526c32df2bd2e2c7b","/usr/local/ob-clang11/lib/clang/11.1.0/include/mm_malloc.h":"ed68cf68a5b4db09df709fc93a5e9b12","/usr/local/ob-clang11/lib/clang/11.1.0/include/fmaintrin.h":"e5555b944d57763068cff3823905dcda","/usr/include/bits/mathcalls-narrow.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/bmiintrin.h":"30db6d08581335daa785b893e982ec21","/usr/include/bits/floatn-common.h":"ignore_header_sys","/usr/include/asm-generic/errno.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/gthr-default.h":"ignore_header_sys","/usr/include/c++/10/concepts":"ignore_header_sys","/usr/include/bits/wctype-wchar.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512dqintrin.h":"0a5f59d3a1b4c24596a35fc4d831362d","/usr/include/bits/timesize.h":"ignore_header_sys","/usr/include/bits/types/clock_t.h":"ignore_header_sys","/usr/include/bits/types/locale_t.h":"ignore_header_sys","/usr/include/strings.h":"ignore_header_sys","/usr/include/bits/types/__FILE.h":"ignore_header_sys","/usr/include/c++/10/bits/int_limits.h":"ignore_header_sys","/usr/include/bits/types/struct_itimerspec.h":"ignore_header_sys","/usr/include/c++/10/backward/binders.h":"ignore_header_sys","/usr/include/c++/10/typeinfo":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/c++allocator.h":"ignore_header_sys","/usr/include/c++/10/bits/predefined_ops.h":"ignore_header_sys","/usr/include/bits/time.h":"ignore_header_sys","/usr/include/bits/types/error_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/ptwriteintrin.h":"d07b5c84c015bb93867eab402d31ebca","/usr/include/c++/10/bits/stringfwd.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/cpu_defines.h":"ignore_header_sys","/usr/include/c++/10/bits/alloc_traits.h":"ignore_header_sys","/usr/include/c++/10/ext/string_conversions.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/serializeintrin.h":"9c34b27612aea430b36983691b4efe29","[GIT_TOP_DIR]/src/logger.h":"bc3e03e770b051e6cadc16e5f96c170f","/usr/include/c++/10/bits/ostream.tcc":"ignore_header_sys","/usr/include/c++/10/limits":"ignore_header_sys","/usr/include/c++/10/bits/cxxabi_forced.h":"ignore_header_sys","/usr/include/c++/10/ext/atomicity.h":"ignore_header_sys","/usr/include/wchar.h":"ignore_header_sys","/usr/include/c++/10/ext/numeric_traits.h":"ignore_header_sys","/usr/include/c++/10/ostream":"ignore_header_sys","/usr/include/endian.h":"ignore_header_sys","/usr/include/bits/types/sigset_t.h":"ignore_header_sys","/usr/include/c++/10/clocale":"ignore_header_sys","/usr/include/c++/10/bits/nested_exception.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsaveoptintrin.h":"30a5b7413ecc5157d3c788a4fc5f30f7","/usr/local/ob-clang11/lib/clang/11.1.0/include/invpcidintrin.h":"ff85318ef7dbac300480b3249673816b","/usr/include/c++/10/cwchar":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/atomic_word.h":"ignore_header_sys","/usr/include/pthread.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/stdarg.h":"4de3cbd931b589d291e5c39387aecf82","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsaveintrin.h":"bf0d37fbd9112292164e41d157229261","/usr/local/ob-clang11/lib/clang/11.1.0/include/f16cintrin.h":"e1d777f3170634f5a307f86472b0fb57","/usr/include/c++/10/cwctype":"ignore_header_sys","/usr/include/bits/types/clockid_t.h":"ignore_header_sys","/usr/include/c++/10/bits/basic_ios.h":"ignore_header_sys","/usr/include/c++/10/bits/locale_classes.tcc":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlvnniintrin.h":"64180305ff9c6bfad63ee41cbd66093d","/usr/local/ob-clang11/lib/clang/11.1.0/include/pmmintrin.h":"3157414820008b3ad90647450dcf904b","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlcdintrin.h":"6f8f18f6874f9c1a5f19b1c55e3c0cb5","/usr/include/c++/10/stdexcept":"ignore_header_sys","/usr/include/c++/10/bits/exception_ptr.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/__wmmintrin_pclmul.h":"7cbd2793e783b90f193cebfa3675e55a","/usr/include/c++/10/random":"ignore_header_sys","/usr/include/c++/10/stdlib.h":"ignore_header_sys","/usr/include/bits/stdint-uintn.h":"ignore_header_sys","/usr/include/bits/types/struct_sched_param.h":"ignore_header_sys","/usr/include/c++/10/bits/range_cmp.h":"ignore_header_sys","/usr/include/gnu/stubs.h":"ignore_header_sys","/usr/include/c++/10/cerrno":"ignore_header_sys","/usr/include/bits/mathcalls-helper-functions.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/clflushoptintrin.h":"2a269418efbdd932851586bbfa8726a3","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlbwintrin.h":"449273cd1de2c72197e012c804a8c056","/usr/local/ob-clang11/lib/clang/11.1.0/include/tsxldtrkintrin.h":"317e5aa78e58a9618f04d7532a36a253","/usr/include/c++/10/exception":"ignore_header_sys","/usr/include/c++/10/bits/stl_function.h":"ignore_header_sys","/usr/include/bits/locale.h":"ignore_header_sys","/usr/include/c++/10/initializer_list":"ignore_header_sys","/usr/include/bits/wchar.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/error_constants.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vp2intersectintrin.h":"7f431ec4ddce958af8a75cc7a71b3a57","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlbitalgintrin.h":"50b7714a556eb5e52999b7dd18de7d4e","/usr/include/c++/10/cctype":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlbf16intrin.h":"da6bea340165f020a9142ab63fc1aecf","/usr/include/c++/10/bits/std_abs.h":"ignore_header_sys","/usr/include/bits/math-vector.h":"ignore_header_sys","/usr/include/bits/stdint-intn.h":"ignore_header_sys","/usr/include/bits/libm-simd-decl-stubs.h":"ignore_header_sys","/usr/include/c++/10/cmath":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlvbmi2intrin.h":"d09f75ea16d8f1302331016743dca38c","/usr/include/bits/types/struct_tm.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_uninitialized.h":"ignore_header_sys","/usr/include/c++/10/debug/debug.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/opt_random.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/cldemoteintrin.h":"6c282c2bb0cc618292bd47b69fc27641","/usr/include/c++/10/streambuf":"ignore_header_sys","/usr/include/c++/10/bits/exception_defines.h":"ignore_header_sys","/usr/include/bits/types/struct_timespec.h":"ignore_header_sys","/usr/include/bits/thread-shared-types.h":"ignore_header_sys","/usr/include/c++/10/bits/locale_facets.tcc":"ignore_header_sys","/usr/include/locale.h":"ignore_header_sys","/usr/include/bits/types/struct_timeval.h":"ignore_header_sys","/usr/include/c++/10/system_error":"ignore_header_sys","/usr/include/bits/typesizes.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/adxintrin.h":"6828d907a1be13a942ad62e7b4db6870","/usr/include/c++/10/bits/streambuf_iterator.h":"ignore_header_sys","/usr/include/bits/long-double.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512ifmavlintrin.h":"c3576813a57918c2734a8acf08e69b33","/usr/include/c++/10/bits/ios_base.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/bmi2intrin.h":"5421c86f7749d5b931a602c4c605aa59","/usr/include/c++/10/iostream":"ignore_header_sys","/usr/include/c++/10/bits/stl_iterator_base_types.h":"ignore_header_sys","/usr/include/c++/10/bits/hash_bytes.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlvp2intersectintrin.h":"e127597621c37f450875cdc70e9df509","/usr/include/bits/types/time_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/clwbintrin.h":"bc581022bcc5037ab8b06c9c95e15663","/usr/local/ob-clang11/lib/clang/11.1.0/include/mmintrin.h":"1de54663046d007c7b16e4f603262ad8","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vldqintrin.h":"8229c4851f85c40c1f62097dc173e420","/usr/local/ob-clang11/lib/clang/11.1.0/include/pkuintrin.h":"750db2cf252eb52d8e60ad6fffb80c8a","/usr/include/bits/stdio_lim.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/wbnoinvdintrin.h":"8d0e049f9ce4bbcc291c21fe7bc7a508","/usr/include/c++/10/bits/ptr_traits.h":"ignore_header_sys","/usr/include/sys/select.h":"ignore_header_sys","/usr/include/bits/floatn.h":"ignore_header_sys","/usr/include/c++/10/cstdio":"ignore_header_sys","/usr/include/alloca.h":"ignore_header_sys","/usr/include/bits/struct_mutex.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/movdirintrin.h":"4566737781d765bba033913dedfcaa83","/usr/include/c++/10/bits/localefwd.h":"ignore_header_sys","/usr/include/errno.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/pconfigintrin.h":"9da09fbffb9a78b478ac0ce6d43271d7","/usr/include/c++/10/bits/postypes.h":"ignore_header_sys","[GIT_TOP_DIR]/src/impl/matrix_rotator.h":"201b9e418b243731f34df19414d16ccb","/usr/include/stdlib.h":"ignore_header_sys","/usr/include/bits/types/FILE.h":"ignore_header_sys","/usr/include/bits/stdlib-float.h":"ignore_header_sys"},"includes":[{"line":12,"resolved_path":"/usr/local/ob-clang11/lib/clang/11.1.0/include/pmmintrin.h"}],"skipped_ranges":[],"usr2func":[{"usr":84544251171101847,"detailed_name":"static inline __m64 _mm_sign_pi8(__m64 __a, __m64 __b)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"711:1-711:13|710:1-714:2|2|-1","hover":"","comments":"For each 8-bit integer in the first source operand, perform one of\n   the following actions as specified by the second source operand.\n\n   If the byte in the second source is negative, calculate the two's\n   complement of the corresponding byte in the first source, and write that\n   value to the destination. If the byte in the second source is positive,\n   copy the corresponding byte from the first source to the destination. If\n   the byte in the second source is zero, clear the corresponding byte in\n   the destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c PSIGNB instruction.\n\n\\param __a\n   A 64-bit integer vector containing the values to be copied.\n\\param __b\n   A 64-bit integer vector containing control bytes corresponding to\n   positions in the destination.\n\\returns A 64-bit integer vector containing the resultant values.","bases":[],"vars":[4326345989574130508,14793304394875100896],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":766072885030627673,"detailed_name":"static inline __m128i _mm_abs_epi16(__m128i __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"86:1-86:14|85:1-89:2|2|-1","hover":"","comments":"Computes the absolute value of each of the packed 16-bit signed\n   integers in the source operand and stores the 16-bit unsigned integer\n   results in the destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c VPABSW instruction.\n\n\\param __a\n   A 128-bit vector of [8 x i16].\n\\returns A 128-bit integer vector containing the absolute values of the\n   elements in the operand.","bases":[],"vars":[15801883167342388259],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1812661429186655511,"detailed_name":"static inline __m128i _mm_hadd_epi32(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"214:1-214:15|213:1-217:2|2|-1","hover":"","comments":"Horizontally adds the adjacent pairs of values contained in 2 packed\n   128-bit vectors of [4 x i32].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c VPHADDD instruction.\n\n\\param __a\n   A 128-bit vector of [4 x i32] containing one of the source operands. The\n   horizontal sums of the values are stored in the lower bits of the\n   destination.\n\\param __b\n   A 128-bit vector of [4 x i32] containing one of the source operands. The\n   horizontal sums of the values are stored in the upper bits of the\n   destination.\n\\returns A 128-bit vector of [4 x i32] containing the horizontal sums of\n   both operands.","bases":[],"vars":[16491575520918922343,6108535957633647991],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2335609127621200370,"detailed_name":"static inline __m64 _mm_hsubs_pi16(__m64 __a, __m64 __b)","qual_name_offset":20,"short_name_offset":20,"short_name_size":14,"spell":"452:1-452:15|451:1-455:2|2|-1","hover":"","comments":"Horizontally subtracts the adjacent pairs of values contained in 2\n   packed 64-bit vectors of [4 x i16]. Positive differences greater than\n   0x7FFF are saturated to 0x7FFF. Negative differences less than 0x8000 are\n   saturated to 0x8000.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c PHSUBSW instruction.\n\n\\param __a\n   A 64-bit vector of [4 x i16] containing one of the source operands. The\n   horizontal differences between the values are stored in the lower bits of\n   the destination.\n\\param __b\n   A 64-bit vector of [4 x i16] containing one of the source operands. The\n   horizontal differences between the values are stored in the upper bits of\n   the destination.\n\\returns A 64-bit vector of [4 x i16] containing the horizontal saturated\n   differences of both operands.","bases":[],"vars":[11983068070437689168,4339067094656802612],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3552235046444848688,"detailed_name":"static inline __m64 _mm_hadd_pi32(__m64 __a, __m64 __b)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"260:1-260:14|259:1-263:2|2|-1","hover":"","comments":"Horizontally adds the adjacent pairs of values contained in 2 packed\n   64-bit vectors of [2 x i32].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c PHADDD instruction.\n\n\\param __a\n   A 64-bit vector of [2 x i32] containing one of the source operands. The\n   horizontal sums of the values are stored in the lower bits of the\n   destination.\n\\param __b\n   A 64-bit vector of [2 x i32] containing one of the source operands. The\n   horizontal sums of the values are stored in the upper bits of the\n   destination.\n\\returns A 64-bit vector of [2 x i32] containing the horizontal sums of both\n   operands.","bases":[],"vars":[11762555336455187017,11815999619135145559],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4870191111998611571,"detailed_name":"static inline __m64 _mm_hadd_pi16(__m64 __a, __m64 __b)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"237:1-237:14|236:1-240:2|2|-1","hover":"","comments":"Horizontally adds the adjacent pairs of values contained in 2 packed\n   64-bit vectors of [4 x i16].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c PHADDW instruction.\n\n\\param __a\n   A 64-bit vector of [4 x i16] containing one of the source operands. The\n   horizontal sums of the values are stored in the lower bits of the\n   destination.\n\\param __b\n   A 64-bit vector of [4 x i16] containing one of the source operands. The\n   horizontal sums of the values are stored in the upper bits of the\n   destination.\n\\returns A 64-bit vector of [4 x i16] containing the horizontal sums of both\n   operands.","bases":[],"vars":[15579069772025785352,10914373871628687614],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5011492712916962659,"detailed_name":"static inline __m64 _mm_hsub_pi16(__m64 __a, __m64 __b)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"379:1-379:14|378:1-382:2|2|-1","hover":"","comments":"Horizontally subtracts the adjacent pairs of values contained in 2\n   packed 64-bit vectors of [4 x i16].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c PHSUBW instruction.\n\n\\param __a\n   A 64-bit vector of [4 x i16] containing one of the source operands. The\n   horizontal differences between the values are stored in the lower bits of\n   the destination.\n\\param __b\n   A 64-bit vector of [4 x i16] containing one of the source operands. The\n   horizontal differences between the values are stored in the upper bits of\n   the destination.\n\\returns A 64-bit vector of [4 x i16] containing the horizontal differences\n   of both operands.","bases":[],"vars":[11056350760235131244,14880743079402053115],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5523774915679051986,"detailed_name":"static inline __m128i _mm_abs_epi8(__m128i __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"50:1-50:13|49:1-53:2|2|-1","hover":"","comments":"Computes the absolute value of each of the packed 8-bit signed\n   integers in the source operand and stores the 8-bit unsigned integer\n   results in the destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c VPABSB instruction.\n\n\\param __a\n   A 128-bit vector of [16 x i8].\n\\returns A 128-bit integer vector containing the absolute values of the\n   elements in the operand.","bases":[],"vars":[1871201378455018599],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6191590168483345423,"detailed_name":"static inline __m128i _mm_hadd_epi16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"191:1-191:15|190:1-194:2|2|-1","hover":"","comments":"Horizontally adds the adjacent pairs of values contained in 2 packed\n   128-bit vectors of [8 x i16].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c VPHADDW instruction.\n\n\\param __a\n   A 128-bit vector of [8 x i16] containing one of the source operands. The\n   horizontal sums of the values are stored in the lower bits of the\n   destination.\n\\param __b\n   A 128-bit vector of [8 x i16] containing one of the source operands. The\n   horizontal sums of the values are stored in the upper bits of the\n   destination.\n\\returns A 128-bit vector of [8 x i16] containing the horizontal sums of\n   both operands.","bases":[],"vars":[7041194461125291084,8226016922208867697],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6915210952860658769,"detailed_name":"static inline __m64 _mm_sign_pi32(__m64 __a, __m64 __b)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"763:1-763:14|762:1-766:2|2|-1","hover":"","comments":"For each 32-bit integer in the first source operand, perform one of\n   the following actions as specified by the second source operand.\n\n   If the doubleword in the second source is negative, calculate the two's\n   complement of the corresponding doubleword in the first source, and\n   write that value to the destination. If the doubleword in the second\n   source is positive, copy the corresponding doubleword from the first\n   source to the destination. If the doubleword in the second source is\n   zero, clear the corresponding doubleword in the destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c PSIGND instruction.\n\n\\param __a\n   A 64-bit integer vector containing the values to be copied.\n\\param __b\n   A 64-bit integer vector containing two control doublewords corresponding\n   to positions in the destination.\n\\returns A 64-bit integer vector containing the resultant values.","bases":[],"vars":[8811800123115223714,1884586798566317541],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7170921891068407426,"detailed_name":"static inline __m64 _mm_hadds_pi16(__m64 __a, __m64 __b)","qual_name_offset":20,"short_name_offset":20,"short_name_size":14,"spell":"310:1-310:15|309:1-313:2|2|-1","hover":"","comments":"Horizontally adds the adjacent pairs of values contained in 2 packed\n   64-bit vectors of [4 x i16]. Positive sums greater than 0x7FFF are\n   saturated to 0x7FFF. Negative sums less than 0x8000 are saturated to\n   0x8000.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c PHADDSW instruction.\n\n\\param __a\n   A 64-bit vector of [4 x i16] containing one of the source operands. The\n   horizontal sums of the values are stored in the lower bits of the\n   destination.\n\\param __b\n   A 64-bit vector of [4 x i16] containing one of the source operands. The\n   horizontal sums of the values are stored in the upper bits of the\n   destination.\n\\returns A 64-bit vector of [4 x i16] containing the horizontal saturated\n   sums of both operands.","bases":[],"vars":[9356075596129487364,6054348949827449943],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7592466674764212025,"detailed_name":"static inline __m128i _mm_hsub_epi16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"333:1-333:15|332:1-336:2|2|-1","hover":"","comments":"Horizontally subtracts the adjacent pairs of values contained in 2\n   packed 128-bit vectors of [8 x i16].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c VPHSUBW instruction.\n\n\\param __a\n   A 128-bit vector of [8 x i16] containing one of the source operands. The\n   horizontal differences between the values are stored in the lower bits of\n   the destination.\n\\param __b\n   A 128-bit vector of [8 x i16] containing one of the source operands. The\n   horizontal differences between the values are stored in the upper bits of\n   the destination.\n\\returns A 128-bit vector of [8 x i16] containing the horizontal differences\n   of both operands.","bases":[],"vars":[12222778857662067732,13313155834593308603],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8081019349855911560,"detailed_name":"static inline __m128i _mm_abs_epi32(__m128i __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"122:1-122:14|121:1-125:2|2|-1","hover":"","comments":"Computes the absolute value of each of the packed 32-bit signed\n   integers in the source operand and stores the 32-bit unsigned integer\n   results in the destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c VPABSD instruction.\n\n\\param __a\n   A 128-bit vector of [4 x i32].\n\\returns A 128-bit integer vector containing the absolute values of the\n   elements in the operand.","bases":[],"vars":[14307816416478866158],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8146373045361514445,"detailed_name":"static inline __m128i _mm_maddubs_epi16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":17,"spell":"486:1-486:18|485:1-489:2|2|-1","hover":"","comments":"Multiplies corresponding pairs of packed 8-bit unsigned integer\n   values contained in the first source operand and packed 8-bit signed\n   integer values contained in the second source operand, adds pairs of\n   contiguous products with signed saturation, and writes the 16-bit sums to\n   the corresponding bits in the destination.\n\n   For example, bits [7:0] of both operands are multiplied, bits [15:8] of\n   both operands are multiplied, and the sum of both results is written to\n   bits [15:0] of the destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c VPMADDUBSW instruction.\n\n\\param __a\n   A 128-bit integer vector containing the first source operand.\n\\param __b\n   A 128-bit integer vector containing the second source operand.\n\\returns A 128-bit integer vector containing the sums of products of both\n   operands: \\n\n   \\a R0 := (\\a __a0 * \\a __b0) + (\\a __a1 * \\a __b1) \\n\n   \\a R1 := (\\a __a2 * \\a __b2) + (\\a __a3 * \\a __b3) \\n\n   \\a R2 := (\\a __a4 * \\a __b4) + (\\a __a5 * \\a __b5) \\n\n   \\a R3 := (\\a __a6 * \\a __b6) + (\\a __a7 * \\a __b7) \\n\n   \\a R4 := (\\a __a8 * \\a __b8) + (\\a __a9 * \\a __b9) \\n\n   \\a R5 := (\\a __a10 * \\a __b10) + (\\a __a11 * \\a __b11) \\n\n   \\a R6 := (\\a __a12 * \\a __b12) + (\\a __a13 * \\a __b13) \\n\n   \\a R7 := (\\a __a14 * \\a __b14) + (\\a __a15 * \\a __b15)","bases":[],"vars":[13320228359045428590,3667583147956555826],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8398309686031384019,"detailed_name":"static inline __m128i _mm_mulhrs_epi16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":16,"spell":"536:1-536:17|535:1-539:2|2|-1","hover":"","comments":"Multiplies packed 16-bit signed integer values, truncates the 32-bit\n   products to the 18 most significant bits by right-shifting, rounds the\n   truncated value by adding 1, and writes bits [16:1] to the destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c VPMULHRSW instruction.\n\n\\param __a\n   A 128-bit vector of [8 x i16] containing one of the source operands.\n\\param __b\n   A 128-bit vector of [8 x i16] containing one of the source operands.\n\\returns A 128-bit vector of [8 x i16] containing the rounded and scaled\n   products of both operands.","bases":[],"vars":[640843731741681872,13800014503171648706],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9297874854412189243,"detailed_name":"static inline __m128i _mm_sign_epi32(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"685:1-685:15|684:1-688:2|2|-1","hover":"","comments":"For each 32-bit integer in the first source operand, perform one of\n   the following actions as specified by the second source operand.\n\n   If the doubleword in the second source is negative, calculate the two's\n   complement of the corresponding word in the first source, and write that\n   value to the destination. If the doubleword in the second source is\n   positive, copy the corresponding word from the first source to the\n   destination. If the doubleword in the second source is zero, clear the\n   corresponding word in the destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c VPSIGND instruction.\n\n\\param __a\n   A 128-bit integer vector containing the values to be copied.\n\\param __b\n   A 128-bit integer vector containing control doublewords corresponding to\n   positions in the destination.\n\\returns A 128-bit integer vector containing the resultant values.","bases":[],"vars":[5856409978745670706,13097585844139682226],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9820261091509060798,"detailed_name":"static inline __m64 _mm_maddubs_pi16(__m64 __a, __m64 __b)","qual_name_offset":20,"short_name_offset":20,"short_name_size":16,"spell":"516:1-516:17|515:1-519:2|2|-1","hover":"","comments":"Multiplies corresponding pairs of packed 8-bit unsigned integer\n   values contained in the first source operand and packed 8-bit signed\n   integer values contained in the second source operand, adds pairs of\n   contiguous products with signed saturation, and writes the 16-bit sums to\n   the corresponding bits in the destination.\n\n   For example, bits [7:0] of both operands are multiplied, bits [15:8] of\n   both operands are multiplied, and the sum of both results is written to\n   bits [15:0] of the destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c PMADDUBSW instruction.\n\n\\param __a\n   A 64-bit integer vector containing the first source operand.\n\\param __b\n   A 64-bit integer vector containing the second source operand.\n\\returns A 64-bit integer vector containing the sums of products of both\n   operands: \\n\n   \\a R0 := (\\a __a0 * \\a __b0) + (\\a __a1 * \\a __b1) \\n\n   \\a R1 := (\\a __a2 * \\a __b2) + (\\a __a3 * \\a __b3) \\n\n   \\a R2 := (\\a __a4 * \\a __b4) + (\\a __a5 * \\a __b5) \\n\n   \\a R3 := (\\a __a6 * \\a __b6) + (\\a __a7 * \\a __b7)","bases":[],"vars":[12813578712778316826,12442836651323594079],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10979265715427851785,"detailed_name":"static inline __m64 _mm_shuffle_pi8(__m64 __a, __m64 __b)","qual_name_offset":20,"short_name_offset":20,"short_name_size":15,"spell":"607:1-607:16|606:1-610:2|2|-1","hover":"","comments":"Copies the 8-bit integers from a 64-bit integer vector to the\n   destination or clears 8-bit values in the destination, as specified by\n   the second source operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c PSHUFB instruction.\n\n\\param __a\n   A 64-bit integer vector containing the values to be copied.\n\\param __b\n   A 64-bit integer vector containing control bytes corresponding to\n   positions in the destination:\n   Bit 7: \\n\n   1: Clear the corresponding byte in the destination. \\n\n   0: Copy the selected source byte to the corresponding byte in the\n   destination. \\n\n   Bits [3:0] select the source byte to be copied.\n\\returns A 64-bit integer vector containing the copied or cleared values.","bases":[],"vars":[14756382773704369741,9088330113340005463],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13815263732635857170,"detailed_name":"static inline __m128i _mm_sign_epi16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"659:1-659:15|658:1-662:2|2|-1","hover":"","comments":"For each 16-bit integer in the first source operand, perform one of\n   the following actions as specified by the second source operand.\n\n   If the word in the second source is negative, calculate the two's\n   complement of the corresponding word in the first source, and write that\n   value to the destination. If the word in the second source is positive,\n   copy the corresponding word from the first source to the destination. If\n   the word in the second source is zero, clear the corresponding word in\n   the destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c VPSIGNW instruction.\n\n\\param __a\n   A 128-bit integer vector containing the values to be copied.\n\\param __b\n   A 128-bit integer vector containing control words corresponding to\n   positions in the destination.\n\\returns A 128-bit integer vector containing the resultant values.","bases":[],"vars":[5749079670612370505,4418553335588791345],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14583025880320471310,"detailed_name":"static inline __m128i _mm_sign_epi8(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"633:1-633:14|632:1-636:2|2|-1","hover":"","comments":"For each 8-bit integer in the first source operand, perform one of\n   the following actions as specified by the second source operand.\n\n   If the byte in the second source is negative, calculate the two's\n   complement of the corresponding byte in the first source, and write that\n   value to the destination. If the byte in the second source is positive,\n   copy the corresponding byte from the first source to the destination. If\n   the byte in the second source is zero, clear the corresponding byte in\n   the destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c VPSIGNB instruction.\n\n\\param __a\n   A 128-bit integer vector containing the values to be copied.\n\\param __b\n   A 128-bit integer vector containing control bytes corresponding to\n   positions in the destination.\n\\returns A 128-bit integer vector containing the resultant values.","bases":[],"vars":[10025196810590172702,16006397862531870442],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14611110868251892925,"detailed_name":"static inline __m64 _mm_abs_pi8(__m64 __a)","qual_name_offset":20,"short_name_offset":20,"short_name_size":11,"spell":"32:1-32:12|31:1-35:2|2|-1","hover":"","comments":"Computes the absolute value of each of the packed 8-bit signed\n   integers in the source operand and stores the 8-bit unsigned integer\n   results in the destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c PABSB instruction.\n\n\\param __a\n   A 64-bit vector of [8 x i8].\n\\returns A 64-bit integer vector containing the absolute values of the\n   elements in the operand.","bases":[],"vars":[19359353577260568],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14653452481202995150,"detailed_name":"static inline __m128i _mm_hsub_epi32(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"356:1-356:15|355:1-359:2|2|-1","hover":"","comments":"Horizontally subtracts the adjacent pairs of values contained in 2\n   packed 128-bit vectors of [4 x i32].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c VPHSUBD instruction.\n\n\\param __a\n   A 128-bit vector of [4 x i32] containing one of the source operands. The\n   horizontal differences between the values are stored in the lower bits of\n   the destination.\n\\param __b\n   A 128-bit vector of [4 x i32] containing one of the source operands. The\n   horizontal differences between the values are stored in the upper bits of\n   the destination.\n\\returns A 128-bit vector of [4 x i32] containing the horizontal differences\n   of both operands.","bases":[],"vars":[7906954841722922720,6533444758541688935],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14659121256008387160,"detailed_name":"static inline __m128i _mm_shuffle_epi8(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":16,"spell":"582:1-582:17|581:1-585:2|2|-1","hover":"","comments":"Copies the 8-bit integers from a 128-bit integer vector to the\n   destination or clears 8-bit values in the destination, as specified by\n   the second source operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c VPSHUFB instruction.\n\n\\param __a\n   A 128-bit integer vector containing the values to be copied.\n\\param __b\n   A 128-bit integer vector containing control bytes corresponding to\n   positions in the destination:\n   Bit 7: \\n\n   1: Clear the corresponding byte in the destination. \\n\n   0: Copy the selected source byte to the corresponding byte in the\n   destination. \\n\n   Bits [6:4] Reserved.  \\n\n   Bits [3:0] select the source byte to be copied.\n\\returns A 128-bit integer vector containing the copied or cleared values.","bases":[],"vars":[4801974928522219456,1238167291127284748],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14896345933007633370,"detailed_name":"static inline __m64 _mm_hsub_pi32(__m64 __a, __m64 __b)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"402:1-402:14|401:1-405:2|2|-1","hover":"","comments":"Horizontally subtracts the adjacent pairs of values contained in 2\n   packed 64-bit vectors of [2 x i32].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c PHSUBD instruction.\n\n\\param __a\n   A 64-bit vector of [2 x i32] containing one of the source operands. The\n   horizontal differences between the values are stored in the lower bits of\n   the destination.\n\\param __b\n   A 64-bit vector of [2 x i32] containing one of the source operands. The\n   horizontal differences between the values are stored in the upper bits of\n   the destination.\n\\returns A 64-bit vector of [2 x i32] containing the horizontal differences\n   of both operands.","bases":[],"vars":[159823451790136553,6235852642998440963],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14913481954339453854,"detailed_name":"static inline __m128i _mm_hsubs_epi16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"427:1-427:16|426:1-430:2|2|-1","hover":"","comments":"Horizontally subtracts the adjacent pairs of values contained in 2\n   packed 128-bit vectors of [8 x i16]. Positive differences greater than\n   0x7FFF are saturated to 0x7FFF. Negative differences less than 0x8000 are\n   saturated to 0x8000.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c VPHSUBSW instruction.\n\n\\param __a\n   A 128-bit vector of [8 x i16] containing one of the source operands. The\n   horizontal differences between the values are stored in the lower bits of\n   the destination.\n\\param __b\n   A 128-bit vector of [8 x i16] containing one of the source operands. The\n   horizontal differences between the values are stored in the upper bits of\n   the destination.\n\\returns A 128-bit vector of [8 x i16] containing the horizontal saturated\n   differences of both operands.","bases":[],"vars":[13710976974832459879,1697033687304096455],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14935839449062133333,"detailed_name":"static inline __m128i _mm_hadds_epi16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"285:1-285:16|284:1-288:2|2|-1","hover":"","comments":"Horizontally adds the adjacent pairs of values contained in 2 packed\n   128-bit vectors of [8 x i16]. Positive sums greater than 0x7FFF are\n   saturated to 0x7FFF. Negative sums less than 0x8000 are saturated to\n   0x8000.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c VPHADDSW instruction.\n\n\\param __a\n   A 128-bit vector of [8 x i16] containing one of the source operands. The\n   horizontal sums of the values are stored in the lower bits of the\n   destination.\n\\param __b\n   A 128-bit vector of [8 x i16] containing one of the source operands. The\n   horizontal sums of the values are stored in the upper bits of the\n   destination.\n\\returns A 128-bit vector of [8 x i16] containing the horizontal saturated\n   sums of both operands.","bases":[],"vars":[15946407608353110385,16274488152940120554],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15185843218702328333,"detailed_name":"static inline __m64 _mm_abs_pi32(__m64 __a)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"104:1-104:13|103:1-107:2|2|-1","hover":"","comments":"Computes the absolute value of each of the packed 32-bit signed\n   integers in the source operand and stores the 32-bit unsigned integer\n   results in the destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c PABSD instruction.\n\n\\param __a\n   A 64-bit vector of [2 x i32].\n\\returns A 64-bit integer vector containing the absolute values of the\n   elements in the operand.","bases":[],"vars":[8820885257249570374],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15457085994200236290,"detailed_name":"static inline __m64 _mm_abs_pi16(__m64 __a)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"68:1-68:13|67:1-71:2|2|-1","hover":"","comments":"Computes the absolute value of each of the packed 16-bit signed\n   integers in the source operand and stores the 16-bit unsigned integer\n   results in the destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c PABSW instruction.\n\n\\param __a\n   A 64-bit vector of [4 x i16].\n\\returns A 64-bit integer vector containing the absolute values of the\n   elements in the operand.","bases":[],"vars":[14631500437684014376],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17519779759703141979,"detailed_name":"static inline __m64 _mm_sign_pi16(__m64 __a, __m64 __b)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"737:1-737:14|736:1-740:2|2|-1","hover":"","comments":"For each 16-bit integer in the first source operand, perform one of\n   the following actions as specified by the second source operand.\n\n   If the word in the second source is negative, calculate the two's\n   complement of the corresponding word in the first source, and write that\n   value to the destination. If the word in the second source is positive,\n   copy the corresponding word from the first source to the destination. If\n   the word in the second source is zero, clear the corresponding word in\n   the destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c PSIGNW instruction.\n\n\\param __a\n   A 64-bit integer vector containing the values to be copied.\n\\param __b\n   A 64-bit integer vector containing control words corresponding to\n   positions in the destination.\n\\returns A 64-bit integer vector containing the resultant values.","bases":[],"vars":[4781930638885102282,4871837185703983039],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17741694531804774845,"detailed_name":"static inline __m64 _mm_mulhrs_pi16(__m64 __a, __m64 __b)","qual_name_offset":20,"short_name_offset":20,"short_name_size":15,"spell":"556:1-556:16|555:1-559:2|2|-1","hover":"","comments":"Multiplies packed 16-bit signed integer values, truncates the 32-bit\n   products to the 18 most significant bits by right-shifting, rounds the\n   truncated value by adding 1, and writes bits [16:1] to the destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the \\c PMULHRSW instruction.\n\n\\param __a\n   A 64-bit vector of [4 x i16] containing one of the source operands.\n\\param __b\n   A 64-bit vector of [4 x i16] containing one of the source operands.\n\\returns A 64-bit vector of [4 x i16] containing the rounded and scaled\n   products of both operands.","bases":[],"vars":[10751580636566789233,5023074743481421310],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]}],"usr2type":[{"usr":681283343111673259,"detailed_name":"typedef __attribute__((__vector_size__(16 * sizeof(char)))) char __v16qi","qual_name_offset":65,"short_name_offset":65,"short_name_size":7,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["52:46-52:53|4|-1","488:50-488:57|4|-1","488:64-488:71|4|-1","584:47-584:54|4|-1","584:61-584:68|4|-1","635:47-635:54|4|-1","635:61-635:68|4|-1"]},{"usr":6694484644766561266,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(int)))) int __v4si","qual_name_offset":62,"short_name_offset":62,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["124:46-124:52|4|-1","216:47-216:53|4|-1","216:60-216:66|4|-1","358:47-358:53|4|-1","358:60-358:66|4|-1","687:47-687:53|4|-1","687:60-687:66|4|-1"]},{"usr":8071107645410950837,"detailed_name":"typedef __attribute__((__vector_size__(8 * sizeof(short)))) short __v8hi","qual_name_offset":66,"short_name_offset":66,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["88:46-88:52|4|-1","193:47-193:53|4|-1","193:60-193:66|4|-1","287:48-287:54|4|-1","287:61-287:67|4|-1","335:47-335:53|4|-1","335:60-335:66|4|-1","429:48-429:54|4|-1","429:61-429:67|4|-1","538:49-538:55|4|-1","538:62-538:68|4|-1","661:47-661:53|4|-1","661:60-661:66|4|-1"]},{"usr":8534292580219847256,"detailed_name":"typedef __attribute__((__vector_size__(8 * sizeof(char)))) char __v8qi","qual_name_offset":64,"short_name_offset":64,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["34:41-34:47|4|-1","518:45-518:51|4|-1","518:58-518:64|4|-1","609:42-609:48|4|-1","609:55-609:61|4|-1","713:42-713:48|4|-1","713:55-713:61|4|-1"]},{"usr":8788115492869736674,"detailed_name":"typedef __attribute__((__vector_size__(1 * sizeof(long long)))) long long __m64","qual_name_offset":74,"short_name_offset":74,"short_name_size":5,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[19359353577260568,14631500437684014376,8820885257249570374,15579069772025785352,10914373871628687614,11762555336455187017,11815999619135145559,9356075596129487364,6054348949827449943,11056350760235131244,14880743079402053115,159823451790136553,6235852642998440963,11983068070437689168,4339067094656802612,12813578712778316826,12442836651323594079,10751580636566789233,5023074743481421310,14756382773704369741,9088330113340005463,4326345989574130508,14793304394875100896,4781930638885102282,4871837185703983039,8811800123115223714,1884586798566317541],"uses":["31:19-31:24|4|-1","32:13-32:18|4|-1","34:13-34:18|4|-1","67:19-67:24|4|-1","68:14-68:19|4|-1","70:13-70:18|4|-1","103:19-103:24|4|-1","104:14-104:19|4|-1","106:13-106:18|4|-1","236:19-236:24|4|-1","237:15-237:20|4|-1","237:26-237:31|4|-1","239:13-239:18|4|-1","259:19-259:24|4|-1","260:15-260:20|4|-1","260:26-260:31|4|-1","262:13-262:18|4|-1","309:19-309:24|4|-1","310:16-310:21|4|-1","310:27-310:32|4|-1","312:13-312:18|4|-1","378:19-378:24|4|-1","379:15-379:20|4|-1","379:26-379:31|4|-1","381:13-381:18|4|-1","401:19-401:24|4|-1","402:15-402:20|4|-1","402:26-402:31|4|-1","404:13-404:18|4|-1","451:19-451:24|4|-1","452:16-452:21|4|-1","452:27-452:32|4|-1","454:13-454:18|4|-1","515:19-515:24|4|-1","516:18-516:23|4|-1","516:29-516:34|4|-1","518:13-518:18|4|-1","555:19-555:24|4|-1","556:17-556:22|4|-1","556:28-556:33|4|-1","558:13-558:18|4|-1","606:19-606:24|4|-1","607:17-607:22|4|-1","607:28-607:33|4|-1","609:13-609:18|4|-1","710:19-710:24|4|-1","711:14-711:19|4|-1","711:25-711:30|4|-1","713:13-713:18|4|-1","736:19-736:24|4|-1","737:15-737:20|4|-1","737:26-737:31|4|-1","739:13-739:18|4|-1","762:19-762:24|4|-1","763:15-763:20|4|-1","763:26-763:31|4|-1","765:13-765:18|4|-1"]},{"usr":8975352893736947550,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(short)))) short __v4hi","qual_name_offset":66,"short_name_offset":66,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["70:41-70:47|4|-1","239:42-239:48|4|-1","239:55-239:61|4|-1","312:43-312:49|4|-1","312:56-312:62|4|-1","381:42-381:48|4|-1","381:55-381:61|4|-1","454:43-454:49|4|-1","454:56-454:62|4|-1","558:44-558:50|4|-1","558:57-558:63|4|-1","739:42-739:48|4|-1","739:55-739:61|4|-1"]},{"usr":9307668512027311864,"detailed_name":"typedef __attribute__((__vector_size__(2 * sizeof(long long)))) long long __m128i","qual_name_offset":74,"short_name_offset":74,"short_name_size":7,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[1871201378455018599,15801883167342388259,14307816416478866158,7041194461125291084,8226016922208867697,16491575520918922343,6108535957633647991,15946407608353110385,16274488152940120554,12222778857662067732,13313155834593308603,7906954841722922720,6533444758541688935,13710976974832459879,1697033687304096455,13320228359045428590,3667583147956555826,640843731741681872,13800014503171648706,4801974928522219456,1238167291127284748,10025196810590172702,16006397862531870442,5749079670612370505,4418553335588791345,5856409978745670706,13097585844139682226],"uses":["49:19-49:26|4|-1","50:14-50:21|4|-1","52:13-52:20|4|-1","85:19-85:26|4|-1","86:15-86:22|4|-1","88:13-88:20|4|-1","121:19-121:26|4|-1","122:15-122:22|4|-1","124:13-124:20|4|-1","190:19-190:26|4|-1","191:16-191:23|4|-1","191:29-191:36|4|-1","193:13-193:20|4|-1","213:19-213:26|4|-1","214:16-214:23|4|-1","214:29-214:36|4|-1","216:13-216:20|4|-1","284:19-284:26|4|-1","285:17-285:24|4|-1","285:30-285:37|4|-1","287:13-287:20|4|-1","332:19-332:26|4|-1","333:16-333:23|4|-1","333:29-333:36|4|-1","335:13-335:20|4|-1","355:19-355:26|4|-1","356:16-356:23|4|-1","356:29-356:36|4|-1","358:13-358:20|4|-1","426:19-426:26|4|-1","427:17-427:24|4|-1","427:30-427:37|4|-1","429:13-429:20|4|-1","485:19-485:26|4|-1","486:19-486:26|4|-1","486:32-486:39|4|-1","488:13-488:20|4|-1","535:19-535:26|4|-1","536:18-536:25|4|-1","536:31-536:38|4|-1","538:13-538:20|4|-1","581:19-581:26|4|-1","582:18-582:25|4|-1","582:31-582:38|4|-1","584:13-584:20|4|-1","632:19-632:26|4|-1","633:15-633:22|4|-1","633:28-633:35|4|-1","635:13-635:20|4|-1","658:19-658:26|4|-1","659:16-659:23|4|-1","659:29-659:36|4|-1","661:13-661:20|4|-1","684:19-684:26|4|-1","685:16-685:23|4|-1","685:29-685:36|4|-1","687:13-687:20|4|-1"]},{"usr":9787341394710254332,"detailed_name":"typedef __attribute__((__vector_size__(2 * sizeof(int)))) int __v2si","qual_name_offset":62,"short_name_offset":62,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["106:41-106:47|4|-1","262:42-262:48|4|-1","262:55-262:61|4|-1","404:42-404:48|4|-1","404:55-404:61|4|-1","765:42-765:48|4|-1","765:55-765:61|4|-1"]}],"usr2var":[{"usr":19359353577260568,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"32:19-32:22|32:13-32:22|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["34:48-34:51|12|-1"]},{"usr":159823451790136553,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"402:21-402:24|402:15-402:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["404:49-404:52|12|-1"]},{"usr":640843731741681872,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"536:26-536:29|536:18-536:29|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["538:56-538:59|12|-1"]},{"usr":1238167291127284748,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"582:39-582:42|582:31-582:42|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["584:69-584:72|12|-1"]},{"usr":1697033687304096455,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"427:38-427:41|427:30-427:41|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["429:68-429:71|12|-1"]},{"usr":1871201378455018599,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"50:22-50:25|50:14-50:25|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["52:54-52:57|12|-1"]},{"usr":1884586798566317541,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"763:32-763:35|763:26-763:35|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["765:62-765:65|12|-1"]},{"usr":3667583147956555826,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"486:40-486:43|486:32-486:43|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["488:72-488:75|12|-1"]},{"usr":4326345989574130508,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"711:20-711:23|711:14-711:23|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["713:49-713:52|12|-1"]},{"usr":4339067094656802612,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"452:33-452:36|452:27-452:36|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["454:63-454:66|12|-1"]},{"usr":4418553335588791345,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"659:37-659:40|659:29-659:40|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["661:67-661:70|12|-1"]},{"usr":4743947085196576954,"detailed_name":"__TMMINTRIN_H","qual_name_offset":0,"short_name_offset":0,"short_name_size":13,"hover":"#define __TMMINTRIN_H","comments":"","spell":"11:9-11:22|11:9-11:22|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":4781930638885102282,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"737:21-737:24|737:15-737:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["739:49-739:52|12|-1"]},{"usr":4801974928522219456,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"582:26-582:29|582:18-582:29|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["584:55-584:58|12|-1"]},{"usr":4871837185703983039,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"737:32-737:35|737:26-737:35|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["739:62-739:65|12|-1"]},{"usr":5023074743481421310,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"556:34-556:37|556:28-556:37|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["558:64-558:67|12|-1"]},{"usr":5749079670612370505,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"659:24-659:27|659:16-659:27|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["661:54-661:57|12|-1"]},{"usr":5856409978745670706,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"685:24-685:27|685:16-685:27|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["687:54-687:57|12|-1"]},{"usr":6054348949827449943,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"310:33-310:36|310:27-310:36|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["312:63-312:66|12|-1"]},{"usr":6108535957633647991,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"214:37-214:40|214:29-214:40|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["216:67-216:70|12|-1"]},{"usr":6235852642998440963,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"402:32-402:35|402:26-402:35|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["404:62-404:65|12|-1"]},{"usr":6533444758541688935,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"356:37-356:40|356:29-356:40|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["358:67-358:70|12|-1"]},{"usr":7041194461125291084,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"191:24-191:27|191:16-191:27|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["193:54-193:57|12|-1"]},{"usr":7906954841722922720,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"356:24-356:27|356:16-356:27|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["358:54-358:57|12|-1"]},{"usr":8226016922208867697,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"191:37-191:40|191:29-191:40|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["193:67-193:70|12|-1"]},{"usr":8495729788891314192,"detailed_name":"_mm_alignr_epi8","qual_name_offset":0,"short_name_offset":0,"short_name_size":15,"hover":"#define _mm_alignr_epi8(a, b, n) \\\n  (__m128i)__builtin_ia32_palignr128((__v16qi)(__m128i)(a), \\\n                                     (__v16qi)(__m128i)(b), (n))","comments":"","spell":"147:9-147:24|147:9-149:65|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":8811800123115223714,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"763:21-763:24|763:15-763:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["765:49-765:52|12|-1"]},{"usr":8820885257249570374,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"104:20-104:23|104:14-104:23|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["106:48-106:51|12|-1"]},{"usr":9088330113340005463,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"607:34-607:37|607:28-607:37|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["609:62-609:65|12|-1"]},{"usr":9356075596129487364,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"310:22-310:25|310:16-310:25|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["312:50-312:53|12|-1"]},{"usr":10025196810590172702,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"633:23-633:26|633:15-633:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["635:55-635:58|12|-1"]},{"usr":10751580636566789233,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"556:23-556:26|556:17-556:26|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["558:51-558:54|12|-1"]},{"usr":10914373871628687614,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"237:32-237:35|237:26-237:35|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["239:62-239:65|12|-1"]},{"usr":11056350760235131244,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"379:21-379:24|379:15-379:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["381:49-381:52|12|-1"]},{"usr":11762555336455187017,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"260:21-260:24|260:15-260:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["262:49-262:52|12|-1"]},{"usr":11815999619135145559,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"260:32-260:35|260:26-260:35|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["262:62-262:65|12|-1"]},{"usr":11983068070437689168,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"452:22-452:25|452:16-452:25|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["454:50-454:53|12|-1"]},{"usr":12140277634088827908,"detailed_name":"__DEFAULT_FN_ATTRS","qual_name_offset":0,"short_name_offset":0,"short_name_size":18,"hover":"#define __DEFAULT_FN_ATTRS __attribute__((__always_inline__, __nodebug__, __target__(\"ssse3\"), __min_vector_width__(64)))","comments":"","spell":"16:9-16:27|16:9-16:122|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":["49:27-49:45|64|-1","85:27-85:45|64|-1","121:27-121:45|64|-1","190:27-190:45|64|-1","213:27-213:45|64|-1","284:27-284:45|64|-1","332:27-332:45|64|-1","355:27-355:45|64|-1","426:27-426:45|64|-1","485:27-485:45|64|-1","535:27-535:45|64|-1","581:27-581:45|64|-1","632:27-632:45|64|-1","658:27-658:45|64|-1","684:27-684:45|64|-1","768:8-768:26|64|-1"]},{"usr":12222778857662067732,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"333:24-333:27|333:16-333:27|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["335:54-335:57|12|-1"]},{"usr":12442836651323594079,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"516:35-516:38|516:29-516:38|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["518:65-518:68|12|-1"]},{"usr":12813578712778316826,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"516:24-516:27|516:18-516:27|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["518:52-518:55|12|-1"]},{"usr":13097585844139682226,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"685:37-685:40|685:29-685:40|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["687:67-687:70|12|-1"]},{"usr":13313155834593308603,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"333:37-333:40|333:29-333:40|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["335:67-335:70|12|-1"]},{"usr":13320228359045428590,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"486:27-486:30|486:19-486:30|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["488:58-488:61|12|-1"]},{"usr":13710976974832459879,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"427:25-427:28|427:17-427:28|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["429:55-429:58|12|-1"]},{"usr":13790110245572938694,"detailed_name":"__DEFAULT_FN_ATTRS_MMX","qual_name_offset":0,"short_name_offset":0,"short_name_size":22,"hover":"#define __DEFAULT_FN_ATTRS_MMX __attribute__((__always_inline__, __nodebug__, __target__(\"mmx,ssse3\"), __min_vector_width__(64)))","comments":"","spell":"17:9-17:31|17:9-17:130|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":["31:25-31:47|64|-1","67:25-67:47|64|-1","103:25-103:47|64|-1","236:25-236:47|64|-1","259:25-259:47|64|-1","309:25-309:47|64|-1","378:25-378:47|64|-1","401:25-401:47|64|-1","451:25-451:47|64|-1","515:25-515:47|64|-1","555:25-555:47|64|-1","606:25-606:47|64|-1","710:25-710:47|64|-1","736:25-736:47|64|-1","762:25-762:47|64|-1","769:8-769:30|64|-1"]},{"usr":13800014503171648706,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"536:39-536:42|536:31-536:42|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["538:69-538:72|12|-1"]},{"usr":14307816416478866158,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"122:23-122:26|122:15-122:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["124:53-124:56|12|-1"]},{"usr":14631500437684014376,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"68:20-68:23|68:14-68:23|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["70:48-70:51|12|-1"]},{"usr":14756382773704369741,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"607:23-607:26|607:17-607:26|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["609:49-609:52|12|-1"]},{"usr":14793304394875100896,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"711:31-711:34|711:25-711:34|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["713:62-713:65|12|-1"]},{"usr":14880743079402053115,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"379:32-379:35|379:26-379:35|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["381:62-381:65|12|-1"]},{"usr":15579069772025785352,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"237:21-237:24|237:15-237:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["239:49-239:52|12|-1"]},{"usr":15764317910534167646,"detailed_name":"_mm_alignr_pi8","qual_name_offset":0,"short_name_offset":0,"short_name_size":14,"hover":"#define _mm_alignr_pi8(a, b, n) \\\n  (__m64)__builtin_ia32_palignr((__v8qi)(__m64)(a), (__v8qi)(__m64)(b), (n))","comments":"","spell":"170:9-170:23|170:9-171:77|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":15801883167342388259,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"86:23-86:26|86:15-86:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["88:53-88:56|12|-1"]},{"usr":15946407608353110385,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"285:25-285:28|285:17-285:28|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["287:55-287:58|12|-1"]},{"usr":16006397862531870442,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"633:36-633:39|633:28-633:39|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["635:69-635:72|12|-1"]},{"usr":16274488152940120554,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"285:38-285:41|285:30-285:41|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["287:68-287:71|12|-1"]},{"usr":16491575520918922343,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"214:24-214:27|214:16-214:27|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["216:54-216:57|12|-1"]}]}