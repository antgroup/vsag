21
{"md5":"772d5fd2b95bf581b4338458db989424","language":1,"no_linkage":true,"lid2path":[{"L":0,"R":"/usr/local/ob-clang11/lib/clang/11.1.0/include/avxintrin.h"}],"import_file":"[GIT_TOP_DIR]/src/impl/FhtKacRotator.cpp","args":["clang","[GIT_TOP_DIR]/src/impl/FhtKacRotator.cpp","-working-directory=[GIT_TOP_DIR]/"],"dependencies":{"/usr/include/c++/10/bits/stl_numeric.h":"ignore_header_sys","/usr/include/ctype.h":"ignore_header_sys","/usr/include/bits/types/__mbstate_t.h":"ignore_header_sys","/usr/include/features.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/immintrin.h":"774d8f5fec0961c7f69eaa3c69870fd7","/usr/include/math.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_algobase.h":"ignore_header_sys","/usr/include/bits/byteswap.h":"ignore_header_sys","/usr/include/c++/10/vector":"ignore_header_sys","/usr/include/c++/10/bits/iterator_concepts.h":"ignore_header_sys","/usr/include/string.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlintrin.h":"cd26383f2f06392556848bfb374034c1","/usr/local/ob-clang11/lib/clang/11.1.0/include/vaesintrin.h":"230da0a10bfb803dd07d1d4859b589b9","/usr/include/bits/types/struct_FILE.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vbmivlintrin.h":"7a23233bba4c34e5185e02ea4208670c","/usr/include/bits/fp-logb.h":"ignore_header_sys","/usr/include/bits/types/cookie_io_functions_t.h":"ignore_header_sys","/usr/include/bits/types/__fpos_t.h":"ignore_header_sys","/usr/include/sys/cdefs.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512bf16intrin.h":"4f5ef6213a91abea3f5d53232215497c","/usr/include/c++/10/bits/locale_classes.h":"ignore_header_sys","/usr/include/c++/10/bits/streambuf.tcc":"ignore_header_sys","/usr/include/c++/10/bits/basic_ios.tcc":"ignore_header_sys","/usr/include/bits/types/timer_t.h":"ignore_header_sys","/usr/include/bits/types/mbstate_t.h":"ignore_header_sys","/usr/include/c++/10/bits/locale_facets.h":"ignore_header_sys","/usr/include/bits/sched.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/xmmintrin.h":"04b4174745d9f46d48080aefb7d04c2c","/usr/include/bits/types/wint_t.h":"ignore_header_sys","/usr/include/c++/10/bits/charconv.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_pair.h":"ignore_header_sys","/usr/include/c++/10/bits/char_traits.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/vpclmulqdqintrin.h":"a0ef53b1374f1ff070c815a7572221fa","/usr/include/time.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/wmmintrin.h":"420e06fc7b100109fe408d8cf15dfbbc","/usr/include/c++/10/bits/stl_bvector.h":"ignore_header_sys","/usr/include/c++/10/istream":"ignore_header_sys","/usr/include/bits/types/__sigset_t.h":"ignore_header_sys","/usr/include/c++/10/bits/allocator.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/emmintrin.h":"15ee96a71ec1a4288c0b5ffdad114450","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsavesintrin.h":"dfeb07884315d36739e4aa9dfd1d72ed","/usr/local/ob-clang11/lib/clang/11.1.0/include/smmintrin.h":"dde1073b90fcdddf514ff14bf7b0a39b","/usr/include/sys/types.h":"ignore_header_sys","/usr/include/c++/10/ios":"ignore_header_sys","/usr/include/c++/10/bits/uniform_int_dist.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/lzcntintrin.h":"070db0e5ecc75a113daa65f1a9a569a5","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vpopcntdqintrin.h":"748799b7fb86515d202460f78d94a3c3","/usr/include/bits/time64.h":"ignore_header_sys","/usr/include/bits/uintn-identity.h":"ignore_header_sys","/usr/include/c++/10/bits/cpp_type_traits.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vbmi2intrin.h":"d2eaacea81a5a13e0f771f69d62529ec","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512erintrin.h":"d8a0db1358f0c4f5db208e20fece727d","/usr/include/c++/10/bits/move.h":"ignore_header_sys","/usr/include/c++/10/cstdint":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/c++config.h":"ignore_header_sys","/usr/include/bits/endian.h":"ignore_header_sys","/usr/include/bits/types/__locale_t.h":"ignore_header_sys","/usr/include/bits/fp-fast.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512bitalgintrin.h":"065b5f6c02ddf57ee43a304b33d301c4","/usr/include/bits/wordsize.h":"ignore_header_sys","/usr/include/stdio.h":"ignore_header_sys","/usr/include/c++/10/bits/istream.tcc":"ignore_header_sys","/usr/include/bits/setjmp.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512fintrin.h":"4ce3a9eff70ef9558590a27aa986fc0e","/usr/include/gnu/stubs-64.h":"ignore_header_sys","/usr/include/asm/errno.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/enqcmdintrin.h":"6d8136c8969e9c723c195c33da2bb768","/usr/include/c++/10/ext/type_traits.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512bwintrin.h":"64c1b4a5d84a0126158179cc8904e8bd","/usr/include/bits/types.h":"ignore_header_sys","/usr/include/c++/10/string":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vnniintrin.h":"7cd1a414c4acf95129406d966bc736b5","/usr/include/c++/10/x86_64-redhat-linux/bits/os_defines.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/__wmmintrin_aes.h":"b7829f7e5a4221574897b8e365715ced","/usr/include/c++/10/numeric":"ignore_header_sys","/usr/include/c++/10/type_traits":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/stdint.h":"d6abd57f44fe5f48dbfb05fd9adc130a","/usr/include/c++/10/x86_64-redhat-linux/bits/ctype_inline.h":"ignore_header_sys","/usr/include/c++/10/new":"ignore_header_sys","/usr/include/bits/iscanonical.h":"ignore_header_sys","/usr/include/c++/10/bits/memoryfwd.h":"ignore_header_sys","/usr/include/asm-generic/errno-base.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/__stddef_max_align_t.h":"48e8e2456f77e6cda35d245130fa7259","/usr/local/ob-clang11/lib/clang/11.1.0/include/gfniintrin.h":"e0e20e8bab44c33118878b2889b2f2c8","/usr/include/c++/10/ext/new_allocator.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512ifmaintrin.h":"f52649bdc1dc467b7eadc3e1a810a0e2","/usr/include/c++/10/bits/functexcept.h":"ignore_header_sys","/usr/include/c++/10/bits/functional_hash.h":"ignore_header_sys","/usr/include/bits/endianness.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/popcntintrin.h":"7c3573a43b1c0704aac4cb098811cbb1","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512cdintrin.h":"650ead4d3b72acc353b9327d5ae2a07e","/usr/include/c++/10/bits/random.tcc":"ignore_header_sys","/usr/include/c++/10/debug/assertions.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_iterator_base_funcs.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsavecintrin.h":"8d492bf7b081416e797300c239dba796","/usr/include/c++/10/bits/stl_vector.h":"ignore_header_sys","/usr/include/c++/10/bits/basic_string.tcc":"ignore_header_sys","/usr/include/stdint.h":"ignore_header_sys","/usr/include/bits/types/__fpos64_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/rtmintrin.h":"591e544f8d70825a4bbf807dd287584a","/usr/include/c++/10/iosfwd":"ignore_header_sys","/usr/include/c++/10/cstdlib":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vpopcntdqvlintrin.h":"6af0e4f4c55f44ba40bac27558c51b3c","/usr/include/c++/10/cstring":"ignore_header_sys","/usr/include/bits/struct_rwlock.h":"ignore_header_sys","/usr/include/c++/10/bits/range_access.h":"ignore_header_sys","/usr/include/bits/libc-header-start.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/c++locale.h":"ignore_header_sys","/usr/include/c++/10/bits/vector.tcc":"ignore_header_sys","/usr/include/bits/cpu-set.h":"ignore_header_sys","/usr/include/bits/pthreadtypes-arch.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/ctype_base.h":"ignore_header_sys","/usr/include/c++/10/bits/cxxabi_init_exception.h":"ignore_header_sys","/usr/include/c++/10/bits/concept_check.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/gthr.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_iterator.h":"ignore_header_sys","/usr/include/bits/timex.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/waitpkgintrin.h":"2d1c4c5484fb9ec3a2f974b84ccead3c","/usr/include/bits/errno.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/shaintrin.h":"dd1634de945b1ffc8c6b7f39fa8a60c8","/usr/include/bits/select.h":"ignore_header_sys","/usr/include/wctype.h":"ignore_header_sys","/usr/include/bits/mathcalls.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vbmiintrin.h":"54a67d8ab20b9961e36a3fe16b875d4b","[GIT_TOP_DIR]/src/impl/FhtKacRotator.h":"f2f44cb0ba5dc218fc37736f2bab2192","/usr/local/ob-clang11/lib/clang/11.1.0/include/cetintrin.h":"30568779db4d995828cfd0dc8ab749f3","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx2intrin.h":"b787b869cf3250697b509a53b8f84261","/usr/local/ob-clang11/lib/clang/11.1.0/include/rdseedintrin.h":"d5c4d6f9ca83aa6d76891aa467a9c442","/usr/include/bits/waitflags.h":"ignore_header_sys","/usr/include/stdc-predef.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_construct.h":"ignore_header_sys","/usr/include/bits/waitstatus.h":"ignore_header_sys","/usr/include/c++/10/bits/ostream_insert.h":"ignore_header_sys","/usr/include/c++/10/bits/exception.h":"ignore_header_sys","/usr/include/linux/errno.h":"ignore_header_sys","/usr/include/bits/flt-eval-method.h":"ignore_header_sys","/usr/include/c++/10/bits/basic_string.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/amxintrin.h":"df04c665cb8533b77392c57a15d0c13e","/usr/local/ob-clang11/lib/clang/11.1.0/include/stddef.h":"2499dd2361b915724b073282bea3a7bc","/usr/local/ob-clang11/lib/clang/11.1.0/include/xtestintrin.h":"ddbb320bafef81c16f4db301b5d692b4","/usr/include/c++/10/ext/alloc_traits.h":"ignore_header_sys","/usr/include/sched.h":"ignore_header_sys","/usr/include/bits/pthreadtypes.h":"ignore_header_sys","/usr/include/c++/10/bits/random.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512pfintrin.h":"4f558d52a120f2dbc17724370f698f70","/usr/local/ob-clang11/lib/clang/11.1.0/include/sgxintrin.h":"1d380dfee68686a7fa21e5c5888eaf05","/usr/local/ob-clang11/lib/clang/11.1.0/include/fxsrintrin.h":"2288062b986bd0a526c32df2bd2e2c7b","/usr/local/ob-clang11/lib/clang/11.1.0/include/mm_malloc.h":"ed68cf68a5b4db09df709fc93a5e9b12","/usr/local/ob-clang11/lib/clang/11.1.0/include/fmaintrin.h":"e5555b944d57763068cff3823905dcda","/usr/include/bits/mathcalls-narrow.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/bmiintrin.h":"30db6d08581335daa785b893e982ec21","/usr/include/bits/floatn-common.h":"ignore_header_sys","/usr/include/asm-generic/errno.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/gthr-default.h":"ignore_header_sys","/usr/include/c++/10/concepts":"ignore_header_sys","/usr/include/bits/wctype-wchar.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512dqintrin.h":"0a5f59d3a1b4c24596a35fc4d831362d","/usr/include/bits/timesize.h":"ignore_header_sys","/usr/include/bits/types/clock_t.h":"ignore_header_sys","/usr/include/bits/types/locale_t.h":"ignore_header_sys","/usr/include/strings.h":"ignore_header_sys","/usr/include/bits/types/__FILE.h":"ignore_header_sys","/usr/include/c++/10/bits/int_limits.h":"ignore_header_sys","/usr/include/bits/types/struct_itimerspec.h":"ignore_header_sys","/usr/include/c++/10/backward/binders.h":"ignore_header_sys","/usr/include/c++/10/typeinfo":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/c++allocator.h":"ignore_header_sys","/usr/include/c++/10/bits/predefined_ops.h":"ignore_header_sys","/usr/include/bits/time.h":"ignore_header_sys","/usr/include/bits/types/error_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/ptwriteintrin.h":"d07b5c84c015bb93867eab402d31ebca","/usr/include/c++/10/bits/stringfwd.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/cpu_defines.h":"ignore_header_sys","/usr/include/c++/10/bits/alloc_traits.h":"ignore_header_sys","/usr/include/c++/10/ext/string_conversions.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/serializeintrin.h":"9c34b27612aea430b36983691b4efe29","[GIT_TOP_DIR]/src/logger.h":"bc3e03e770b051e6cadc16e5f96c170f","/usr/include/c++/10/bits/ostream.tcc":"ignore_header_sys","/usr/include/c++/10/limits":"ignore_header_sys","/usr/include/c++/10/bits/cxxabi_forced.h":"ignore_header_sys","/usr/include/c++/10/ext/atomicity.h":"ignore_header_sys","/usr/include/wchar.h":"ignore_header_sys","/usr/include/c++/10/ext/numeric_traits.h":"ignore_header_sys","/usr/include/c++/10/ostream":"ignore_header_sys","/usr/include/endian.h":"ignore_header_sys","/usr/include/bits/types/sigset_t.h":"ignore_header_sys","/usr/include/c++/10/clocale":"ignore_header_sys","/usr/include/c++/10/bits/nested_exception.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsaveoptintrin.h":"30a5b7413ecc5157d3c788a4fc5f30f7","/usr/local/ob-clang11/lib/clang/11.1.0/include/invpcidintrin.h":"ff85318ef7dbac300480b3249673816b","/usr/include/c++/10/cwchar":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/atomic_word.h":"ignore_header_sys","/usr/include/pthread.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/stdarg.h":"4de3cbd931b589d291e5c39387aecf82","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsaveintrin.h":"bf0d37fbd9112292164e41d157229261","/usr/local/ob-clang11/lib/clang/11.1.0/include/f16cintrin.h":"e1d777f3170634f5a307f86472b0fb57","/usr/include/c++/10/cwctype":"ignore_header_sys","/usr/include/bits/types/clockid_t.h":"ignore_header_sys","/usr/include/c++/10/bits/basic_ios.h":"ignore_header_sys","/usr/include/c++/10/bits/locale_classes.tcc":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/tmmintrin.h":"d905b09b29cb36b015d25405cfbf8e5a","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlvnniintrin.h":"64180305ff9c6bfad63ee41cbd66093d","/usr/local/ob-clang11/lib/clang/11.1.0/include/pmmintrin.h":"3157414820008b3ad90647450dcf904b","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlcdintrin.h":"6f8f18f6874f9c1a5f19b1c55e3c0cb5","/usr/include/c++/10/stdexcept":"ignore_header_sys","/usr/include/c++/10/bits/exception_ptr.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/__wmmintrin_pclmul.h":"7cbd2793e783b90f193cebfa3675e55a","/usr/include/c++/10/random":"ignore_header_sys","/usr/include/c++/10/stdlib.h":"ignore_header_sys","/usr/include/bits/stdint-uintn.h":"ignore_header_sys","/usr/include/bits/types/struct_sched_param.h":"ignore_header_sys","/usr/include/c++/10/bits/range_cmp.h":"ignore_header_sys","/usr/include/gnu/stubs.h":"ignore_header_sys","/usr/include/c++/10/cerrno":"ignore_header_sys","/usr/include/bits/mathcalls-helper-functions.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/clflushoptintrin.h":"2a269418efbdd932851586bbfa8726a3","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlbwintrin.h":"449273cd1de2c72197e012c804a8c056","/usr/local/ob-clang11/lib/clang/11.1.0/include/tsxldtrkintrin.h":"317e5aa78e58a9618f04d7532a36a253","/usr/include/c++/10/exception":"ignore_header_sys","/usr/include/c++/10/bits/stl_function.h":"ignore_header_sys","/usr/include/bits/locale.h":"ignore_header_sys","/usr/include/c++/10/initializer_list":"ignore_header_sys","/usr/include/bits/wchar.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/error_constants.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vp2intersectintrin.h":"7f431ec4ddce958af8a75cc7a71b3a57","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlbitalgintrin.h":"50b7714a556eb5e52999b7dd18de7d4e","/usr/include/c++/10/cctype":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlbf16intrin.h":"da6bea340165f020a9142ab63fc1aecf","/usr/include/c++/10/bits/std_abs.h":"ignore_header_sys","/usr/include/bits/math-vector.h":"ignore_header_sys","/usr/include/bits/stdint-intn.h":"ignore_header_sys","/usr/include/bits/libm-simd-decl-stubs.h":"ignore_header_sys","/usr/include/c++/10/cmath":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlvbmi2intrin.h":"d09f75ea16d8f1302331016743dca38c","/usr/include/bits/types/struct_tm.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_uninitialized.h":"ignore_header_sys","/usr/include/c++/10/debug/debug.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/opt_random.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/cldemoteintrin.h":"6c282c2bb0cc618292bd47b69fc27641","/usr/include/c++/10/streambuf":"ignore_header_sys","/usr/include/c++/10/bits/exception_defines.h":"ignore_header_sys","/usr/include/bits/types/struct_timespec.h":"ignore_header_sys","/usr/include/bits/thread-shared-types.h":"ignore_header_sys","/usr/include/c++/10/bits/locale_facets.tcc":"ignore_header_sys","/usr/include/locale.h":"ignore_header_sys","/usr/include/bits/types/struct_timeval.h":"ignore_header_sys","/usr/include/c++/10/system_error":"ignore_header_sys","/usr/include/bits/typesizes.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/adxintrin.h":"6828d907a1be13a942ad62e7b4db6870","/usr/include/c++/10/bits/streambuf_iterator.h":"ignore_header_sys","/usr/include/bits/long-double.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512ifmavlintrin.h":"c3576813a57918c2734a8acf08e69b33","/usr/include/c++/10/bits/ios_base.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/bmi2intrin.h":"5421c86f7749d5b931a602c4c605aa59","/usr/include/c++/10/iostream":"ignore_header_sys","/usr/include/c++/10/bits/stl_iterator_base_types.h":"ignore_header_sys","/usr/include/c++/10/bits/hash_bytes.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlvp2intersectintrin.h":"e127597621c37f450875cdc70e9df509","/usr/include/bits/types/time_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/clwbintrin.h":"bc581022bcc5037ab8b06c9c95e15663","/usr/local/ob-clang11/lib/clang/11.1.0/include/mmintrin.h":"1de54663046d007c7b16e4f603262ad8","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vldqintrin.h":"8229c4851f85c40c1f62097dc173e420","/usr/local/ob-clang11/lib/clang/11.1.0/include/pkuintrin.h":"750db2cf252eb52d8e60ad6fffb80c8a","/usr/include/bits/stdio_lim.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/wbnoinvdintrin.h":"8d0e049f9ce4bbcc291c21fe7bc7a508","/usr/include/c++/10/bits/ptr_traits.h":"ignore_header_sys","/usr/include/sys/select.h":"ignore_header_sys","/usr/include/bits/floatn.h":"ignore_header_sys","/usr/include/c++/10/cstdio":"ignore_header_sys","/usr/include/alloca.h":"ignore_header_sys","/usr/include/bits/struct_mutex.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/movdirintrin.h":"4566737781d765bba033913dedfcaa83","/usr/include/c++/10/bits/localefwd.h":"ignore_header_sys","/usr/include/errno.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/pconfigintrin.h":"9da09fbffb9a78b478ac0ce6d43271d7","/usr/include/c++/10/bits/postypes.h":"ignore_header_sys","[GIT_TOP_DIR]/src/impl/matrix_rotator.h":"201b9e418b243731f34df19414d16ccb","/usr/include/stdlib.h":"ignore_header_sys","/usr/include/bits/types/FILE.h":"ignore_header_sys","/usr/include/bits/stdlib-float.h":"ignore_header_sys"},"includes":[],"skipped_ranges":["10:1-12:7"],"usr2func":[{"usr":94224622915195473,"detailed_name":"static inline __m256i _mm256_setr_m128i(__m128i __lo, __m128i __hi)","qual_name_offset":22,"short_name_offset":22,"short_name_size":17,"spell":"5045:1-5045:18|5044:1-5048:2|2|-1","hover":"","comments":"Constructs a 256-bit integer vector by concatenating two 128-bit\n   integer vectors. This is similar to _mm256_set_m128i, but the order of\n   the input parameters is swapped.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VINSERTF128 </c> instruction.\n\n\\param __lo\n   A 128-bit integer vector to be copied to the lower 128 bits of the\n   result.\n\\param __hi\n   A 128-bit integer vector to be copied to the upper 128 bits of the\n   result.\n\\returns A 256-bit integer vector containing the concatenated result.","bases":[],"vars":[2676632035575211006,13580676544418747509],"callees":["5047:19-5047:35|6006589861479392634|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":342004434945167170,"detailed_name":"static inline __m256d _mm256_add_pd(__m256d __a, __m256d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"60:1-60:14|59:1-63:2|2|-1","hover":"","comments":"Arithmetic */\n Adds two 256-bit vectors of [4 x double].\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VADDPD </c> instruction.\n\n \\param __a\n    A 256-bit vector of [4 x double] containing one of the source operands.\n \\param __b\n    A 256-bit vector of [4 x double] containing one of the source operands.\n \\returns A 256-bit vector of [4 x double] containing the sums of both\n    operands.","bases":[],"vars":[9222249529456326799,12025147510083374280],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":414168648334814664,"detailed_name":"static inline __m128 _mm_broadcast_ss(const float *__a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":16,"spell":"2973:1-2973:17|2972:1-2977:2|2|-1","hover":"","comments":"Vector load with broadcast */\n Loads a scalar single-precision floating point value from the\n    specified address pointed to by \\a __a and broadcasts it to the elements\n    of a [4 x float] vector.\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VBROADCASTSS </c> instruction.\n\n \\param __a\n    The single-precision floating point value to be broadcast.\n \\returns A 128-bit vector of [4 x float] whose 32-bit elements are set\n    equal to the broadcast value.","bases":[],"vars":[9454439355539624693,17102576319102628428],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":488681422303086319,"detailed_name":"static inline void _mm256_stream_si256(__m256i *__a, __m256i __b)","qual_name_offset":19,"short_name_offset":19,"short_name_size":19,"spell":"3512:1-3512:20|3511:1-3516:2|2|-1","hover":"","comments":"Cacheability support ops */\n Moves integer data from a 256-bit integer vector to a 32-byte\n    aligned memory location. To minimize caching, the data is flagged as\n    non-temporal (unlikely to be used again soon).\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VMOVNTDQ </c> instruction.\n\n \\param __a\n    A pointer to a 32-byte aligned memory location that will receive the\n    integer values.\n \\param __b\n    A 256-bit integer vector containing the values to be moved.","bases":[],"vars":[17275376664098899143,13658625166847224564],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":627263031935565882,"detailed_name":"static inline __m256d _mm256_castpd128_pd256(__m128d __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":22,"spell":"4455:1-4455:23|4454:1-4458:2|2|-1","hover":"","comments":"Constructs a 256-bit floating-point vector of [4 x double] from a\n   128-bit floating-point vector of [2 x double].\n\n   The lower 128 bits contain the value of the source vector. The contents\n   of the upper 128 bits are undefined.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double].\n\\returns A 256-bit floating-point vector of [4 x double]. The lower 128 bits\n   contain the value of the parameter. The contents of the upper 128 bits\n   are undefined.","bases":[],"vars":[15824147968910391680],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["4804:20-4804:42|16420|-1"]},{"usr":628086114793872621,"detailed_name":"static inline __m256 _mm256_addsub_ps(__m256 __a, __m256 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":16,"spell":"152:1-152:17|151:1-155:2|2|-1","hover":"","comments":"Adds the even-indexed values and subtracts the odd-indexed values of\n   two 256-bit vectors of [8 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VADDSUBPS </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float] containing the left source operand.\n\\param __b\n   A 256-bit vector of [8 x float] containing the right source operand.\n\\returns A 256-bit vector of [8 x float] containing the alternating sums and\n   differences between both operands.","bases":[],"vars":[14247327028298677035,913212542138745740],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":685170396938587567,"detailed_name":"static inline float _mm256_cvtss_f32(__m256 __a)","qual_name_offset":20,"short_name_offset":20,"short_name_size":16,"spell":"2290:1-2290:17|2289:1-2293:2|2|-1","hover":"","comments":"Returns the first element of the input vector of [8 x float].\n\n\\headerfile <avxintrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float].\n\\returns A 32 bit float containing the first element of the input vector.","bases":[],"vars":[6793832726570410194],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1119947344666969755,"detailed_name":"static inline __m256 _mm256_add_ps(__m256 __a, __m256 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"78:1-78:14|77:1-81:2|2|-1","hover":"","comments":"Adds two 256-bit vectors of [8 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VADDPS </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float] containing one of the source operands.\n\\param __b\n   A 256-bit vector of [8 x float] containing one of the source operands.\n\\returns A 256-bit vector of [8 x float] containing the sums of both\n   operands.","bases":[],"vars":[5418809840437461790,14374893408067279935],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1141225481349273263,"detailed_name":"static inline __m256d _mm256_mul_pd(__m256d __a, __m256d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"282:1-282:14|281:1-285:2|2|-1","hover":"","comments":"Multiplies two 256-bit vectors of [4 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMULPD </c> instruction.\n\n\\param __a\n   A 256-bit vector of [4 x double] containing one of the operands.\n\\param __b\n   A 256-bit vector of [4 x double] containing one of the operands.\n\\returns A 256-bit vector of [4 x double] containing the products of both\n   operands.","bases":[],"vars":[1120886639445959575,5862812815118087629],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1230577803424935606,"detailed_name":"static inline __m256 _mm256_xor_ps(__m256 __a, __m256 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"652:1-652:14|651:1-655:2|2|-1","hover":"","comments":"Performs a bitwise XOR of two 256-bit vectors of [8 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VXORPS </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float] containing one of the source operands.\n\\param __b\n   A 256-bit vector of [8 x float] containing one of the source operands.\n\\returns A 256-bit vector of [8 x float] containing the bitwise XOR of the\n   values between both operands.","bases":[],"vars":[671395935439664840,6329654036465410961],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1327894699747601638,"detailed_name":"static inline __m256d _mm256_hsub_pd(__m256d __a, __m256d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"722:1-722:15|721:1-725:2|2|-1","hover":"","comments":"Horizontally subtracts the adjacent pairs of values contained in two\n   256-bit vectors of [4 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VHSUBPD </c> instruction.\n\n\\param __a\n   A 256-bit vector of [4 x double] containing one of the source operands.\n   The horizontal differences between the values are returned in the\n   even-indexed elements of a vector of [4 x double].\n\\param __b\n   A 256-bit vector of [4 x double] containing one of the source operands.\n   The horizontal differences between the values are returned in the\n   odd-indexed elements of a vector of [4 x double].\n\\returns A 256-bit vector of [4 x double] containing the horizontal\n   differences of both operands.","bases":[],"vars":[8762115335199459035,12433789699639682409],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1492439842085772576,"detailed_name":"static inline __m256 _mm256_mul_ps(__m256 __a, __m256 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"300:1-300:14|299:1-303:2|2|-1","hover":"","comments":"Multiplies two 256-bit vectors of [8 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMULPS </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float] containing one of the operands.\n\\param __b\n   A 256-bit vector of [8 x float] containing one of the operands.\n\\returns A 256-bit vector of [8 x float] containing the products of both\n   operands.","bases":[],"vars":[1349639312735575361,2605044072914138101],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1503285447547149508,"detailed_name":"static inline int _mm256_testc_si256(__m256i __a, __m256i __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":18,"spell":"2867:1-2867:19|2866:1-2870:2|2|-1","hover":"","comments":"Given two 256-bit integer vectors, perform a bit-by-bit comparison\n   of the two source vectors.\n\n   The EFLAGS register is updated as follows: \\n\n   If there is at least one pair of bits where both bits are 1, the ZF flag\n   is set to 0. Otherwise the ZF flag is set to 1. \\n\n   If there is at least one pair of bits where the bit from the first source\n   vector is 0 and the bit from the second source vector is 1, the CF flag\n   is set to 0. Otherwise the CF flag is set to 1. \\n\n   This intrinsic returns the value of the CF flag.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPTEST </c> instruction.\n\n\\param __a\n   A 256-bit integer vector.\n\\param __b\n   A 256-bit integer vector.\n\\returns the CF flag.","bases":[],"vars":[16546506519315712302,10144821412567838127],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1544630333276566894,"detailed_name":"static inline __m256i _mm256_cvtps_epi32(__m256 __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":18,"spell":"2175:1-2175:19|2174:1-2178:2|2|-1","hover":"","comments":"Converts a vector of [8 x float] into a vector of [8 x i32].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTPS2DQ </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float].\n\\returns A 256-bit integer vector containing the converted values.","bases":[],"vars":[1625001916785748174],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1598765435466984018,"detailed_name":"static inline __m256 _mm256_setr_m128(__m128 __lo, __m128 __hi)","qual_name_offset":21,"short_name_offset":21,"short_name_size":16,"spell":"5001:1-5001:17|5000:1-5004:2|2|-1","hover":"","comments":"Constructs a 256-bit floating-point vector of [8 x float] by\n   concatenating two 128-bit floating-point vectors of [4 x float]. This is\n   similar to _mm256_set_m128, but the order of the input parameters is\n   swapped.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VINSERTF128 </c> instruction.\n\n\\param __lo\n   A 128-bit floating-point vector of [4 x float] to be copied to the lower\n   128 bits of the result.\n\\param __hi\n   A 128-bit floating-point vector of [4 x float] to be copied to the upper\n   128 bits of the result.\n\\returns A 256-bit floating-point vector of [8 x float] containing the\n   concatenated result.","bases":[],"vars":[816538603630654007,9726229206834834935],"callees":["5003:10-5003:25|7603573905176758094|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1599663045193964702,"detailed_name":"static inline __m256 _mm256_moveldup_ps(__m256 __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":18,"spell":"2341:1-2341:19|2340:1-2344:2|2|-1","hover":"","comments":"Moves and duplicates even-indexed values from a 256-bit vector of\n   [8 x float] to float values in a 256-bit vector of [8 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVSLDUP </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float]. \\n\n   Bits [223:192] of \\a __a are written to bits [255:224] and [223:192] of\n   the return value. \\n\n   Bits [159:128] of \\a __a are written to bits [191:160] and [159:128] of\n   the return value. \\n\n   Bits [95:64] of \\a __a are written to bits [127:96] and [95:64] of the\n   return value. \\n\n   Bits [31:0] of \\a __a are written to bits [63:32] and [31:0] of the\n   return value.\n\\returns A 256-bit vector of [8 x float] containing the moved and duplicated\n   values.","bases":[],"vars":[3062962882641280945],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2077478222182787837,"detailed_name":"static inline int _mm_testz_ps(__m128 __a, __m128 __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":12,"spell":"2580:1-2580:13|2579:1-2583:2|2|-1","hover":"","comments":"Given two 128-bit floating-point vectors of [4 x float], perform an\n   element-by-element comparison of the single-precision element in the\n   first source vector and the corresponding element in the second source\n   vector.\n\n   The EFLAGS register is updated as follows: \\n\n   If there is at least one pair of single-precision elements where the\n   sign-bits of both elements are 1, the ZF flag is set to 0. Otherwise the\n   ZF flag is set to 1. \\n\n   If there is at least one pair of single-precision elements where the\n   sign-bit of the first element is 0 and the sign-bit of the second element\n   is 1, the CF flag is set to 0. Otherwise the CF flag is set to 1. \\n\n   This intrinsic returns the value of the ZF flag.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VTESTPS </c> instruction.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\param __b\n   A 128-bit vector of [4 x float].\n\\returns the ZF flag.","bases":[],"vars":[8242641200478166408,10537551406531401329],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2118076046214498597,"detailed_name":"static inline __m256d _mm256_broadcast_pd(const __m128d *__a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":19,"spell":"3030:1-3030:20|3029:1-3035:2|2|-1","hover":"","comments":"Loads the data from a 128-bit vector of [2 x double] from the\n   specified address pointed to by \\a __a and broadcasts it to 128-bit\n   elements in a 256-bit vector of [4 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VBROADCASTF128 </c> instruction.\n\n\\param __a\n   The 128-bit vector of [2 x double] to be broadcast.\n\\returns A 256-bit vector of [4 x double] whose 128-bit elements are set\n   equal to the broadcast value.","bases":[],"vars":[11248703719764352046,11683484194881706235],"callees":["3032:17-3032:29|5997638552374428914|3|16420","3032:17-3032:29|5997638552374428914|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2164575442604449181,"detailed_name":"static inline void _mm256_maskstore_pd(double *__p, __m256i __m, __m256d __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":19,"spell":"3468:1-3468:20|3467:1-3471:2|2|-1","hover":"","comments":"Moves double-precision values from a 256-bit vector of [4 x double]\n   to a memory location pointed to by \\a __p, according to the specified\n   mask.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMASKMOVPD </c> instruction.\n\n\\param __p\n   A pointer to a memory location that will receive the float values.\n\\param __m\n   A 256-bit integer vector of [4 x quadword] containing the mask. The most\n   significant bit of each quadword element in the mask vector represents\n   the mask bits. If a mask bit is zero, the corresponding value from vector\n   __a is not stored and the corresponding field in the memory location\n   pointed to by \\a __p is not changed.\n\\param __a\n   A 256-bit vector of [4 x double] containing the values to be stored.","bases":[],"vars":[3627651995167357668,900438559425981032,12580723205662368252],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2188060718445274099,"detailed_name":"static inline __m256 _mm256_blendv_ps(__m256 __a, __m256 __b, __m256 __c)","qual_name_offset":21,"short_name_offset":21,"short_name_size":16,"spell":"1411:1-1411:17|1410:1-1415:2|2|-1","hover":"","comments":"Merges 32-bit single-precision data values stored in either of the\n   two 256-bit vectors of [8 x float], as specified by the 256-bit vector\n   operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VBLENDVPS </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float].\n\\param __b\n   A 256-bit vector of [8 x float].\n\\param __c\n   A 256-bit vector operand, with mask bits 255, 223, 191, 159, 127, 95, 63,\n   and 31 specifying how the values are to be copied. The position of the\n   mask bit corresponds to the most significant bit of a copied value. When\n   a mask bit is 0, the corresponding 32-bit element in operand \\a __a is\n   copied to the same position in the destination. When a mask bit is 1, the\n   corresponding 32-bit element in operand \\a __b is copied to the same\n   position in the destination.\n\\returns A 256-bit vector of [8 x float] containing the copied values.","bases":[],"vars":[14197043188711012359,15744590540162263351,14476516389913108219],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2297831790436123957,"detailed_name":"static inline __m256i _mm256_lddqu_si256(const __m256i *__p)","qual_name_offset":22,"short_name_offset":22,"short_name_size":18,"spell":"3180:1-3180:19|3179:1-3183:2|2|-1","hover":"","comments":"Loads 256 bits of integer data from an unaligned memory location\n   pointed to by \\a __p into a 256-bit integer vector. This intrinsic may\n   perform better than \\c _mm256_loadu_si256 when the data crosses a cache\n   line boundary.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VLDDQU </c> instruction.\n\n\\param __p\n   A pointer to a 256-bit integer vector containing integer values.\n\\returns A 256-bit integer vector containing the moved values.","bases":[],"vars":[11056073784661575414],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2524217353495285144,"detailed_name":"static inline void _mm256_storeu_ps(float *__p, __m256 __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":16,"spell":"3256:1-3256:17|3255:1-3262:2|2|-1","hover":"","comments":"Stores single-precision floating point values from a 256-bit vector\n   of [8 x float] to an unaligned memory location pointed to by \\a __p.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVUPS </c> instruction.\n\n\\param __p\n   A pointer to a memory location that will receive the float values.\n\\param __a\n   A 256-bit vector of [8 x float] containing the values to be moved.","bases":[],"vars":[8321361345967342522,1268029534355076057],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2559467884525684344,"detailed_name":"static inline __m256d _mm256_hadd_pd(__m256d __a, __m256d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"676:1-676:15|675:1-679:2|2|-1","hover":"","comments":"Horizontal arithmetic */\n Horizontally adds the adjacent pairs of values contained in two\n    256-bit vectors of [4 x double].\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VHADDPD </c> instruction.\n\n \\param __a\n    A 256-bit vector of [4 x double] containing one of the source operands.\n    The horizontal sums of the values are returned in the even-indexed\n    elements of a vector of [4 x double].\n \\param __b\n    A 256-bit vector of [4 x double] containing one of the source operands.\n    The horizontal sums of the values are returned in the odd-indexed\n    elements of a vector of [4 x double].\n \\returns A 256-bit vector of [4 x double] containing the horizontal sums of\n    both operands.","bases":[],"vars":[8021244504974927973,15847364736064191508],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2648098869486184405,"detailed_name":"static inline __m256d _mm256_set_m128d(__m128d __hi, __m128d __lo)","qual_name_offset":22,"short_name_offset":22,"short_name_size":16,"spell":"4958:1-4958:17|4957:1-4961:2|2|-1","hover":"","comments":"Constructs a 256-bit floating-point vector of [4 x double] by\n   concatenating two 128-bit floating-point vectors of [2 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VINSERTF128 </c> instruction.\n\n\\param __hi\n   A 128-bit floating-point vector of [2 x double] to be copied to the upper\n   128 bits of the result.\n\\param __lo\n   A 128-bit floating-point vector of [2 x double] to be copied to the lower\n   128 bits of the result.\n\\returns A 256-bit floating-point vector of [4 x double] containing the\n   concatenated result.","bases":[],"vars":[1056340503249273152,1429914340660366847],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["5026:19-5026:35|16420|-1"]},{"usr":2716730989809485146,"detailed_name":"static inline void _mm_storeu_pd(double *__dp, __m128d __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":13,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":[],"derived":[],"uses":["4887:3-4887:16|16420|-1","4889:3-4889:16|16420|-1"]},{"usr":2747103539634611622,"detailed_name":"static inline __m256 _mm256_set_ps(float __a, float __b, float __c, float __d, float __e, float __f, float __g, float __h)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"3660:1-3660:14|3659:1-3664:2|2|-1","hover":"","comments":"Constructs a 256-bit floating-point vector of [8 x float] initialized\n   with the specified single-precision floating-point values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n  instruction.\n\n\\param __a\n   A single-precision floating-point value used to initialize bits [255:224]\n   of the result.\n\\param __b\n   A single-precision floating-point value used to initialize bits [223:192]\n   of the result.\n\\param __c\n   A single-precision floating-point value used to initialize bits [191:160]\n   of the result.\n\\param __d\n   A single-precision floating-point value used to initialize bits [159:128]\n   of the result.\n\\param __e\n   A single-precision floating-point value used to initialize bits [127:96]\n   of the result.\n\\param __f\n   A single-precision floating-point value used to initialize bits [95:64]\n   of the result.\n\\param __g\n   A single-precision floating-point value used to initialize bits [63:32]\n   of the result.\n\\param __h\n   A single-precision floating-point value used to initialize bits [31:0]\n   of the result.\n\\returns An initialized 256-bit floating-point vector of [8 x float].","bases":[],"vars":[11307299589129326040,13751228838686270187,17637219496212645411,6845910432912648630,11291409771631746624,8837796470580718916,4166028057678723507,15621141783442333472],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["3930:10-3930:23|16420|-1","4165:10-4165:23|16420|-1"]},{"usr":2763739552687072504,"detailed_name":"static inline __m256i _mm256_castpd_si256(__m256d __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":19,"spell":"4316:1-4316:20|4315:1-4319:2|2|-1","hover":"","comments":"Casts a 256-bit floating-point vector of [4 x double] into a 256-bit\n   integer vector.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\param __a\n   A 256-bit floating-point vector of [4 x double].\n\\returns A 256-bit integer vector containing the same bitwise pattern as the\n   parameter.","bases":[],"vars":[5640114703711472036],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2790402806405752554,"detailed_name":"static inline __m256 _mm256_set1_ps(float __w)","qual_name_offset":21,"short_name_offset":21,"short_name_size":14,"spell":"4163:1-4163:15|4162:1-4166:2|2|-1","hover":"","comments":"Constructs a 256-bit floating-point vector of [8 x float], with each\n   of the eight single-precision floating-point vector elements set to the\n   specified single-precision floating-point value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPERMILPS+VINSERTF128 </c>\n  instruction.\n\n\\param __w\n   A single-precision floating-point value used to initialize each vector\n   element of the result.\n\\returns An initialized 256-bit floating-point vector of [8 x float].","bases":[],"vars":[4818583763083710199],"callees":["4165:10-4165:23|2747103539634611622|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2835091914660736266,"detailed_name":"static inline __m256d _mm256_sqrt_pd(__m256d __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"317:1-317:15|316:1-320:2|2|-1","hover":"","comments":"Calculates the square roots of the values in a 256-bit vector of\n   [4 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VSQRTPD </c> instruction.\n\n\\param __a\n   A 256-bit vector of [4 x double].\n\\returns A 256-bit vector of [4 x double] containing the square roots of the\n   values in the operand.","bases":[],"vars":[13498851746772802364],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2874449810143219391,"detailed_name":"static inline void _mm256_storeu2_m128(float *__addr_hi, float *__addr_lo, __m256 __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":19,"spell":"4853:1-4853:20|4852:1-4861:2|2|-1","hover":"","comments":"SIMD store ops (unaligned) */\n Stores the upper and lower 128 bits of a 256-bit floating-point\n    vector of [8 x float] into two different unaligned memory locations.\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VEXTRACTF128 </c> instruction and the\n   store instructions.\n\n \\param __addr_hi\n    A pointer to a 128-bit memory location. Bits[255:128] of \\a __a are to be\n    copied to this memory location. The address of this memory location does\n    not have to be aligned.\n \\param __addr_lo\n    A pointer to a 128-bit memory location. Bits[127:0] of \\a __a are to be\n    copied to this memory location. The address of this memory location does\n    not have to be aligned.\n \\param __a\n    A 256-bit floating-point vector of [8 x float].","bases":[],"vars":[815608816178088331,8134525601685413824,6206188343405704881,1008185880859419718],"callees":["4857:12-4857:34|12448017614334774127|3|16420","4858:3-4858:16|4355754506918534044|3|16420","4860:3-4860:16|4355754506918534044|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2886990744510643867,"detailed_name":"static inline int _mm256_testc_pd(__m256d __a, __m256d __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":15,"spell":"2697:1-2697:16|2696:1-2700:2|2|-1","hover":"","comments":"Given two 256-bit floating-point vectors of [4 x double], perform an\n   element-by-element comparison of the double-precision elements in the\n   first source vector and the corresponding elements in the second source\n   vector.\n\n   The EFLAGS register is updated as follows: \\n\n   If there is at least one pair of double-precision elements where the\n   sign-bits of both elements are 1, the ZF flag is set to 0. Otherwise the\n   ZF flag is set to 1. \\n\n   If there is at least one pair of double-precision elements where the\n   sign-bit of the first element is 0 and the sign-bit of the second element\n   is 1, the CF flag is set to 0. Otherwise the CF flag is set to 1. \\n\n   This intrinsic returns the value of the CF flag.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VTESTPD </c> instruction.\n\n\\param __a\n   A 256-bit vector of [4 x double].\n\\param __b\n   A 256-bit vector of [4 x double].\n\\returns the CF flag.","bases":[],"vars":[16464958575496190854,9321829262360921859],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2967719908665469246,"detailed_name":"static inline __m256i _mm256_setr_epi8(char __b31, char __b30, char __b29, char __b28, char __b27, char __b26, char __b25, char __b24, char __b23, char __b22, char __b21, char __b20, char __b19, char __b18, char __b17, char __b16, char __b15, char __b14, char __b13, char __b12, char __b11, char __b10, char __b09, char __b08, char __b07, char __b06, char __b05, char __b04, char __b03, char __b02, char __b01, char __b00)","qual_name_offset":22,"short_name_offset":22,"short_name_size":16,"spell":"4092:1-4092:17|4091:1-4105:2|2|-1","hover":"","comments":"Constructs a 256-bit integer vector, initialized in reverse order\n   with the specified 8-bit integral values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n  instruction.\n\n\\param __b31\n   An 8-bit integral value used to initialize bits [7:0] of the result.\n\\param __b30\n   An 8-bit integral value used to initialize bits [15:8] of the result.\n\\param __b29\n   An 8-bit integral value used to initialize bits [23:16] of the result.\n\\param __b28\n   An 8-bit integral value used to initialize bits [31:24] of the result.\n\\param __b27\n   An 8-bit integral value used to initialize bits [39:32] of the result.\n\\param __b26\n   An 8-bit integral value used to initialize bits [47:40] of the result.\n\\param __b25\n   An 8-bit integral value used to initialize bits [55:48] of the result.\n\\param __b24\n   An 8-bit integral value used to initialize bits [63:56] of the result.\n\\param __b23\n   An 8-bit integral value used to initialize bits [71:64] of the result.\n\\param __b22\n   An 8-bit integral value used to initialize bits [79:72] of the result.\n\\param __b21\n   An 8-bit integral value used to initialize bits [87:80] of the result.\n\\param __b20\n   An 8-bit integral value used to initialize bits [95:88] of the result.\n\\param __b19\n   An 8-bit integral value used to initialize bits [103:96] of the result.\n\\param __b18\n   An 8-bit integral value used to initialize bits [111:104] of the result.\n\\param __b17\n   An 8-bit integral value used to initialize bits [119:112] of the result.\n\\param __b16\n   An 8-bit integral value used to initialize bits [127:120] of the result.\n\\param __b15\n   An 8-bit integral value used to initialize bits [135:128] of the result.\n\\param __b14\n   An 8-bit integral value used to initialize bits [143:136] of the result.\n\\param __b13\n   An 8-bit integral value used to initialize bits [151:144] of the result.\n\\param __b12\n   An 8-bit integral value used to initialize bits [159:152] of the result.\n\\param __b11\n   An 8-bit integral value used to initialize bits [167:160] of the result.\n\\param __b10\n   An 8-bit integral value used to initialize bits [175:168] of the result.\n\\param __b09\n   An 8-bit integral value used to initialize bits [183:176] of the result.\n\\param __b08\n   An 8-bit integral value used to initialize bits [191:184] of the result.\n\\param __b07\n   An 8-bit integral value used to initialize bits [199:192] of the result.\n\\param __b06\n   An 8-bit integral value used to initialize bits [207:200] of the result.\n\\param __b05\n   An 8-bit integral value used to initialize bits [215:208] of the result.\n\\param __b04\n   An 8-bit integral value used to initialize bits [223:216] of the result.\n\\param __b03\n   An 8-bit integral value used to initialize bits [231:224] of the result.\n\\param __b02\n   An 8-bit integral value used to initialize bits [239:232] of the result.\n\\param __b01\n   An 8-bit integral value used to initialize bits [247:240] of the result.\n\\param __b00\n   An 8-bit integral value used to initialize bits [255:248] of the result.\n\\returns An initialized 256-bit integer vector.","bases":[],"vars":[4950239555898479516,8054534678525932810,18318278885403774872,3545558289755231913,1190417650601751192,5745511086325582805,206515564496159755,14224815596867367574,13701890179374868238,13253940345325312068,9628617884012122043,3927003764482039703,4823093104155085250,17378633643760454895,17441986396468547496,18388782281483617390,9936200870176340888,15159897062420731041,3573437806756713333,8106115392276069591,11774324305657868155,3234107744860343388,7331891627906852883,9134092933564331201,6520328572001215917,6112063390054366357,17782425231357461718,15443467406464956164,7030853738482280296,4383595989197401914,5396697004813044413,12972357182371032036],"callees":["4101:10-4101:25|9399529582716696775|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3057411677950868481,"detailed_name":"static inline __m256d _mm256_max_pd(__m256d __a, __m256d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"207:1-207:14|206:1-210:2|2|-1","hover":"","comments":"Compares two 256-bit vectors of [4 x double] and returns the greater\n   of each pair of values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMAXPD </c> instruction.\n\n\\param __a\n   A 256-bit vector of [4 x double] containing one of the operands.\n\\param __b\n   A 256-bit vector of [4 x double] containing one of the operands.\n\\returns A 256-bit vector of [4 x double] containing the maximum values\n   between both operands.","bases":[],"vars":[2964690104295858860,7583125847647396315],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3079238640575999817,"detailed_name":"static inline __m256 _mm256_min_ps(__m256 __a, __m256 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"264:1-264:14|263:1-267:2|2|-1","hover":"","comments":"Compares two 256-bit vectors of [8 x float] and returns the lesser\n   of each pair of values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMINPS </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float] containing one of the operands.\n\\param __b\n   A 256-bit vector of [8 x float] containing one of the operands.\n\\returns A 256-bit vector of [8 x float] containing the minimum values\n   between both operands.","bases":[],"vars":[9847067311526148416,18188277740968592371],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3081640456207688969,"detailed_name":"static inline __m128d _mm_setzero_pd()","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":[],"derived":[],"uses":["4516:55-4516:69|16420|-1"]},{"usr":3140157303616297579,"detailed_name":"static inline int _mm256_testnzc_si256(__m256i __a, __m256i __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":20,"spell":"2894:1-2894:21|2893:1-2897:2|2|-1","hover":"","comments":"Given two 256-bit integer vectors, perform a bit-by-bit comparison\n   of the two source vectors.\n\n   The EFLAGS register is updated as follows: \\n\n   If there is at least one pair of bits where both bits are 1, the ZF flag\n   is set to 0. Otherwise the ZF flag is set to 1. \\n\n   If there is at least one pair of bits where the bit from the first source\n   vector is 0 and the bit from the second source vector is 1, the CF flag\n   is set to 0. Otherwise the CF flag is set to 1. \\n\n   This intrinsic returns 1 if both the ZF and CF flags are set to 0,\n   otherwise it returns 0.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPTEST </c> instruction.\n\n\\param __a\n   A 256-bit integer vector.\n\\param __b\n   A 256-bit integer vector.\n\\returns 1 if both the ZF and CF flags are set to 0, otherwise returns 0.","bases":[],"vars":[13405384482057452537,5030226165957730999],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3173781924559527790,"detailed_name":"static inline __m256d _mm256_or_pd(__m256d __a, __m256d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"598:1-598:13|597:1-601:2|2|-1","hover":"","comments":"Performs a bitwise OR of two 256-bit vectors of [4 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VORPD </c> instruction.\n\n\\param __a\n   A 256-bit vector of [4 x double] containing one of the source operands.\n\\param __b\n   A 256-bit vector of [4 x double] containing one of the source operands.\n\\returns A 256-bit vector of [4 x double] containing the bitwise OR of the\n   values between both operands.","bases":[],"vars":[6847870432837319946,4698694383638956752],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3265813871243304435,"detailed_name":"static inline __m256i _mm256_castsi128_si256(__m128i __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":22,"spell":"4495:1-4495:23|4494:1-4498:2|2|-1","hover":"","comments":"Constructs a 256-bit integer vector from a 128-bit integer vector.\n\n   The lower 128 bits contain the value of the source vector. The contents\n   of the upper 128 bits are undefined.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\param __a\n   A 128-bit integer vector.\n\\returns A 256-bit integer vector. The lower 128 bits contain the value of\n   the parameter. The contents of the upper 128 bits are undefined.","bases":[],"vars":[7645168059632646279],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["4829:20-4829:42|16420|-1"]},{"usr":3301587233790274607,"detailed_name":"static inline __m256d _mm256_set_pd(double __a, double __b, double __c, double __d)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"3621:1-3621:14|3620:1-3624:2|2|-1","hover":"","comments":"Constructs a 256-bit floating-point vector of [4 x double]\n   initialized with the specified double-precision floating-point values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VUNPCKLPD+VINSERTF128 </c>\n  instruction.\n\n\\param __a\n   A double-precision floating-point value used to initialize bits [255:192]\n   of the result.\n\\param __b\n   A double-precision floating-point value used to initialize bits [191:128]\n   of the result.\n\\param __c\n   A double-precision floating-point value used to initialize bits [127:64]\n   of the result.\n\\param __d\n   A double-precision floating-point value used to initialize bits [63:0]\n   of the result.\n\\returns An initialized 256-bit floating-point vector of [4 x double].","bases":[],"vars":[14406631881819144081,14562835130315178026,13293649522015382331,4457252942544924859],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["3889:10-3889:23|16420|-1","4146:10-4146:23|16420|-1"]},{"usr":3365538663450386094,"detailed_name":"static inline __m256 _mm256_cvtepi32_ps(__m256i __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":18,"spell":"2144:1-2144:19|2143:1-2147:2|2|-1","hover":"","comments":"Converts a vector of [8 x i32] into a vector of [8 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTDQ2PS </c> instruction.\n\n\\param __a\n   A 256-bit integer vector.\n\\returns A 256-bit vector of [8 x float] containing the converted values.","bases":[],"vars":[14821299653953911438],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3368461135461286775,"detailed_name":"static inline __m128 _mm_loadu_ps(const float *__p)","qual_name_offset":21,"short_name_offset":21,"short_name_size":12,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":[],"derived":[],"uses":["3052:16-3052:28|16420|-1","4776:42-4776:54|16420|-1","4777:39-4777:51|16420|-1","4777:39-4777:51|64|0"]},{"usr":3600683879883472071,"detailed_name":"static inline int _mm256_cvtsi256_si32(__m256i __a)","qual_name_offset":18,"short_name_offset":18,"short_name_size":20,"spell":"2273:1-2273:21|2272:1-2277:2|2|-1","hover":"","comments":"Returns the first element of the input vector of [8 x i32].\n\n\\headerfile <avxintrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __a\n   A 256-bit vector of [8 x i32].\n\\returns A 32 bit integer containing the first element of the input vector.","bases":[],"vars":[16511926026693826689,15220317073064232684],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3789056145626093920,"detailed_name":"static inline __m256i _mm256_set1_epi32(int __i)","qual_name_offset":22,"short_name_offset":22,"short_name_size":17,"spell":"4182:1-4182:18|4181:1-4185:2|2|-1","hover":"","comments":"Constructs a 256-bit integer vector of [8 x i32], with each of the\n   32-bit integral vector elements set to the specified 32-bit integral\n   value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPERMILPS+VINSERTF128 </c>\n  instruction.\n\n\\param __i\n   A 32-bit integral value used to initialize each vector element of the\n   result.\n\\returns An initialized 256-bit integer vector of [8 x i32].","bases":[],"vars":[858327933653583682],"callees":["4184:10-4184:26|10153464888849858235|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3869448039063240448,"detailed_name":"static inline __m256 _mm256_rcp_ps(__m256 __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"368:1-368:14|367:1-371:2|2|-1","hover":"","comments":"Calculates the reciprocals of the values in a 256-bit vector of\n   [8 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VRCPPS </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float].\n\\returns A 256-bit vector of [8 x float] containing the reciprocals of the\n   values in the operand.","bases":[],"vars":[5374055701991483869],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4064096544974273895,"detailed_name":"static inline int _mm_testnzc_ps(__m128 __a, __m128 __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":14,"spell":"2639:1-2639:15|2638:1-2642:2|2|-1","hover":"","comments":"Given two 128-bit floating-point vectors of [4 x float], perform an\n   element-by-element comparison of the single-precision element in the\n   first source vector and the corresponding element in the second source\n   vector.\n\n   The EFLAGS register is updated as follows: \\n\n   If there is at least one pair of single-precision elements where the\n   sign-bits of both elements are 1, the ZF flag is set to 0. Otherwise the\n   ZF flag is set to 1. \\n\n   If there is at least one pair of single-precision elements where the\n   sign-bit of the first element is 0 and the sign-bit of the second element\n   is 1, the CF flag is set to 0. Otherwise the CF flag is set to 1. \\n\n   This intrinsic returns 1 if both the ZF and CF flags are set to 0,\n   otherwise it returns 0.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VTESTPS </c> instruction.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\param __b\n   A 128-bit vector of [4 x float].\n\\returns 1 if both the ZF and CF flags are set to 0, otherwise returns 0.","bases":[],"vars":[13676224519408112233,8020508701263912276],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4106269520272606611,"detailed_name":"static inline int _mm_testc_pd(__m128d __a, __m128d __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":12,"spell":"2521:1-2521:13|2520:1-2524:2|2|-1","hover":"","comments":"Given two 128-bit floating-point vectors of [2 x double], perform an\n   element-by-element comparison of the double-precision element in the\n   first source vector and the corresponding element in the second source\n   vector.\n\n   The EFLAGS register is updated as follows: \\n\n   If there is at least one pair of double-precision elements where the\n   sign-bits of both elements are 1, the ZF flag is set to 0. Otherwise the\n   ZF flag is set to 1. \\n\n   If there is at least one pair of double-precision elements where the\n   sign-bit of the first element is 0 and the sign-bit of the second element\n   is 1, the CF flag is set to 0. Otherwise the CF flag is set to 1. \\n\n   This intrinsic returns the value of the CF flag.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VTESTPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double].\n\\param __b\n   A 128-bit vector of [2 x double].\n\\returns the CF flag in the EFLAGS register.","bases":[],"vars":[8474327445942756380,14647228367055599119],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4170141494684126999,"detailed_name":"static inline __m256i _mm256_setr_epi32(int __i0, int __i1, int __i2, int __i3, int __i4, int __i5, int __i6, int __i7)","qual_name_offset":22,"short_name_offset":22,"short_name_size":17,"spell":"3959:1-3959:18|3958:1-3963:2|2|-1","hover":"","comments":"Constructs a 256-bit integer vector, initialized in reverse order\n   with the specified 32-bit integral values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n  instruction.\n\n\\param __i0\n   A 32-bit integral value used to initialize bits [31:0] of the result.\n\\param __i1\n   A 32-bit integral value used to initialize bits [63:32] of the result.\n\\param __i2\n   A 32-bit integral value used to initialize bits [95:64] of the result.\n\\param __i3\n   A 32-bit integral value used to initialize bits [127:96] of the result.\n\\param __i4\n   A 32-bit integral value used to initialize bits [159:128] of the result.\n\\param __i5\n   A 32-bit integral value used to initialize bits [191:160] of the result.\n\\param __i6\n   A 32-bit integral value used to initialize bits [223:192] of the result.\n\\param __i7\n   A 32-bit integral value used to initialize bits [255:224] of the result.\n\\returns An initialized 256-bit integer vector.","bases":[],"vars":[9881940464679087314,12055904271028473422,6681553932312499012,8352192604764642465,6302296666033704011,8479176953699435543,6812419710493534657,14542350984759981564],"callees":["3962:10-3962:26|10153464888849858235|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4295726839782958666,"detailed_name":"static inline int _mm256_movemask_ps(__m256 __a)","qual_name_offset":18,"short_name_offset":18,"short_name_size":18,"spell":"2931:1-2931:19|2930:1-2934:2|2|-1","hover":"","comments":"Extracts the sign bits of single-precision floating point elements\n   in a 256-bit vector of [8 x float] and writes them to the lower order\n   bits of the return value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVMSKPS </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float] containing the single-precision floating\n   point values with sign bits to be extracted.\n\\returns The sign bits from the operand, written to bits [7:0].","bases":[],"vars":[18119665317715259329],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4317836674540681121,"detailed_name":"static inline __m128d _mm_maskload_pd(const double *__p, __m128i __m)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"3322:1-3322:16|3321:1-3325:2|2|-1","hover":"","comments":"Conditional load ops */\n Conditionally loads double-precision floating point elements from a\n    memory location pointed to by \\a __p into a 128-bit vector of\n    [2 x double], depending on the mask bits associated with each data\n    element.\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VMASKMOVPD </c> instruction.\n\n \\param __p\n    A pointer to a memory location that contains the double-precision\n    floating point values.\n \\param __m\n    A 128-bit integer vector containing the mask. The most significant bit of\n    each data element represents the mask bits. If a mask bit is zero, the\n    corresponding value in the memory location is not loaded and the\n    corresponding field in the return value is set to zero.\n \\returns A 128-bit vector of [2 x double] containing the loaded values.","bases":[],"vars":[6931982071617930599,7840043676515985156],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4335521110455848014,"detailed_name":"static inline __m256i _mm256_set1_epi64x(long long __q)","qual_name_offset":22,"short_name_offset":22,"short_name_size":18,"spell":"4239:1-4239:19|4238:1-4242:2|2|-1","hover":"","comments":"Constructs a 256-bit integer vector of [4 x i64], with each of the\n   64-bit integral vector elements set to the specified 64-bit integral\n   value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVDDUP+VINSERTF128 </c> instruction.\n\n\\param __q\n   A 64-bit integral value used to initialize each vector element of the\n   result.\n\\returns An initialized 256-bit integer vector of [4 x i64].","bases":[],"vars":[3899939247818722605],"callees":["4241:10-4241:27|10802238967193545380|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4355754506918534044,"detailed_name":"static inline void _mm_storeu_ps(float *__p, __m128 __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":13,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":[],"derived":[],"uses":["4858:3-4858:16|16420|-1","4860:3-4860:16|16420|-1"]},{"usr":4580446048903258776,"detailed_name":"static inline __m256d _mm256_castsi256_pd(__m256i __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":19,"spell":"4384:1-4384:20|4383:1-4387:2|2|-1","hover":"","comments":"Casts a 256-bit integer vector into a 256-bit floating-point vector\n   of [4 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\param __a\n   A 256-bit integer vector.\n\\returns A 256-bit floating-point vector of [4 x double] containing the same\n   bitwise pattern as the parameter.","bases":[],"vars":[17674565849258406258],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4700657698631608862,"detailed_name":"static inline __m256d _mm256_setr_pd(double __a, double __b, double __c, double __d)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"3887:1-3887:15|3886:1-3890:2|2|-1","hover":"","comments":"Create vectors with elements in reverse order */\n Constructs a 256-bit floating-point vector of [4 x double],\n    initialized in reverse order with the specified double-precision\n    floating-point values.\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VUNPCKLPD+VINSERTF128 </c>\n   instruction.\n\n \\param __a\n    A double-precision floating-point value used to initialize bits [63:0]\n    of the result.\n \\param __b\n    A double-precision floating-point value used to initialize bits [127:64]\n    of the result.\n \\param __c\n    A double-precision floating-point value used to initialize bits [191:128]\n    of the result.\n \\param __d\n    A double-precision floating-point value used to initialize bits [255:192]\n    of the result.\n \\returns An initialized 256-bit floating-point vector of [4 x double].","bases":[],"vars":[1666434356378047695,8992474496526219299,2313486741204051620,4378755180787062774],"callees":["3889:10-3889:23|3301587233790274607|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4783118695599081636,"detailed_name":"static inline __m256 _mm256_unpackhi_ps(__m256 __a, __m256 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":18,"spell":"2435:1-2435:19|2434:1-2438:2|2|-1","hover":"","comments":"Unpacks the 32-bit vector elements 2, 3, 6 and 7 from each of the\n   two 256-bit vectors of [8 x float] and interleaves them into a 256-bit\n   vector of [8 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VUNPCKHPS </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float]. \\n\n   Bits [95:64] are written to bits [31:0] of the return value. \\n\n   Bits [127:96] are written to bits [95:64] of the return value. \\n\n   Bits [223:192] are written to bits [159:128] of the return value. \\n\n   Bits [255:224] are written to bits [223:192] of the return value.\n\\param __b\n   A 256-bit vector of [8 x float]. \\n\n   Bits [95:64] are written to bits [63:32] of the return value. \\n\n   Bits [127:96] are written to bits [127:96] of the return value. \\n\n   Bits [223:192] are written to bits [191:160] of the return value. \\n\n   Bits [255:224] are written to bits [255:224] of the return value.\n\\returns A 256-bit vector of [8 x float] containing the interleaved values.","bases":[],"vars":[3910774761898683606,11619414045968264855],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4811261884061519572,"detailed_name":"static inline void _mm256_store_pd(double *__p, __m256d __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":15,"spell":"3200:1-3200:16|3199:1-3203:2|2|-1","hover":"","comments":"SIMD store ops */\n Stores double-precision floating point values from a 256-bit vector\n    of [4 x double] to a 32-byte aligned memory location pointed to by\n    \\a __p.\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VMOVAPD </c> instruction.\n\n \\param __p\n    A 32-byte aligned pointer to a memory location that will receive the\n    double-precision floaing point values.\n \\param __a\n    A 256-bit vector of [4 x double] containing the values to be moved.","bases":[],"vars":[10930779506220286393,6552277734089426036],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4894333512327931433,"detailed_name":"static inline __m128i _mm256_cvttpd_epi32(__m256d __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":19,"spell":"2208:1-2208:20|2207:1-2211:2|2|-1","hover":"","comments":"Converts a 256-bit vector of [4 x double] into a 128-bit vector of [4\n   x i32], truncating the result by rounding towards zero when it is\n   inexact.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTTPD2DQ </c> instruction.\n\n\\param __a\n   A 256-bit vector of [4 x double].\n\\returns A 128-bit integer vector containing the converted values.","bases":[],"vars":[3217794340674804951],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4994614579909355477,"detailed_name":"static inline void _mm256_storeu2_m128d(double *__addr_hi, double *__addr_lo, __m256d __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":20,"spell":"4882:1-4882:21|4881:1-4890:2|2|-1","hover":"","comments":"Stores the upper and lower 128 bits of a 256-bit floating-point\n   vector of [4 x double] into two different unaligned memory locations.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VEXTRACTF128 </c> instruction and the\n  store instructions.\n\n\\param __addr_hi\n   A pointer to a 128-bit memory location. Bits[255:128] of \\a __a are to be\n   copied to this memory location. The address of this memory location does\n   not have to be aligned.\n\\param __addr_lo\n   A pointer to a 128-bit memory location. Bits[127:0] of \\a __a are to be\n   copied to this memory location. The address of this memory location does\n   not have to be aligned.\n\\param __a\n   A 256-bit floating-point vector of [4 x double].","bases":[],"vars":[11272947925612524525,6868956843397665173,3515947170135168719,14174083959383290298],"callees":["4886:12-4886:34|10186849206956347606|3|16420","4887:3-4887:16|2716730989809485146|3|16420","4889:3-4889:16|2716730989809485146|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5436022494694631849,"detailed_name":"static inline __m256d _mm256_cvtepi32_pd(__m128i __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":18,"spell":"2129:1-2129:19|2128:1-2132:2|2|-1","hover":"","comments":"Conversion */\n Converts a vector of [4 x i32] into a vector of [4 x double].\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VCVTDQ2PD </c> instruction.\n\n \\param __a\n    A 128-bit integer vector of [4 x i32].\n \\returns A 256-bit vector of [4 x double] containing the converted values.","bases":[],"vars":[4319016179799286914],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5493257524418224312,"detailed_name":"static inline __m256i _mm256_setzero_si256()","qual_name_offset":22,"short_name_offset":22,"short_name_size":20,"spell":"4281:1-4281:21|4280:1-4284:2|2|-1","hover":"","comments":"Constructs a 256-bit integer vector initialized to zero.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VXORPS </c> instruction.\n\n\\returns A 256-bit integer vector initialized to zero.","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5628804189501449814,"detailed_name":"static inline __m128i _mm256_cvtpd_epi32(__m256d __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":18,"spell":"2225:1-2225:19|2224:1-2228:2|2|-1","hover":"","comments":"Converts a 256-bit vector of [4 x double] into a 128-bit vector of [4\n   x i32]. When a conversion is inexact, the value returned is rounded\n   according to the rounding control bits in the MXCSR register.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTPD2DQ </c> instruction.\n\n\\param __a\n   A 256-bit vector of [4 x double].\n\\returns A 128-bit integer vector containing the converted values.","bases":[],"vars":[13170189843848400360],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5896817950304894741,"detailed_name":"static inline void _mm256_storeu2_m128i(__m128i_u *__addr_hi, __m128i_u *__addr_lo, __m256i __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":20,"spell":"4911:1-4911:21|4910:1-4919:2|2|-1","hover":"","comments":"Stores the upper and lower 128 bits of a 256-bit integer vector into\n   two different unaligned memory locations.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VEXTRACTF128 </c> instruction and the\n  store instructions.\n\n\\param __addr_hi\n   A pointer to a 128-bit memory location. Bits[255:128] of \\a __a are to be\n   copied to this memory location. The address of this memory location does\n   not have to be aligned.\n\\param __addr_lo\n   A pointer to a 128-bit memory location. Bits[127:0] of \\a __a are to be\n   copied to this memory location. The address of this memory location does\n   not have to be aligned.\n\\param __a\n   A 256-bit integer vector.","bases":[],"vars":[4714578165123064664,12152712782518328712,5431059349876086391,15584551201893785399],"callees":["4915:12-4915:34|10951429860699956667|3|16420","4916:3-4916:19|14695889751426307058|3|16420","4918:3-4918:19|14695889751426307058|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5997638552374428914,"detailed_name":"static inline __m128d _mm_loadu_pd(const double *__dp)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":[],"derived":[],"uses":["3032:17-3032:29|16420|-1","4804:43-4804:55|16420|-1","4805:39-4805:51|16420|-1","4805:39-4805:51|64|0"]},{"usr":6006589861479392634,"detailed_name":"static inline __m256i _mm256_set_m128i(__m128i __hi, __m128i __lo)","qual_name_offset":22,"short_name_offset":22,"short_name_size":16,"spell":"4978:1-4978:17|4977:1-4981:2|2|-1","hover":"","comments":"Constructs a 256-bit integer vector by concatenating two 128-bit\n   integer vectors.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VINSERTF128 </c> instruction.\n\n\\param __hi\n   A 128-bit integer vector to be copied to the upper 128 bits of the\n   result.\n\\param __lo\n   A 128-bit integer vector to be copied to the lower 128 bits of the\n   result.\n\\returns A 256-bit integer vector containing the concatenated result.","bases":[],"vars":[15677541319891780587,16423830134157668871],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["5047:19-5047:35|16420|-1"]},{"usr":6216725075980633692,"detailed_name":"static inline __m256d _mm256_load_pd(const double *__p)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"3070:1-3070:15|3069:1-3073:2|2|-1","hover":"","comments":"SIMD load ops */\n Loads 4 double-precision floating point values from a 32-byte aligned\n    memory location pointed to by \\a __p into a vector of [4 x double].\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VMOVAPD </c> instruction.\n\n \\param __p\n    A 32-byte aligned pointer to a memory location containing\n    double-precision floating point values.\n \\returns A 256-bit vector of [4 x double] containing the moved values.","bases":[],"vars":[9989719746107450206],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6445017700948321563,"detailed_name":"static inline __m256 _mm256_or_ps(__m256 __a, __m256 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":12,"spell":"616:1-616:13|615:1-619:2|2|-1","hover":"","comments":"Performs a bitwise OR of two 256-bit vectors of [8 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VORPS </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float] containing one of the source operands.\n\\param __b\n   A 256-bit vector of [8 x float] containing one of the source operands.\n\\returns A 256-bit vector of [8 x float] containing the bitwise OR of the\n   values between both operands.","bases":[],"vars":[8507501389363273754,1589446482710208987],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6553584140182543430,"detailed_name":"static inline double _mm256_cvtsd_f64(__m256d __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":16,"spell":"2257:1-2257:17|2256:1-2260:2|2|-1","hover":"","comments":"Returns the first element of the input vector of [4 x double].\n\n\\headerfile <avxintrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __a\n   A 256-bit vector of [4 x double].\n\\returns A 64 bit double containing the first element of the input vector.","bases":[],"vars":[676645441191730041],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6559054312797754953,"detailed_name":"static inline __m256d _mm256_zextpd128_pd256(__m128d __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":22,"spell":"4514:1-4514:23|4513:1-4517:2|2|-1","hover":"","comments":"Constructs a 256-bit floating-point vector of [4 x double] from a\n   128-bit floating-point vector of [2 x double]. The lower 128 bits\n   contain the value of the source vector. The upper 128 bits are set\n   to zero.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double].\n\\returns A 256-bit floating-point vector of [4 x double]. The lower 128 bits\n   contain the value of the parameter. The upper 128 bits are set to zero.","bases":[],"vars":[4504121449950229406],"callees":["4516:55-4516:69|3081640456207688969|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6717509112500533514,"detailed_name":"static inline __m256d _mm256_setzero_pd()","qual_name_offset":22,"short_name_offset":22,"short_name_size":17,"spell":"4254:1-4254:18|4253:1-4257:2|2|-1","hover":"","comments":"Create __zeroed vectors */\n Constructs a 256-bit floating-point vector of [4 x double] with all\n    vector elements initialized to zero.\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VXORPS </c> instruction.\n\n \\returns A 256-bit vector of [4 x double] with all elements set to zero.","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6769651117657275349,"detailed_name":"static inline void _mm256_store_ps(float *__p, __m256 __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":15,"spell":"3218:1-3218:16|3217:1-3221:2|2|-1","hover":"","comments":"Stores single-precision floating point values from a 256-bit vector\n   of [8 x float] to a 32-byte aligned memory location pointed to by \\a __p.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVAPS </c> instruction.\n\n\\param __p\n   A 32-byte aligned pointer to a memory location that will receive the\n   float values.\n\\param __a\n   A 256-bit vector of [8 x float] containing the values to be moved.","bases":[],"vars":[1951456141081436574,16635020134563077892],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6806809573445595622,"detailed_name":"static inline void _mm_maskstore_pd(double *__p, __m128i __m, __m128d __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":16,"spell":"3444:1-3444:17|3443:1-3447:2|2|-1","hover":"","comments":"Moves double-precision values from a 128-bit vector of [2 x double]\n   to a memory location pointed to by \\a __p, according to the specified\n   mask.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMASKMOVPD </c> instruction.\n\n\\param __p\n   A pointer to a memory location that will receive the float values.\n\\param __m\n   A 128-bit integer vector containing the mask. The most significant bit of\n   each field in the mask vector represents the mask bits. If a mask bit is\n   zero, the corresponding value from vector \\a __a is not stored and the\n   corresponding field in the memory location pointed to by \\a __p is not\n   changed.\n\\param __a\n   A 128-bit vector of [2 x double] containing the values to be stored.","bases":[],"vars":[10528474103349075602,6409136369128336008,8471553230657995995],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6965746959808425085,"detailed_name":"static inline __m256i _mm256_set_epi16(short __w15, short __w14, short __w13, short __w12, short __w11, short __w10, short __w09, short __w08, short __w07, short __w06, short __w05, short __w04, short __w03, short __w02, short __w01, short __w00)","qual_name_offset":22,"short_name_offset":22,"short_name_size":16,"spell":"3740:1-3740:17|3739:1-3747:2|2|-1","hover":"","comments":"Constructs a 256-bit integer vector initialized with the specified\n   16-bit integral values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n  instruction.\n\n\\param __w15\n   A 16-bit integral value used to initialize bits [255:240] of the result.\n\\param __w14\n   A 16-bit integral value used to initialize bits [239:224] of the result.\n\\param __w13\n   A 16-bit integral value used to initialize bits [223:208] of the result.\n\\param __w12\n   A 16-bit integral value used to initialize bits [207:192] of the result.\n\\param __w11\n   A 16-bit integral value used to initialize bits [191:176] of the result.\n\\param __w10\n   A 16-bit integral value used to initialize bits [175:160] of the result.\n\\param __w09\n   A 16-bit integral value used to initialize bits [159:144] of the result.\n\\param __w08\n   A 16-bit integral value used to initialize bits [143:128] of the result.\n\\param __w07\n   A 16-bit integral value used to initialize bits [127:112] of the result.\n\\param __w06\n   A 16-bit integral value used to initialize bits [111:96] of the result.\n\\param __w05\n   A 16-bit integral value used to initialize bits [95:80] of the result.\n\\param __w04\n   A 16-bit integral value used to initialize bits [79:64] of the result.\n\\param __w03\n   A 16-bit integral value used to initialize bits [63:48] of the result.\n\\param __w02\n   A 16-bit integral value used to initialize bits [47:32] of the result.\n\\param __w01\n   A 16-bit integral value used to initialize bits [31:16] of the result.\n\\param __w00\n   A 16-bit integral value used to initialize bits [15:0] of the result.\n\\returns An initialized 256-bit integer vector.","bases":[],"vars":[5580088731785690195,3197195279442009523,14515637949666185566,7658063989397041193,14605503875526057804,12417852690340634793,16603458174888966396,10682167903523628796,16859393767160755178,4308978951931191045,11755733973616416897,8658842632755523560,12647569231954362464,5329427211628125113,14649459223587815181,15692636797369665396],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["4012:10-4012:26|16420|-1","4202:10-4202:26|16420|-1"]},{"usr":7225225534927696348,"detailed_name":"static inline __m256d _mm256_sub_pd(__m256d __a, __m256d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"96:1-96:14|95:1-99:2|2|-1","hover":"","comments":"Subtracts two 256-bit vectors of [4 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VSUBPD </c> instruction.\n\n\\param __a\n   A 256-bit vector of [4 x double] containing the minuend.\n\\param __b\n   A 256-bit vector of [4 x double] containing the subtrahend.\n\\returns A 256-bit vector of [4 x double] containing the differences between\n   both operands.","bases":[],"vars":[4948749387176087728,2474469902367023819],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7353384257522942035,"detailed_name":"static inline int _mm_testnzc_pd(__m128d __a, __m128d __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":14,"spell":"2551:1-2551:15|2550:1-2554:2|2|-1","hover":"","comments":"Given two 128-bit floating-point vectors of [2 x double], perform an\n   element-by-element comparison of the double-precision element in the\n   first source vector and the corresponding element in the second source\n   vector.\n\n   The EFLAGS register is updated as follows: \\n\n   If there is at least one pair of double-precision elements where the\n   sign-bits of both elements are 1, the ZF flag is set to 0. Otherwise the\n   ZF flag is set to 1. \\n\n   If there is at least one pair of double-precision elements where the\n   sign-bit of the first element is 0 and the sign-bit of the second element\n   is 1, the CF flag is set to 0. Otherwise the CF flag is set to 1. \\n\n   This intrinsic returns 1 if both the ZF and CF flags are set to 0,\n   otherwise it returns 0.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VTESTPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double].\n\\param __b\n   A 128-bit vector of [2 x double].\n\\returns 1 if both the ZF and CF flags are set to 0, otherwise returns 0.","bases":[],"vars":[4663157961711375105,7802534020490370350],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7603573905176758094,"detailed_name":"static inline __m256 _mm256_set_m128(__m128 __hi, __m128 __lo)","qual_name_offset":21,"short_name_offset":21,"short_name_size":15,"spell":"4937:1-4937:16|4936:1-4940:2|2|-1","hover":"","comments":"Constructs a 256-bit floating-point vector of [8 x float] by\n   concatenating two 128-bit floating-point vectors of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VINSERTF128 </c> instruction.\n\n\\param __hi\n   A 128-bit floating-point vector of [4 x float] to be copied to the upper\n   128 bits of the result.\n\\param __lo\n   A 128-bit floating-point vector of [4 x float] to be copied to the lower\n   128 bits of the result.\n\\returns A 256-bit floating-point vector of [8 x float] containing the\n   concatenated result.","bases":[],"vars":[9671974309075374315,9906014245850660430],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["5003:10-5003:25|16420|-1"]},{"usr":7867005147687255288,"detailed_name":"static inline __m256i _mm256_castps_si256(__m256 __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":19,"spell":"4350:1-4350:20|4349:1-4353:2|2|-1","hover":"","comments":"Casts a 256-bit floating-point vector of [8 x float] into a 256-bit\n   integer vector.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\param __a\n   A 256-bit floating-point vector of [8 x float].\n\\returns A 256-bit integer vector containing the same bitwise pattern as the\n   parameter.","bases":[],"vars":[5122402145048803207],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7927959060706099830,"detailed_name":"static inline int _mm256_testz_pd(__m256d __a, __m256d __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":15,"spell":"2668:1-2668:16|2667:1-2671:2|2|-1","hover":"","comments":"Given two 256-bit floating-point vectors of [4 x double], perform an\n   element-by-element comparison of the double-precision elements in the\n   first source vector and the corresponding elements in the second source\n   vector.\n\n   The EFLAGS register is updated as follows: \\n\n   If there is at least one pair of double-precision elements where the\n   sign-bits of both elements are 1, the ZF flag is set to 0. Otherwise the\n   ZF flag is set to 1. \\n\n   If there is at least one pair of double-precision elements where the\n   sign-bit of the first element is 0 and the sign-bit of the second element\n   is 1, the CF flag is set to 0. Otherwise the CF flag is set to 1. \\n\n   This intrinsic returns the value of the ZF flag.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VTESTPD </c> instruction.\n\n\\param __a\n   A 256-bit vector of [4 x double].\n\\param __b\n   A 256-bit vector of [4 x double].\n\\returns the ZF flag.","bases":[],"vars":[5377578305095755219,1562418853583074537],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7944524781260109885,"detailed_name":"static inline void _mm256_zeroall()","qual_name_offset":19,"short_name_offset":19,"short_name_size":14,"spell":"2943:1-2943:15|2942:1-2946:2|2|-1","hover":"","comments":"Vector __zero */\n Zeroes the contents of all XMM or YMM registers.\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VZEROALL </c> instruction.","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8287631204548363602,"detailed_name":"static inline __m256 _mm256_andnot_ps(__m256 __a, __m256 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":16,"spell":"580:1-580:17|579:1-583:2|2|-1","hover":"","comments":"Performs a bitwise AND of two 256-bit vectors of [8 x float], using\n   the one's complement of the values contained in the first source operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VANDNPS </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float] containing the left source operand. The\n   one's complement of this value is used in the bitwise AND.\n\\param __b\n   A 256-bit vector of [8 x float] containing the right source operand.\n\\returns A 256-bit vector of [8 x float] containing the bitwise AND of the\n   values of the second operand and the one's complement of the first\n   operand.","bases":[],"vars":[6706092420169926115,13130664092884525348],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8383877957062936632,"detailed_name":"static inline __m256d _mm256_broadcast_sd(const double *__a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":19,"spell":"2992:1-2992:20|2991:1-2996:2|2|-1","hover":"","comments":"Loads a scalar double-precision floating point value from the\n   specified address pointed to by \\a __a and broadcasts it to the elements\n   of a [4 x double] vector.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VBROADCASTSD </c> instruction.\n\n\\param __a\n   The double-precision floating point value to be broadcast.\n\\returns A 256-bit vector of [4 x double] whose 64-bit elements are set\n   equal to the broadcast value.","bases":[],"vars":[9129606207611916240,6812798898557432506],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8529036426463406176,"detailed_name":"static inline int _mm256_testz_ps(__m256 __a, __m256 __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":15,"spell":"2756:1-2756:16|2755:1-2759:2|2|-1","hover":"","comments":"Given two 256-bit floating-point vectors of [8 x float], perform an\n   element-by-element comparison of the single-precision element in the\n   first source vector and the corresponding element in the second source\n   vector.\n\n   The EFLAGS register is updated as follows: \\n\n   If there is at least one pair of single-precision elements where the\n   sign-bits of both elements are 1, the ZF flag is set to 0. Otherwise the\n   ZF flag is set to 1. \\n\n   If there is at least one pair of single-precision elements where the\n   sign-bit of the first element is 0 and the sign-bit of the second element\n   is 1, the CF flag is set to 0. Otherwise the CF flag is set to 1. \\n\n   This intrinsic returns the value of the ZF flag.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VTESTPS </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float].\n\\param __b\n   A 256-bit vector of [8 x float].\n\\returns the ZF flag.","bases":[],"vars":[18185144457440858021,4923690922538357402],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8538600603852359627,"detailed_name":"static inline __m256 _mm256_hsub_ps(__m256 __a, __m256 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":14,"spell":"745:1-745:15|744:1-748:2|2|-1","hover":"","comments":"Horizontally subtracts the adjacent pairs of values contained in two\n   256-bit vectors of [8 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VHSUBPS </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float] containing one of the source operands.\n   The horizontal differences between the values are returned in the\n   elements with index 0, 1, 4, 5 of a vector of [8 x float].\n\\param __b\n   A 256-bit vector of [8 x float] containing one of the source operands.\n   The horizontal differences between the values are returned in the\n   elements with index 2, 3, 6, 7 of a vector of [8 x float].\n\\returns A 256-bit vector of [8 x float] containing the horizontal\n   differences of both operands.","bases":[],"vars":[17790889814304223431,16797829072747230912],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8617920986286983790,"detailed_name":"static inline void _mm256_storeu_pd(double *__p, __m256d __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":16,"spell":"3236:1-3236:17|3235:1-3242:2|2|-1","hover":"","comments":"Stores double-precision floating point values from a 256-bit vector\n   of [4 x double] to an unaligned memory location pointed to by \\a __p.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVUPD </c> instruction.\n\n\\param __p\n   A pointer to a memory location that will receive the double-precision\n   floating point values.\n\\param __a\n   A 256-bit vector of [4 x double] containing the values to be moved.","bases":[],"vars":[10337573957939724491,13884131050771337406],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8724894780814374758,"detailed_name":"static inline __m256 _mm256_loadu_ps(const float *__p)","qual_name_offset":21,"short_name_offset":21,"short_name_size":15,"spell":"3123:1-3123:16|3122:1-3129:2|2|-1","hover":"","comments":"Loads 8 single-precision floating point values from an unaligned\n   memory location pointed to by \\a __p into a vector of [8 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVUPS </c> instruction.\n\n\\param __p\n   A pointer to a memory location containing single-precision floating\n   point values.\n\\returns A 256-bit vector of [8 x float] containing the moved values.","bases":[],"vars":[12033439173964753971],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8810158868361431002,"detailed_name":"static inline __m256 _mm256_loadu2_m128(const float *__addr_hi, const float *__addr_lo)","qual_name_offset":21,"short_name_offset":21,"short_name_size":18,"spell":"4774:1-4774:19|4773:1-4778:2|2|-1","hover":"","comments":"SIMD load ops (unaligned) */\n Loads two 128-bit floating-point vectors of [4 x float] from\n    unaligned memory locations and constructs a 256-bit floating-point vector\n    of [8 x float] by concatenating the two 128-bit vectors.\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to load instructions followed by the\n   <c> VINSERTF128 </c> instruction.\n\n \\param __addr_hi\n    A pointer to a 128-bit memory location containing 4 consecutive\n    single-precision floating-point values. These values are to be copied to\n    bits[255:128] of the result. The address of the memory location does not\n    have to be aligned.\n \\param __addr_lo\n    A pointer to a 128-bit memory location containing 4 consecutive\n    single-precision floating-point values. These values are to be copied to\n    bits[127:0] of the result. The address of the memory location does not\n    have to be aligned.\n \\returns A 256-bit floating-point vector of [8 x float] containing the\n    concatenated result.","bases":[],"vars":[8280970846028587736,16818967688835218217,3086859440412579089],"callees":["4776:19-4776:41|13884082918628832577|3|16420","4776:42-4776:54|3368461135461286775|3|16420","4776:19-4776:41|13884082918628832577|3|16420","4776:42-4776:54|3368461135461286775|3|16420","4777:39-4777:51|3368461135461286775|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8866724162495627419,"detailed_name":"static inline __m256d _mm256_div_pd(__m256d __a, __m256d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"170:1-170:14|169:1-173:2|2|-1","hover":"","comments":"Divides two 256-bit vectors of [4 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VDIVPD </c> instruction.\n\n\\param __a\n   A 256-bit vector of [4 x double] containing the dividend.\n\\param __b\n   A 256-bit vector of [4 x double] containing the divisor.\n\\returns A 256-bit vector of [4 x double] containing the quotients of both\n   operands.","bases":[],"vars":[3685944004340317701,14655039374183995702],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9163866166186451311,"detailed_name":"static inline __m256d _mm256_unpackhi_pd(__m256d __a, __m256d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":18,"spell":"2386:1-2386:19|2385:1-2389:2|2|-1","hover":"","comments":"Unpack and Interleave */\n Unpacks the odd-indexed vector elements from two 256-bit vectors of\n    [4 x double] and interleaves them into a 256-bit vector of [4 x double].\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VUNPCKHPD </c> instruction.\n\n \\param __a\n    A 256-bit floating-point vector of [4 x double]. \\n\n    Bits [127:64] are written to bits [63:0] of the return value. \\n\n    Bits [255:192] are written to bits [191:128] of the return value. \\n\n \\param __b\n    A 256-bit floating-point vector of [4 x double]. \\n\n    Bits [127:64] are written to bits [127:64] of the return value. \\n\n    Bits [255:192] are written to bits [255:192] of the return value. \\n\n \\returns A 256-bit vector of [4 x double] containing the interleaved values.","bases":[],"vars":[9042224108118778396,10154858937928968100],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9294387334108878096,"detailed_name":"static inline __m256d _mm256_loadu2_m128d(const double *__addr_hi, const double *__addr_lo)","qual_name_offset":22,"short_name_offset":22,"short_name_size":19,"spell":"4802:1-4802:20|4801:1-4806:2|2|-1","hover":"","comments":"Loads two 128-bit floating-point vectors of [2 x double] from\n   unaligned memory locations and constructs a 256-bit floating-point vector\n   of [4 x double] by concatenating the two 128-bit vectors.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to load instructions followed by the\n  <c> VINSERTF128 </c> instruction.\n\n\\param __addr_hi\n   A pointer to a 128-bit memory location containing two consecutive\n   double-precision floating-point values. These values are to be copied to\n   bits[255:128] of the result. The address of the memory location does not\n   have to be aligned.\n\\param __addr_lo\n   A pointer to a 128-bit memory location containing two consecutive\n   double-precision floating-point values. These values are to be copied to\n   bits[127:0] of the result. The address of the memory location does not\n   have to be aligned.\n\\returns A 256-bit floating-point vector of [4 x double] containing the\n   concatenated result.","bases":[],"vars":[5688307113329730684,17848190507590222175,253485522673007704],"callees":["4804:20-4804:42|627263031935565882|3|16420","4804:43-4804:55|5997638552374428914|3|16420","4804:20-4804:42|627263031935565882|3|16420","4804:43-4804:55|5997638552374428914|3|16420","4805:39-4805:51|5997638552374428914|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9399529582716696775,"detailed_name":"static inline __m256i _mm256_set_epi8(char __b31, char __b30, char __b29, char __b28, char __b27, char __b26, char __b25, char __b24, char __b23, char __b22, char __b21, char __b20, char __b19, char __b18, char __b17, char __b16, char __b15, char __b14, char __b13, char __b12, char __b11, char __b10, char __b09, char __b08, char __b07, char __b06, char __b05, char __b04, char __b03, char __b02, char __b01, char __b00)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"3823:1-3823:16|3822:1-3838:2|2|-1","hover":"","comments":"Constructs a 256-bit integer vector initialized with the specified\n   8-bit integral values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n  instruction.\n\n\\param __b31\n   An 8-bit integral value used to initialize bits [255:248] of the result.\n\\param __b30\n   An 8-bit integral value used to initialize bits [247:240] of the result.\n\\param __b29\n   An 8-bit integral value used to initialize bits [239:232] of the result.\n\\param __b28\n   An 8-bit integral value used to initialize bits [231:224] of the result.\n\\param __b27\n   An 8-bit integral value used to initialize bits [223:216] of the result.\n\\param __b26\n   An 8-bit integral value used to initialize bits [215:208] of the result.\n\\param __b25\n   An 8-bit integral value used to initialize bits [207:200] of the result.\n\\param __b24\n   An 8-bit integral value used to initialize bits [199:192] of the result.\n\\param __b23\n   An 8-bit integral value used to initialize bits [191:184] of the result.\n\\param __b22\n   An 8-bit integral value used to initialize bits [183:176] of the result.\n\\param __b21\n   An 8-bit integral value used to initialize bits [175:168] of the result.\n\\param __b20\n   An 8-bit integral value used to initialize bits [167:160] of the result.\n\\param __b19\n   An 8-bit integral value used to initialize bits [159:152] of the result.\n\\param __b18\n   An 8-bit integral value used to initialize bits [151:144] of the result.\n\\param __b17\n   An 8-bit integral value used to initialize bits [143:136] of the result.\n\\param __b16\n   An 8-bit integral value used to initialize bits [135:128] of the result.\n\\param __b15\n   An 8-bit integral value used to initialize bits [127:120] of the result.\n\\param __b14\n   An 8-bit integral value used to initialize bits [119:112] of the result.\n\\param __b13\n   An 8-bit integral value used to initialize bits [111:104] of the result.\n\\param __b12\n   An 8-bit integral value used to initialize bits [103:96] of the result.\n\\param __b11\n   An 8-bit integral value used to initialize bits [95:88] of the result.\n\\param __b10\n   An 8-bit integral value used to initialize bits [87:80] of the result.\n\\param __b09\n   An 8-bit integral value used to initialize bits [79:72] of the result.\n\\param __b08\n   An 8-bit integral value used to initialize bits [71:64] of the result.\n\\param __b07\n   An 8-bit integral value used to initialize bits [63:56] of the result.\n\\param __b06\n   An 8-bit integral value used to initialize bits [55:48] of the result.\n\\param __b05\n   An 8-bit integral value used to initialize bits [47:40] of the result.\n\\param __b04\n   An 8-bit integral value used to initialize bits [39:32] of the result.\n\\param __b03\n   An 8-bit integral value used to initialize bits [31:24] of the result.\n\\param __b02\n   An 8-bit integral value used to initialize bits [23:16] of the result.\n\\param __b01\n   An 8-bit integral value used to initialize bits [15:8] of the result.\n\\param __b00\n   An 8-bit integral value used to initialize bits [7:0] of the result.\n\\returns An initialized 256-bit integer vector.","bases":[],"vars":[6226690575714836394,12599418204897408379,8034988527038136856,5919059398914431676,10665344839810034710,11595595996059001056,2845913291848204611,4795143949819311472,12208746159319657290,1825894176569559340,17428514416715317953,17957390629577246351,9627494364408715069,5033612180607072992,213681546896024705,11593857905116577703,3338507920306428034,15279026921819901164,12781945020551113706,16547913021163937436,9669212246035470839,821296697059900376,8022080868590856724,4036297023863231556,8732047350942464237,18176830296629404020,10557070838087763713,6438061880891780525,321103835450138223,11514620587729535857,8099734298754198593,17250865832376254926],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["4101:10-4101:25|16420|-1","4220:10-4220:25|16420|-1"]},{"usr":10006393049133169254,"detailed_name":"static inline __m256 _mm256_permutevar_ps(__m256 __a, __m256i __c)","qual_name_offset":21,"short_name_offset":21,"short_name_size":20,"spell":"959:1-959:21|958:1-962:2|2|-1","hover":"","comments":"Copies the values stored in a 256-bit vector of [8 x float] as\n   specified by the 256-bit integer vector operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPERMILPS </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float].\n\\param __c\n   A 256-bit integer vector operand specifying how the values are to be\n   copied. \\n\n   Bits [1:0]: \\n\n     00: Bits [31:0] of the source are copied to bits [31:0] of the\n         returned vector. \\n\n     01: Bits [63:32] of the source are copied to bits [31:0] of the\n         returned vector. \\n\n     10: Bits [95:64] of the source are copied to bits [31:0] of the\n         returned vector. \\n\n     11: Bits [127:96] of the source are copied to bits [31:0] of the\n         returned vector. \\n\n   Bits [33:32]: \\n\n     00: Bits [31:0] of the source are copied to bits [63:32] of the\n         returned vector. \\n\n     01: Bits [63:32] of the source are copied to bits [63:32] of the\n         returned vector. \\n\n     10: Bits [95:64] of the source are copied to bits [63:32] of the\n         returned vector. \\n\n     11: Bits [127:96] of the source are copied to bits [63:32] of the\n         returned vector. \\n\n   Bits [65:64]: \\n\n     00: Bits [31:0] of the source are copied to bits [95:64] of the\n         returned vector. \\n\n     01: Bits [63:32] of the source are copied to bits [95:64] of the\n         returned vector. \\n\n     10: Bits [95:64] of the source are copied to bits [95:64] of the\n         returned vector. \\n\n     11: Bits [127:96] of the source are copied to bits [95:64] of the\n         returned vector. \\n\n   Bits [97:96]: \\n\n     00: Bits [31:0] of the source are copied to bits [127:96] of the\n         returned vector. \\n\n     01: Bits [63:32] of the source are copied to bits [127:96] of the\n         returned vector. \\n\n     10: Bits [95:64] of the source are copied to bits [127:96] of the\n         returned vector. \\n\n     11: Bits [127:96] of the source are copied to bits [127:96] of the\n         returned vector. \\n\n   Bits [129:128]: \\n\n     00: Bits [159:128] of the source are copied to bits [159:128] of the\n         returned vector. \\n\n     01: Bits [191:160] of the source are copied to bits [159:128] of the\n         returned vector. \\n\n     10: Bits [223:192] of the source are copied to bits [159:128] of the\n         returned vector. \\n\n     11: Bits [255:224] of the source are copied to bits [159:128] of the\n         returned vector. \\n\n   Bits [161:160]: \\n\n     00: Bits [159:128] of the source are copied to bits [191:160] of the\n         returned vector. \\n\n     01: Bits [191:160] of the source are copied to bits [191:160] of the\n         returned vector. \\n\n     10: Bits [223:192] of the source are copied to bits [191:160] of the\n         returned vector. \\n\n     11: Bits [255:224] of the source are copied to bits [191:160] of the\n         returned vector. \\n\n   Bits [193:192]: \\n\n     00: Bits [159:128] of the source are copied to bits [223:192] of the\n         returned vector. \\n\n     01: Bits [191:160] of the source are copied to bits [223:192] of the\n         returned vector. \\n\n     10: Bits [223:192] of the source are copied to bits [223:192] of the\n         returned vector. \\n\n     11: Bits [255:224] of the source are copied to bits [223:192] of the\n         returned vector. \\n\n   Bits [225:224]: \\n\n     00: Bits [159:128] of the source are copied to bits [255:224] of the\n         returned vector. \\n\n     01: Bits [191:160] of the source are copied to bits [255:224] of the\n         returned vector. \\n\n     10: Bits [223:192] of the source are copied to bits [255:224] of the\n         returned vector. \\n\n     11: Bits [255:224] of the source are copied to bits [255:224] of the\n         returned vector.\n\\returns A 256-bit vector of [8 x float] containing the copied values.","bases":[],"vars":[12377079621887342140,14567059192339094584],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10099755585877523034,"detailed_name":"static inline __m256 _mm256_setr_ps(float __a, float __b, float __c, float __d, float __e, float __f, float __g, float __h)","qual_name_offset":21,"short_name_offset":21,"short_name_size":14,"spell":"3927:1-3927:15|3926:1-3931:2|2|-1","hover":"","comments":"Constructs a 256-bit floating-point vector of [8 x float],\n   initialized in reverse order with the specified single-precision\n   float-point values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n  instruction.\n\n\\param __a\n   A single-precision floating-point value used to initialize bits [31:0]\n   of the result.\n\\param __b\n   A single-precision floating-point value used to initialize bits [63:32]\n   of the result.\n\\param __c\n   A single-precision floating-point value used to initialize bits [95:64]\n   of the result.\n\\param __d\n   A single-precision floating-point value used to initialize bits [127:96]\n   of the result.\n\\param __e\n   A single-precision floating-point value used to initialize bits [159:128]\n   of the result.\n\\param __f\n   A single-precision floating-point value used to initialize bits [191:160]\n   of the result.\n\\param __g\n   A single-precision floating-point value used to initialize bits [223:192]\n   of the result.\n\\param __h\n   A single-precision floating-point value used to initialize bits [255:224]\n   of the result.\n\\returns An initialized 256-bit floating-point vector of [8 x float].","bases":[],"vars":[12920266305272502413,2466526225692021475,17306971409598763580,14503474130685648606,13545502538392900508,17108048506956252706,13575320374811828470,6243498427087948053],"callees":["3930:10-3930:23|2747103539634611622|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10153464888849858235,"detailed_name":"static inline __m256i _mm256_set_epi32(int __i0, int __i1, int __i2, int __i3, int __i4, int __i5, int __i6, int __i7)","qual_name_offset":22,"short_name_offset":22,"short_name_size":16,"spell":"3692:1-3692:17|3691:1-3696:2|2|-1","hover":"","comments":"Constructs a 256-bit integer vector initialized with the specified\n   32-bit integral values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n  instruction.\n\n\\param __i0\n   A 32-bit integral value used to initialize bits [255:224] of the result.\n\\param __i1\n   A 32-bit integral value used to initialize bits [223:192] of the result.\n\\param __i2\n   A 32-bit integral value used to initialize bits [191:160] of the result.\n\\param __i3\n   A 32-bit integral value used to initialize bits [159:128] of the result.\n\\param __i4\n   A 32-bit integral value used to initialize bits [127:96] of the result.\n\\param __i5\n   A 32-bit integral value used to initialize bits [95:64] of the result.\n\\param __i6\n   A 32-bit integral value used to initialize bits [63:32] of the result.\n\\param __i7\n   A 32-bit integral value used to initialize bits [31:0] of the result.\n\\returns An initialized 256-bit integer vector.","bases":[],"vars":[3836154551141219732,4116811409827124088,11271202387893212592,17519769413169829898,3047480451561707922,17501766644516119152,8670420671614041518,16427450407863126],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["3962:10-3962:26|16420|-1","4184:10-4184:26|16420|-1"]},{"usr":10186849206956347606,"detailed_name":"static inline __m128d _mm256_castpd256_pd128(__m256d __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":22,"spell":"4401:1-4401:23|4400:1-4404:2|2|-1","hover":"","comments":"Returns the lower 128 bits of a 256-bit floating-point vector of\n   [4 x double] as a 128-bit floating-point vector of [2 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\param __a\n   A 256-bit floating-point vector of [4 x double].\n\\returns A 128-bit floating-point vector of [2 x double] containing the\n   lower 128 bits of the parameter.","bases":[],"vars":[11501462122562464752],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["4886:12-4886:34|16420|-1"]},{"usr":10225814239259135134,"detailed_name":"static inline __m256i _mm256_set1_epi8(char __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":16,"spell":"4218:1-4218:17|4217:1-4224:2|2|-1","hover":"","comments":"Constructs a 256-bit integer vector of [32 x i8], with each of the\n   8-bit integral vector elements set to the specified 8-bit integral value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSHUFB+VINSERTF128 </c> instruction.\n\n\\param __b\n   An 8-bit integral value used to initialize each vector element of the\n   result.\n\\returns An initialized 256-bit integer vector of [32 x i8].","bases":[],"vars":[8572558817584507334],"callees":["4220:10-4220:25|9399529582716696775|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10282936521820654818,"detailed_name":"static inline __m256 _mm256_movehdup_ps(__m256 __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":18,"spell":"2316:1-2316:19|2315:1-2319:2|2|-1","hover":"","comments":"Vector replicate */\n Moves and duplicates odd-indexed values from a 256-bit vector of\n    [8 x float] to float values in a 256-bit vector of [8 x float].\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VMOVSHDUP </c> instruction.\n\n \\param __a\n    A 256-bit vector of [8 x float]. \\n\n    Bits [255:224] of \\a __a are written to bits [255:224] and [223:192] of\n    the return value. \\n\n    Bits [191:160] of \\a __a are written to bits [191:160] and [159:128] of\n    the return value. \\n\n    Bits [127:96] of \\a __a are written to bits [127:96] and [95:64] of the\n    return value. \\n\n    Bits [63:32] of \\a __a are written to bits [63:32] and [31:0] of the\n    return value.\n \\returns A 256-bit vector of [8 x float] containing the moved and duplicated\n    values.","bases":[],"vars":[2982462536557472991],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10411414261654797910,"detailed_name":"static inline __m256 _mm256_setzero_ps()","qual_name_offset":21,"short_name_offset":21,"short_name_size":17,"spell":"4268:1-4268:18|4267:1-4271:2|2|-1","hover":"","comments":"Constructs a 256-bit floating-point vector of [8 x float] with all\n   vector elements initialized to zero.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VXORPS </c> instruction.\n\n\\returns A 256-bit vector of [8 x float] with all elements set to zero.","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10587756143200238957,"detailed_name":"static inline __m256 _mm256_max_ps(__m256 __a, __m256 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"226:1-226:14|225:1-229:2|2|-1","hover":"","comments":"Compares two 256-bit vectors of [8 x float] and returns the greater\n   of each pair of values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMAXPS </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float] containing one of the operands.\n\\param __b\n   A 256-bit vector of [8 x float] containing one of the operands.\n\\returns A 256-bit vector of [8 x float] containing the maximum values\n   between both operands.","bases":[],"vars":[13933408055997933983,627191890354629868],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10701812063114122449,"detailed_name":"static inline __m256d _mm256_cvtps_pd(__m128 __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"2191:1-2191:16|2190:1-2194:2|2|-1","hover":"","comments":"Converts a 128-bit vector of [4 x float] into a 256-bit vector of [4\n   x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTPS2PD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\returns A 256-bit vector of [4 x double] containing the converted values.","bases":[],"vars":[17471428438920931943],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10802238967193545380,"detailed_name":"static inline __m256i _mm256_set_epi64x(long long __a, long long __b, long long __c, long long __d)","qual_name_offset":22,"short_name_offset":22,"short_name_size":17,"spell":"3858:1-3858:18|3857:1-3861:2|2|-1","hover":"","comments":"Constructs a 256-bit integer vector initialized with the specified\n   64-bit integral values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPUNPCKLQDQ+VINSERTF128 </c>\n  instruction.\n\n\\param __a\n   A 64-bit integral value used to initialize bits [255:192] of the result.\n\\param __b\n   A 64-bit integral value used to initialize bits [191:128] of the result.\n\\param __c\n   A 64-bit integral value used to initialize bits [127:64] of the result.\n\\param __d\n   A 64-bit integral value used to initialize bits [63:0] of the result.\n\\returns An initialized 256-bit integer vector.","bases":[],"vars":[12140997999573101502,16556042718818433412,13252374348839548094,3228505245167765925],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["4127:10-4127:27|16420|-1","4241:10-4241:27|16420|-1"]},{"usr":10951429860699956667,"detailed_name":"static inline __m128i _mm256_castsi256_si128(__m256i __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":22,"spell":"4434:1-4434:23|4433:1-4437:2|2|-1","hover":"","comments":"Truncates a 256-bit integer vector into a 128-bit integer vector.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\param __a\n   A 256-bit integer vector.\n\\returns A 128-bit integer vector containing the lower 128 bits of the\n   parameter.","bases":[],"vars":[7655446596106995634],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["4915:12-4915:34|16420|-1"]},{"usr":11027949193534329896,"detailed_name":"static inline __m256 _mm256_undefined_ps()","qual_name_offset":21,"short_name_offset":21,"short_name_size":19,"spell":"3581:1-3581:20|3580:1-3584:2|2|-1","hover":"","comments":"Create a 256-bit vector of [8 x float] with undefined values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\returns A 256-bit vector of [8 x float] containing undefined values.","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":11076613868018454204,"detailed_name":"static inline __m256d _mm256_permutevar_pd(__m256d __a, __m256i __c)","qual_name_offset":22,"short_name_offset":22,"short_name_size":20,"spell":"814:1-814:21|813:1-817:2|2|-1","hover":"","comments":"Copies the values in a 256-bit vector of [4 x double] as specified\n   by the 256-bit integer vector operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPERMILPD </c> instruction.\n\n\\param __a\n   A 256-bit vector of [4 x double].\n\\param __c\n   A 256-bit integer vector operand specifying how the values are to be\n   copied. \\n\n   Bit [1]: \\n\n     0: Bits [63:0] of the source are copied to bits [63:0] of the returned\n        vector. \\n\n     1: Bits [127:64] of the source are copied to bits [63:0] of the\n        returned vector. \\n\n   Bit [65]: \\n\n     0: Bits [63:0] of the source are copied to bits [127:64] of the\n        returned vector. \\n\n     1: Bits [127:64] of the source are copied to bits [127:64] of the\n        returned vector. \\n\n   Bit [129]: \\n\n     0: Bits [191:128] of the source are copied to bits [191:128] of the\n        returned vector. \\n\n     1: Bits [255:192] of the source are copied to bits [191:128] of the\n        returned vector. \\n\n   Bit [193]: \\n\n     0: Bits [191:128] of the source are copied to bits [255:192] of the\n        returned vector. \\n\n     1: Bits [255:192] of the source are copied to bits [255:192] of the\n   returned vector.\n\\returns A 256-bit vector of [4 x double] containing the copied values.","bases":[],"vars":[10988677216789765400,8255828845991446946],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":11077188842824663389,"detailed_name":"static inline __m256i _mm256_zextsi128_si256(__m128i __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":22,"spell":"4550:1-4550:23|4549:1-4553:2|2|-1","hover":"","comments":"Constructs a 256-bit integer vector from a 128-bit integer vector.\n   The lower 128 bits contain the value of the source vector. The upper\n   128 bits are set to zero.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\param __a\n   A 128-bit integer vector.\n\\returns A 256-bit integer vector. The lower 128 bits contain the value of\n   the parameter. The upper 128 bits are set to zero.","bases":[],"vars":[10198540028105004485],"callees":["4552:55-4552:72|13933954874642965752|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":11136714752147784416,"detailed_name":"static inline __m256d _mm256_movedup_pd(__m256d __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":17,"spell":"2363:1-2363:18|2362:1-2366:2|2|-1","hover":"","comments":"Moves and duplicates double-precision floating point values from a\n   256-bit vector of [4 x double] to double-precision values in a 256-bit\n   vector of [4 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVDDUP </c> instruction.\n\n\\param __a\n   A 256-bit vector of [4 x double]. \\n\n   Bits [63:0] of \\a __a are written to bits [127:64] and [63:0] of the\n   return value. \\n\n   Bits [191:128] of \\a __a are written to bits [255:192] and [191:128] of\n   the return value.\n\\returns A 256-bit vector of [4 x double] containing the moved and\n   duplicated values.","bases":[],"vars":[3909426988127072253],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":11516165755922440309,"detailed_name":"static inline __m256d _mm256_andnot_pd(__m256d __a, __m256d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":16,"spell":"559:1-559:17|558:1-562:2|2|-1","hover":"","comments":"Performs a bitwise AND of two 256-bit vectors of [4 x double], using\n   the one's complement of the values contained in the first source operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VANDNPD </c> instruction.\n\n\\param __a\n   A 256-bit vector of [4 x double] containing the left source operand. The\n   one's complement of this value is used in the bitwise AND.\n\\param __b\n   A 256-bit vector of [4 x double] containing the right source operand.\n\\returns A 256-bit vector of [4 x double] containing the bitwise AND of the\n   values of the second operand and the one's complement of the first\n   operand.","bases":[],"vars":[15737365803796601110,14021049441631799919],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":11525557655073176801,"detailed_name":"static inline __m256d _mm256_maskload_pd(const double *__p, __m256i __m)","qual_name_offset":22,"short_name_offset":22,"short_name_size":18,"spell":"3346:1-3346:19|3345:1-3350:2|2|-1","hover":"","comments":"Conditionally loads double-precision floating point elements from a\n   memory location pointed to by \\a __p into a 256-bit vector of\n   [4 x double], depending on the mask bits associated with each data\n   element.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMASKMOVPD </c> instruction.\n\n\\param __p\n   A pointer to a memory location that contains the double-precision\n   floating point values.\n\\param __m\n   A 256-bit integer vector of [4 x quadword] containing the mask. The most\n   significant bit of each quadword element represents the mask bits. If a\n   mask bit is zero, the corresponding value in the memory location is not\n   loaded and the corresponding field in the return value is set to zero.\n\\returns A 256-bit vector of [4 x double] containing the loaded values.","bases":[],"vars":[2665136000412290574,8021400058675431404],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":11684833311895851215,"detailed_name":"static inline void _mm256_storeu_si256(__m256i_u *__p, __m256i __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":19,"spell":"3294:1-3294:20|3293:1-3300:2|2|-1","hover":"","comments":"Stores integer values from a 256-bit integer vector to an unaligned\n   memory location pointed to by \\a __p.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVDQU </c> instruction.\n\n\\param __p\n   A pointer to a memory location that will receive the integer values.\n\\param __a\n   A 256-bit integer vector containing the values to be moved.","bases":[],"vars":[17192948036566471336,14844397178017976381],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":11890582934017812768,"detailed_name":"static inline __m256i _mm256_undefined_si256()","qual_name_offset":22,"short_name_offset":22,"short_name_size":22,"spell":"3594:1-3594:23|3593:1-3597:2|2|-1","hover":"","comments":"Create a 256-bit integer vector with undefined values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\returns A 256-bit integer vector containing undefined values.","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12016939257899497694,"detailed_name":"static inline __m256d _mm256_addsub_pd(__m256d __a, __m256d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":16,"spell":"133:1-133:17|132:1-136:2|2|-1","hover":"","comments":"Adds the even-indexed values and subtracts the odd-indexed values of\n   two 256-bit vectors of [4 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VADDSUBPD </c> instruction.\n\n\\param __a\n   A 256-bit vector of [4 x double] containing the left source operand.\n\\param __b\n   A 256-bit vector of [4 x double] containing the right source operand.\n\\returns A 256-bit vector of [4 x double] containing the alternating sums\n   and differences between both operands.","bases":[],"vars":[7374946757061227543,13525513750540409186],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12090940682826886849,"detailed_name":"static inline __m256 _mm256_and_ps(__m256 __a, __m256 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"538:1-538:14|537:1-541:2|2|-1","hover":"","comments":"Performs a bitwise AND of two 256-bit vectors of [8 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VANDPS </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float] containing one of the source operands.\n\\param __b\n   A 256-bit vector of [8 x float] containing one of the source operands.\n\\returns A 256-bit vector of [8 x float] containing the bitwise AND of the\n   values between both operands.","bases":[],"vars":[5578586102598318005,2458916465126466551],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12420682822933704306,"detailed_name":"static inline int _mm_testc_ps(__m128 __a, __m128 __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":12,"spell":"2609:1-2609:13|2608:1-2612:2|2|-1","hover":"","comments":"Given two 128-bit floating-point vectors of [4 x float], perform an\n   element-by-element comparison of the single-precision element in the\n   first source vector and the corresponding element in the second source\n   vector.\n\n   The EFLAGS register is updated as follows: \\n\n   If there is at least one pair of single-precision elements where the\n   sign-bits of both elements are 1, the ZF flag is set to 0. Otherwise the\n   ZF flag is set to 1. \\n\n   If there is at least one pair of single-precision elements where the\n   sign-bit of the first element is 0 and the sign-bit of the second element\n   is 1, the CF flag is set to 0. Otherwise the CF flag is set to 1. \\n\n   This intrinsic returns the value of the CF flag.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VTESTPS </c> instruction.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\param __b\n   A 128-bit vector of [4 x float].\n\\returns the CF flag.","bases":[],"vars":[11099968121568823358,12835707240837604588],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12448017614334774127,"detailed_name":"static inline __m128 _mm256_castps256_ps128(__m256 __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":22,"spell":"4418:1-4418:23|4417:1-4421:2|2|-1","hover":"","comments":"Returns the lower 128 bits of a 256-bit floating-point vector of\n   [8 x float] as a 128-bit floating-point vector of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\param __a\n   A 256-bit floating-point vector of [8 x float].\n\\returns A 128-bit floating-point vector of [4 x float] containing the\n   lower 128 bits of the parameter.","bases":[],"vars":[4008042167316503958],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["4857:12-4857:34|16420|-1"]},{"usr":12534941471274261033,"detailed_name":"static inline int _mm256_movemask_pd(__m256d __a)","qual_name_offset":18,"short_name_offset":18,"short_name_size":18,"spell":"2913:1-2913:19|2912:1-2916:2|2|-1","hover":"","comments":"Vector extract sign mask */\n Extracts the sign bits of double-precision floating point elements\n    in a 256-bit vector of [4 x double] and writes them to the lower order\n    bits of the return value.\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VMOVMSKPD </c> instruction.\n\n \\param __a\n    A 256-bit vector of [4 x double] containing the double-precision\n    floating point values with sign bits to be extracted.\n \\returns The sign bits from the operand, written to bits [3:0].","bases":[],"vars":[1953044064773311386],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12776061162522978882,"detailed_name":"static inline __m128 _mm_maskload_ps(const float *__p, __m128i __m)","qual_name_offset":21,"short_name_offset":21,"short_name_size":15,"spell":"3371:1-3371:16|3370:1-3374:2|2|-1","hover":"","comments":"Conditionally loads single-precision floating point elements from a\n   memory location pointed to by \\a __p into a 128-bit vector of\n   [4 x float], depending on the mask bits associated with each data\n   element.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMASKMOVPS </c> instruction.\n\n\\param __p\n   A pointer to a memory location that contains the single-precision\n   floating point values.\n\\param __m\n   A 128-bit integer vector containing the mask. The most significant bit of\n   each data element represents the mask bits. If a mask bit is zero, the\n   corresponding value in the memory location is not loaded and the\n   corresponding field in the return value is set to zero.\n\\returns A 128-bit vector of [4 x float] containing the loaded values.","bases":[],"vars":[15777246740887755481,3572078790820744397],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12811181077947161010,"detailed_name":"static inline __m256 _mm256_sub_ps(__m256 __a, __m256 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"114:1-114:14|113:1-117:2|2|-1","hover":"","comments":"Subtracts two 256-bit vectors of [8 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VSUBPS </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float] containing the minuend.\n\\param __b\n   A 256-bit vector of [8 x float] containing the subtrahend.\n\\returns A 256-bit vector of [8 x float] containing the differences between\n   both operands.","bases":[],"vars":[4993794616416828971,16966127013115016121],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13049515532793994530,"detailed_name":"static inline __m256d _mm256_undefined_pd()","qual_name_offset":22,"short_name_offset":22,"short_name_size":19,"spell":"3568:1-3568:20|3567:1-3571:2|2|-1","hover":"","comments":"Create vectors */\n Create a 256-bit vector of [4 x double] with undefined values.\n\n \\headerfile <x86intrin.h>\n\n This intrinsic has no corresponding instruction.\n\n \\returns A 256-bit vector of [4 x double] containing undefined values.","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13083999903924147326,"detailed_name":"static inline __m256i _mm256_cvttps_epi32(__m256 __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":19,"spell":"2241:1-2241:20|2240:1-2244:2|2|-1","hover":"","comments":"Converts a vector of [8 x float] into a vector of [8 x i32],\n   truncating the result by rounding towards zero when it is inexact.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTTPS2DQ </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float].\n\\returns A 256-bit integer vector containing the converted values.","bases":[],"vars":[74315022512695328],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13229953287245463887,"detailed_name":"static inline __m128 _mm256_cvtpd_ps(__m256d __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":15,"spell":"2160:1-2160:16|2159:1-2163:2|2|-1","hover":"","comments":"Converts a 256-bit vector of [4 x double] into a 128-bit vector of\n   [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTPD2PS </c> instruction.\n\n\\param __a\n   A 256-bit vector of [4 x double].\n\\returns A 128-bit vector of [4 x float] containing the converted values.","bases":[],"vars":[10578147735718510019],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13380750154060885563,"detailed_name":"static inline __m256 _mm256_load_ps(const float *__p)","qual_name_offset":21,"short_name_offset":21,"short_name_size":14,"spell":"3086:1-3086:15|3085:1-3089:2|2|-1","hover":"","comments":"Loads 8 single-precision floating point values from a 32-byte aligned\n   memory location pointed to by \\a __p into a vector of [8 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVAPS </c> instruction.\n\n\\param __p\n   A 32-byte aligned pointer to a memory location containing float values.\n\\returns A 256-bit vector of [8 x float] containing the moved values.","bases":[],"vars":[8141557336465842567],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13434001779816634683,"detailed_name":"static inline __m256i _mm256_load_si256(const __m256i *__p)","qual_name_offset":22,"short_name_offset":22,"short_name_size":17,"spell":"3143:1-3143:18|3142:1-3146:2|2|-1","hover":"","comments":"Loads 256 bits of integer data from a 32-byte aligned memory\n   location pointed to by \\a __p into elements of a 256-bit integer vector.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVDQA </c> instruction.\n\n\\param __p\n   A 32-byte aligned pointer to a 256-bit integer vector containing integer\n   values.\n\\returns A 256-bit integer vector containing the moved values.","bases":[],"vars":[427527916803276467],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13565615787088010345,"detailed_name":"static inline __m256 _mm256_maskload_ps(const float *__p, __m256i __m)","qual_name_offset":21,"short_name_offset":21,"short_name_size":18,"spell":"3395:1-3395:19|3394:1-3398:2|2|-1","hover":"","comments":"Conditionally loads single-precision floating point elements from a\n   memory location pointed to by \\a __p into a 256-bit vector of\n   [8 x float], depending on the mask bits associated with each data\n   element.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMASKMOVPS </c> instruction.\n\n\\param __p\n   A pointer to a memory location that contains the single-precision\n   floating point values.\n\\param __m\n   A 256-bit integer vector of [8 x dword] containing the mask. The most\n   significant bit of each dword element represents the mask bits. If a mask\n   bit is zero, the corresponding value in the memory location is not loaded\n   and the corresponding field in the return value is set to zero.\n\\returns A 256-bit vector of [8 x float] containing the loaded values.","bases":[],"vars":[8074554579076931771,17607897440866242458],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13681621768893621386,"detailed_name":"static inline __m256i _mm256_setr_epi16(short __w15, short __w14, short __w13, short __w12, short __w11, short __w10, short __w09, short __w08, short __w07, short __w06, short __w05, short __w04, short __w03, short __w02, short __w01, short __w00)","qual_name_offset":22,"short_name_offset":22,"short_name_size":17,"spell":"4007:1-4007:18|4006:1-4016:2|2|-1","hover":"","comments":"Constructs a 256-bit integer vector, initialized in reverse order\n   with the specified 16-bit integral values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n  instruction.\n\n\\param __w15\n   A 16-bit integral value used to initialize bits [15:0] of the result.\n\\param __w14\n   A 16-bit integral value used to initialize bits [31:16] of the result.\n\\param __w13\n   A 16-bit integral value used to initialize bits [47:32] of the result.\n\\param __w12\n   A 16-bit integral value used to initialize bits [63:48] of the result.\n\\param __w11\n   A 16-bit integral value used to initialize bits [79:64] of the result.\n\\param __w10\n   A 16-bit integral value used to initialize bits [95:80] of the result.\n\\param __w09\n   A 16-bit integral value used to initialize bits [111:96] of the result.\n\\param __w08\n   A 16-bit integral value used to initialize bits [127:112] of the result.\n\\param __w07\n   A 16-bit integral value used to initialize bits [143:128] of the result.\n\\param __w06\n   A 16-bit integral value used to initialize bits [159:144] of the result.\n\\param __w05\n   A 16-bit integral value used to initialize bits [175:160] of the result.\n\\param __w04\n   A 16-bit integral value used to initialize bits [191:176] of the result.\n\\param __w03\n   A 16-bit integral value used to initialize bits [207:192] of the result.\n\\param __w02\n   A 16-bit integral value used to initialize bits [223:208] of the result.\n\\param __w01\n   A 16-bit integral value used to initialize bits [239:224] of the result.\n\\param __w00\n   A 16-bit integral value used to initialize bits [255:240] of the result.\n\\returns An initialized 256-bit integer vector.","bases":[],"vars":[13017856661602828957,5020096171138587305,15687896079871004221,10899821240354321715,8802620967140678244,16311361405717174548,17227313666985123274,3709741571355563337,8300443631067287296,10360101721370517079,2856053123126793020,15526355299804109368,8715612203010977618,10475043386327051517,15993669714784355961,701630951997867382],"callees":["4012:10-4012:26|6965746959808425085|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13753764877546930924,"detailed_name":"static inline __m256 _mm256_castsi256_ps(__m256i __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":19,"spell":"4367:1-4367:20|4366:1-4370:2|2|-1","hover":"","comments":"Casts a 256-bit integer vector into a 256-bit floating-point vector\n   of [8 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\param __a\n   A 256-bit integer vector.\n\\returns A 256-bit floating-point vector of [8 x float] containing the same\n   bitwise pattern as the parameter.","bases":[],"vars":[17542347944076795821],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13861769884674489510,"detailed_name":"static inline __m256d _mm256_and_pd(__m256d __a, __m256d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"520:1-520:14|519:1-523:2|2|-1","hover":"","comments":"Logical */\n Performs a bitwise AND of two 256-bit vectors of [4 x double].\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VANDPD </c> instruction.\n\n \\param __a\n    A 256-bit vector of [4 x double] containing one of the source operands.\n \\param __b\n    A 256-bit vector of [4 x double] containing one of the source operands.\n \\returns A 256-bit vector of [4 x double] containing the bitwise AND of the\n    values between both operands.","bases":[],"vars":[8588467416618959926,5865524466117171926],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13884082918628832577,"detailed_name":"static inline __m256 _mm256_castps128_ps256(__m128 __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":22,"spell":"4476:1-4476:23|4475:1-4479:2|2|-1","hover":"","comments":"Constructs a 256-bit floating-point vector of [8 x float] from a\n   128-bit floating-point vector of [4 x float].\n\n   The lower 128 bits contain the value of the source vector. The contents\n   of the upper 128 bits are undefined.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\returns A 256-bit floating-point vector of [8 x float]. The lower 128 bits\n   contain the value of the parameter. The contents of the upper 128 bits\n   are undefined.","bases":[],"vars":[6351523367847866561],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["4776:19-4776:41|16420|-1"]},{"usr":13933954874642965752,"detailed_name":"static inline __m128i _mm_setzero_si128()","qual_name_offset":22,"short_name_offset":22,"short_name_size":17,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":[],"derived":[],"uses":["4552:55-4552:72|16420|-1"]},{"usr":14037092384497544059,"detailed_name":"static inline int _mm256_testc_ps(__m256 __a, __m256 __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":15,"spell":"2785:1-2785:16|2784:1-2788:2|2|-1","hover":"","comments":"Given two 256-bit floating-point vectors of [8 x float], perform an\n   element-by-element comparison of the single-precision element in the\n   first source vector and the corresponding element in the second source\n   vector.\n\n   The EFLAGS register is updated as follows: \\n\n   If there is at least one pair of single-precision elements where the\n   sign-bits of both elements are 1, the ZF flag is set to 0. Otherwise the\n   ZF flag is set to 1. \\n\n   If there is at least one pair of single-precision elements where the\n   sign-bit of the first element is 0 and the sign-bit of the second element\n   is 1, the CF flag is set to 0. Otherwise the CF flag is set to 1. \\n\n   This intrinsic returns the value of the CF flag.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VTESTPS </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float].\n\\param __b\n   A 256-bit vector of [8 x float].\n\\returns the CF flag.","bases":[],"vars":[5440150667286407542,14078975541802782947],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14247003350660884704,"detailed_name":"static inline __m256i _mm256_loadu_si256(const __m256i_u *__p)","qual_name_offset":22,"short_name_offset":22,"short_name_size":18,"spell":"3159:1-3159:19|3158:1-3165:2|2|-1","hover":"","comments":"Loads 256 bits of integer data from an unaligned memory location\n   pointed to by \\a __p into a 256-bit integer vector.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVDQU </c> instruction.\n\n\\param __p\n   A pointer to a 256-bit integer vector containing integer values.\n\\returns A 256-bit integer vector containing the moved values.","bases":[],"vars":[16431689392420002126],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14649060646229949646,"detailed_name":"static inline __m256d _mm256_min_pd(__m256d __a, __m256d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"245:1-245:14|244:1-248:2|2|-1","hover":"","comments":"Compares two 256-bit vectors of [4 x double] and returns the lesser\n   of each pair of values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMINPD </c> instruction.\n\n\\param __a\n   A 256-bit vector of [4 x double] containing one of the operands.\n\\param __b\n   A 256-bit vector of [4 x double] containing one of the operands.\n\\returns A 256-bit vector of [4 x double] containing the minimum values\n   between both operands.","bases":[],"vars":[5984364942335983896,1561564319144714747],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14670292959466593989,"detailed_name":"static inline __m256 _mm256_broadcast_ss(const float *__a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":19,"spell":"3011:1-3011:20|3010:1-3015:2|2|-1","hover":"","comments":"Loads a scalar single-precision floating point value from the\n   specified address pointed to by \\a __a and broadcasts it to the elements\n   of a [8 x float] vector.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VBROADCASTSS </c> instruction.\n\n\\param __a\n   The single-precision floating point value to be broadcast.\n\\returns A 256-bit vector of [8 x float] whose 32-bit elements are set\n   equal to the broadcast value.","bases":[],"vars":[14867052416455273223,4888608387128748471],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14695889751426307058,"detailed_name":"static inline void _mm_storeu_si128(__m128i_u *__p, __m128i __b)","qual_name_offset":19,"short_name_offset":19,"short_name_size":16,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":[],"derived":[],"uses":["4916:3-4916:19|16420|-1","4918:3-4918:19|16420|-1"]},{"usr":14810891978639766162,"detailed_name":"static inline __m256 _mm256_rsqrt_ps(__m256 __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":15,"spell":"351:1-351:16|350:1-354:2|2|-1","hover":"","comments":"Calculates the reciprocal square roots of the values in a 256-bit\n   vector of [8 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VRSQRTPS </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float].\n\\returns A 256-bit vector of [8 x float] containing the reciprocal square\n   roots of the values in the operand.","bases":[],"vars":[4088042849912524190],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14832186896215444893,"detailed_name":"static inline int _mm256_testnzc_ps(__m256 __a, __m256 __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":17,"spell":"2815:1-2815:18|2814:1-2818:2|2|-1","hover":"","comments":"Given two 256-bit floating-point vectors of [8 x float], perform an\n   element-by-element comparison of the single-precision elements in the\n   first source vector and the corresponding elements in the second source\n   vector.\n\n   The EFLAGS register is updated as follows: \\n\n   If there is at least one pair of single-precision elements where the\n   sign-bits of both elements are 1, the ZF flag is set to 0. Otherwise the\n   ZF flag is set to 1. \\n\n   If there is at least one pair of single-precision elements where the\n   sign-bit of the first element is 0 and the sign-bit of the second element\n   is 1, the CF flag is set to 0. Otherwise the CF flag is set to 1. \\n\n   This intrinsic returns 1 if both the ZF and CF flags are set to 0,\n   otherwise it returns 0.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VTESTPS </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float].\n\\param __b\n   A 256-bit vector of [8 x float].\n\\returns 1 if both the ZF and CF flags are set to 0, otherwise returns 0.","bases":[],"vars":[17946509790129828662,14920090758698305857],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15015518910973595249,"detailed_name":"static inline __m256 _mm256_castpd_ps(__m256d __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":16,"spell":"4299:1-4299:17|4298:1-4302:2|2|-1","hover":"","comments":"Cast between vector types */\n Casts a 256-bit floating-point vector of [4 x double] into a 256-bit\n    floating-point vector of [8 x float].\n\n \\headerfile <x86intrin.h>\n\n This intrinsic has no corresponding instruction.\n\n \\param __a\n    A 256-bit floating-point vector of [4 x double].\n \\returns A 256-bit floating-point vector of [8 x float] containing the same\n    bitwise pattern as the parameter.","bases":[],"vars":[5287007070420313666],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15151261997141368165,"detailed_name":"static inline __m256i _mm256_loadu2_m128i(const __m128i_u *__addr_hi, const __m128i_u *__addr_lo)","qual_name_offset":22,"short_name_offset":22,"short_name_size":19,"spell":"4827:1-4827:20|4826:1-4831:2|2|-1","hover":"","comments":"Loads two 128-bit integer vectors from unaligned memory locations and\n   constructs a 256-bit integer vector by concatenating the two 128-bit\n   vectors.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to load instructions followed by the\n  <c> VINSERTF128 </c> instruction.\n\n\\param __addr_hi\n   A pointer to a 128-bit memory location containing a 128-bit integer\n   vector. This vector is to be copied to bits[255:128] of the result. The\n   address of the memory location does not have to be aligned.\n\\param __addr_lo\n   A pointer to a 128-bit memory location containing a 128-bit integer\n   vector. This vector is to be copied to bits[127:0] of the result. The\n   address of the memory location does not have to be aligned.\n\\returns A 256-bit integer vector containing the concatenated result.","bases":[],"vars":[8019045679124047793,10100413440031151092,1661497143321951655],"callees":["4829:20-4829:42|3265813871243304435|3|16420","4829:43-4829:58|16570976266967901518|3|16420","4829:20-4829:42|3265813871243304435|3|16420","4829:43-4829:58|16570976266967901518|3|16420","4830:42-4830:57|16570976266967901518|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15192790690557827354,"detailed_name":"static inline void _mm256_zeroupper()","qual_name_offset":19,"short_name_offset":19,"short_name_size":16,"spell":"2954:1-2954:17|2953:1-2957:2|2|-1","hover":"","comments":"Zeroes the upper 128 bits (bits 255:128) of all YMM registers.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VZEROUPPER </c> instruction.","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15506305763316687552,"detailed_name":"static inline __m256 _mm256_broadcast_ps(const __m128 *__a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":19,"spell":"3050:1-3050:20|3049:1-3055:2|2|-1","hover":"","comments":"Loads the data from a 128-bit vector of [4 x float] from the\n   specified address pointed to by \\a __a and broadcasts it to 128-bit\n   elements in a 256-bit vector of [8 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VBROADCASTF128 </c> instruction.\n\n\\param __a\n   The 128-bit vector of [4 x float] to be broadcast.\n\\returns A 256-bit vector of [8 x float] whose 128-bit elements are set\n   equal to the broadcast value.","bases":[],"vars":[16873814322148243152,17294947406163535362],"callees":["3052:16-3052:28|3368461135461286775|3|16420","3052:16-3052:28|3368461135461286775|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15511529888458410707,"detailed_name":"static inline __m256d _mm256_xor_pd(__m256d __a, __m256d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"634:1-634:14|633:1-637:2|2|-1","hover":"","comments":"Performs a bitwise XOR of two 256-bit vectors of [4 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VXORPD </c> instruction.\n\n\\param __a\n   A 256-bit vector of [4 x double] containing one of the source operands.\n\\param __b\n   A 256-bit vector of [4 x double] containing one of the source operands.\n\\returns A 256-bit vector of [4 x double] containing the bitwise XOR of the\n   values between both operands.","bases":[],"vars":[6396919218899155062,650648934167651988],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15532137382662241104,"detailed_name":"static inline __m256d _mm256_setr_m128d(__m128d __lo, __m128d __hi)","qual_name_offset":22,"short_name_offset":22,"short_name_size":17,"spell":"5024:1-5024:18|5023:1-5027:2|2|-1","hover":"","comments":"Constructs a 256-bit floating-point vector of [4 x double] by\n   concatenating two 128-bit floating-point vectors of [2 x double]. This is\n   similar to _mm256_set_m128d, but the order of the input parameters is\n   swapped.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VINSERTF128 </c> instruction.\n\n\\param __lo\n   A 128-bit floating-point vector of [2 x double] to be copied to the lower\n   128 bits of the result.\n\\param __hi\n   A 128-bit floating-point vector of [2 x double] to be copied to the upper\n   128 bits of the result.\n\\returns A 256-bit floating-point vector of [4 x double] containing the\n   concatenated result.","bases":[],"vars":[68286189983206147,10911749676076869400],"callees":["5026:19-5026:35|2648098869486184405|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15548659261330450129,"detailed_name":"static inline __m256i _mm256_setr_epi64x(long long __a, long long __b, long long __c, long long __d)","qual_name_offset":22,"short_name_offset":22,"short_name_size":18,"spell":"4125:1-4125:19|4124:1-4128:2|2|-1","hover":"","comments":"Constructs a 256-bit integer vector, initialized in reverse order\n   with the specified 64-bit integral values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPUNPCKLQDQ+VINSERTF128 </c>\n  instruction.\n\n\\param __a\n   A 64-bit integral value used to initialize bits [63:0] of the result.\n\\param __b\n   A 64-bit integral value used to initialize bits [127:64] of the result.\n\\param __c\n   A 64-bit integral value used to initialize bits [191:128] of the result.\n\\param __d\n   A 64-bit integral value used to initialize bits [255:192] of the result.\n\\returns An initialized 256-bit integer vector.","bases":[],"vars":[881746610722964228,11309383591549680022,692668503491896465,4310274519139983799],"callees":["4127:10-4127:27|10802238967193545380|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15621328734397974300,"detailed_name":"static inline __m256 _mm256_zextps128_ps256(__m128 __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":22,"spell":"4532:1-4532:23|4531:1-4535:2|2|-1","hover":"","comments":"Constructs a 256-bit floating-point vector of [8 x float] from a\n   128-bit floating-point vector of [4 x float]. The lower 128 bits contain\n   the value of the source vector. The upper 128 bits are set to zero.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\returns A 256-bit floating-point vector of [8 x float]. The lower 128 bits\n   contain the value of the parameter. The upper 128 bits are set to zero.","bases":[],"vars":[9874385810227767128],"callees":["4534:55-4534:69|16504083108470122509|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15690247703672619316,"detailed_name":"static inline __m256d _mm256_loadu_pd(const double *__p)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"3103:1-3103:16|3102:1-3109:2|2|-1","hover":"","comments":"Loads 4 double-precision floating point values from an unaligned\n   memory location pointed to by \\a __p into a vector of [4 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVUPD </c> instruction.\n\n\\param __p\n   A pointer to a memory location containing double-precision floating\n   point values.\n\\returns A 256-bit vector of [4 x double] containing the moved values.","bases":[],"vars":[9798480868940184409],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15927519868802139665,"detailed_name":"static inline int _mm_testz_pd(__m128d __a, __m128d __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":12,"spell":"2492:1-2492:13|2491:1-2495:2|2|-1","hover":"","comments":"Bit Test */\n Given two 128-bit floating-point vectors of [2 x double], perform an\n    element-by-element comparison of the double-precision element in the\n    first source vector and the corresponding element in the second source\n    vector.\n\n    The EFLAGS register is updated as follows: \\n\n    If there is at least one pair of double-precision elements where the\n    sign-bits of both elements are 1, the ZF flag is set to 0. Otherwise the\n    ZF flag is set to 1. \\n\n    If there is at least one pair of double-precision elements where the\n    sign-bit of the first element is 0 and the sign-bit of the second element\n    is 1, the CF flag is set to 0. Otherwise the CF flag is set to 1. \\n\n    This intrinsic returns the value of the ZF flag.\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VTESTPD </c> instruction.\n\n \\param __a\n    A 128-bit vector of [2 x double].\n \\param __b\n    A 128-bit vector of [2 x double].\n \\returns the ZF flag in the EFLAGS register.","bases":[],"vars":[17176557586750703511,16257280113503626896],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15931675382233646805,"detailed_name":"static inline __m256d _mm256_unpacklo_pd(__m256d __a, __m256d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":18,"spell":"2408:1-2408:19|2407:1-2411:2|2|-1","hover":"","comments":"Unpacks the even-indexed vector elements from two 256-bit vectors of\n   [4 x double] and interleaves them into a 256-bit vector of [4 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VUNPCKLPD </c> instruction.\n\n\\param __a\n   A 256-bit floating-point vector of [4 x double]. \\n\n   Bits [63:0] are written to bits [63:0] of the return value. \\n\n   Bits [191:128] are written to bits [191:128] of the return value.\n\\param __b\n   A 256-bit floating-point vector of [4 x double]. \\n\n   Bits [63:0] are written to bits [127:64] of the return value. \\n\n   Bits [191:128] are written to bits [255:192] of the return value. \\n\n\\returns A 256-bit vector of [4 x double] containing the interleaved values.","bases":[],"vars":[3762819416991125243,11197815306890570585],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16305571062488654533,"detailed_name":"static inline void _mm_maskstore_ps(float *__p, __m128i __m, __m128 __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":16,"spell":"3492:1-3492:17|3491:1-3495:2|2|-1","hover":"","comments":"Moves single-precision floating point values from a 128-bit vector\n   of [4 x float] to a memory location pointed to by \\a __p, according to\n   the specified mask.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMASKMOVPS </c> instruction.\n\n\\param __p\n   A pointer to a memory location that will receive the float values.\n\\param __m\n   A 128-bit integer vector containing the mask. The most significant bit of\n   each field in the mask vector represents the mask bits. If a mask bit is\n   zero, the corresponding value from vector __a is not stored and the\n   corresponding field in the memory location pointed to by \\a __p is not\n   changed.\n\\param __a\n   A 128-bit vector of [4 x float] containing the values to be stored.","bases":[],"vars":[15132982547024829260,15457666497956532130,12664458703230360798],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16315053269083498177,"detailed_name":"static inline void _mm256_maskstore_ps(float *__p, __m256i __m, __m256 __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":19,"spell":"3420:1-3420:20|3419:1-3423:2|2|-1","hover":"","comments":"Conditional store ops */\n Moves single-precision floating point values from a 256-bit vector\n    of [8 x float] to a memory location pointed to by \\a __p, according to\n    the specified mask.\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VMASKMOVPS </c> instruction.\n\n \\param __p\n    A pointer to a memory location that will receive the float values.\n \\param __m\n    A 256-bit integer vector of [8 x dword] containing the mask. The most\n    significant bit of each dword element in the mask vector represents the\n    mask bits. If a mask bit is zero, the corresponding value from vector\n    \\a __a is not stored and the corresponding field in the memory location\n    pointed to by \\a __p is not changed.\n \\param __a\n    A 256-bit vector of [8 x float] containing the values to be stored.","bases":[],"vars":[15567207599815722889,12898139600927988772,15717837998479927446],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16343935655212048930,"detailed_name":"static inline __m256 _mm256_sqrt_ps(__m256 __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":14,"spell":"334:1-334:15|333:1-337:2|2|-1","hover":"","comments":"Calculates the square roots of the values in a 256-bit vector of\n   [8 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VSQRTPS </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float].\n\\returns A 256-bit vector of [8 x float] containing the square roots of the\n   values in the operand.","bases":[],"vars":[15716332471662446384],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16504083108470122509,"detailed_name":"static inline __m128 _mm_setzero_ps()","qual_name_offset":21,"short_name_offset":21,"short_name_size":14,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":[],"derived":[],"uses":["4534:55-4534:69|16420|-1"]},{"usr":16511717116378001944,"detailed_name":"static inline __m256 _mm256_unpacklo_ps(__m256 __a, __m256 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":18,"spell":"2462:1-2462:19|2461:1-2465:2|2|-1","hover":"","comments":"Unpacks the 32-bit vector elements 0, 1, 4 and 5 from each of the\n   two 256-bit vectors of [8 x float] and interleaves them into a 256-bit\n   vector of [8 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VUNPCKLPS </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float]. \\n\n   Bits [31:0] are written to bits [31:0] of the return value. \\n\n   Bits [63:32] are written to bits [95:64] of the return value. \\n\n   Bits [159:128] are written to bits [159:128] of the return value. \\n\n   Bits [191:160] are written to bits [223:192] of the return value.\n\\param __b\n   A 256-bit vector of [8 x float]. \\n\n   Bits [31:0] are written to bits [63:32] of the return value. \\n\n   Bits [63:32] are written to bits [127:96] of the return value. \\n\n   Bits [159:128] are written to bits [191:160] of the return value. \\n\n   Bits [191:160] are written to bits [255:224] of the return value.\n\\returns A 256-bit vector of [8 x float] containing the interleaved values.","bases":[],"vars":[15207419717411552912,5401901729218514460],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16570976266967901518,"detailed_name":"static inline __m128i _mm_loadu_si128(const __m128i_u *__p)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":[],"derived":[],"uses":["4829:43-4829:58|16420|-1","4830:42-4830:57|16420|-1","4830:42-4830:57|64|0"]},{"usr":16656014987082526698,"detailed_name":"static inline int _mm256_testz_si256(__m256i __a, __m256i __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":18,"spell":"2841:1-2841:19|2840:1-2844:2|2|-1","hover":"","comments":"Given two 256-bit integer vectors, perform a bit-by-bit comparison\n   of the two source vectors.\n\n   The EFLAGS register is updated as follows: \\n\n   If there is at least one pair of bits where both bits are 1, the ZF flag\n   is set to 0. Otherwise the ZF flag is set to 1. \\n\n   If there is at least one pair of bits where the bit from the first source\n   vector is 0 and the bit from the second source vector is 1, the CF flag\n   is set to 0. Otherwise the CF flag is set to 1. \\n\n   This intrinsic returns the value of the ZF flag.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPTEST </c> instruction.\n\n\\param __a\n   A 256-bit integer vector.\n\\param __b\n   A 256-bit integer vector.\n\\returns the ZF flag.","bases":[],"vars":[10634887611038698922,14077681865366422160],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16701618683807399323,"detailed_name":"static inline void _mm256_store_si256(__m256i *__p, __m256i __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":18,"spell":"3277:1-3277:19|3276:1-3280:2|2|-1","hover":"","comments":"Stores integer values from a 256-bit integer vector to a 32-byte\n   aligned memory location pointed to by \\a __p.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVDQA </c> instruction.\n\n\\param __p\n   A 32-byte aligned pointer to a memory location that will receive the\n   integer values.\n\\param __a\n   A 256-bit integer vector containing the values to be moved.","bases":[],"vars":[15043757424995104432,16988273303103967001],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16928545151228126267,"detailed_name":"static inline __m256d _mm256_blendv_pd(__m256d __a, __m256d __b, __m256d __c)","qual_name_offset":22,"short_name_offset":22,"short_name_size":16,"spell":"1383:1-1383:17|1382:1-1387:2|2|-1","hover":"","comments":"Merges 64-bit double-precision data values stored in either of the\n   two 256-bit vectors of [4 x double], as specified by the 256-bit vector\n   operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VBLENDVPD </c> instruction.\n\n\\param __a\n   A 256-bit vector of [4 x double].\n\\param __b\n   A 256-bit vector of [4 x double].\n\\param __c\n   A 256-bit vector operand, with mask bits 255, 191, 127, and 63 specifying\n   how the values are to be copied. The position of the mask bit corresponds\n   to the most significant bit of a copied value. When a mask bit is 0, the\n   corresponding 64-bit element in operand \\a __a is copied to the same\n   position in the destination. When a mask bit is 1, the corresponding\n   64-bit element in operand \\a __b is copied to the same position in the\n   destination.\n\\returns A 256-bit vector of [4 x double] containing the copied values.","bases":[],"vars":[9724428165948275474,2048131513574161634,17430448245836974090],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17113979032251765627,"detailed_name":"static inline __m256d _mm256_set1_pd(double __w)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"4144:1-4144:15|4143:1-4147:2|2|-1","hover":"","comments":"Create vectors with repeated elements */\n Constructs a 256-bit floating-point vector of [4 x double], with each\n    of the four double-precision floating-point vector elements set to the\n    specified double-precision floating-point value.\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VMOVDDUP+VINSERTF128 </c> instruction.\n\n \\param __w\n    A double-precision floating-point value used to initialize each vector\n    element of the result.\n \\returns An initialized 256-bit floating-point vector of [4 x double].","bases":[],"vars":[13448951638105159053],"callees":["4146:10-4146:23|3301587233790274607|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17347470049857270783,"detailed_name":"static inline void _mm256_stream_pd(double *__a, __m256d __b)","qual_name_offset":19,"short_name_offset":19,"short_name_size":16,"spell":"3532:1-3532:17|3531:1-3536:2|2|-1","hover":"","comments":"Moves double-precision values from a 256-bit vector of [4 x double]\n   to a 32-byte aligned memory location. To minimize caching, the data is\n   flagged as non-temporal (unlikely to be used again soon).\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVNTPD </c> instruction.\n\n\\param __a\n   A pointer to a 32-byte aligned memory location that will receive the\n   double-precision floating-point values.\n\\param __b\n   A 256-bit vector of [4 x double] containing the values to be moved.","bases":[],"vars":[11340148334864656937,11761261482741940313],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17369452734322937883,"detailed_name":"static inline __m128 _mm_permutevar_ps(__m128 __a, __m128i __c)","qual_name_offset":21,"short_name_offset":21,"short_name_size":17,"spell":"868:1-868:18|867:1-871:2|2|-1","hover":"","comments":"Copies the values stored in a 128-bit vector of [4 x float] as\n   specified by the 128-bit integer vector operand.\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPERMILPS </c> instruction.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\param __c\n   A 128-bit integer vector operand specifying how the values are to be\n   copied. \\n\n   Bits [1:0]: \\n\n     00: Bits [31:0] of the source are copied to bits [31:0] of the\n         returned vector. \\n\n     01: Bits [63:32] of the source are copied to bits [31:0] of the\n         returned vector. \\n\n     10: Bits [95:64] of the source are copied to bits [31:0] of the\n         returned vector. \\n\n     11: Bits [127:96] of the source are copied to bits [31:0] of the\n         returned vector. \\n\n   Bits [33:32]: \\n\n     00: Bits [31:0] of the source are copied to bits [63:32] of the\n         returned vector. \\n\n     01: Bits [63:32] of the source are copied to bits [63:32] of the\n         returned vector. \\n\n     10: Bits [95:64] of the source are copied to bits [63:32] of the\n         returned vector. \\n\n     11: Bits [127:96] of the source are copied to bits [63:32] of the\n         returned vector. \\n\n   Bits [65:64]: \\n\n     00: Bits [31:0] of the source are copied to bits [95:64] of the\n         returned vector. \\n\n     01: Bits [63:32] of the source are copied to bits [95:64] of the\n         returned vector. \\n\n     10: Bits [95:64] of the source are copied to bits [95:64] of the\n         returned vector. \\n\n     11: Bits [127:96] of the source are copied to bits [95:64] of the\n         returned vector. \\n\n   Bits [97:96]: \\n\n     00: Bits [31:0] of the source are copied to bits [127:96] of the\n         returned vector. \\n\n     01: Bits [63:32] of the source are copied to bits [127:96] of the\n         returned vector. \\n\n     10: Bits [95:64] of the source are copied to bits [127:96] of the\n         returned vector. \\n\n     11: Bits [127:96] of the source are copied to bits [127:96] of the\n         returned vector.\n\\returns A 128-bit vector of [4 x float] containing the copied values.","bases":[],"vars":[4759278294127241703,14276981214458966171],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17560309089254757117,"detailed_name":"static inline __m128d _mm_permutevar_pd(__m128d __a, __m128i __c)","qual_name_offset":22,"short_name_offset":22,"short_name_size":17,"spell":"775:1-775:18|774:1-778:2|2|-1","hover":"","comments":"Vector permutations */\n Copies the values in a 128-bit vector of [2 x double] as specified\n    by the 128-bit integer vector operand.\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VPERMILPD </c> instruction.\n\n \\param __a\n    A 128-bit vector of [2 x double].\n \\param __c\n    A 128-bit integer vector operand specifying how the values are to be\n    copied. \\n\n    Bit [1]: \\n\n      0: Bits [63:0] of the source are copied to bits [63:0] of the returned\n         vector. \\n\n      1: Bits [127:64] of the source are copied to bits [63:0] of the\n         returned vector. \\n\n    Bit [65]: \\n\n      0: Bits [63:0] of the source are copied to bits [127:64] of the\n         returned vector. \\n\n      1: Bits [127:64] of the source are copied to bits [127:64] of the\n         returned vector.\n \\returns A 128-bit vector of [2 x double] containing the copied values.","bases":[],"vars":[7372910706050848446,7987786837845907128],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17584787244623878095,"detailed_name":"static inline __m256i _mm256_set1_epi16(short __w)","qual_name_offset":22,"short_name_offset":22,"short_name_size":17,"spell":"4200:1-4200:18|4199:1-4204:2|2|-1","hover":"","comments":"Constructs a 256-bit integer vector of [16 x i16], with each of the\n   16-bit integral vector elements set to the specified 16-bit integral\n   value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSHUFB+VINSERTF128 </c> instruction.\n\n\\param __w\n   A 16-bit integral value used to initialize each vector element of the\n   result.\n\\returns An initialized 256-bit integer vector of [16 x i16].","bases":[],"vars":[14482332044888279900],"callees":["4202:10-4202:26|6965746959808425085|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17691221199746834181,"detailed_name":"static inline __m256d _mm256_castps_pd(__m256 __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":16,"spell":"4333:1-4333:17|4332:1-4336:2|2|-1","hover":"","comments":"Casts a 256-bit floating-point vector of [8 x float] into a 256-bit\n   floating-point vector of [4 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\param __a\n   A 256-bit floating-point vector of [8 x float].\n\\returns A 256-bit floating-point vector of [4 x double] containing the same\n   bitwise pattern as the parameter.","bases":[],"vars":[13813848660256031900],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17897146805883823666,"detailed_name":"static inline __m256 _mm256_div_ps(__m256 __a, __m256 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"188:1-188:14|187:1-191:2|2|-1","hover":"","comments":"Divides two 256-bit vectors of [8 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VDIVPS </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float] containing the dividend.\n\\param __b\n   A 256-bit vector of [8 x float] containing the divisor.\n\\returns A 256-bit vector of [8 x float] containing the quotients of both\n   operands.","bases":[],"vars":[7170983741838481178,10616745135364361184],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17968957311896479539,"detailed_name":"static inline int _mm256_testnzc_pd(__m256d __a, __m256d __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":17,"spell":"2727:1-2727:18|2726:1-2730:2|2|-1","hover":"","comments":"Given two 256-bit floating-point vectors of [4 x double], perform an\n   element-by-element comparison of the double-precision elements in the\n   first source vector and the corresponding elements in the second source\n   vector.\n\n   The EFLAGS register is updated as follows: \\n\n   If there is at least one pair of double-precision elements where the\n   sign-bits of both elements are 1, the ZF flag is set to 0. Otherwise the\n   ZF flag is set to 1. \\n\n   If there is at least one pair of double-precision elements where the\n   sign-bit of the first element is 0 and the sign-bit of the second element\n   is 1, the CF flag is set to 0. Otherwise the CF flag is set to 1. \\n\n   This intrinsic returns 1 if both the ZF and CF flags are set to 0,\n   otherwise it returns 0.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VTESTPD </c> instruction.\n\n\\param __a\n   A 256-bit vector of [4 x double].\n\\param __b\n   A 256-bit vector of [4 x double].\n\\returns 1 if both the ZF and CF flags are set to 0, otherwise returns 0.","bases":[],"vars":[1199549950836655545,6530382430011495568],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":18104068688522248648,"detailed_name":"static inline __m256 _mm256_hadd_ps(__m256 __a, __m256 __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":14,"spell":"699:1-699:15|698:1-702:2|2|-1","hover":"","comments":"Horizontally adds the adjacent pairs of values contained in two\n   256-bit vectors of [8 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VHADDPS </c> instruction.\n\n\\param __a\n   A 256-bit vector of [8 x float] containing one of the source operands.\n   The horizontal sums of the values are returned in the elements with\n   index 0, 1, 4, 5 of a vector of [8 x float].\n\\param __b\n   A 256-bit vector of [8 x float] containing one of the source operands.\n   The horizontal sums of the values are returned in the elements with\n   index 2, 3, 6, 7 of a vector of [8 x float].\n\\returns A 256-bit vector of [8 x float] containing the horizontal sums of\n   both operands.","bases":[],"vars":[11415559032970830495,1549440554438461067],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":18202379728136126441,"detailed_name":"static inline void _mm256_stream_ps(float *__p, __m256 __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":16,"spell":"3553:1-3553:17|3552:1-3557:2|2|-1","hover":"","comments":"Moves single-precision floating point values from a 256-bit vector\n   of [8 x float] to a 32-byte aligned memory location. To minimize\n   caching, the data is flagged as non-temporal (unlikely to be used again\n   soon).\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVNTPS </c> instruction.\n\n\\param __p\n   A pointer to a 32-byte aligned memory location that will receive the\n   single-precision floating point values.\n\\param __a\n   A 256-bit vector of [8 x float] containing the values to be moved.","bases":[],"vars":[8705400878718889113,16902750433737194321],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]}],"usr2type":[{"usr":110,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[6226690575714836394,12599418204897408379,8034988527038136856,5919059398914431676,10665344839810034710,11595595996059001056,2845913291848204611,4795143949819311472,12208746159319657290,1825894176569559340,17428514416715317953,17957390629577246351,9627494364408715069,5033612180607072992,213681546896024705,11593857905116577703,3338507920306428034,15279026921819901164,12781945020551113706,16547913021163937436,9669212246035470839,821296697059900376,8022080868590856724,4036297023863231556,8732047350942464237,18176830296629404020,10557070838087763713,6438061880891780525,321103835450138223,11514620587729535857,8099734298754198593,17250865832376254926,4950239555898479516,8054534678525932810,18318278885403774872,3545558289755231913,1190417650601751192,5745511086325582805,206515564496159755,14224815596867367574,13701890179374868238,13253940345325312068,9628617884012122043,3927003764482039703,4823093104155085250,17378633643760454895,17441986396468547496,18388782281483617390,9936200870176340888,15159897062420731041,3573437806756713333,8106115392276069591,11774324305657868155,3234107744860343388,7331891627906852883,9134092933564331201,6520328572001215917,6112063390054366357,17782425231357461718,15443467406464956164,7030853738482280296,4383595989197401914,5396697004813044413,12972357182371032036,8572558817584507334],"uses":[]},{"usr":113,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[5580088731785690195,3197195279442009523,14515637949666185566,7658063989397041193,14605503875526057804,12417852690340634793,16603458174888966396,10682167903523628796,16859393767160755178,4308978951931191045,11755733973616416897,8658842632755523560,12647569231954362464,5329427211628125113,14649459223587815181,15692636797369665396,13017856661602828957,5020096171138587305,15687896079871004221,10899821240354321715,8802620967140678244,16311361405717174548,17227313666985123274,3709741571355563337,8300443631067287296,10360101721370517079,2856053123126793020,15526355299804109368,8715612203010977618,10475043386327051517,15993669714784355961,701630951997867382,14482332044888279900],"uses":[]},{"usr":114,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[3836154551141219732,4116811409827124088,11271202387893212592,17519769413169829898,3047480451561707922,17501766644516119152,8670420671614041518,16427450407863126,9881940464679087314,12055904271028473422,6681553932312499012,8352192604764642465,6302296666033704011,8479176953699435543,6812419710493534657,14542350984759981564,858327933653583682],"uses":[]},{"usr":116,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[12140997999573101502,16556042718818433412,13252374348839548094,3228505245167765925,881746610722964228,11309383591549680022,692668503491896465,4310274519139983799,3899939247818722605],"uses":[]},{"usr":143,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[17102576319102628428,4888608387128748471,11307299589129326040,13751228838686270187,17637219496212645411,6845910432912648630,11291409771631746624,8837796470580718916,4166028057678723507,15621141783442333472,12920266305272502413,2466526225692021475,17306971409598763580,14503474130685648606,13545502538392900508,17108048506956252706,13575320374811828470,6243498427087948053,4818583763083710199],"uses":[]},{"usr":144,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[6812798898557432506,14406631881819144081,14562835130315178026,13293649522015382331,4457252942544924859,1666434356378047695,8992474496526219299,2313486741204051620,4378755180787062774,13448951638105159053],"uses":[]},{"usr":7790655972871041,"detailed_name":"struct __storeu_ps {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":11,"hover":"","comments":"","spell":"3258:10-3258:21|3258:3-3260:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":8552010312182723298,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["3261:12-3261:23|4|-1"]},{"usr":963758814137229199,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(long long)))) long long __m256i_u","qual_name_offset":74,"short_name_offset":74,"short_name_size":9,"hover":"","comments":"","spell":"40:19-40:28|40:1-40:28|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[16431689392420002126,13949544650701455820,17192948036566471336,15603574808682100089],"uses":["3159:20-3159:29|4|-1","3162:5-3162:14|4|-1","3294:21-3294:30|4|-1","3297:5-3297:14|4|-1"]},{"usr":1190554259452593755,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(float)))) float __v4sf","qual_name_offset":66,"short_name_offset":66,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["870:47-870:53|4|-1","2193:44-2193:50|4|-1","2582:35-2582:41|4|-1","2582:48-2582:54|4|-1","2611:35-2611:41|4|-1","2611:48-2611:54|4|-1","2641:37-2641:43|4|-1","2641:50-2641:56|4|-1","2976:33-2976:39|4|-1","3053:43-3053:49|4|-1","3053:56-3053:62|4|-1","3373:51-3373:57|4|-1","3494:31-3494:37|4|-1","3494:59-3494:65|4|-1","4478:35-4478:41|4|-1","4478:48-4478:54|4|-1","4534:35-4534:41|4|-1","4534:48-4534:54|4|-1","4777:10-4777:66|4|-1","4596:45-4596:51|64|0","4939:44-4939:50|4|-1","4939:58-4939:64|4|-1"]},{"usr":2089679718632112875,"detailed_name":"typedef __attribute__((__vector_size__(2 * sizeof(long long)))) long long __m128i_u","qual_name_offset":74,"short_name_offset":74,"short_name_size":9,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[8019045679124047793,10100413440031151092,4714578165123064664,12152712782518328712],"uses":["4827:21-4827:30|4|-1","4827:49-4827:58|4|-1","4911:22-4911:31|4|-1","4911:44-4911:53|4|-1"]},{"usr":2563026381318422127,"detailed_name":"struct __storeu_pd {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":11,"hover":"","comments":"","spell":"3238:10-3238:21|3238:3-3240:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":13534716185283804435,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["3241:12-3241:23|4|-1"]},{"usr":2865630081197710463,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(double)))) double __m256d","qual_name_offset":68,"short_name_offset":68,"short_name_size":7,"hover":"","comments":"","spell":"35:16-35:23|35:1-35:23|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[9222249529456326799,12025147510083374280,4948749387176087728,2474469902367023819,7374946757061227543,13525513750540409186,3685944004340317701,14655039374183995702,2964690104295858860,7583125847647396315,5984364942335983896,1561564319144714747,1120886639445959575,5862812815118087629,13498851746772802364,8588467416618959926,5865524466117171926,15737365803796601110,14021049441631799919,6847870432837319946,4698694383638956752,6396919218899155062,650648934167651988,8021244504974927973,15847364736064191508,8762115335199459035,12433789699639682409,10988677216789765400,9724428165948275474,2048131513574161634,17430448245836974090,10578147735718510019,3217794340674804951,13170189843848400360,676645441191730041,3909426988127072253,9042224108118778396,10154858937928968100,3762819416991125243,11197815306890570585,5377578305095755219,1562418853583074537,16464958575496190854,9321829262360921859,1199549950836655545,6530382430011495568,1953044064773311386,6552277734089426036,13884131050771337406,12580723205662368252,11761261482741940313,5287007070420313666,5640114703711472036,11501462122562464752,253485522673007704,3515947170135168719],"uses":["59:17-59:24|4|-1","60:15-60:22|4|-1","60:28-60:35|4|-1","62:11-62:18|4|-1","95:17-95:24|4|-1","96:15-96:22|4|-1","96:28-96:35|4|-1","98:11-98:18|4|-1","132:17-132:24|4|-1","133:18-133:25|4|-1","133:31-133:38|4|-1","135:11-135:18|4|-1","169:17-169:24|4|-1","170:15-170:22|4|-1","170:28-170:35|4|-1","172:11-172:18|4|-1","206:17-206:24|4|-1","207:15-207:22|4|-1","207:28-207:35|4|-1","209:11-209:18|4|-1","244:17-244:24|4|-1","245:15-245:22|4|-1","245:28-245:35|4|-1","247:11-247:18|4|-1","281:17-281:24|4|-1","282:15-282:22|4|-1","282:28-282:35|4|-1","284:11-284:18|4|-1","316:17-316:24|4|-1","317:16-317:23|4|-1","319:11-319:18|4|-1","519:17-519:24|4|-1","520:15-520:22|4|-1","520:28-520:35|4|-1","522:11-522:18|4|-1","558:17-558:24|4|-1","559:18-559:25|4|-1","559:31-559:38|4|-1","561:11-561:18|4|-1","597:17-597:24|4|-1","598:14-598:21|4|-1","598:27-598:34|4|-1","600:11-600:18|4|-1","633:17-633:24|4|-1","634:15-634:22|4|-1","634:28-634:35|4|-1","636:11-636:18|4|-1","675:17-675:24|4|-1","676:16-676:23|4|-1","676:29-676:36|4|-1","678:11-678:18|4|-1","721:17-721:24|4|-1","722:16-722:23|4|-1","722:29-722:36|4|-1","724:11-724:18|4|-1","813:17-813:24|4|-1","814:22-814:29|4|-1","816:11-816:18|4|-1","1382:17-1382:24|4|-1","1383:18-1383:25|4|-1","1383:31-1383:38|4|-1","1383:44-1383:51|4|-1","1385:11-1385:18|4|-1","2128:17-2128:24|4|-1","2131:11-2131:18|4|-1","2160:17-2160:24|4|-1","2190:17-2190:24|4|-1","2193:11-2193:18|4|-1","2208:21-2208:28|4|-1","2225:20-2225:27|4|-1","2257:18-2257:25|4|-1","2362:17-2362:24|4|-1","2363:19-2363:26|4|-1","2385:17-2385:24|4|-1","2386:20-2386:27|4|-1","2386:33-2386:40|4|-1","2407:17-2407:24|4|-1","2408:20-2408:27|4|-1","2408:33-2408:40|4|-1","2668:17-2668:24|4|-1","2668:30-2668:37|4|-1","2697:17-2697:24|4|-1","2697:30-2697:37|4|-1","2727:19-2727:26|4|-1","2727:32-2727:39|4|-1","2913:20-2913:27|4|-1","2991:17-2991:24|4|-1","2995:25-2995:32|4|-1","3029:17-3029:24|4|-1","3033:11-3033:18|4|-1","3069:17-3069:24|4|-1","3072:18-3072:25|4|-1","3102:17-3102:24|4|-1","3200:30-3200:37|4|-1","3202:5-3202:12|4|-1","3236:31-3236:38|4|-1","3345:17-3345:24|4|-1","3348:11-3348:18|4|-1","3468:47-3468:54|4|-1","3532:31-3532:38|4|-1","3567:19-3567:26|4|-1","3570:11-3570:18|4|-1","3620:17-3620:24|4|-1","3623:25-3623:32|4|-1","3886:17-3886:24|4|-1","4143:17-4143:24|4|-1","4253:17-4253:24|4|-1","4256:25-4256:32|4|-1","4299:18-4299:25|4|-1","4316:21-4316:28|4|-1","4332:17-4332:24|4|-1","4335:11-4335:18|4|-1","4383:17-4383:24|4|-1","4386:11-4386:18|4|-1","4401:24-4401:31|4|-1","4454:17-4454:24|4|-1","4513:17-4513:24|4|-1","4801:17-4801:24|4|-1","4804:3-4804:10|4|-1","4805:10-4805:66|4|-1","4633:4-4633:11|64|0","4633:54-4633:61|64|0","4882:60-4882:67|4|-1","4888:12-4888:41|4|-1","4725:55-4725:62|64|0","4957:17-4957:24|4|-1","4960:11-4960:18|4|-1","5023:17-5023:24|4|-1","5026:11-5026:18|4|-1"]},{"usr":3216147351524767878,"detailed_name":"typedef __attribute__((__vector_size__(2 * sizeof(long long)))) long long __v2di","qual_name_offset":74,"short_name_offset":74,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["777:61-777:67|4|-1","3324:67-3324:73|4|-1","3446:46-3446:52|4|-1","4497:35-4497:41|4|-1","4497:48-4497:54|4|-1","4552:35-4552:41|4|-1","4552:48-4552:54|4|-1","4980:45-4980:51|4|-1","4980:59-4980:65|4|-1"]},{"usr":3601535423067916847,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(long long)))) long long __v4di","qual_name_offset":74,"short_name_offset":74,"short_name_size":6,"hover":"","comments":"","spell":"19:19-19:25|19:1-19:25|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[],"uses":["816:64-816:70|4|-1","2843:36-2843:42|4|-1","2843:49-2843:55|4|-1","2869:36-2869:42|4|-1","2869:49-2869:55|4|-1","2896:38-2896:44|4|-1","2896:51-2896:57|4|-1","3349:49-3349:55|4|-1","3470:49-3470:55|4|-1","3514:11-3514:17|4|-1","3860:34-3860:40|4|-1","4283:34-4283:40|4|-1","4436:35-4436:41|4|-1","4436:48-4436:54|4|-1"]},{"usr":3968031789808340347,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(double)))) double __v4df","qual_name_offset":68,"short_name_offset":68,"short_name_size":6,"hover":"","comments":"","spell":"17:16-17:22|17:1-17:22|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[],"uses":["62:21-62:27|4|-1","62:33-62:39|4|-1","98:21-98:27|4|-1","98:33-98:39|4|-1","135:47-135:53|4|-1","135:60-135:66|4|-1","172:21-172:27|4|-1","172:33-172:39|4|-1","209:44-209:50|4|-1","209:57-209:63|4|-1","247:44-247:50|4|-1","247:57-247:63|4|-1","284:21-284:27|4|-1","284:35-284:41|4|-1","319:45-319:51|4|-1","678:45-678:51|4|-1","678:58-678:64|4|-1","724:45-724:51|4|-1","724:58-724:64|4|-1","816:51-816:57|4|-1","1386:6-1386:12|4|-1","1386:19-1386:25|4|-1","1386:32-1386:38|4|-1","2162:46-2162:52|4|-1","2210:48-2210:54|4|-1","2227:47-2227:53|4|-1","2365:35-2365:41|4|-1","2365:48-2365:54|4|-1","2388:35-2388:41|4|-1","2388:48-2388:54|4|-1","2410:35-2410:41|4|-1","2410:48-2410:54|4|-1","2670:38-2670:44|4|-1","2670:51-2670:57|4|-1","2699:38-2699:44|4|-1","2699:51-2699:57|4|-1","2729:40-2729:46|4|-1","2729:53-2729:59|4|-1","2915:38-2915:44|4|-1","2995:34-2995:40|4|-1","3348:55-3348:61|4|-1","3470:34-3470:40|4|-1","3470:62-3470:68|4|-1","3534:11-3534:17|4|-1","4403:35-4403:41|4|-1","4403:48-4403:54|4|-1","4805:10-4805:66|4|-1","4633:46-4633:52|64|0","4888:12-4888:41|4|-1","4725:47-4725:53|64|0"]},{"usr":5480899429380913579,"detailed_name":"struct __loadu_si256 {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":13,"hover":"","comments":"","spell":"3161:10-3161:23|3161:3-3163:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":13949544650701455820,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["3164:25-3164:38|4|-1"]},{"usr":6380821739625454513,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(unsigned long long)))) unsigned long long __v4du","qual_name_offset":92,"short_name_offset":92,"short_name_size":6,"hover":"","comments":"Unsigned types","spell":"25:28-25:34|25:1-25:34|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[],"uses":["522:21-522:27|4|-1","522:35-522:41|4|-1","561:22-561:28|4|-1","561:36-561:42|4|-1","600:21-600:27|4|-1","600:35-600:41|4|-1","636:21-636:27|4|-1","636:35-636:41|4|-1"]},{"usr":6607387554866593939,"detailed_name":"typedef __attribute__((__vector_size__(32 * sizeof(char)))) char __v32qi","qual_name_offset":65,"short_name_offset":65,"short_name_size":7,"hover":"","comments":"","spell":"22:14-22:21|22:1-22:21|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[],"uses":["3832:34-3832:41|4|-1"]},{"usr":6694484644766561266,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(int)))) int __v4si","qual_name_offset":62,"short_name_offset":62,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["870:60-870:66|4|-1","2131:44-2131:50|4|-1","3373:66-3373:72|4|-1","3494:46-3494:52|4|-1","4830:10-4830:72|4|-1","4672:46-4672:52|64|0"]},{"usr":7305199130910643569,"detailed_name":"typedef __attribute__((__vector_size__(16 * sizeof(short)))) short __v16hi","qual_name_offset":67,"short_name_offset":67,"short_name_size":7,"hover":"","comments":"","spell":"21:15-21:22|21:1-21:22|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[],"uses":["3745:34-3745:41|4|-1"]},{"usr":7500235701394295050,"detailed_name":"struct __loadu_pd {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":10,"hover":"","comments":"","spell":"3105:10-3105:20|3105:3-3107:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":959149339746202716,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["3108:25-3108:35|4|-1"]},{"usr":8026796411058150435,"detailed_name":"struct __loadu_ps {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":10,"hover":"","comments":"","spell":"3125:10-3125:20|3125:3-3127:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":13993890089283256986,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["3128:25-3128:35|4|-1"]},{"usr":8417371239351140671,"detailed_name":"typedef __v4df __v4df_aligned","qual_name_offset":15,"short_name_offset":15,"short_name_size":14,"hover":"","comments":"","spell":"3534:18-3534:32|3534:3-3534:32|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":3968031789808340347,"kind":252,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["3535:32-3535:46|4|-1","3535:53-3535:67|4|-1"]},{"usr":8789764134112457653,"detailed_name":"typedef __v8sf __v8sf_aligned","qual_name_offset":15,"short_name_offset":15,"short_name_size":14,"hover":"","comments":"","spell":"3555:18-3555:32|3555:3-3555:32|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":9555539799333271727,"kind":252,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["3556:32-3556:46|4|-1","3556:53-3556:67|4|-1"]},{"usr":9180739519895603189,"detailed_name":"typedef __attribute__((__vector_size__(8 * sizeof(int)))) int __v8si","qual_name_offset":62,"short_name_offset":62,"short_name_size":6,"hover":"","comments":"","spell":"20:13-20:19|20:1-20:19|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[15220317073064232684],"uses":["961:63-961:69|4|-1","2146:43-2146:49|4|-1","2275:2-2275:8|4|-1","2275:16-2275:22|4|-1","3397:69-3397:75|4|-1","3422:49-3422:55|4|-1","3695:34-3695:40|4|-1","4830:10-4830:72|4|-1","4671:46-4671:52|64|0","4917:12-4917:44|4|-1","4749:47-4749:53|64|0"]},{"usr":9307668512027311864,"detailed_name":"typedef __attribute__((__vector_size__(2 * sizeof(long long)))) long long __m128i","qual_name_offset":74,"short_name_offset":74,"short_name_size":7,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[7987786837845907128,14276981214458966171,4319016179799286914,7840043676515985156,3572078790820744397,6409136369128336008,15457666497956532130,7645168059632646279,10198540028105004485,15584551201893785399,15677541319891780587,16423830134157668871,2676632035575211006,13580676544418747509],"uses":["775:32-775:39|4|-1","868:31-868:38|4|-1","2129:20-2129:27|4|-1","2207:17-2207:24|4|-1","2210:11-2210:18|4|-1","2224:17-2224:24|4|-1","2227:11-2227:18|4|-1","3322:36-3322:43|4|-1","3371:35-3371:42|4|-1","3444:31-3444:38|4|-1","3492:30-3492:37|4|-1","4433:17-4433:24|4|-1","4495:24-4495:31|4|-1","4550:24-4550:31|4|-1","4830:10-4830:72|4|-1","4672:54-4672:61|64|0","4913:3-4913:10|4|-1","4917:12-4917:44|4|-1","4749:4-4749:11|64|0","4978:19-4978:26|4|-1","4978:33-4978:40|4|-1","5045:20-5045:27|4|-1","5045:34-5045:41|4|-1"]},{"usr":9334574788434290726,"detailed_name":"typedef __attribute__((__vector_size__(8 * sizeof(unsigned int)))) unsigned int __v8su","qual_name_offset":80,"short_name_offset":80,"short_name_size":6,"hover":"","comments":"","spell":"26:22-26:28|26:1-26:28|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[],"uses":["540:20-540:26|4|-1","540:34-540:40|4|-1","582:21-582:27|4|-1","582:35-582:41|4|-1","618:20-618:26|4|-1","618:34-618:40|4|-1","654:20-654:26|4|-1","654:34-654:40|4|-1"]},{"usr":9555539799333271727,"detailed_name":"typedef __attribute__((__vector_size__(8 * sizeof(float)))) float __v8sf","qual_name_offset":66,"short_name_offset":66,"short_name_size":6,"hover":"","comments":"","spell":"18:15-18:21|18:1-18:21|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[],"uses":["80:20-80:26|4|-1","80:32-80:38|4|-1","116:20-116:26|4|-1","116:32-116:38|4|-1","154:46-154:52|4|-1","154:59-154:65|4|-1","190:20-190:26|4|-1","190:32-190:38|4|-1","228:43-228:49|4|-1","228:56-228:62|4|-1","266:43-266:49|4|-1","266:56-266:62|4|-1","302:20-302:26|4|-1","302:34-302:40|4|-1","336:44-336:50|4|-1","353:45-353:51|4|-1","370:43-370:49|4|-1","701:44-701:50|4|-1","701:57-701:63|4|-1","747:44-747:50|4|-1","747:57-747:63|4|-1","961:50-961:56|4|-1","1414:6-1414:12|4|-1","1414:19-1414:25|4|-1","1414:32-1414:38|4|-1","2177:47-2177:53|4|-1","2243:48-2243:54|4|-1","2318:35-2318:41|4|-1","2318:48-2318:54|4|-1","2343:35-2343:41|4|-1","2343:48-2343:54|4|-1","2437:35-2437:41|4|-1","2437:48-2437:54|4|-1","2464:35-2464:41|4|-1","2464:48-2464:54|4|-1","2758:38-2758:44|4|-1","2758:51-2758:57|4|-1","2787:38-2787:44|4|-1","2787:51-2787:57|4|-1","2817:40-2817:46|4|-1","2817:53-2817:59|4|-1","2933:38-2933:44|4|-1","3014:33-3014:39|4|-1","3397:54-3397:60|4|-1","3422:34-3422:40|4|-1","3422:62-3422:68|4|-1","3555:11-3555:17|4|-1","4420:35-4420:41|4|-1","4420:48-4420:54|4|-1","4777:10-4777:66|4|-1","4595:45-4595:51|64|0","4859:12-4859:41|4|-1","4701:46-4701:52|64|0"]},{"usr":9708894019335714780,"detailed_name":"typedef __attribute__((__vector_size__(32 * sizeof(unsigned char)))) unsigned char __v32qu","qual_name_offset":83,"short_name_offset":83,"short_name_size":7,"hover":"","comments":"","spell":"28:23-28:30|28:1-28:30|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[],"uses":[]},{"usr":9772923948255712816,"detailed_name":"typedef __attribute__((__vector_size__(32 * sizeof(signed char)))) signed char __v32qs","qual_name_offset":79,"short_name_offset":79,"short_name_size":7,"hover":"","comments":"We need an explicitly signed variant for char. Note that this shouldn't\nappear in the interface though.","spell":"32:21-32:28|32:1-32:28|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[],"uses":[]},{"usr":10512623301411600543,"detailed_name":"struct __storeu_si256 {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":14,"hover":"","comments":"","spell":"3296:10-3296:24|3296:3-3298:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":15603574808682100089,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["3299:12-3299:26|4|-1"]},{"usr":11985984413760502591,"detailed_name":"typedef __attribute__((__vector_size__(2 * sizeof(double)))) double __v2df","qual_name_offset":68,"short_name_offset":68,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["777:48-777:54|4|-1","2494:35-2494:41|4|-1","2494:48-2494:54|4|-1","2523:35-2523:41|4|-1","2523:48-2523:54|4|-1","2553:37-2553:43|4|-1","2553:50-2553:56|4|-1","3033:44-3033:50|4|-1","3033:57-3033:63|4|-1","3324:52-3324:58|4|-1","3446:31-3446:37|4|-1","3446:59-3446:65|4|-1","4457:35-4457:41|4|-1","4457:48-4457:54|4|-1","4516:35-4516:41|4|-1","4516:48-4516:54|4|-1","4805:10-4805:66|4|-1","4634:46-4634:52|64|0","4960:45-4960:51|4|-1","4960:59-4960:65|4|-1"]},{"usr":12121053416515032001,"detailed_name":"typedef __attribute__((__vector_size__(8 * sizeof(float)))) float __m256_u","qual_name_offset":66,"short_name_offset":66,"short_name_size":8,"hover":"","comments":"","spell":"38:15-38:23|38:1-38:23|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[13993890089283256986,8552010312182723298],"uses":["3126:5-3126:13|4|-1","3259:5-3259:13|4|-1"]},{"usr":12772086925897411121,"detailed_name":"typedef __attribute__((__vector_size__(16 * sizeof(unsigned short)))) unsigned short __v16hu","qual_name_offset":85,"short_name_offset":85,"short_name_size":7,"hover":"","comments":"","spell":"27:24-27:31|27:1-27:31|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[],"uses":[]},{"usr":13081541567295835539,"detailed_name":"typedef __attribute__((__vector_size__(8 * sizeof(float)))) float __m256","qual_name_offset":66,"short_name_offset":66,"short_name_size":6,"hover":"","comments":"","spell":"34:15-34:21|34:1-34:21|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[5418809840437461790,14374893408067279935,4993794616416828971,16966127013115016121,14247327028298677035,913212542138745740,7170983741838481178,10616745135364361184,13933408055997933983,627191890354629868,9847067311526148416,18188277740968592371,1349639312735575361,2605044072914138101,15716332471662446384,4088042849912524190,5374055701991483869,5578586102598318005,2458916465126466551,6706092420169926115,13130664092884525348,8507501389363273754,1589446482710208987,671395935439664840,6329654036465410961,11415559032970830495,1549440554438461067,17790889814304223431,16797829072747230912,12377079621887342140,14197043188711012359,15744590540162263351,14476516389913108219,1625001916785748174,74315022512695328,6793832726570410194,2982462536557472991,3062962882641280945,3910774761898683606,11619414045968264855,15207419717411552912,5401901729218514460,18185144457440858021,4923690922538357402,5440150667286407542,14078975541802782947,17946509790129828662,14920090758698305857,18119665317715259329,16635020134563077892,1268029534355076057,15717837998479927446,16902750433737194321,13813848660256031900,5122402145048803207,4008042167316503958,3086859440412579089,6206188343405704881],"uses":["77:17-77:23|4|-1","78:15-78:21|4|-1","78:27-78:33|4|-1","80:11-80:17|4|-1","113:17-113:23|4|-1","114:15-114:21|4|-1","114:27-114:33|4|-1","116:11-116:17|4|-1","151:17-151:23|4|-1","152:18-152:24|4|-1","152:30-152:36|4|-1","154:11-154:17|4|-1","187:17-187:23|4|-1","188:15-188:21|4|-1","188:27-188:33|4|-1","190:11-190:17|4|-1","225:17-225:23|4|-1","226:15-226:21|4|-1","226:27-226:33|4|-1","228:11-228:17|4|-1","263:17-263:23|4|-1","264:15-264:21|4|-1","264:27-264:33|4|-1","266:11-266:17|4|-1","299:17-299:23|4|-1","300:15-300:21|4|-1","300:27-300:33|4|-1","302:11-302:17|4|-1","333:17-333:23|4|-1","334:16-334:22|4|-1","336:11-336:17|4|-1","350:17-350:23|4|-1","351:17-351:23|4|-1","353:11-353:17|4|-1","367:17-367:23|4|-1","368:15-368:21|4|-1","370:11-370:17|4|-1","537:17-537:23|4|-1","538:15-538:21|4|-1","538:27-538:33|4|-1","540:11-540:17|4|-1","579:17-579:23|4|-1","580:18-580:24|4|-1","580:30-580:36|4|-1","582:11-582:17|4|-1","615:17-615:23|4|-1","616:14-616:20|4|-1","616:26-616:32|4|-1","618:11-618:17|4|-1","651:17-651:23|4|-1","652:15-652:21|4|-1","652:27-652:33|4|-1","654:11-654:17|4|-1","698:17-698:23|4|-1","699:16-699:22|4|-1","699:28-699:34|4|-1","701:11-701:17|4|-1","744:17-744:23|4|-1","745:16-745:22|4|-1","745:28-745:34|4|-1","747:11-747:17|4|-1","958:17-958:23|4|-1","959:22-959:28|4|-1","961:11-961:17|4|-1","1410:17-1410:23|4|-1","1411:18-1411:24|4|-1","1411:30-1411:36|4|-1","1411:42-1411:48|4|-1","1413:11-1413:17|4|-1","2143:17-2143:23|4|-1","2146:11-2146:17|4|-1","2175:20-2175:26|4|-1","2241:21-2241:27|4|-1","2290:18-2290:24|4|-1","2315:17-2315:23|4|-1","2316:20-2316:26|4|-1","2340:17-2340:23|4|-1","2341:20-2341:26|4|-1","2434:17-2434:23|4|-1","2435:20-2435:26|4|-1","2435:32-2435:38|4|-1","2461:17-2461:23|4|-1","2462:20-2462:26|4|-1","2462:32-2462:38|4|-1","2756:17-2756:23|4|-1","2756:29-2756:35|4|-1","2785:17-2785:23|4|-1","2785:29-2785:35|4|-1","2815:19-2815:25|4|-1","2815:31-2815:37|4|-1","2931:20-2931:26|4|-1","3010:17-3010:23|4|-1","3014:25-3014:31|4|-1","3049:17-3049:23|4|-1","3053:11-3053:17|4|-1","3085:17-3085:23|4|-1","3088:18-3088:24|4|-1","3122:17-3122:23|4|-1","3218:29-3218:35|4|-1","3220:5-3220:11|4|-1","3256:30-3256:36|4|-1","3394:17-3394:23|4|-1","3397:11-3397:17|4|-1","3420:46-3420:52|4|-1","3553:30-3553:36|4|-1","3580:19-3580:25|4|-1","3583:11-3583:17|4|-1","3659:17-3659:23|4|-1","3663:25-3663:31|4|-1","3926:17-3926:23|4|-1","4162:17-4162:23|4|-1","4267:17-4267:23|4|-1","4270:25-4270:31|4|-1","4298:17-4298:23|4|-1","4301:11-4301:17|4|-1","4333:18-4333:24|4|-1","4350:21-4350:27|4|-1","4366:17-4366:23|4|-1","4369:11-4369:17|4|-1","4418:24-4418:30|4|-1","4475:17-4475:23|4|-1","4531:17-4531:23|4|-1","4773:17-4773:23|4|-1","4776:3-4776:9|4|-1","4777:10-4777:66|4|-1","4595:4-4595:10|64|0","4595:53-4595:59|64|0","4853:57-4853:63|4|-1","4859:12-4859:41|4|-1","4701:54-4701:60|64|0","4936:17-4936:23|4|-1","4939:11-4939:17|4|-1","5000:17-5000:23|4|-1"]},{"usr":14011233385592347370,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(double)))) double __m256d_u","qual_name_offset":68,"short_name_offset":68,"short_name_size":9,"hover":"","comments":"","spell":"39:16-39:25|39:1-39:25|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[959149339746202716,13534716185283804435],"uses":["3106:5-3106:14|4|-1","3239:5-3239:14|4|-1"]},{"usr":14026837562863653301,"detailed_name":"typedef __v4di __v4di_aligned","qual_name_offset":15,"short_name_offset":15,"short_name_size":14,"hover":"","comments":"","spell":"3514:18-3514:32|3514:3-3514:32|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":3601535423067916847,"kind":252,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["3515:32-3515:46|4|-1","3515:53-3515:67|4|-1"]},{"usr":15682930942610409926,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(float)))) float __m128","qual_name_offset":66,"short_name_offset":66,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[4759278294127241703,17471428438920931943,8242641200478166408,10537551406531401329,11099968121568823358,12835707240837604588,13676224519408112233,8020508701263912276,16873814322148243152,17294947406163535362,12664458703230360798,6351523367847866561,9874385810227767128,1008185880859419718,9671974309075374315,9906014245850660430,816538603630654007,9726229206834834935],"uses":["867:17-867:23|4|-1","868:19-868:25|4|-1","870:11-870:17|4|-1","2159:17-2159:23|4|-1","2162:11-2162:17|4|-1","2191:17-2191:23|4|-1","2580:14-2580:20|4|-1","2580:26-2580:32|4|-1","2609:14-2609:20|4|-1","2609:26-2609:32|4|-1","2639:16-2639:22|4|-1","2639:28-2639:34|4|-1","2972:17-2972:23|4|-1","2976:25-2976:31|4|-1","3050:21-3050:27|4|-1","3052:3-3052:9|4|-1","3370:17-3370:23|4|-1","3373:11-3373:17|4|-1","3492:43-3492:49|4|-1","4417:17-4417:23|4|-1","4476:24-4476:30|4|-1","4532:24-4532:30|4|-1","4777:10-4777:66|4|-1","4596:53-4596:59|64|0","4855:3-4855:9|4|-1","4859:12-4859:41|4|-1","4701:4-4701:10|64|0","4937:18-4937:24|4|-1","4937:31-4937:37|4|-1","5001:19-5001:25|4|-1","5001:32-5001:38|4|-1"]},{"usr":17014917149991124568,"detailed_name":"typedef __attribute__((__vector_size__(2 * sizeof(double)))) double __m128d","qual_name_offset":68,"short_name_offset":68,"short_name_size":7,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[7372910706050848446,17176557586750703511,16257280113503626896,8474327445942756380,14647228367055599119,4663157961711375105,7802534020490370350,11248703719764352046,11683484194881706235,8471553230657995995,15824147968910391680,4504121449950229406,14174083959383290298,1056340503249273152,1429914340660366847,68286189983206147,10911749676076869400],"uses":["774:17-774:24|4|-1","775:19-775:26|4|-1","777:11-777:18|4|-1","2492:14-2492:21|4|-1","2492:27-2492:34|4|-1","2521:14-2521:21|4|-1","2521:27-2521:34|4|-1","2551:16-2551:23|4|-1","2551:29-2551:36|4|-1","3030:21-3030:28|4|-1","3032:3-3032:10|4|-1","3321:17-3321:24|4|-1","3324:11-3324:18|4|-1","3444:44-3444:51|4|-1","4400:17-4400:24|4|-1","4455:24-4455:31|4|-1","4514:24-4514:31|4|-1","4805:10-4805:66|4|-1","4634:54-4634:61|64|0","4884:3-4884:10|4|-1","4888:12-4888:41|4|-1","4725:4-4725:11|64|0","4958:19-4958:26|4|-1","4958:33-4958:40|4|-1","5024:20-5024:27|4|-1","5024:34-5024:41|4|-1"]},{"usr":17840313551808425050,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(long long)))) long long __m256i","qual_name_offset":74,"short_name_offset":74,"short_name_size":7,"hover":"","comments":"","spell":"36:19-36:26|36:1-36:26|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[8255828845991446946,14567059192339094584,14821299653953911438,16511926026693826689,10634887611038698922,14077681865366422160,16546506519315712302,10144821412567838127,13405384482057452537,5030226165957730999,427527916803276467,11056073784661575414,15043757424995104432,16988273303103967001,14844397178017976381,8021400058675431404,17607897440866242458,12898139600927988772,900438559425981032,17275376664098899143,13658625166847224564,17542347944076795821,17674565849258406258,7655446596106995634,1661497143321951655,5431059349876086391],"uses":["814:35-814:42|4|-1","959:34-959:41|4|-1","2144:20-2144:27|4|-1","2174:17-2174:24|4|-1","2177:11-2177:18|4|-1","2240:17-2240:24|4|-1","2243:11-2243:18|4|-1","2273:22-2273:29|4|-1","2841:20-2841:27|4|-1","2841:33-2841:40|4|-1","2867:20-2867:27|4|-1","2867:33-2867:40|4|-1","2894:22-2894:29|4|-1","2894:35-2894:42|4|-1","3142:17-3142:24|4|-1","3143:19-3143:26|4|-1","3158:17-3158:24|4|-1","3179:17-3179:24|4|-1","3180:20-3180:27|4|-1","3182:11-3182:18|4|-1","3277:20-3277:27|4|-1","3277:34-3277:41|4|-1","3294:37-3294:44|4|-1","3346:39-3346:46|4|-1","3395:38-3395:45|4|-1","3420:33-3420:40|4|-1","3468:34-3468:41|4|-1","3512:21-3512:28|4|-1","3512:35-3512:42|4|-1","3593:19-3593:26|4|-1","3596:11-3596:18|4|-1","3691:17-3691:24|4|-1","3695:25-3695:32|4|-1","3739:17-3739:24|4|-1","3745:25-3745:32|4|-1","3822:17-3822:24|4|-1","3832:25-3832:32|4|-1","3857:17-3857:24|4|-1","3860:25-3860:32|4|-1","3958:17-3958:24|4|-1","4006:17-4006:24|4|-1","4091:17-4091:24|4|-1","4124:17-4124:24|4|-1","4181:17-4181:24|4|-1","4199:17-4199:24|4|-1","4217:17-4217:24|4|-1","4238:17-4238:24|4|-1","4280:17-4280:24|4|-1","4283:25-4283:32|4|-1","4315:17-4315:24|4|-1","4318:11-4318:18|4|-1","4349:17-4349:24|4|-1","4352:11-4352:18|4|-1","4367:21-4367:28|4|-1","4384:21-4384:28|4|-1","4434:24-4434:31|4|-1","4494:17-4494:24|4|-1","4549:17-4549:24|4|-1","4826:17-4826:24|4|-1","4829:3-4829:10|4|-1","4830:10-4830:72|4|-1","4671:4-4671:11|64|0","4671:54-4671:61|64|0","4911:66-4911:73|4|-1","4917:12-4917:44|4|-1","4749:55-4749:62|64|0","4977:17-4977:24|4|-1","4980:11-4980:18|4|-1","5044:17-5044:24|4|-1","5047:11-5047:18|4|-1"]}],"usr2var":[{"usr":16427450407863126,"detailed_name":"int __i7","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"3693:52-3693:56|3693:48-3693:56|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3695:43-3695:47|12|-1"]},{"usr":68286189983206147,"detailed_name":"__m128d __lo","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"5024:28-5024:32|5024:20-5024:32|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["5026:42-5026:46|12|-1"]},{"usr":74315022512695328,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2241:28-2241:31|2241:21-2241:31|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2243:56-2243:59|12|-1"]},{"usr":206515564496159755,"detailed_name":"char __b25","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4093:47-4093:52|4093:42-4093:52|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4104:33-4104:38|12|-1"]},{"usr":213681546896024705,"detailed_name":"char __b17","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3826:46-3826:51|3826:41-3826:51|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3835:12-3835:17|12|-1"]},{"usr":253485522673007704,"detailed_name":"__m256d __v256","qual_name_offset":8,"short_name_offset":8,"short_name_size":6,"hover":"__m256d __v256 = _mm256_castpd128_pd256(_mm_loadu_pd(__addr_lo))","comments":"","spell":"4804:11-4804:17|4804:3-4804:67|2|-1","type":2865630081197710463,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["4805:31-4805:37|12|-1","4805:31-4805:37|64|0"]},{"usr":321103835450138223,"detailed_name":"char __b03","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3830:22-3830:27|3830:17-3830:27|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3833:26-3833:31|12|-1"]},{"usr":402851668099832703,"detailed_name":"_mm256_insertf128_ps","qual_name_offset":0,"short_name_offset":0,"short_name_size":20,"hover":"#define _mm256_insertf128_ps(V1, V2, M) \\\n  (__m256)__builtin_ia32_vinsertf128_ps256((__v8sf)(__m256)(V1), \\\n                                           (__v4sf)(__m128)(V2), (int)(M))","comments":"","spell":"4594:9-4594:29|4594:9-4596:75|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":["4777:10-4777:30|64|-1"]},{"usr":427527916803276467,"detailed_name":"const __m256i *__p","qual_name_offset":15,"short_name_offset":15,"short_name_size":3,"hover":"","comments":"","spell":"3143:34-3143:37|3143:19-3143:37|1026|-1","type":17840313551808425050,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3145:11-3145:14|12|-1"]},{"usr":456281515583487379,"detailed_name":"_mm256_blend_pd","qual_name_offset":0,"short_name_offset":0,"short_name_size":15,"hover":"#define _mm256_blend_pd(V1, V2, M) \\\n  (__m256d)__builtin_ia32_blendpd256((__v4df)(__m256d)(V1), \\\n                                     (__v4df)(__m256d)(V2), (int)(M))","comments":"","spell":"1329:9-1329:24|1329:9-1331:70|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":627191890354629868,"detailed_name":"__m256 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"226:34-226:37|226:27-226:37|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["228:63-228:66|12|-1"]},{"usr":650648934167651988,"detailed_name":"__m256d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"634:36-634:39|634:28-634:39|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["636:42-636:45|12|-1"]},{"usr":671395935439664840,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"652:22-652:25|652:15-652:25|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["654:27-654:30|12|-1"]},{"usr":676645441191730041,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2257:26-2257:29|2257:18-2257:29|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2259:9-2259:12|4|-1"]},{"usr":692668503491896465,"detailed_name":"long long __c","qual_name_offset":10,"short_name_offset":10,"short_name_size":3,"hover":"","comments":"","spell":"4125:60-4125:63|4125:50-4125:63|1026|-1","type":116,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4127:33-4127:36|12|-1"]},{"usr":701630951997867382,"detailed_name":"short __w00","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"4010:53-4010:58|4010:47-4010:58|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4012:27-4012:32|12|-1"]},{"usr":815608816178088331,"detailed_name":"float *__addr_hi","qual_name_offset":7,"short_name_offset":7,"short_name_size":9,"hover":"","comments":"","spell":"4853:28-4853:37|4853:21-4853:37|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4860:17-4860:26|12|-1"]},{"usr":816538603630654007,"detailed_name":"__m128 __lo","qual_name_offset":7,"short_name_offset":7,"short_name_size":4,"hover":"","comments":"","spell":"5001:26-5001:30|5001:19-5001:30|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["5003:32-5003:36|12|-1"]},{"usr":821296697059900376,"detailed_name":"char __b10","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3828:34-3828:39|3828:29-3828:39|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3834:19-3834:24|12|-1"]},{"usr":858327933653583682,"detailed_name":"int __i","qual_name_offset":4,"short_name_offset":4,"short_name_size":3,"hover":"","comments":"","spell":"4182:23-4182:26|4182:19-4182:26|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4184:27-4184:30|12|-1","4184:32-4184:35|12|-1","4184:37-4184:40|12|-1","4184:42-4184:45|12|-1","4184:47-4184:50|12|-1","4184:52-4184:55|12|-1","4184:57-4184:60|12|-1","4184:62-4184:65|12|-1"]},{"usr":881746610722964228,"detailed_name":"long long __a","qual_name_offset":10,"short_name_offset":10,"short_name_size":3,"hover":"","comments":"","spell":"4125:30-4125:33|4125:20-4125:33|1026|-1","type":116,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4127:43-4127:46|12|-1"]},{"usr":900438559425981032,"detailed_name":"__m256i __m","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3468:42-3468:45|3468:34-3468:45|1026|-1","type":17840313551808425050,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3470:56-3470:59|12|-1"]},{"usr":913212542138745740,"detailed_name":"__m256 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"152:37-152:40|152:30-152:40|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["154:66-154:69|12|-1"]},{"usr":959149339746202716,"detailed_name":"__m256d_u _mm256_loadu_pd(const double *)::__loadu_pd::__v","qual_name_offset":10,"short_name_offset":55,"short_name_size":3,"hover":"","comments":"","spell":"3106:15-3106:18|3106:5-3106:18|2|-1","type":14011233385592347370,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["3108:43-3108:46|12|-1"]},{"usr":1008185880859419718,"detailed_name":"__m128 __v128","qual_name_offset":7,"short_name_offset":7,"short_name_size":6,"hover":"","comments":"","spell":"4855:10-4855:16|4855:3-4855:16|2|-1","type":15682930942610409926,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["4857:3-4857:9|20|-1","4858:28-4858:34|12|-1","4859:3-4859:9|20|-1","4860:28-4860:34|12|-1"]},{"usr":1056340503249273152,"detailed_name":"__m128d __hi","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"4958:27-4958:31|4958:19-4958:31|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4960:66-4960:70|12|-1"]},{"usr":1120886639445959575,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"282:23-282:26|282:15-282:26|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["284:28-284:31|12|-1"]},{"usr":1190417650601751192,"detailed_name":"char __b27","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4093:23-4093:28|4093:18-4093:28|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4104:47-4104:52|12|-1"]},{"usr":1196253334784081862,"detailed_name":"_mm256_insert_epi64","qual_name_offset":0,"short_name_offset":0,"short_name_size":19,"hover":"#define _mm256_insert_epi64(X, I, N) \\\n  (__m256i)__builtin_ia32_vec_set_v4di((__v4di)(__m256i)(X), \\\n                                       (long long)(I), (int)(N))","comments":"","spell":"2113:9-2113:28|2113:9-2115:65|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":1199549950836655545,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2727:27-2727:30|2727:19-2727:30|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2729:47-2729:50|12|-1"]},{"usr":1268029534355076057,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"3256:37-3256:40|3256:30-3256:40|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3261:37-3261:40|12|-1"]},{"usr":1349639312735575361,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"300:22-300:25|300:15-300:25|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["302:27-302:30|12|-1"]},{"usr":1429914340660366847,"detailed_name":"__m128d __lo","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"4958:41-4958:45|4958:33-4958:45|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4960:52-4960:56|12|-1"]},{"usr":1549440554438461067,"detailed_name":"__m256 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"699:35-699:38|699:28-699:38|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["701:64-701:67|12|-1"]},{"usr":1561564319144714747,"detailed_name":"__m256d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"245:36-245:39|245:28-245:39|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["247:64-247:67|12|-1"]},{"usr":1562418853583074537,"detailed_name":"__m256d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2668:38-2668:41|2668:30-2668:41|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2670:58-2670:61|12|-1"]},{"usr":1589446482710208987,"detailed_name":"__m256 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"616:33-616:36|616:26-616:36|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["618:41-618:44|12|-1"]},{"usr":1625001916785748174,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2175:27-2175:30|2175:20-2175:30|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2177:55-2177:58|12|-1"]},{"usr":1646090106292935846,"detailed_name":"_mm256_round_ps","qual_name_offset":0,"short_name_offset":0,"short_name_size":15,"hover":"#define _mm256_round_ps(V, M) \\\n  (__m256)__builtin_ia32_roundps256((__v8sf)(__m256)(V), (M))","comments":"","spell":"434:9-434:24|434:9-435:62|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":1661497143321951655,"detailed_name":"__m256i __v256","qual_name_offset":8,"short_name_offset":8,"short_name_size":6,"hover":"__m256i __v256 = _mm256_castsi128_si256(_mm_loadu_si128(__addr_lo))","comments":"","spell":"4829:11-4829:17|4829:3-4829:70|2|-1","type":17840313551808425050,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["4830:34-4830:40|12|-1","4830:34-4830:40|64|0"]},{"usr":1664618818309477515,"detailed_name":"_mm256_cmp_ps","qual_name_offset":0,"short_name_offset":0,"short_name_size":13,"hover":"#define _mm256_cmp_ps(a, b, c) \\\n  (__m256)__builtin_ia32_cmpps256((__v8sf)(__m256)(a), \\\n                                  (__v8sf)(__m256)(b), (c))","comments":"","spell":"1829:9-1829:22|1829:9-1831:60|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":1666434356378047695,"detailed_name":"double __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"3887:23-3887:26|3887:16-3887:26|1026|-1","type":144,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3889:39-3889:42|12|-1"]},{"usr":1825894176569559340,"detailed_name":"char __b22","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3825:34-3825:39|3825:29-3825:39|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3835:47-3835:52|12|-1"]},{"usr":1835782986984038223,"detailed_name":"_CMP_TRUE_UQ","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _CMP_TRUE_UQ  0x0f","comments":"","spell":"1575:9-1575:21|1575:9-1575:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":1951456141081436574,"detailed_name":"float *__p","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"3218:24-3218:27|3218:17-3218:27|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3220:14-3220:17|12|-1"]},{"usr":1953044064773311386,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2913:28-2913:31|2913:20-2913:31|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2915:45-2915:48|12|-1"]},{"usr":2048131513574161634,"detailed_name":"__m256d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1383:39-1383:42|1383:31-1383:42|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1386:26-1386:29|12|-1"]},{"usr":2191504551137656565,"detailed_name":"_mm_cmp_pd","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _mm_cmp_pd(a, b, c) \\\n  (__m128d)__builtin_ia32_cmppd((__v2df)(__m128d)(a), \\\n                                (__v2df)(__m128d)(b), (c))","comments":"","spell":"1649:9-1649:19|1649:9-1651:59|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":2240021624171991111,"detailed_name":"_mm256_shuffle_ps","qual_name_offset":0,"short_name_offset":0,"short_name_size":17,"hover":"#define _mm256_shuffle_ps(a, b, mask) \\\n  (__m256)__builtin_ia32_shufps256((__v8sf)(__m256)(a), \\\n                                   (__v8sf)(__m256)(b), (int)(mask))","comments":"","spell":"1509:9-1509:26|1509:9-1511:69|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":2313486741204051620,"detailed_name":"double __c","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"3887:47-3887:50|3887:40-3887:50|1026|-1","type":144,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3889:29-3889:32|12|-1"]},{"usr":2458916465126466551,"detailed_name":"__m256 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"538:34-538:37|538:27-538:37|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["540:41-540:44|12|-1"]},{"usr":2466526225692021475,"detailed_name":"float __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"3927:33-3927:36|3927:27-3927:36|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3930:54-3930:57|12|-1"]},{"usr":2474469902367023819,"detailed_name":"__m256d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"96:36-96:39|96:28-96:39|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["98:40-98:43|12|-1"]},{"usr":2605044072914138101,"detailed_name":"__m256 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"300:34-300:37|300:27-300:37|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["302:41-302:44|12|-1"]},{"usr":2665136000412290574,"detailed_name":"const double *__p","qual_name_offset":14,"short_name_offset":14,"short_name_size":3,"hover":"","comments":"","spell":"3346:34-3346:37|3346:20-3346:37|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3348:64-3348:67|12|-1"]},{"usr":2676632035575211006,"detailed_name":"__m128i __lo","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"5045:28-5045:32|5045:20-5045:32|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["5047:42-5047:46|12|-1"]},{"usr":2781134273684019392,"detailed_name":"_CMP_LE_OS","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _CMP_LE_OS    0x02","comments":"","spell":"1562:9-1562:19|1562:9-1562:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":2845913291848204611,"detailed_name":"char __b25","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3824:46-3824:51|3824:41-3824:51|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3836:12-3836:17|12|-1"]},{"usr":2856053123126793020,"detailed_name":"short __w05","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"4009:40-4009:45|4009:34-4009:45|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4013:34-4013:39|12|-1"]},{"usr":2964690104295858860,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"207:23-207:26|207:15-207:26|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["209:51-209:54|12|-1"]},{"usr":2982462536557472991,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2316:27-2316:30|2316:20-2316:30|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2318:42-2318:45|12|-1","2318:55-2318:58|12|-1"]},{"usr":3047480451561707922,"detailed_name":"int __i4","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"3693:22-3693:26|3693:18-3693:26|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3695:61-3695:65|12|-1"]},{"usr":3062962882641280945,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2341:27-2341:30|2341:20-2341:30|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2343:42-2343:45|12|-1","2343:55-2343:58|12|-1"]},{"usr":3086859440412579089,"detailed_name":"__m256 __v256","qual_name_offset":7,"short_name_offset":7,"short_name_size":6,"hover":"__m256 __v256 = _mm256_castps128_ps256(_mm_loadu_ps(__addr_lo))","comments":"","spell":"4776:10-4776:16|4776:3-4776:66|2|-1","type":13081541567295835539,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["4777:31-4777:37|12|-1","4777:31-4777:37|64|0"]},{"usr":3197195279442009523,"detailed_name":"short __w14","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"3740:37-3740:42|3740:31-3740:42|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3746:54-3746:59|12|-1"]},{"usr":3217794340674804951,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2208:29-2208:32|2208:21-2208:32|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2210:56-2210:59|12|-1"]},{"usr":3228505245167765925,"detailed_name":"long long __d","qual_name_offset":10,"short_name_offset":10,"short_name_size":3,"hover":"","comments":"","spell":"3858:74-3858:77|3858:64-3858:77|1026|-1","type":116,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3860:43-3860:46|12|-1"]},{"usr":3234107744860343388,"detailed_name":"char __b10","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4097:35-4097:40|4097:30-4097:40|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4102:40-4102:45|12|-1"]},{"usr":3338507920306428034,"detailed_name":"char __b15","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3827:22-3827:27|3827:17-3827:27|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3834:54-3834:59|12|-1"]},{"usr":3396096524730566895,"detailed_name":"_mm256_extract_epi64","qual_name_offset":0,"short_name_offset":0,"short_name_size":20,"hover":"#define _mm256_extract_epi64(X, N) \\\n  (long long)__builtin_ia32_vec_ext_v4di((__v4di)(__m256i)(X), (int)(N))","comments":"","spell":"2023:9-2023:29|2023:9-2024:73|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":3515947170135168719,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4882:68-4882:71|4882:60-4882:71|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4886:35-4886:38|12|-1","4888:34-4888:37|12|-1","4888:34-4888:37|64|0"]},{"usr":3545558289755231913,"detailed_name":"char __b28","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4092:59-4092:64|4092:54-4092:64|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4104:54-4104:59|12|-1"]},{"usr":3572078790820744397,"detailed_name":"__m128i __m","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3371:43-3371:46|3371:35-3371:46|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3373:73-3373:76|12|-1"]},{"usr":3573437806756713333,"detailed_name":"char __b13","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4096:47-4096:52|4096:42-4096:52|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4102:61-4102:66|12|-1"]},{"usr":3627651995167357668,"detailed_name":"double *__p","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3468:29-3468:32|3468:21-3468:32|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3470:43-3470:46|12|-1"]},{"usr":3685944004340317701,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"170:23-170:26|170:15-170:26|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["172:28-172:31|12|-1"]},{"usr":3709741571355563337,"detailed_name":"short __w08","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"4008:53-4008:58|4008:47-4008:58|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4014:27-4014:32|12|-1"]},{"usr":3762819416991125243,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2408:28-2408:31|2408:20-2408:31|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2410:42-2410:45|12|-1"]},{"usr":3836154551141219732,"detailed_name":"int __i0","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"3692:22-3692:26|3692:18-3692:26|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3695:85-3695:89|12|-1"]},{"usr":3899939247818722605,"detailed_name":"long long __q","qual_name_offset":10,"short_name_offset":10,"short_name_size":3,"hover":"","comments":"","spell":"4239:30-4239:33|4239:20-4239:33|1026|-1","type":116,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4241:28-4241:31|12|-1","4241:33-4241:36|12|-1","4241:38-4241:41|12|-1","4241:43-4241:46|12|-1"]},{"usr":3909426988127072253,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2363:27-2363:30|2363:19-2363:30|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2365:42-2365:45|12|-1","2365:55-2365:58|12|-1"]},{"usr":3910774761898683606,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2435:27-2435:30|2435:20-2435:30|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2437:42-2437:45|12|-1"]},{"usr":3927003764482039703,"detailed_name":"char __b20","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4094:59-4094:64|4094:54-4094:64|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4103:54-4103:59|12|-1"]},{"usr":4008042167316503958,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"4418:31-4418:34|4418:24-4418:34|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4420:42-4420:45|12|-1","4420:55-4420:58|12|-1"]},{"usr":4036297023863231556,"detailed_name":"char __b08","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3828:58-3828:63|3828:53-3828:63|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3834:5-3834:10|12|-1"]},{"usr":4088042849912524190,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"351:24-351:27|351:17-351:27|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["353:52-353:55|12|-1"]},{"usr":4116811409827124088,"detailed_name":"int __i1","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"3692:32-3692:36|3692:28-3692:36|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3695:79-3695:83|12|-1"]},{"usr":4122430417788802722,"detailed_name":"_CMP_GT_OS","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _CMP_GT_OS    0x0e","comments":"","spell":"1574:9-1574:19|1574:9-1574:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":4166028057678723507,"detailed_name":"float __g","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"3661:43-3661:46|3661:37-3661:46|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3663:39-3663:42|12|-1"]},{"usr":4190196579357786569,"detailed_name":"_CMP_NEQ_UQ","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _CMP_NEQ_UQ   0x04","comments":"","spell":"1564:9-1564:20|1564:9-1564:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":4308978951931191045,"detailed_name":"short __w06","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"3742:37-3742:42|3742:31-3742:42|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3745:86-3745:91|12|-1"]},{"usr":4310274519139983799,"detailed_name":"long long __d","qual_name_offset":10,"short_name_offset":10,"short_name_size":3,"hover":"","comments":"","spell":"4125:75-4125:78|4125:65-4125:78|1026|-1","type":116,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4127:28-4127:31|12|-1"]},{"usr":4319016179799286914,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2129:28-2129:31|2129:20-2129:31|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2131:51-2131:54|12|-1"]},{"usr":4359266434412206393,"detailed_name":"_mm_cmp_ps","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _mm_cmp_ps(a, b, c) \\\n  (__m128)__builtin_ia32_cmpps((__v4sf)(__m128)(a), \\\n                               (__v4sf)(__m128)(b), (c))","comments":"","spell":"1709:9-1709:19|1709:9-1711:57|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":4378755180787062774,"detailed_name":"double __d","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"3887:59-3887:62|3887:52-3887:62|1026|-1","type":144,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3889:24-3889:27|12|-1"]},{"usr":4383595989197401914,"detailed_name":"char __b02","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4099:35-4099:40|4099:30-4099:40|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4101:40-4101:45|12|-1"]},{"usr":4457252942544924859,"detailed_name":"double __d","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"3621:58-3621:61|3621:51-3621:61|1026|-1","type":144,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3623:35-3623:38|12|-1"]},{"usr":4458779503330488244,"detailed_name":"_mm256_ceil_ps","qual_name_offset":0,"short_name_offset":0,"short_name_size":14,"hover":"#define _mm256_ceil_ps(V)  _mm256_round_ps((V), _MM_FROUND_CEIL)","comments":"","spell":"487:9-487:23|487:9-487:65|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":4504121449950229406,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4514:32-4514:35|4514:24-4514:35|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4516:42-4516:45|12|-1"]},{"usr":4552303666914538674,"detailed_name":"_mm_cmp_sd","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _mm_cmp_sd(a, b, c) \\\n  (__m128d)__builtin_ia32_cmpsd((__v2df)(__m128d)(a), \\\n                                (__v2df)(__m128d)(b), (c))","comments":"","spell":"1888:9-1888:19|1888:9-1890:59|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":4663157961711375105,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2551:24-2551:27|2551:16-2551:27|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2553:44-2553:47|12|-1"]},{"usr":4698694383638956752,"detailed_name":"__m256d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"598:35-598:38|598:27-598:38|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["600:42-600:45|12|-1"]},{"usr":4714578165123064664,"detailed_name":"__m128i_u *__addr_hi","qual_name_offset":11,"short_name_offset":11,"short_name_size":9,"hover":"","comments":"","spell":"4911:33-4911:42|4911:22-4911:42|1026|-1","type":2089679718632112875,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4918:20-4918:29|12|-1"]},{"usr":4717479050035437366,"detailed_name":"_CMP_UNORD_Q","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _CMP_UNORD_Q  0x03","comments":"","spell":"1563:9-1563:21|1563:9-1563:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":4759278294127241703,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"868:26-868:29|868:19-868:29|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["870:54-870:57|12|-1"]},{"usr":4795143949819311472,"detailed_name":"char __b24","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3824:58-3824:63|3824:53-3824:63|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3836:5-3836:10|12|-1"]},{"usr":4818583763083710199,"detailed_name":"float __w","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"4163:22-4163:25|4163:16-4163:25|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4165:24-4165:27|12|-1","4165:29-4165:32|12|-1","4165:34-4165:37|12|-1","4165:39-4165:42|12|-1","4165:44-4165:47|12|-1","4165:49-4165:52|12|-1","4165:54-4165:57|12|-1","4165:59-4165:62|12|-1"]},{"usr":4823093104155085250,"detailed_name":"char __b19","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4095:23-4095:28|4095:18-4095:28|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4103:47-4103:52|12|-1"]},{"usr":4888608387128748471,"detailed_name":"float __f","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"float __f = *__a","comments":"","spell":"3013:9-3013:12|3013:3-3013:19|2|-1","type":143,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["3014:42-3014:45|12|-1","3014:47-3014:50|12|-1","3014:52-3014:55|12|-1","3014:57-3014:60|12|-1","3014:62-3014:65|12|-1","3014:67-3014:70|12|-1","3014:72-3014:75|12|-1","3014:77-3014:80|12|-1"]},{"usr":4892210063226629150,"detailed_name":"_CMP_LT_OS","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _CMP_LT_OS    0x01","comments":"","spell":"1561:9-1561:19|1561:9-1561:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":4923690922538357402,"detailed_name":"__m256 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2756:36-2756:39|2756:29-2756:39|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2758:58-2758:61|12|-1"]},{"usr":4948749387176087728,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"96:23-96:26|96:15-96:26|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["98:28-98:31|12|-1"]},{"usr":4950239555898479516,"detailed_name":"char __b31","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4092:23-4092:28|4092:18-4092:28|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4104:75-4104:80|12|-1"]},{"usr":4967089592420364544,"detailed_name":"_mm256_permute2f128_pd","qual_name_offset":0,"short_name_offset":0,"short_name_size":22,"hover":"#define _mm256_permute2f128_pd(V1, V2, M) \\\n  (__m256d)__builtin_ia32_vperm2f128_pd256((__v4df)(__m256d)(V1), \\\n                                           (__v4df)(__m256d)(V2), (int)(M))","comments":"","spell":"1219:9-1219:31|1219:9-1221:76|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":4993794616416828971,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"114:22-114:25|114:15-114:25|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["116:27-116:30|12|-1"]},{"usr":5020096171138587305,"detailed_name":"short __w14","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"4007:38-4007:43|4007:32-4007:43|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4015:41-4015:46|12|-1"]},{"usr":5030226165957730999,"detailed_name":"__m256i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2894:43-2894:46|2894:35-2894:46|1026|-1","type":17840313551808425050,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2896:58-2896:61|12|-1"]},{"usr":5033612180607072992,"detailed_name":"char __b18","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3826:34-3826:39|3826:29-3826:39|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3835:19-3835:24|12|-1"]},{"usr":5122402145048803207,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"4350:28-4350:31|4350:21-4350:31|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4352:19-4352:22|12|-1"]},{"usr":5240956261223075369,"detailed_name":"_mm256_extractf128_si256","qual_name_offset":0,"short_name_offset":0,"short_name_size":24,"hover":"#define _mm256_extractf128_si256(V, M) \\\n  (__m128i)__builtin_ia32_vextractf128_si256((__v8si)(__m256i)(V), (int)(M))","comments":"","spell":"4748:9-4748:33|4748:9-4749:77|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":["4917:12-4917:36|64|-1"]},{"usr":5287007070420313666,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4299:26-4299:29|4299:18-4299:29|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4301:18-4301:21|12|-1"]},{"usr":5329427211628125113,"detailed_name":"short __w02","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"3743:37-3743:42|3743:31-3743:42|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3745:58-3745:63|12|-1"]},{"usr":5374055701991483869,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"368:22-368:25|368:15-368:25|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["370:50-370:53|12|-1"]},{"usr":5377578305095755219,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2668:25-2668:28|2668:17-2668:28|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2670:45-2670:48|12|-1"]},{"usr":5396697004813044413,"detailed_name":"char __b01","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4099:47-4099:52|4099:42-4099:52|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4101:33-4101:38|12|-1"]},{"usr":5401901729218514460,"detailed_name":"__m256 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2462:39-2462:42|2462:32-2462:42|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2464:55-2464:58|12|-1"]},{"usr":5418809840437461790,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"78:22-78:25|78:15-78:25|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["80:27-80:30|12|-1"]},{"usr":5431059349876086391,"detailed_name":"__m256i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4911:74-4911:77|4911:66-4911:77|1026|-1","type":17840313551808425050,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4915:35-4915:38|12|-1","4917:37-4917:40|12|-1","4917:37-4917:40|64|0"]},{"usr":5440150667286407542,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2785:24-2785:27|2785:17-2785:27|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2787:45-2787:48|12|-1"]},{"usr":5578586102598318005,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"538:22-538:25|538:15-538:25|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["540:27-540:30|12|-1"]},{"usr":5580088731785690195,"detailed_name":"short __w15","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"3740:24-3740:29|3740:18-3740:29|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3746:61-3746:66|12|-1"]},{"usr":5631798213884563088,"detailed_name":"_mm256_insert_epi16","qual_name_offset":0,"short_name_offset":0,"short_name_size":19,"hover":"#define _mm256_insert_epi16(X, I, N) \\\n  (__m256i)__builtin_ia32_vec_set_v16hi((__v16hi)(__m256i)(X), \\\n                                        (int)(I), (int)(N))","comments":"","spell":"2068:9-2068:28|2068:9-2070:60|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":5640114703711472036,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4316:29-4316:32|4316:21-4316:32|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4318:19-4318:22|12|-1"]},{"usr":5688307113329730684,"detailed_name":"const double *__addr_hi","qual_name_offset":14,"short_name_offset":14,"short_name_size":9,"hover":"","comments":"","spell":"4802:35-4802:44|4802:21-4802:44|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4805:52-4805:61|12|-1","4805:52-4805:61|64|0"]},{"usr":5745511086325582805,"detailed_name":"char __b26","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4093:35-4093:40|4093:30-4093:40|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4104:40-4104:45|12|-1"]},{"usr":5854250735802054200,"detailed_name":"_CMP_GE_OS","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _CMP_GE_OS    0x0d","comments":"","spell":"1573:9-1573:19|1573:9-1573:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":5862812815118087629,"detailed_name":"__m256d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"282:36-282:39|282:28-282:39|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["284:42-284:45|12|-1"]},{"usr":5865524466117171926,"detailed_name":"__m256d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"520:36-520:39|520:28-520:39|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["522:42-522:45|12|-1"]},{"usr":5919059398914431676,"detailed_name":"char __b28","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3823:58-3823:63|3823:53-3823:63|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3836:33-3836:38|12|-1"]},{"usr":5984364942335983896,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"245:23-245:26|245:15-245:26|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["247:51-247:54|12|-1"]},{"usr":6112063390054366357,"detailed_name":"char __b06","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4098:35-4098:40|4098:30-4098:40|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4101:68-4101:73|12|-1"]},{"usr":6206188343405704881,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"4853:64-4853:67|4853:57-4853:67|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4857:35-4857:38|12|-1","4859:34-4859:37|12|-1","4859:34-4859:37|64|0"]},{"usr":6226690575714836394,"detailed_name":"char __b31","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3823:22-3823:27|3823:17-3823:27|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3836:54-3836:59|12|-1"]},{"usr":6243498427087948053,"detailed_name":"float __h","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"3928:55-3928:58|3928:49-3928:58|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3930:24-3930:27|12|-1"]},{"usr":6302296666033704011,"detailed_name":"int __i4","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"3960:23-3960:27|3960:19-3960:27|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3962:45-3962:49|12|-1"]},{"usr":6329654036465410961,"detailed_name":"__m256 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"652:34-652:37|652:27-652:37|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["654:41-654:44|12|-1"]},{"usr":6351523367847866561,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"4476:31-4476:34|4476:24-4476:34|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4478:42-4478:45|12|-1","4478:55-4478:58|12|-1"]},{"usr":6391403946699217834,"detailed_name":"_CMP_EQ_US","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _CMP_EQ_US    0x18","comments":"","spell":"1584:9-1584:19|1584:9-1584:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":6396919218899155062,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"634:23-634:26|634:15-634:26|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["636:28-636:31|12|-1"]},{"usr":6409136369128336008,"detailed_name":"__m128i __m","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3444:39-3444:42|3444:31-3444:42|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3446:53-3446:56|12|-1"]},{"usr":6438061880891780525,"detailed_name":"char __b04","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3829:58-3829:63|3829:53-3829:63|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3833:33-3833:38|12|-1"]},{"usr":6445828943522369433,"detailed_name":"_CMP_LE_OQ","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _CMP_LE_OQ    0x12","comments":"","spell":"1578:9-1578:19|1578:9-1578:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":6520328572001215917,"detailed_name":"char __b07","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4098:23-4098:28|4098:18-4098:28|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4101:75-4101:80|12|-1"]},{"usr":6530382430011495568,"detailed_name":"__m256d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2727:40-2727:43|2727:32-2727:43|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2729:60-2729:63|12|-1"]},{"usr":6552277734089426036,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3200:38-3200:41|3200:30-3200:41|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3202:21-3202:24|12|-1"]},{"usr":6681553932312499012,"detailed_name":"int __i2","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"3959:43-3959:47|3959:39-3959:47|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3962:57-3962:61|12|-1"]},{"usr":6706092420169926115,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"580:25-580:28|580:18-580:28|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["582:28-582:31|12|-1"]},{"usr":6793832726570410194,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2290:25-2290:28|2290:18-2290:28|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2292:9-2292:12|4|-1"]},{"usr":6812419710493534657,"detailed_name":"int __i6","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"3960:43-3960:47|3960:39-3960:47|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3962:33-3962:37|12|-1"]},{"usr":6812798898557432506,"detailed_name":"double __d","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"double __d = *__a","comments":"","spell":"2994:10-2994:13|2994:3-2994:20|2|-1","type":144,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["2995:43-2995:46|12|-1","2995:48-2995:51|12|-1","2995:53-2995:56|12|-1","2995:58-2995:61|12|-1"]},{"usr":6845910432912648630,"detailed_name":"float __d","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"3660:54-3660:57|3660:48-3660:57|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3663:54-3663:57|12|-1"]},{"usr":6847870432837319946,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"598:22-598:25|598:14-598:25|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["600:28-600:31|12|-1"]},{"usr":6868956843397665173,"detailed_name":"double *__addr_lo","qual_name_offset":8,"short_name_offset":8,"short_name_size":9,"hover":"","comments":"","spell":"4882:49-4882:58|4882:41-4882:58|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4887:17-4887:26|12|-1"]},{"usr":6931982071617930599,"detailed_name":"const double *__p","qual_name_offset":14,"short_name_offset":14,"short_name_size":3,"hover":"","comments":"","spell":"3322:31-3322:34|3322:17-3322:34|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3324:61-3324:64|12|-1"]},{"usr":7020019069588218613,"detailed_name":"_mm256_insert_epi32","qual_name_offset":0,"short_name_offset":0,"short_name_size":19,"hover":"#define _mm256_insert_epi32(X, I, N) \\\n  (__m256i)__builtin_ia32_vec_set_v8si((__v8si)(__m256i)(X), \\\n                                       (int)(I), (int)(N))","comments":"","spell":"2045:9-2045:28|2045:9-2047:59|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":7030853738482280296,"detailed_name":"char __b03","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4099:23-4099:28|4099:18-4099:28|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4101:47-4101:52|12|-1"]},{"usr":7053939594205959864,"detailed_name":"_CMP_FALSE_OQ","qual_name_offset":0,"short_name_offset":0,"short_name_size":13,"hover":"#define _CMP_FALSE_OQ 0x0b","comments":"","spell":"1571:9-1571:22|1571:9-1571:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":7170983741838481178,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"188:22-188:25|188:15-188:25|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["190:27-190:30|12|-1"]},{"usr":7331891627906852883,"detailed_name":"char __b09","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4097:47-4097:52|4097:42-4097:52|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4102:33-4102:38|12|-1"]},{"usr":7340390613532649951,"detailed_name":"_CMP_GT_OQ","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _CMP_GT_OQ    0x1e","comments":"","spell":"1590:9-1590:19|1590:9-1590:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":7372910706050848446,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"775:27-775:30|775:19-775:30|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["777:55-777:58|12|-1"]},{"usr":7374946757061227543,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"133:26-133:29|133:18-133:29|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["135:54-135:57|12|-1"]},{"usr":7583125847647396315,"detailed_name":"__m256d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"207:36-207:39|207:28-207:39|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["209:64-209:67|12|-1"]},{"usr":7622576488923001837,"detailed_name":"_CMP_NGT_US","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _CMP_NGT_US   0x0a","comments":"","spell":"1570:9-1570:20|1570:9-1570:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":7645168059632646279,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4495:32-4495:35|4495:24-4495:35|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4497:42-4497:45|12|-1","4497:55-4497:58|12|-1"]},{"usr":7655446596106995634,"detailed_name":"__m256i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4434:32-4434:35|4434:24-4434:35|1026|-1","type":17840313551808425050,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4436:42-4436:45|12|-1","4436:55-4436:58|12|-1"]},{"usr":7658063989397041193,"detailed_name":"short __w12","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"3740:63-3740:68|3740:57-3740:68|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3746:40-3746:45|12|-1"]},{"usr":7721328470805650532,"detailed_name":"_CMP_NLT_UQ","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _CMP_NLT_UQ   0x15","comments":"","spell":"1581:9-1581:20|1581:9-1581:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":7802534020490370350,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2551:37-2551:40|2551:29-2551:40|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2553:57-2553:60|12|-1"]},{"usr":7840043676515985156,"detailed_name":"__m128i __m","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3322:44-3322:47|3322:36-3322:47|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3324:74-3324:77|12|-1"]},{"usr":7987786837845907128,"detailed_name":"__m128i __c","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"775:40-775:43|775:32-775:43|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["777:68-777:71|12|-1"]},{"usr":8019045679124047793,"detailed_name":"const __m128i_u *__addr_hi","qual_name_offset":17,"short_name_offset":17,"short_name_size":9,"hover":"","comments":"","spell":"4827:38-4827:47|4827:21-4827:47|1026|-1","type":2089679718632112875,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4830:58-4830:67|12|-1","4830:58-4830:67|64|0"]},{"usr":8020508701263912276,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2639:35-2639:38|2639:28-2639:38|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2641:57-2641:60|12|-1"]},{"usr":8021244504974927973,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"676:24-676:27|676:16-676:27|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["678:52-678:55|12|-1"]},{"usr":8021400058675431404,"detailed_name":"__m256i __m","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3346:47-3346:50|3346:39-3346:50|1026|-1","type":17840313551808425050,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3349:56-3349:59|12|-1"]},{"usr":8022080868590856724,"detailed_name":"char __b09","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3828:46-3828:51|3828:41-3828:51|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3834:12-3834:17|12|-1"]},{"usr":8034988527038136856,"detailed_name":"char __b29","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3823:46-3823:51|3823:41-3823:51|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3836:40-3836:45|12|-1"]},{"usr":8054534678525932810,"detailed_name":"char __b30","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4092:35-4092:40|4092:30-4092:40|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4104:68-4104:73|12|-1"]},{"usr":8074554579076931771,"detailed_name":"const float *__p","qual_name_offset":13,"short_name_offset":13,"short_name_size":3,"hover":"","comments":"","spell":"3395:33-3395:36|3395:20-3395:36|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3397:63-3397:66|12|-1"]},{"usr":8099734298754198593,"detailed_name":"char __b01","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3830:46-3830:51|3830:41-3830:51|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3833:12-3833:17|12|-1"]},{"usr":8106115392276069591,"detailed_name":"char __b12","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4096:59-4096:64|4096:54-4096:64|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4102:54-4102:59|12|-1"]},{"usr":8134525601685413824,"detailed_name":"float *__addr_lo","qual_name_offset":7,"short_name_offset":7,"short_name_size":9,"hover":"","comments":"","spell":"4853:46-4853:55|4853:39-4853:55|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4858:17-4858:26|12|-1"]},{"usr":8141557336465842567,"detailed_name":"const float *__p","qual_name_offset":13,"short_name_offset":13,"short_name_size":3,"hover":"","comments":"","spell":"3086:29-3086:32|3086:16-3086:32|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3088:27-3088:30|12|-1"]},{"usr":8159651219023518359,"detailed_name":"_CMP_NEQ_US","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _CMP_NEQ_US   0x14","comments":"","spell":"1580:9-1580:20|1580:9-1580:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":8242641200478166408,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2580:21-2580:24|2580:14-2580:24|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2582:42-2582:45|12|-1"]},{"usr":8255828845991446946,"detailed_name":"__m256i __c","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"814:43-814:46|814:35-814:46|1026|-1","type":17840313551808425050,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["816:71-816:74|12|-1"]},{"usr":8259687853010184863,"detailed_name":"_mm256_floor_ps","qual_name_offset":0,"short_name_offset":0,"short_name_size":15,"hover":"#define _mm256_floor_ps(V) _mm256_round_ps((V), _MM_FROUND_FLOOR)","comments":"","spell":"504:9-504:24|504:9-504:66|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":8280970846028587736,"detailed_name":"const float *__addr_hi","qual_name_offset":13,"short_name_offset":13,"short_name_size":9,"hover":"","comments":"","spell":"4774:33-4774:42|4774:20-4774:42|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4777:52-4777:61|12|-1","4777:52-4777:61|64|0"]},{"usr":8281685322060766430,"detailed_name":"_mm256_extract_epi8","qual_name_offset":0,"short_name_offset":0,"short_name_size":19,"hover":"#define _mm256_extract_epi8(X, N) \\\n  (int)(unsigned char)__builtin_ia32_vec_ext_v32qi((__v32qi)(__m256i)(X), \\\n                                                   (int)(N))","comments":"","spell":"2003:9-2003:28|2003:9-2005:61|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":8300443631067287296,"detailed_name":"short __w07","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"4009:14-4009:19|4009:8-4009:19|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4013:48-4013:53|12|-1"]},{"usr":8321361345967342522,"detailed_name":"float *__p","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"3256:25-3256:28|3256:18-3256:28|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3261:25-3261:28|12|-1"]},{"usr":8352192604764642465,"detailed_name":"int __i3","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"3959:53-3959:57|3959:49-3959:57|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3962:51-3962:55|12|-1"]},{"usr":8471553230657995995,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3444:52-3444:55|3444:44-3444:55|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3446:66-3446:69|12|-1"]},{"usr":8474327445942756380,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2521:22-2521:25|2521:14-2521:25|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2523:42-2523:45|12|-1"]},{"usr":8479176953699435543,"detailed_name":"int __i5","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"3960:33-3960:37|3960:29-3960:37|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3962:39-3962:43|12|-1"]},{"usr":8507501389363273754,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"616:21-616:24|616:14-616:24|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["618:27-618:30|12|-1"]},{"usr":8552010312182723298,"detailed_name":"__m256_u _mm256_storeu_ps(float *, __m256)::__storeu_ps::__v","qual_name_offset":9,"short_name_offset":57,"short_name_size":3,"hover":"","comments":"","spell":"3259:14-3259:17|3259:5-3259:17|2|-1","type":12121053416515032001,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["3261:31-3261:34|20|-1"]},{"usr":8572558817584507334,"detailed_name":"char __b","qual_name_offset":5,"short_name_offset":5,"short_name_size":3,"hover":"","comments":"","spell":"4218:23-4218:26|4218:18-4218:26|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4220:26-4220:29|12|-1","4220:31-4220:34|12|-1","4220:36-4220:39|12|-1","4220:41-4220:44|12|-1","4220:46-4220:49|12|-1","4220:51-4220:54|12|-1","4220:56-4220:59|12|-1","4220:61-4220:64|12|-1","4221:26-4221:29|12|-1","4221:31-4221:34|12|-1","4221:36-4221:39|12|-1","4221:41-4221:44|12|-1","4221:46-4221:49|12|-1","4221:51-4221:54|12|-1","4221:56-4221:59|12|-1","4221:61-4221:64|12|-1","4222:26-4222:29|12|-1","4222:31-4222:34|12|-1","4222:36-4222:39|12|-1","4222:41-4222:44|12|-1","4222:46-4222:49|12|-1","4222:51-4222:54|12|-1","4222:56-4222:59|12|-1","4222:61-4222:64|12|-1","4223:26-4223:29|12|-1","4223:31-4223:34|12|-1","4223:36-4223:39|12|-1","4223:41-4223:44|12|-1","4223:46-4223:49|12|-1","4223:51-4223:54|12|-1","4223:56-4223:59|12|-1","4223:61-4223:64|12|-1"]},{"usr":8588467416618959926,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"520:23-520:26|520:15-520:26|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["522:28-522:31|12|-1"]},{"usr":8658842632755523560,"detailed_name":"short __w04","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"3742:63-3742:68|3742:57-3742:68|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3745:72-3745:77|12|-1"]},{"usr":8670420671614041518,"detailed_name":"int __i6","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"3693:42-3693:46|3693:38-3693:46|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3695:49-3695:53|12|-1"]},{"usr":8705400878718889113,"detailed_name":"float *__p","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"3553:25-3553:28|3553:18-3553:28|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3556:69-3556:72|12|-1"]},{"usr":8715612203010977618,"detailed_name":"short __w03","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"4010:14-4010:19|4010:8-4010:19|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4012:48-4012:53|12|-1"]},{"usr":8732047350942464237,"detailed_name":"char __b07","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3829:22-3829:27|3829:17-3829:27|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3833:54-3833:59|12|-1"]},{"usr":8748623064638964754,"detailed_name":"_mm256_ceil_pd","qual_name_offset":0,"short_name_offset":0,"short_name_size":14,"hover":"#define _mm256_ceil_pd(V)  _mm256_round_pd((V), _MM_FROUND_CEIL)","comments":"","spell":"452:9-452:23|452:9-452:65|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":8762115335199459035,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"722:24-722:27|722:16-722:27|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["724:52-724:55|12|-1"]},{"usr":8802620967140678244,"detailed_name":"short __w11","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"4008:14-4008:19|4008:8-4008:19|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4014:48-4014:53|12|-1"]},{"usr":8837796470580718916,"detailed_name":"float __f","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"3661:32-3661:35|3661:26-3661:35|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3663:44-3663:47|12|-1"]},{"usr":8992474496526219299,"detailed_name":"double __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"3887:35-3887:38|3887:28-3887:38|1026|-1","type":144,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3889:34-3889:37|12|-1"]},{"usr":9042224108118778396,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2386:28-2386:31|2386:20-2386:31|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2388:42-2388:45|12|-1"]},{"usr":9129606207611916240,"detailed_name":"const double *__a","qual_name_offset":14,"short_name_offset":14,"short_name_size":3,"hover":"","comments":"","spell":"2992:35-2992:38|2992:21-2992:38|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2994:17-2994:20|12|-1"]},{"usr":9134092933564331201,"detailed_name":"char __b08","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4097:59-4097:64|4097:54-4097:64|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4102:26-4102:31|12|-1"]},{"usr":9222249529456326799,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"60:23-60:26|60:15-60:26|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["62:28-62:31|12|-1"]},{"usr":9321829262360921859,"detailed_name":"__m256d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2697:38-2697:41|2697:30-2697:41|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2699:58-2699:61|12|-1"]},{"usr":9417654923119169758,"detailed_name":"_mm256_shuffle_pd","qual_name_offset":0,"short_name_offset":0,"short_name_size":17,"hover":"#define _mm256_shuffle_pd(a, b, mask) \\\n  (__m256d)__builtin_ia32_shufpd256((__v4df)(__m256d)(a), \\\n                                    (__v4df)(__m256d)(b), (int)(mask))","comments":"","spell":"1555:9-1555:26|1555:9-1557:71|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":9454439355539624693,"detailed_name":"const float *__a","qual_name_offset":13,"short_name_offset":13,"short_name_size":3,"hover":"","comments":"","spell":"2973:31-2973:34|2973:18-2973:34|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2975:16-2975:19|12|-1"]},{"usr":9627494364408715069,"detailed_name":"char __b19","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3826:22-3826:27|3826:17-3826:27|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3835:26-3835:31|12|-1"]},{"usr":9628617884012122043,"detailed_name":"char __b21","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4094:47-4094:52|4094:42-4094:52|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4103:61-4103:66|12|-1"]},{"usr":9655638337794537323,"detailed_name":"_mm256_insertf128_pd","qual_name_offset":0,"short_name_offset":0,"short_name_size":20,"hover":"#define _mm256_insertf128_pd(V1, V2, M) \\\n  (__m256d)__builtin_ia32_vinsertf128_pd256((__v4df)(__m256d)(V1), \\\n                                            (__v2df)(__m128d)(V2), (int)(M))","comments":"","spell":"4632:9-4632:29|4632:9-4634:77|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":["4805:10-4805:30|64|-1"]},{"usr":9669212246035470839,"detailed_name":"char __b11","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3828:22-3828:27|3828:17-3828:27|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3834:26-3834:31|12|-1"]},{"usr":9671974309075374315,"detailed_name":"__m128 __hi","qual_name_offset":7,"short_name_offset":7,"short_name_size":4,"hover":"","comments":"","spell":"4937:25-4937:29|4937:18-4937:29|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4939:65-4939:69|12|-1"]},{"usr":9724428165948275474,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1383:26-1383:29|1383:18-1383:29|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1386:13-1386:16|12|-1"]},{"usr":9726229206834834935,"detailed_name":"__m128 __hi","qual_name_offset":7,"short_name_offset":7,"short_name_size":4,"hover":"","comments":"","spell":"5001:39-5001:43|5001:32-5001:43|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["5003:26-5003:30|12|-1"]},{"usr":9798480868940184409,"detailed_name":"const double *__p","qual_name_offset":14,"short_name_offset":14,"short_name_size":3,"hover":"","comments":"","spell":"3103:31-3103:34|3103:17-3103:34|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3108:37-3108:40|12|-1"]},{"usr":9847067311526148416,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"264:22-264:25|264:15-264:25|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["266:50-266:53|12|-1"]},{"usr":9874385810227767128,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"4532:31-4532:34|4532:24-4532:34|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4534:42-4534:45|12|-1"]},{"usr":9881940464679087314,"detailed_name":"int __i0","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"3959:23-3959:27|3959:19-3959:27|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3962:69-3962:73|12|-1"]},{"usr":9906014245850660430,"detailed_name":"__m128 __lo","qual_name_offset":7,"short_name_offset":7,"short_name_size":4,"hover":"","comments":"","spell":"4937:38-4937:42|4937:31-4937:42|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4939:51-4939:55|12|-1"]},{"usr":9936200870176340888,"detailed_name":"char __b15","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4096:23-4096:28|4096:18-4096:28|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4102:75-4102:80|12|-1"]},{"usr":9941122286781059160,"detailed_name":"_mm256_cmp_pd","qual_name_offset":0,"short_name_offset":0,"short_name_size":13,"hover":"#define _mm256_cmp_pd(a, b, c) \\\n  (__m256d)__builtin_ia32_cmppd256((__v4df)(__m256d)(a), \\\n                                   (__v4df)(__m256d)(b), (c))","comments":"","spell":"1769:9-1769:22|1769:9-1771:62|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":9981393829318315235,"detailed_name":"__DEFAULT_FN_ATTRS128","qual_name_offset":0,"short_name_offset":0,"short_name_size":21,"hover":"#define __DEFAULT_FN_ATTRS128 __attribute__((__always_inline__, __nodebug__, __target__(\"avx\"), __min_vector_width__(128)))","comments":"","spell":"44:9-44:30|44:9-44:124|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":["774:25-774:46|64|-1","867:24-867:45|64|-1","2491:21-2491:42|64|-1","2520:21-2520:42|64|-1","2550:21-2550:42|64|-1","2579:21-2579:42|64|-1","2608:21-2608:42|64|-1","2638:21-2638:42|64|-1","2972:24-2972:45|64|-1","3321:25-3321:46|64|-1","3370:24-3370:45|64|-1","3443:22-3443:43|64|-1","3491:22-3491:43|64|-1","5051:8-5051:29|64|-1"]},{"usr":9989719746107450206,"detailed_name":"const double *__p","qual_name_offset":14,"short_name_offset":14,"short_name_size":3,"hover":"","comments":"","spell":"3070:30-3070:33|3070:16-3070:33|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3072:28-3072:31|12|-1"]},{"usr":10100413440031151092,"detailed_name":"const __m128i_u *__addr_lo","qual_name_offset":17,"short_name_offset":17,"short_name_size":9,"hover":"","comments":"","spell":"4827:66-4827:75|4827:49-4827:75|1026|-1","type":2089679718632112875,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4829:59-4829:68|12|-1"]},{"usr":10115893469624960831,"detailed_name":"_CMP_NEQ_OQ","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _CMP_NEQ_OQ   0x0c","comments":"","spell":"1572:9-1572:20|1572:9-1572:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":10144821412567838127,"detailed_name":"__m256i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2867:41-2867:44|2867:33-2867:44|1026|-1","type":17840313551808425050,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2869:56-2869:59|12|-1"]},{"usr":10154858937928968100,"detailed_name":"__m256d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2386:41-2386:44|2386:33-2386:44|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2388:55-2388:58|12|-1"]},{"usr":10198540028105004485,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4550:32-4550:35|4550:24-4550:35|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4552:42-4552:45|12|-1"]},{"usr":10323242978587845900,"detailed_name":"_CMP_GE_OQ","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _CMP_GE_OQ    0x1d","comments":"","spell":"1589:9-1589:19|1589:9-1589:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":10337573957939724491,"detailed_name":"double *__p","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3236:26-3236:29|3236:18-3236:29|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3241:25-3241:28|12|-1"]},{"usr":10360101721370517079,"detailed_name":"short __w06","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"4009:27-4009:32|4009:21-4009:32|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4013:41-4013:46|12|-1"]},{"usr":10386705937377958996,"detailed_name":"_CMP_NGE_US","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _CMP_NGE_US   0x09","comments":"","spell":"1569:9-1569:20|1569:9-1569:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":10475043386327051517,"detailed_name":"short __w02","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"4010:27-4010:32|4010:21-4010:32|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4012:41-4012:46|12|-1"]},{"usr":10528474103349075602,"detailed_name":"double *__p","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3444:26-3444:29|3444:18-3444:29|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3446:40-3446:43|12|-1"]},{"usr":10537551406531401329,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2580:33-2580:36|2580:26-2580:36|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2582:55-2582:58|12|-1"]},{"usr":10557070838087763713,"detailed_name":"char __b05","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3829:46-3829:51|3829:41-3829:51|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3833:40-3833:45|12|-1"]},{"usr":10559211689312735651,"detailed_name":"__AVXINTRIN_H","qual_name_offset":0,"short_name_offset":0,"short_name_size":13,"hover":"#define __AVXINTRIN_H","comments":"","spell":"15:9-15:22|15:9-15:22|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":10578147735718510019,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2160:25-2160:28|2160:17-2160:28|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2162:54-2162:57|12|-1"]},{"usr":10616745135364361184,"detailed_name":"__m256 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"188:34-188:37|188:27-188:37|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["190:39-190:42|12|-1"]},{"usr":10634887611038698922,"detailed_name":"__m256i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2841:28-2841:31|2841:20-2841:31|1026|-1","type":17840313551808425050,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2843:43-2843:46|12|-1"]},{"usr":10637624650151746882,"detailed_name":"_CMP_NLT_US","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _CMP_NLT_US   0x05","comments":"","spell":"1565:9-1565:20|1565:9-1565:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":10665344839810034710,"detailed_name":"char __b27","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3824:22-3824:27|3824:17-3824:27|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3836:26-3836:31|12|-1"]},{"usr":10682167903523628796,"detailed_name":"short __w08","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"3741:63-3741:68|3741:57-3741:68|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3746:12-3746:17|12|-1"]},{"usr":10899821240354321715,"detailed_name":"short __w12","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"4007:64-4007:69|4007:58-4007:69|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4015:27-4015:32|12|-1"]},{"usr":10911749676076869400,"detailed_name":"__m128d __hi","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"5024:42-5024:46|5024:34-5024:46|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["5026:36-5026:40|12|-1"]},{"usr":10930779506220286393,"detailed_name":"double *__p","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3200:25-3200:28|3200:17-3200:28|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3202:15-3202:18|12|-1"]},{"usr":10988677216789765400,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"814:30-814:33|814:22-814:33|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["816:58-816:61|12|-1"]},{"usr":11056073784661575414,"detailed_name":"const __m256i *__p","qual_name_offset":15,"short_name_offset":15,"short_name_size":3,"hover":"","comments":"","spell":"3180:35-3180:38|3180:20-3180:38|1026|-1","type":17840313551808425050,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3182:57-3182:60|12|-1"]},{"usr":11099968121568823358,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2609:21-2609:24|2609:14-2609:24|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2611:42-2611:45|12|-1"]},{"usr":11197815306890570585,"detailed_name":"__m256d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2408:41-2408:44|2408:33-2408:44|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2410:55-2410:58|12|-1"]},{"usr":11248703719764352046,"detailed_name":"const __m128d *__a","qual_name_offset":15,"short_name_offset":15,"short_name_size":3,"hover":"","comments":"","spell":"3030:36-3030:39|3030:21-3030:39|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3032:46-3032:49|12|-1"]},{"usr":11271202387893212592,"detailed_name":"int __i2","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"3692:42-3692:46|3692:38-3692:46|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3695:73-3695:77|12|-1"]},{"usr":11272947925612524525,"detailed_name":"double *__addr_hi","qual_name_offset":8,"short_name_offset":8,"short_name_size":9,"hover":"","comments":"","spell":"4882:30-4882:39|4882:22-4882:39|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4889:17-4889:26|12|-1"]},{"usr":11291409771631746624,"detailed_name":"float __e","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"3661:21-3661:24|3661:15-3661:24|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3663:49-3663:52|12|-1"]},{"usr":11307299589129326040,"detailed_name":"float __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"3660:21-3660:24|3660:15-3660:24|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3663:69-3663:72|12|-1"]},{"usr":11309383591549680022,"detailed_name":"long long __b","qual_name_offset":10,"short_name_offset":10,"short_name_size":3,"hover":"","comments":"","spell":"4125:45-4125:48|4125:35-4125:48|1026|-1","type":116,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4127:38-4127:41|12|-1"]},{"usr":11340148334864656937,"detailed_name":"double *__a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3532:26-3532:29|3532:18-3532:29|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3535:69-3535:72|12|-1"]},{"usr":11415559032970830495,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"699:23-699:26|699:16-699:26|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["701:51-701:54|12|-1"]},{"usr":11501462122562464752,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4401:32-4401:35|4401:24-4401:35|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4403:42-4403:45|12|-1","4403:55-4403:58|12|-1"]},{"usr":11514620587729535857,"detailed_name":"char __b02","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3830:34-3830:39|3830:29-3830:39|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3833:19-3833:24|12|-1"]},{"usr":11593857905116577703,"detailed_name":"char __b16","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3826:58-3826:63|3826:53-3826:63|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3835:5-3835:10|12|-1"]},{"usr":11595595996059001056,"detailed_name":"char __b26","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3824:34-3824:39|3824:29-3824:39|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3836:19-3836:24|12|-1"]},{"usr":11619414045968264855,"detailed_name":"__m256 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2435:39-2435:42|2435:32-2435:42|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2437:55-2437:58|12|-1"]},{"usr":11683484194881706235,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"__m128d __b = _mm_loadu_pd((const double *)__a)","comments":"","spell":"3032:11-3032:14|3032:3-3032:50|2|-1","type":17014917149991124568,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["3033:51-3033:54|12|-1","3033:64-3033:67|12|-1"]},{"usr":11755733973616416897,"detailed_name":"short __w05","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"3742:50-3742:55|3742:44-3742:55|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3745:79-3745:84|12|-1"]},{"usr":11761261482741940313,"detailed_name":"__m256d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3532:39-3532:42|3532:31-3532:42|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3535:47-3535:50|12|-1"]},{"usr":11774324305657868155,"detailed_name":"char __b11","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4097:23-4097:28|4097:18-4097:28|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4102:47-4102:52|12|-1"]},{"usr":12025147510083374280,"detailed_name":"__m256d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"60:36-60:39|60:28-60:39|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["62:40-62:43|12|-1"]},{"usr":12033439173964753971,"detailed_name":"const float *__p","qual_name_offset":13,"short_name_offset":13,"short_name_size":3,"hover":"","comments":"","spell":"3123:30-3123:33|3123:17-3123:33|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3128:37-3128:40|12|-1"]},{"usr":12055904271028473422,"detailed_name":"int __i1","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"3959:33-3959:37|3959:29-3959:37|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3962:63-3962:67|12|-1"]},{"usr":12092244092905817823,"detailed_name":"_mm256_extract_epi16","qual_name_offset":0,"short_name_offset":0,"short_name_size":20,"hover":"#define _mm256_extract_epi16(X, N) \\\n  (int)(unsigned short)__builtin_ia32_vec_ext_v16hi((__v16hi)(__m256i)(X), \\\n                                                    (int)(N))","comments":"","spell":"1984:9-1984:29|1984:9-1986:62|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":12140277634088827908,"detailed_name":"__DEFAULT_FN_ATTRS","qual_name_offset":0,"short_name_offset":0,"short_name_size":18,"hover":"#define __DEFAULT_FN_ATTRS __attribute__((__always_inline__, __nodebug__, __target__(\"avx\"), __min_vector_width__(256)))","comments":"","spell":"43:9-43:27|43:9-43:121|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":["59:25-59:43|64|-1","77:24-77:42|64|-1","95:25-95:43|64|-1","113:24-113:42|64|-1","132:25-132:43|64|-1","151:24-151:42|64|-1","169:25-169:43|64|-1","187:24-187:42|64|-1","206:25-206:43|64|-1","225:24-225:42|64|-1","244:25-244:43|64|-1","263:24-263:42|64|-1","281:25-281:43|64|-1","299:24-299:42|64|-1","316:25-316:43|64|-1","333:24-333:42|64|-1","350:24-350:42|64|-1","367:24-367:42|64|-1","519:25-519:43|64|-1","537:24-537:42|64|-1","558:25-558:43|64|-1","579:24-579:42|64|-1","597:25-597:43|64|-1","615:24-615:42|64|-1","633:25-633:43|64|-1","651:24-651:42|64|-1","675:25-675:43|64|-1","698:24-698:42|64|-1","721:25-721:43|64|-1","744:24-744:42|64|-1","813:25-813:43|64|-1","958:24-958:42|64|-1","1382:25-1382:43|64|-1","1410:24-1410:42|64|-1","2128:25-2128:43|64|-1","2143:24-2143:42|64|-1","2159:24-2159:42|64|-1","2174:25-2174:43|64|-1","2190:25-2190:43|64|-1","2207:25-2207:43|64|-1","2224:25-2224:43|64|-1","2240:25-2240:43|64|-1","2256:24-2256:42|64|-1","2272:21-2272:39|64|-1","2289:23-2289:41|64|-1","2315:24-2315:42|64|-1","2340:24-2340:42|64|-1","2362:25-2362:43|64|-1","2385:25-2385:43|64|-1","2407:25-2407:43|64|-1","2434:24-2434:42|64|-1","2461:24-2461:42|64|-1","2667:21-2667:39|64|-1","2696:21-2696:39|64|-1","2726:21-2726:39|64|-1","2755:21-2755:39|64|-1","2784:21-2784:39|64|-1","2814:21-2814:39|64|-1","2840:21-2840:39|64|-1","2866:21-2866:39|64|-1","2893:21-2893:39|64|-1","2912:21-2912:39|64|-1","2930:21-2930:39|64|-1","2991:25-2991:43|64|-1","3010:24-3010:42|64|-1","3029:25-3029:43|64|-1","3049:24-3049:42|64|-1","3069:25-3069:43|64|-1","3085:24-3085:42|64|-1","3102:25-3102:43|64|-1","3122:24-3122:42|64|-1","3142:25-3142:43|64|-1","3158:25-3158:43|64|-1","3179:25-3179:43|64|-1","3199:22-3199:40|64|-1","3217:22-3217:40|64|-1","3235:22-3235:40|64|-1","3255:22-3255:40|64|-1","3276:22-3276:40|64|-1","3293:22-3293:40|64|-1","3345:25-3345:43|64|-1","3394:24-3394:42|64|-1","3419:22-3419:40|64|-1","3467:22-3467:40|64|-1","3511:22-3511:40|64|-1","3531:22-3531:40|64|-1","3552:22-3552:40|64|-1","3567:27-3567:45|64|-1","3580:26-3580:44|64|-1","3593:27-3593:45|64|-1","3620:25-3620:43|64|-1","3659:24-3659:42|64|-1","3691:25-3691:43|64|-1","3739:25-3739:43|64|-1","3822:25-3822:43|64|-1","3857:25-3857:43|64|-1","3886:25-3886:43|64|-1","3926:24-3926:42|64|-1","3958:25-3958:43|64|-1","4006:25-4006:43|64|-1","4091:25-4091:43|64|-1","4124:25-4124:43|64|-1","4143:25-4143:43|64|-1","4162:24-4162:42|64|-1","4181:25-4181:43|64|-1","4199:25-4199:43|64|-1","4217:25-4217:43|64|-1","4238:25-4238:43|64|-1","4253:25-4253:43|64|-1","4267:24-4267:42|64|-1","4280:25-4280:43|64|-1","4298:24-4298:42|64|-1","4315:25-4315:43|64|-1","4332:25-4332:43|64|-1","4349:25-4349:43|64|-1","4366:24-4366:42|64|-1","4383:25-4383:43|64|-1","4400:25-4400:43|64|-1","4417:24-4417:42|64|-1","4433:25-4433:43|64|-1","4454:25-4454:43|64|-1","4475:24-4475:42|64|-1","4494:25-4494:43|64|-1","4513:25-4513:43|64|-1","4531:24-4531:42|64|-1","4549:25-4549:43|64|-1","4773:24-4773:42|64|-1","4801:25-4801:43|64|-1","4826:25-4826:43|64|-1","4852:22-4852:40|64|-1","4881:22-4881:40|64|-1","4910:22-4910:40|64|-1","4936:24-4936:42|64|-1","4957:25-4957:43|64|-1","4977:25-4977:43|64|-1","5000:24-5000:42|64|-1","5023:25-5023:43|64|-1","5044:25-5044:43|64|-1","5050:8-5050:26|64|-1"]},{"usr":12140997999573101502,"detailed_name":"long long __a","qual_name_offset":10,"short_name_offset":10,"short_name_size":3,"hover":"","comments":"","spell":"3858:29-3858:32|3858:19-3858:32|1026|-1","type":116,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3860:58-3860:61|12|-1"]},{"usr":12152712782518328712,"detailed_name":"__m128i_u *__addr_lo","qual_name_offset":11,"short_name_offset":11,"short_name_size":9,"hover":"","comments":"","spell":"4911:55-4911:64|4911:44-4911:64|1026|-1","type":2089679718632112875,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4916:20-4916:29|12|-1"]},{"usr":12178214708614634359,"detailed_name":"_mm_permute_pd","qual_name_offset":0,"short_name_offset":0,"short_name_size":14,"hover":"#define _mm_permute_pd(A, C) \\\n  (__m128d)__builtin_ia32_vpermilpd((__v2df)(__m128d)(A), (int)(C))","comments":"","spell":"991:9-991:23|991:9-992:68|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":12208746159319657290,"detailed_name":"char __b23","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3825:22-3825:27|3825:17-3825:27|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3835:54-3835:59|12|-1"]},{"usr":12377079621887342140,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"959:29-959:32|959:22-959:32|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["961:57-961:60|12|-1"]},{"usr":12417852690340634793,"detailed_name":"short __w10","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"3741:37-3741:42|3741:31-3741:42|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3746:26-3746:31|12|-1"]},{"usr":12433789699639682409,"detailed_name":"__m256d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"722:37-722:40|722:29-722:40|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["724:65-724:68|12|-1"]},{"usr":12580723205662368252,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3468:55-3468:58|3468:47-3468:58|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3470:69-3470:72|12|-1"]},{"usr":12599418204897408379,"detailed_name":"char __b30","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3823:34-3823:39|3823:29-3823:39|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3836:47-3836:52|12|-1"]},{"usr":12647569231954362464,"detailed_name":"short __w03","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"3743:24-3743:29|3743:18-3743:29|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3745:65-3745:70|12|-1"]},{"usr":12664458703230360798,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"3492:50-3492:53|3492:43-3492:53|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3494:66-3494:69|12|-1"]},{"usr":12781945020551113706,"detailed_name":"char __b13","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3827:46-3827:51|3827:41-3827:51|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3834:40-3834:45|12|-1"]},{"usr":12804455865787739677,"detailed_name":"_CMP_TRUE_US","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _CMP_TRUE_US  0x1f","comments":"","spell":"1591:9-1591:21|1591:9-1591:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":12835707240837604588,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2609:33-2609:36|2609:26-2609:36|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2611:55-2611:58|12|-1"]},{"usr":12898139600927988772,"detailed_name":"__m256i __m","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3420:41-3420:44|3420:33-3420:44|1026|-1","type":17840313551808425050,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3422:56-3422:59|12|-1"]},{"usr":12920266305272502413,"detailed_name":"float __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"3927:22-3927:25|3927:16-3927:25|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3930:59-3930:62|12|-1"]},{"usr":12972357182371032036,"detailed_name":"char __b00","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4099:59-4099:64|4099:54-4099:64|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4101:26-4101:31|12|-1"]},{"usr":12982278883750069902,"detailed_name":"_mm_cmp_ss","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _mm_cmp_ss(a, b, c) \\\n  (__m128)__builtin_ia32_cmpss((__v4sf)(__m128)(a), \\\n                               (__v4sf)(__m128)(b), (c))","comments":"","spell":"1947:9-1947:19|1947:9-1949:57|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":13017856661602828957,"detailed_name":"short __w15","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"4007:25-4007:30|4007:19-4007:30|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4015:48-4015:53|12|-1"]},{"usr":13130664092884525348,"detailed_name":"__m256 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"580:37-580:40|580:30-580:40|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["582:42-582:45|12|-1"]},{"usr":13170189843848400360,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2225:28-2225:31|2225:20-2225:31|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2227:55-2227:58|12|-1"]},{"usr":13252374348839548094,"detailed_name":"long long __c","qual_name_offset":10,"short_name_offset":10,"short_name_size":3,"hover":"","comments":"","spell":"3858:59-3858:62|3858:49-3858:62|1026|-1","type":116,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3860:48-3860:51|12|-1"]},{"usr":13253940345325312068,"detailed_name":"char __b22","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4094:35-4094:40|4094:30-4094:40|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4103:68-4103:73|12|-1"]},{"usr":13293649522015382331,"detailed_name":"double __c","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"3621:46-3621:49|3621:39-3621:49|1026|-1","type":144,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3623:40-3623:43|12|-1"]},{"usr":13346829370747008065,"detailed_name":"_CMP_FALSE_OS","qual_name_offset":0,"short_name_offset":0,"short_name_size":13,"hover":"#define _CMP_FALSE_OS 0x1b","comments":"","spell":"1587:9-1587:22|1587:9-1587:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":13405384482057452537,"detailed_name":"__m256i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2894:30-2894:33|2894:22-2894:33|1026|-1","type":17840313551808425050,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2896:45-2896:48|12|-1"]},{"usr":13448951638105159053,"detailed_name":"double __w","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"4144:23-4144:26|4144:16-4144:26|1026|-1","type":144,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4146:24-4146:27|12|-1","4146:29-4146:32|12|-1","4146:34-4146:37|12|-1","4146:39-4146:42|12|-1"]},{"usr":13498851746772802364,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"317:24-317:27|317:16-317:27|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["319:52-319:55|12|-1"]},{"usr":13525513750540409186,"detailed_name":"__m256d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"133:39-133:42|133:31-133:42|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["135:67-135:70|12|-1"]},{"usr":13534716185283804435,"detailed_name":"__m256d_u _mm256_storeu_pd(double *, __m256d)::__storeu_pd::__v","qual_name_offset":10,"short_name_offset":60,"short_name_size":3,"hover":"","comments":"","spell":"3239:15-3239:18|3239:5-3239:18|2|-1","type":14011233385592347370,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["3241:31-3241:34|20|-1"]},{"usr":13545502538392900508,"detailed_name":"float __e","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"3928:22-3928:25|3928:16-3928:25|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3930:39-3930:42|12|-1"]},{"usr":13575320374811828470,"detailed_name":"float __g","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"3928:44-3928:47|3928:38-3928:47|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3930:29-3930:32|12|-1"]},{"usr":13580676544418747509,"detailed_name":"__m128i __hi","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"5045:42-5045:46|5045:34-5045:46|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["5047:36-5047:40|12|-1"]},{"usr":13658625166847224564,"detailed_name":"__m256i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3512:43-3512:46|3512:35-3512:46|1026|-1","type":17840313551808425050,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3515:47-3515:50|12|-1"]},{"usr":13676224519408112233,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2639:23-2639:26|2639:16-2639:26|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2641:44-2641:47|12|-1"]},{"usr":13701890179374868238,"detailed_name":"char __b23","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4094:23-4094:28|4094:18-4094:28|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4103:75-4103:80|12|-1"]},{"usr":13751228838686270187,"detailed_name":"float __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"3660:32-3660:35|3660:26-3660:35|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3663:64-3663:67|12|-1"]},{"usr":13803185163625657598,"detailed_name":"_CMP_EQ_OQ","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _CMP_EQ_OQ    0x00","comments":"","spell":"1560:9-1560:19|1560:9-1560:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":13813848660256031900,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"4333:25-4333:28|4333:18-4333:28|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4335:19-4335:22|12|-1"]},{"usr":13844824463205687082,"detailed_name":"_mm256_round_pd","qual_name_offset":0,"short_name_offset":0,"short_name_size":15,"hover":"#define _mm256_round_pd(V, M) \\\n    (__m256d)__builtin_ia32_roundpd256((__v4df)(__m256d)(V), (M))","comments":"","spell":"402:9-402:24|402:9-403:66|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":13884131050771337406,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3236:39-3236:42|3236:31-3236:42|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3241:37-3241:40|12|-1"]},{"usr":13933408055997933983,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"226:22-226:25|226:15-226:25|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["228:50-228:53|12|-1"]},{"usr":13949544650701455820,"detailed_name":"__m256i_u _mm256_loadu_si256(const __m256i_u *)::__loadu_si256::__v","qual_name_offset":10,"short_name_offset":64,"short_name_size":3,"hover":"","comments":"","spell":"3162:15-3162:18|3162:5-3162:18|2|-1","type":963758814137229199,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["3164:46-3164:49|12|-1"]},{"usr":13993890089283256986,"detailed_name":"__m256_u _mm256_loadu_ps(const float *)::__loadu_ps::__v","qual_name_offset":9,"short_name_offset":53,"short_name_size":3,"hover":"","comments":"","spell":"3126:14-3126:17|3126:5-3126:17|2|-1","type":12121053416515032001,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["3128:43-3128:46|12|-1"]},{"usr":14021049441631799919,"detailed_name":"__m256d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"559:39-559:42|559:31-559:42|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["561:43-561:46|12|-1"]},{"usr":14071157404763124524,"detailed_name":"_CMP_NGE_UQ","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _CMP_NGE_UQ   0x19","comments":"","spell":"1585:9-1585:20|1585:9-1585:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":14077681865366422160,"detailed_name":"__m256i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2841:41-2841:44|2841:33-2841:44|1026|-1","type":17840313551808425050,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2843:56-2843:59|12|-1"]},{"usr":14078975541802782947,"detailed_name":"__m256 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2785:36-2785:39|2785:29-2785:39|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2787:58-2787:61|12|-1"]},{"usr":14096381991140193344,"detailed_name":"_mm256_insertf128_si256","qual_name_offset":0,"short_name_offset":0,"short_name_size":23,"hover":"#define _mm256_insertf128_si256(V1, V2, M) \\\n  (__m256i)__builtin_ia32_vinsertf128_si256((__v8si)(__m256i)(V1), \\\n                                            (__v4si)(__m128i)(V2), (int)(M))","comments":"","spell":"4670:9-4670:32|4670:9-4672:77|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":["4830:10-4830:33|64|-1"]},{"usr":14164069706180057105,"detailed_name":"_mm256_permute_ps","qual_name_offset":0,"short_name_offset":0,"short_name_size":17,"hover":"#define _mm256_permute_ps(A, C) \\\n  (__m256)__builtin_ia32_vpermilps256((__v8sf)(__m256)(A), (int)(C))","comments":"","spell":"1179:9-1179:26|1179:9-1180:69|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":14174083959383290298,"detailed_name":"__m128d __v128","qual_name_offset":8,"short_name_offset":8,"short_name_size":6,"hover":"","comments":"","spell":"4884:11-4884:17|4884:3-4884:17|2|-1","type":17014917149991124568,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["4886:3-4886:9|20|-1","4887:28-4887:34|12|-1","4888:3-4888:9|20|-1","4889:28-4889:34|12|-1"]},{"usr":14196900294073564628,"detailed_name":"_mm256_extractf128_ps","qual_name_offset":0,"short_name_offset":0,"short_name_size":21,"hover":"#define _mm256_extractf128_ps(V, M) \\\n  (__m128)__builtin_ia32_vextractf128_ps256((__v8sf)(__m256)(V), (int)(M))","comments":"","spell":"4700:9-4700:30|4700:9-4701:75|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":["4859:12-4859:33|64|-1"]},{"usr":14197043188711012359,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1411:25-1411:28|1411:18-1411:28|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1414:13-1414:16|12|-1"]},{"usr":14224815596867367574,"detailed_name":"char __b24","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4093:59-4093:64|4093:54-4093:64|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4104:26-4104:31|12|-1"]},{"usr":14247327028298677035,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"152:25-152:28|152:18-152:28|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["154:53-154:56|12|-1"]},{"usr":14276981214458966171,"detailed_name":"__m128i __c","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"868:39-868:42|868:31-868:42|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["870:67-870:70|12|-1"]},{"usr":14302942732933672410,"detailed_name":"_mm256_permute_pd","qual_name_offset":0,"short_name_offset":0,"short_name_size":17,"hover":"#define _mm256_permute_pd(A, C) \\\n  (__m256d)__builtin_ia32_vpermilpd256((__v4df)(__m256d)(A), (int)(C))","comments":"","spell":"1031:9-1031:26|1031:9-1032:71|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":14374893408067279935,"detailed_name":"__m256 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"78:34-78:37|78:27-78:37|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["80:39-80:42|12|-1"]},{"usr":14406631881819144081,"detailed_name":"double __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"3621:22-3621:25|3621:15-3621:25|1026|-1","type":144,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3623:50-3623:53|12|-1"]},{"usr":14476516389913108219,"detailed_name":"__m256 __c","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1411:49-1411:52|1411:42-1411:52|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1414:39-1414:42|12|-1"]},{"usr":14482332044888279900,"detailed_name":"short __w","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"4200:25-4200:28|4200:19-4200:28|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4202:27-4202:30|12|-1","4202:32-4202:35|12|-1","4202:37-4202:40|12|-1","4202:42-4202:45|12|-1","4202:47-4202:50|12|-1","4202:52-4202:55|12|-1","4202:57-4202:60|12|-1","4202:62-4202:65|12|-1","4203:27-4203:30|12|-1","4203:32-4203:35|12|-1","4203:37-4203:40|12|-1","4203:42-4203:45|12|-1","4203:47-4203:50|12|-1","4203:52-4203:55|12|-1","4203:57-4203:60|12|-1","4203:62-4203:65|12|-1"]},{"usr":14503474130685648606,"detailed_name":"float __d","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"3927:55-3927:58|3927:49-3927:58|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3930:44-3930:47|12|-1"]},{"usr":14515637949666185566,"detailed_name":"short __w13","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"3740:50-3740:55|3740:44-3740:55|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3746:47-3746:52|12|-1"]},{"usr":14536514108330551399,"detailed_name":"_mm256_dp_ps","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm256_dp_ps(V1, V2, M) \\\n  (__m256)__builtin_ia32_dpps256((__v8sf)(__m256)(V1), \\\n                                 (__v8sf)(__m256)(V2), (M))","comments":"","spell":"1455:9-1455:21|1455:9-1457:60|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":14542350984759981564,"detailed_name":"int __i7","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"3960:53-3960:57|3960:49-3960:57|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3962:27-3962:31|12|-1"]},{"usr":14562835130315178026,"detailed_name":"double __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"3621:34-3621:37|3621:27-3621:37|1026|-1","type":144,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3623:45-3623:48|12|-1"]},{"usr":14567059192339094584,"detailed_name":"__m256i __c","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"959:42-959:45|959:34-959:45|1026|-1","type":17840313551808425050,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["961:70-961:73|12|-1"]},{"usr":14605503875526057804,"detailed_name":"short __w11","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"3741:24-3741:29|3741:18-3741:29|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3746:33-3746:38|12|-1"]},{"usr":14647228367055599119,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2521:35-2521:38|2521:27-2521:38|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2523:55-2523:58|12|-1"]},{"usr":14649459223587815181,"detailed_name":"short __w01","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"3743:50-3743:55|3743:44-3743:55|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3745:51-3745:56|12|-1"]},{"usr":14655039374183995702,"detailed_name":"__m256d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"170:36-170:39|170:28-170:39|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["172:40-172:43|12|-1"]},{"usr":14804794930436731241,"detailed_name":"_mm256_blend_ps","qual_name_offset":0,"short_name_offset":0,"short_name_size":15,"hover":"#define _mm256_blend_ps(V1, V2, M) \\\n  (__m256)__builtin_ia32_blendps256((__v8sf)(__m256)(V1), \\\n                                    (__v8sf)(__m256)(V2), (int)(M))","comments":"","spell":"1357:9-1357:24|1357:9-1359:68|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":14821299653953911438,"detailed_name":"__m256i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2144:28-2144:31|2144:20-2144:31|1026|-1","type":17840313551808425050,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2146:50-2146:53|12|-1"]},{"usr":14844397178017976381,"detailed_name":"__m256i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3294:45-3294:48|3294:37-3294:48|1026|-1","type":17840313551808425050,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3299:40-3299:43|12|-1"]},{"usr":14867052416455273223,"detailed_name":"const float *__a","qual_name_offset":13,"short_name_offset":13,"short_name_size":3,"hover":"","comments":"","spell":"3011:34-3011:37|3011:21-3011:37|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3013:16-3013:19|12|-1"]},{"usr":14898896982467795883,"detailed_name":"_CMP_ORD_Q","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _CMP_ORD_Q    0x07","comments":"","spell":"1567:9-1567:19|1567:9-1567:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":14902183174499314845,"detailed_name":"_CMP_NGT_UQ","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _CMP_NGT_UQ   0x1a","comments":"","spell":"1586:9-1586:20|1586:9-1586:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":14920090758698305857,"detailed_name":"__m256 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2815:38-2815:41|2815:31-2815:41|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2817:60-2817:63|12|-1"]},{"usr":14950926335848284799,"detailed_name":"_mm_permute_ps","qual_name_offset":0,"short_name_offset":0,"short_name_size":14,"hover":"#define _mm_permute_ps(A, C) \\\n  (__m128)__builtin_ia32_vpermilps((__v4sf)(__m128)(A), (int)(C))","comments":"","spell":"1087:9-1087:23|1087:9-1088:66|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":15043757424995104432,"detailed_name":"__m256i *__p","qual_name_offset":9,"short_name_offset":9,"short_name_size":3,"hover":"","comments":"","spell":"3277:29-3277:32|3277:20-3277:32|1026|-1","type":17840313551808425050,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3279:4-3279:7|12|-1"]},{"usr":15132982547024829260,"detailed_name":"float *__p","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"3492:25-3492:28|3492:18-3492:28|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3494:40-3494:43|12|-1"]},{"usr":15159897062420731041,"detailed_name":"char __b14","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4096:35-4096:40|4096:30-4096:40|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4102:68-4102:73|12|-1"]},{"usr":15207419717411552912,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2462:27-2462:30|2462:20-2462:30|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2464:42-2464:45|12|-1"]},{"usr":15220317073064232684,"detailed_name":"__v8si __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"__v8si __b = (__v8si)__a","comments":"","spell":"2275:9-2275:12|2275:2-2275:26|2|-1","type":9180739519895603189,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["2276:9-2276:12|4|-1"]},{"usr":15279026921819901164,"detailed_name":"char __b14","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3827:34-3827:39|3827:29-3827:39|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3834:47-3834:52|12|-1"]},{"usr":15443467406464956164,"detailed_name":"char __b04","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4098:59-4098:64|4098:54-4098:64|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4101:54-4101:59|12|-1"]},{"usr":15452174518551208180,"detailed_name":"_CMP_UNORD_S","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _CMP_UNORD_S  0x13","comments":"","spell":"1579:9-1579:21|1579:9-1579:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":15457666497956532130,"detailed_name":"__m128i __m","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3492:38-3492:41|3492:30-3492:41|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3494:53-3494:56|12|-1"]},{"usr":15526355299804109368,"detailed_name":"short __w04","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"4009:53-4009:58|4009:47-4009:58|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4013:27-4013:32|12|-1"]},{"usr":15538627378303378828,"detailed_name":"_mm256_permute2f128_ps","qual_name_offset":0,"short_name_offset":0,"short_name_size":22,"hover":"#define _mm256_permute2f128_ps(V1, V2, M) \\\n  (__m256)__builtin_ia32_vperm2f128_ps256((__v8sf)(__m256)(V1), \\\n                                          (__v8sf)(__m256)(V2), (int)(M))","comments":"","spell":"1260:9-1260:31|1260:9-1262:74|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":15567207599815722889,"detailed_name":"float *__p","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"3420:28-3420:31|3420:21-3420:31|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3422:43-3422:46|12|-1"]},{"usr":15584551201893785399,"detailed_name":"__m128i __v128","qual_name_offset":8,"short_name_offset":8,"short_name_size":6,"hover":"","comments":"","spell":"4913:11-4913:17|4913:3-4913:17|2|-1","type":9307668512027311864,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["4915:3-4915:9|20|-1","4916:31-4916:37|12|-1","4917:3-4917:9|20|-1","4918:31-4918:37|12|-1"]},{"usr":15603574808682100089,"detailed_name":"__m256i_u _mm256_storeu_si256(__m256i_u *, __m256i)::__storeu_si256::__v","qual_name_offset":10,"short_name_offset":69,"short_name_size":3,"hover":"","comments":"","spell":"3297:15-3297:18|3297:5-3297:18|2|-1","type":963758814137229199,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["3299:34-3299:37|20|-1"]},{"usr":15621141783442333472,"detailed_name":"float __h","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"3661:54-3661:57|3661:48-3661:57|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3663:34-3663:37|12|-1"]},{"usr":15677541319891780587,"detailed_name":"__m128i __hi","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"4978:27-4978:31|4978:19-4978:31|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4980:66-4980:70|12|-1"]},{"usr":15687896079871004221,"detailed_name":"short __w13","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"4007:51-4007:56|4007:45-4007:56|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4015:34-4015:39|12|-1"]},{"usr":15692636797369665396,"detailed_name":"short __w00","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"3743:63-3743:68|3743:57-3743:68|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3745:44-3745:49|12|-1"]},{"usr":15716332471662446384,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"334:23-334:26|334:16-334:26|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["336:51-336:54|12|-1"]},{"usr":15717837998479927446,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"3420:53-3420:56|3420:46-3420:56|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3422:69-3422:72|12|-1"]},{"usr":15737365803796601110,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"559:26-559:29|559:18-559:29|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["561:29-561:32|12|-1"]},{"usr":15744590540162263351,"detailed_name":"__m256 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1411:37-1411:40|1411:30-1411:40|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1414:26-1414:29|12|-1"]},{"usr":15777246740887755481,"detailed_name":"const float *__p","qual_name_offset":13,"short_name_offset":13,"short_name_size":3,"hover":"","comments":"","spell":"3371:30-3371:33|3371:17-3371:33|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3373:60-3373:63|12|-1"]},{"usr":15788232208071544686,"detailed_name":"_CMP_NLE_US","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _CMP_NLE_US   0x06","comments":"","spell":"1566:9-1566:20|1566:9-1566:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":15824147968910391680,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4455:32-4455:35|4455:24-4455:35|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4457:42-4457:45|12|-1","4457:55-4457:58|12|-1"]},{"usr":15847364736064191508,"detailed_name":"__m256d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"676:37-676:40|676:29-676:40|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["678:65-678:68|12|-1"]},{"usr":15993669714784355961,"detailed_name":"short __w01","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"4010:40-4010:45|4010:34-4010:45|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4012:34-4012:39|12|-1"]},{"usr":16140602631304819867,"detailed_name":"_CMP_LT_OQ","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _CMP_LT_OQ    0x11","comments":"","spell":"1577:9-1577:19|1577:9-1577:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":16257280113503626896,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2492:35-2492:38|2492:27-2492:38|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2494:55-2494:58|12|-1"]},{"usr":16311361405717174548,"detailed_name":"short __w10","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"4008:27-4008:32|4008:21-4008:32|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4014:41-4014:46|12|-1"]},{"usr":16359545865944643845,"detailed_name":"_CMP_EQ_OS","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _CMP_EQ_OS    0x10","comments":"","spell":"1576:9-1576:19|1576:9-1576:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":16423830134157668871,"detailed_name":"__m128i __lo","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"4978:41-4978:45|4978:33-4978:45|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4980:52-4980:56|12|-1"]},{"usr":16431689392420002126,"detailed_name":"const __m256i_u *__p","qual_name_offset":17,"short_name_offset":17,"short_name_size":3,"hover":"","comments":"","spell":"3159:37-3159:40|3159:20-3159:40|1026|-1","type":963758814137229199,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3164:40-3164:43|12|-1"]},{"usr":16464958575496190854,"detailed_name":"__m256d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2697:25-2697:28|2697:17-2697:28|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2699:45-2699:48|12|-1"]},{"usr":16511926026693826689,"detailed_name":"__m256i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2273:30-2273:33|2273:22-2273:33|1026|-1","type":17840313551808425050,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2275:23-2275:26|12|-1"]},{"usr":16546506519315712302,"detailed_name":"__m256i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2867:28-2867:31|2867:20-2867:31|1026|-1","type":17840313551808425050,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2869:43-2869:46|12|-1"]},{"usr":16547913021163937436,"detailed_name":"char __b12","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3827:58-3827:63|3827:53-3827:63|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3834:33-3834:38|12|-1"]},{"usr":16556042718818433412,"detailed_name":"long long __b","qual_name_offset":10,"short_name_offset":10,"short_name_size":3,"hover":"","comments":"","spell":"3858:44-3858:47|3858:34-3858:47|1026|-1","type":116,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3860:53-3860:56|12|-1"]},{"usr":16603458174888966396,"detailed_name":"short __w09","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"3741:50-3741:55|3741:44-3741:55|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3746:19-3746:24|12|-1"]},{"usr":16635020134563077892,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"3218:36-3218:39|3218:29-3218:39|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3220:20-3220:23|12|-1"]},{"usr":16797829072747230912,"detailed_name":"__m256 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"745:35-745:38|745:28-745:38|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["747:64-747:67|12|-1"]},{"usr":16818967688835218217,"detailed_name":"const float *__addr_lo","qual_name_offset":13,"short_name_offset":13,"short_name_size":9,"hover":"","comments":"","spell":"4774:57-4774:66|4774:44-4774:66|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4776:55-4776:64|12|-1"]},{"usr":16859393767160755178,"detailed_name":"short __w07","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"3742:24-3742:29|3742:18-3742:29|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3746:5-3746:10|12|-1"]},{"usr":16873814322148243152,"detailed_name":"const __m128 *__a","qual_name_offset":14,"short_name_offset":14,"short_name_size":3,"hover":"","comments":"","spell":"3050:35-3050:38|3050:21-3050:38|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3052:44-3052:47|12|-1"]},{"usr":16902750433737194321,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"3553:37-3553:40|3553:30-3553:40|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3556:47-3556:50|12|-1"]},{"usr":16966127013115016121,"detailed_name":"__m256 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"114:34-114:37|114:27-114:37|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["116:39-116:42|12|-1"]},{"usr":16988273303103967001,"detailed_name":"__m256i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3277:42-3277:45|3277:34-3277:45|1026|-1","type":17840313551808425050,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3279:10-3279:13|12|-1"]},{"usr":17102576319102628428,"detailed_name":"float __f","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"float __f = *__a","comments":"","spell":"2975:9-2975:12|2975:3-2975:19|2|-1","type":143,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["2976:42-2976:45|12|-1","2976:47-2976:50|12|-1","2976:52-2976:55|12|-1","2976:57-2976:60|12|-1"]},{"usr":17108048506956252706,"detailed_name":"float __f","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"3928:33-3928:36|3928:27-3928:36|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3930:34-3930:37|12|-1"]},{"usr":17176557586750703511,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2492:22-2492:25|2492:14-2492:25|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2494:42-2494:45|12|-1"]},{"usr":17192948036566471336,"detailed_name":"__m256i_u *__p","qual_name_offset":11,"short_name_offset":11,"short_name_size":3,"hover":"","comments":"","spell":"3294:32-3294:35|3294:21-3294:35|1026|-1","type":963758814137229199,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3299:28-3299:31|12|-1"]},{"usr":17227313666985123274,"detailed_name":"short __w09","qual_name_offset":6,"short_name_offset":6,"short_name_size":5,"hover":"","comments":"","spell":"4008:40-4008:45|4008:34-4008:45|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4014:34-4014:39|12|-1"]},{"usr":17243723296855123052,"detailed_name":"_mm256_floor_pd","qual_name_offset":0,"short_name_offset":0,"short_name_size":15,"hover":"#define _mm256_floor_pd(V) _mm256_round_pd((V), _MM_FROUND_FLOOR)","comments":"","spell":"470:9-470:24|470:9-470:66|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":17250865832376254926,"detailed_name":"char __b00","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3830:58-3830:63|3830:53-3830:63|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3833:5-3833:10|12|-1"]},{"usr":17275376664098899143,"detailed_name":"__m256i *__a","qual_name_offset":9,"short_name_offset":9,"short_name_size":3,"hover":"","comments":"","spell":"3512:30-3512:33|3512:21-3512:33|1026|-1","type":17840313551808425050,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3515:69-3515:72|12|-1"]},{"usr":17294947406163535362,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"__m128 __b = _mm_loadu_ps((const float *)__a)","comments":"","spell":"3052:10-3052:13|3052:3-3052:48|2|-1","type":15682930942610409926,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["3053:50-3053:53|12|-1","3053:63-3053:66|12|-1"]},{"usr":17306971409598763580,"detailed_name":"float __c","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"3927:44-3927:47|3927:38-3927:47|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3930:49-3930:52|12|-1"]},{"usr":17378633643760454895,"detailed_name":"char __b18","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4095:35-4095:40|4095:30-4095:40|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4103:40-4103:45|12|-1"]},{"usr":17387274726914733848,"detailed_name":"_mm256_insert_epi8","qual_name_offset":0,"short_name_offset":0,"short_name_size":18,"hover":"#define _mm256_insert_epi8(X, I, N) \\\n  (__m256i)__builtin_ia32_vec_set_v32qi((__v32qi)(__m256i)(X), \\\n                                        (int)(I), (int)(N))","comments":"","spell":"2090:9-2090:27|2090:9-2092:60|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":17428514416715317953,"detailed_name":"char __b21","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3825:46-3825:51|3825:41-3825:51|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3835:40-3835:45|12|-1"]},{"usr":17430448245836974090,"detailed_name":"__m256d __c","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1383:52-1383:55|1383:44-1383:55|1026|-1","type":2865630081197710463,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1386:39-1386:42|12|-1"]},{"usr":17441986396468547496,"detailed_name":"char __b17","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4095:47-4095:52|4095:42-4095:52|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4103:33-4103:38|12|-1"]},{"usr":17471428438920931943,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2191:24-2191:27|2191:17-2191:27|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2193:51-2193:54|12|-1"]},{"usr":17501766644516119152,"detailed_name":"int __i5","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"3693:32-3693:36|3693:28-3693:36|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3695:55-3695:59|12|-1"]},{"usr":17519769413169829898,"detailed_name":"int __i3","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"3692:52-3692:56|3692:48-3692:56|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3695:67-3695:71|12|-1"]},{"usr":17542347944076795821,"detailed_name":"__m256i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4367:29-4367:32|4367:21-4367:32|1026|-1","type":17840313551808425050,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4369:18-4369:21|12|-1"]},{"usr":17579200124927641593,"detailed_name":"_CMP_ORD_S","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _CMP_ORD_S    0x17","comments":"","spell":"1583:9-1583:19|1583:9-1583:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":17607897440866242458,"detailed_name":"__m256i __m","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3395:46-3395:49|3395:38-3395:49|1026|-1","type":17840313551808425050,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3397:76-3397:79|12|-1"]},{"usr":17637219496212645411,"detailed_name":"float __c","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"3660:43-3660:46|3660:37-3660:46|1026|-1","type":143,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3663:59-3663:62|12|-1"]},{"usr":17674565849258406258,"detailed_name":"__m256i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4384:29-4384:32|4384:21-4384:32|1026|-1","type":17840313551808425050,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4386:19-4386:22|12|-1"]},{"usr":17690761542946281854,"detailed_name":"_mm256_extractf128_pd","qual_name_offset":0,"short_name_offset":0,"short_name_size":21,"hover":"#define _mm256_extractf128_pd(V, M) \\\n  (__m128d)__builtin_ia32_vextractf128_pd256((__v4df)(__m256d)(V), (int)(M))","comments":"","spell":"4724:9-4724:30|4724:9-4725:77|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":["4888:12-4888:33|64|-1"]},{"usr":17782425231357461718,"detailed_name":"char __b05","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4098:47-4098:52|4098:42-4098:52|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4101:61-4101:66|12|-1"]},{"usr":17790889814304223431,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"745:23-745:26|745:16-745:26|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["747:51-747:54|12|-1"]},{"usr":17793415487974894219,"detailed_name":"_mm256_extract_epi32","qual_name_offset":0,"short_name_offset":0,"short_name_size":20,"hover":"#define _mm256_extract_epi32(X, N) \\\n  (int)__builtin_ia32_vec_ext_v8si((__v8si)(__m256i)(X), (int)(N))","comments":"","spell":"1966:9-1966:29|1966:9-1967:67|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":17848190507590222175,"detailed_name":"const double *__addr_lo","qual_name_offset":14,"short_name_offset":14,"short_name_size":9,"hover":"","comments":"","spell":"4802:60-4802:69|4802:46-4802:69|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4804:56-4804:65|12|-1"]},{"usr":17946509790129828662,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2815:26-2815:29|2815:19-2815:29|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2817:47-2817:50|12|-1"]},{"usr":17957390629577246351,"detailed_name":"char __b20","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3825:58-3825:63|3825:53-3825:63|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3835:33-3835:38|12|-1"]},{"usr":18119665317715259329,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2931:27-2931:30|2931:20-2931:30|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2933:45-2933:48|12|-1"]},{"usr":18176830296629404020,"detailed_name":"char __b06","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3829:34-3829:39|3829:29-3829:39|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3833:47-3833:52|12|-1"]},{"usr":18185144457440858021,"detailed_name":"__m256 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2756:24-2756:27|2756:17-2756:27|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2758:45-2758:48|12|-1"]},{"usr":18188277740968592371,"detailed_name":"__m256 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"264:34-264:37|264:27-264:37|1026|-1","type":13081541567295835539,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["266:63-266:66|12|-1"]},{"usr":18195081901822363210,"detailed_name":"_mm256_permute2f128_si256","qual_name_offset":0,"short_name_offset":0,"short_name_size":25,"hover":"#define _mm256_permute2f128_si256(V1, V2, M) \\\n  (__m256i)__builtin_ia32_vperm2f128_si256((__v8si)(__m256i)(V1), \\\n                                           (__v8si)(__m256i)(V2), (int)(M))","comments":"","spell":"1300:9-1300:34|1300:9-1302:76|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":18318278885403774872,"detailed_name":"char __b29","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4092:47-4092:52|4092:42-4092:52|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4104:61-4104:66|12|-1"]},{"usr":18342905855345256923,"detailed_name":"_CMP_NLE_UQ","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _CMP_NLE_UQ   0x16","comments":"","spell":"1582:9-1582:20|1582:9-1582:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":18388782281483617390,"detailed_name":"char __b16","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"4095:59-4095:64|4095:54-4095:64|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4103:26-4103:31|12|-1"]},{"usr":18411188843122003482,"detailed_name":"_CMP_EQ_UQ","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _CMP_EQ_UQ    0x08","comments":"","spell":"1568:9-1568:19|1568:9-1568:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":18416613383498523191,"detailed_name":"_CMP_NEQ_OS","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _CMP_NEQ_OS   0x1c","comments":"","spell":"1588:9-1588:20|1588:9-1588:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]}]}