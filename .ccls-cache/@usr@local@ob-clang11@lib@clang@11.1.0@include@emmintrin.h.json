21
{"md5":"15ee96a71ec1a4288c0b5ffdad114450","language":1,"no_linkage":true,"lid2path":[],"import_file":"[GIT_TOP_DIR]/src/impl/FhtKacRotator.cpp","args":["clang","[GIT_TOP_DIR]/src/impl/FhtKacRotator.cpp","-working-directory=[GIT_TOP_DIR]/"],"dependencies":{"/usr/include/c++/10/bits/stl_numeric.h":"ignore_header_sys","/usr/include/ctype.h":"ignore_header_sys","/usr/include/bits/types/__mbstate_t.h":"ignore_header_sys","/usr/include/features.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/immintrin.h":"774d8f5fec0961c7f69eaa3c69870fd7","/usr/include/math.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_algobase.h":"ignore_header_sys","/usr/include/bits/byteswap.h":"ignore_header_sys","/usr/include/c++/10/vector":"ignore_header_sys","/usr/include/c++/10/bits/iterator_concepts.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avxintrin.h":"772d5fd2b95bf581b4338458db989424","/usr/include/string.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlintrin.h":"cd26383f2f06392556848bfb374034c1","/usr/local/ob-clang11/lib/clang/11.1.0/include/vaesintrin.h":"230da0a10bfb803dd07d1d4859b589b9","/usr/include/bits/types/struct_FILE.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vbmivlintrin.h":"7a23233bba4c34e5185e02ea4208670c","/usr/include/bits/types/cookie_io_functions_t.h":"ignore_header_sys","/usr/include/bits/fp-logb.h":"ignore_header_sys","/usr/include/sys/cdefs.h":"ignore_header_sys","/usr/include/bits/types/__fpos_t.h":"ignore_header_sys","/usr/include/bits/types/timer_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512bf16intrin.h":"4f5ef6213a91abea3f5d53232215497c","/usr/include/c++/10/bits/locale_classes.h":"ignore_header_sys","/usr/include/c++/10/bits/streambuf.tcc":"ignore_header_sys","/usr/include/c++/10/bits/basic_ios.tcc":"ignore_header_sys","/usr/include/bits/types/mbstate_t.h":"ignore_header_sys","/usr/include/c++/10/bits/locale_facets.h":"ignore_header_sys","/usr/include/bits/sched.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/xmmintrin.h":"04b4174745d9f46d48080aefb7d04c2c","/usr/include/bits/types/wint_t.h":"ignore_header_sys","/usr/include/c++/10/bits/charconv.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_pair.h":"ignore_header_sys","/usr/include/c++/10/bits/char_traits.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/vpclmulqdqintrin.h":"a0ef53b1374f1ff070c815a7572221fa","/usr/include/time.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/wmmintrin.h":"420e06fc7b100109fe408d8cf15dfbbc","/usr/include/c++/10/bits/stl_bvector.h":"ignore_header_sys","/usr/include/c++/10/istream":"ignore_header_sys","/usr/include/bits/types/__sigset_t.h":"ignore_header_sys","/usr/include/c++/10/bits/allocator.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/smmintrin.h":"dde1073b90fcdddf514ff14bf7b0a39b","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsavesintrin.h":"dfeb07884315d36739e4aa9dfd1d72ed","/usr/include/sys/types.h":"ignore_header_sys","/usr/include/c++/10/ios":"ignore_header_sys","/usr/include/c++/10/bits/uniform_int_dist.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/lzcntintrin.h":"070db0e5ecc75a113daa65f1a9a569a5","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vpopcntdqintrin.h":"748799b7fb86515d202460f78d94a3c3","/usr/include/bits/time64.h":"ignore_header_sys","/usr/include/bits/uintn-identity.h":"ignore_header_sys","/usr/include/c++/10/bits/cpp_type_traits.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vbmi2intrin.h":"d2eaacea81a5a13e0f771f69d62529ec","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512erintrin.h":"d8a0db1358f0c4f5db208e20fece727d","/usr/include/c++/10/bits/move.h":"ignore_header_sys","/usr/include/c++/10/cstdint":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/c++config.h":"ignore_header_sys","/usr/include/bits/endian.h":"ignore_header_sys","/usr/include/bits/types/__locale_t.h":"ignore_header_sys","/usr/include/bits/fp-fast.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512bitalgintrin.h":"065b5f6c02ddf57ee43a304b33d301c4","/usr/include/bits/wordsize.h":"ignore_header_sys","/usr/include/stdio.h":"ignore_header_sys","/usr/include/c++/10/bits/istream.tcc":"ignore_header_sys","/usr/include/bits/setjmp.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512fintrin.h":"4ce3a9eff70ef9558590a27aa986fc0e","/usr/include/gnu/stubs-64.h":"ignore_header_sys","/usr/include/asm/errno.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/enqcmdintrin.h":"6d8136c8969e9c723c195c33da2bb768","/usr/include/c++/10/ext/type_traits.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512bwintrin.h":"64c1b4a5d84a0126158179cc8904e8bd","/usr/include/bits/types.h":"ignore_header_sys","/usr/include/c++/10/string":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vnniintrin.h":"7cd1a414c4acf95129406d966bc736b5","/usr/include/c++/10/x86_64-redhat-linux/bits/os_defines.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/__wmmintrin_aes.h":"b7829f7e5a4221574897b8e365715ced","/usr/include/c++/10/numeric":"ignore_header_sys","/usr/include/c++/10/type_traits":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/stdint.h":"d6abd57f44fe5f48dbfb05fd9adc130a","/usr/include/c++/10/x86_64-redhat-linux/bits/ctype_inline.h":"ignore_header_sys","/usr/include/c++/10/new":"ignore_header_sys","/usr/include/bits/iscanonical.h":"ignore_header_sys","/usr/include/c++/10/bits/memoryfwd.h":"ignore_header_sys","/usr/include/asm-generic/errno-base.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/__stddef_max_align_t.h":"48e8e2456f77e6cda35d245130fa7259","/usr/local/ob-clang11/lib/clang/11.1.0/include/gfniintrin.h":"e0e20e8bab44c33118878b2889b2f2c8","/usr/include/c++/10/ext/new_allocator.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512ifmaintrin.h":"f52649bdc1dc467b7eadc3e1a810a0e2","/usr/include/c++/10/bits/functexcept.h":"ignore_header_sys","/usr/include/c++/10/bits/functional_hash.h":"ignore_header_sys","/usr/include/bits/endianness.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/popcntintrin.h":"7c3573a43b1c0704aac4cb098811cbb1","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512cdintrin.h":"650ead4d3b72acc353b9327d5ae2a07e","/usr/include/c++/10/bits/random.tcc":"ignore_header_sys","/usr/include/c++/10/debug/assertions.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_iterator_base_funcs.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsavecintrin.h":"8d492bf7b081416e797300c239dba796","/usr/include/c++/10/bits/stl_vector.h":"ignore_header_sys","/usr/include/c++/10/bits/basic_string.tcc":"ignore_header_sys","/usr/include/stdint.h":"ignore_header_sys","/usr/include/bits/types/__fpos64_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/rtmintrin.h":"591e544f8d70825a4bbf807dd287584a","/usr/include/c++/10/iosfwd":"ignore_header_sys","/usr/include/c++/10/cstdlib":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vpopcntdqvlintrin.h":"6af0e4f4c55f44ba40bac27558c51b3c","/usr/include/c++/10/cstring":"ignore_header_sys","/usr/include/bits/struct_rwlock.h":"ignore_header_sys","/usr/include/c++/10/bits/range_access.h":"ignore_header_sys","/usr/include/bits/libc-header-start.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/c++locale.h":"ignore_header_sys","/usr/include/c++/10/bits/vector.tcc":"ignore_header_sys","/usr/include/bits/cpu-set.h":"ignore_header_sys","/usr/include/bits/pthreadtypes-arch.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/ctype_base.h":"ignore_header_sys","/usr/include/c++/10/bits/cxxabi_init_exception.h":"ignore_header_sys","/usr/include/c++/10/bits/concept_check.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/gthr.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_iterator.h":"ignore_header_sys","/usr/include/bits/timex.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/waitpkgintrin.h":"2d1c4c5484fb9ec3a2f974b84ccead3c","/usr/include/bits/errno.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/shaintrin.h":"dd1634de945b1ffc8c6b7f39fa8a60c8","/usr/include/bits/select.h":"ignore_header_sys","/usr/include/wctype.h":"ignore_header_sys","/usr/include/bits/mathcalls.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vbmiintrin.h":"54a67d8ab20b9961e36a3fe16b875d4b","[GIT_TOP_DIR]/src/impl/FhtKacRotator.h":"f2f44cb0ba5dc218fc37736f2bab2192","/usr/local/ob-clang11/lib/clang/11.1.0/include/cetintrin.h":"30568779db4d995828cfd0dc8ab749f3","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx2intrin.h":"b787b869cf3250697b509a53b8f84261","/usr/local/ob-clang11/lib/clang/11.1.0/include/rdseedintrin.h":"d5c4d6f9ca83aa6d76891aa467a9c442","/usr/include/bits/waitflags.h":"ignore_header_sys","/usr/include/stdc-predef.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_construct.h":"ignore_header_sys","/usr/include/bits/waitstatus.h":"ignore_header_sys","/usr/include/c++/10/bits/ostream_insert.h":"ignore_header_sys","/usr/include/c++/10/bits/exception.h":"ignore_header_sys","/usr/include/linux/errno.h":"ignore_header_sys","/usr/include/bits/flt-eval-method.h":"ignore_header_sys","/usr/include/c++/10/bits/basic_string.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/amxintrin.h":"df04c665cb8533b77392c57a15d0c13e","/usr/local/ob-clang11/lib/clang/11.1.0/include/stddef.h":"2499dd2361b915724b073282bea3a7bc","/usr/local/ob-clang11/lib/clang/11.1.0/include/xtestintrin.h":"ddbb320bafef81c16f4db301b5d692b4","/usr/include/c++/10/ext/alloc_traits.h":"ignore_header_sys","/usr/include/sched.h":"ignore_header_sys","/usr/include/bits/pthreadtypes.h":"ignore_header_sys","/usr/include/c++/10/bits/random.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512pfintrin.h":"4f558d52a120f2dbc17724370f698f70","/usr/local/ob-clang11/lib/clang/11.1.0/include/sgxintrin.h":"1d380dfee68686a7fa21e5c5888eaf05","/usr/local/ob-clang11/lib/clang/11.1.0/include/fxsrintrin.h":"2288062b986bd0a526c32df2bd2e2c7b","/usr/local/ob-clang11/lib/clang/11.1.0/include/mm_malloc.h":"ed68cf68a5b4db09df709fc93a5e9b12","/usr/local/ob-clang11/lib/clang/11.1.0/include/fmaintrin.h":"e5555b944d57763068cff3823905dcda","/usr/include/bits/mathcalls-narrow.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/bmiintrin.h":"30db6d08581335daa785b893e982ec21","/usr/include/bits/floatn-common.h":"ignore_header_sys","/usr/include/asm-generic/errno.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/gthr-default.h":"ignore_header_sys","/usr/include/c++/10/concepts":"ignore_header_sys","/usr/include/bits/wctype-wchar.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512dqintrin.h":"0a5f59d3a1b4c24596a35fc4d831362d","/usr/include/bits/timesize.h":"ignore_header_sys","/usr/include/bits/types/clock_t.h":"ignore_header_sys","/usr/include/bits/types/locale_t.h":"ignore_header_sys","/usr/include/strings.h":"ignore_header_sys","/usr/include/bits/types/__FILE.h":"ignore_header_sys","/usr/include/c++/10/bits/int_limits.h":"ignore_header_sys","/usr/include/bits/types/struct_itimerspec.h":"ignore_header_sys","/usr/include/c++/10/backward/binders.h":"ignore_header_sys","/usr/include/c++/10/typeinfo":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/c++allocator.h":"ignore_header_sys","/usr/include/c++/10/bits/predefined_ops.h":"ignore_header_sys","/usr/include/bits/time.h":"ignore_header_sys","/usr/include/bits/types/error_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/ptwriteintrin.h":"d07b5c84c015bb93867eab402d31ebca","/usr/include/c++/10/bits/stringfwd.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/cpu_defines.h":"ignore_header_sys","/usr/include/c++/10/bits/alloc_traits.h":"ignore_header_sys","/usr/include/c++/10/ext/string_conversions.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/serializeintrin.h":"9c34b27612aea430b36983691b4efe29","[GIT_TOP_DIR]/src/logger.h":"bc3e03e770b051e6cadc16e5f96c170f","/usr/include/c++/10/bits/ostream.tcc":"ignore_header_sys","/usr/include/c++/10/limits":"ignore_header_sys","/usr/include/c++/10/bits/cxxabi_forced.h":"ignore_header_sys","/usr/include/c++/10/ext/atomicity.h":"ignore_header_sys","/usr/include/wchar.h":"ignore_header_sys","/usr/include/c++/10/ext/numeric_traits.h":"ignore_header_sys","/usr/include/c++/10/ostream":"ignore_header_sys","/usr/include/endian.h":"ignore_header_sys","/usr/include/bits/types/sigset_t.h":"ignore_header_sys","/usr/include/c++/10/clocale":"ignore_header_sys","/usr/include/c++/10/bits/nested_exception.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsaveoptintrin.h":"30a5b7413ecc5157d3c788a4fc5f30f7","/usr/local/ob-clang11/lib/clang/11.1.0/include/invpcidintrin.h":"ff85318ef7dbac300480b3249673816b","/usr/include/c++/10/cwchar":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/atomic_word.h":"ignore_header_sys","/usr/include/pthread.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/stdarg.h":"4de3cbd931b589d291e5c39387aecf82","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsaveintrin.h":"bf0d37fbd9112292164e41d157229261","/usr/local/ob-clang11/lib/clang/11.1.0/include/f16cintrin.h":"e1d777f3170634f5a307f86472b0fb57","/usr/include/c++/10/cwctype":"ignore_header_sys","/usr/include/bits/types/clockid_t.h":"ignore_header_sys","/usr/include/c++/10/bits/basic_ios.h":"ignore_header_sys","/usr/include/c++/10/bits/locale_classes.tcc":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/tmmintrin.h":"d905b09b29cb36b015d25405cfbf8e5a","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlvnniintrin.h":"64180305ff9c6bfad63ee41cbd66093d","/usr/local/ob-clang11/lib/clang/11.1.0/include/pmmintrin.h":"3157414820008b3ad90647450dcf904b","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlcdintrin.h":"6f8f18f6874f9c1a5f19b1c55e3c0cb5","/usr/include/c++/10/stdexcept":"ignore_header_sys","/usr/include/c++/10/bits/exception_ptr.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/__wmmintrin_pclmul.h":"7cbd2793e783b90f193cebfa3675e55a","/usr/include/c++/10/random":"ignore_header_sys","/usr/include/c++/10/stdlib.h":"ignore_header_sys","/usr/include/bits/stdint-uintn.h":"ignore_header_sys","/usr/include/bits/types/struct_sched_param.h":"ignore_header_sys","/usr/include/c++/10/bits/range_cmp.h":"ignore_header_sys","/usr/include/gnu/stubs.h":"ignore_header_sys","/usr/include/c++/10/cerrno":"ignore_header_sys","/usr/include/bits/mathcalls-helper-functions.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/clflushoptintrin.h":"2a269418efbdd932851586bbfa8726a3","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlbwintrin.h":"449273cd1de2c72197e012c804a8c056","/usr/local/ob-clang11/lib/clang/11.1.0/include/tsxldtrkintrin.h":"317e5aa78e58a9618f04d7532a36a253","/usr/include/c++/10/exception":"ignore_header_sys","/usr/include/c++/10/bits/stl_function.h":"ignore_header_sys","/usr/include/bits/locale.h":"ignore_header_sys","/usr/include/c++/10/initializer_list":"ignore_header_sys","/usr/include/bits/wchar.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/error_constants.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vp2intersectintrin.h":"7f431ec4ddce958af8a75cc7a71b3a57","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlbitalgintrin.h":"50b7714a556eb5e52999b7dd18de7d4e","/usr/include/c++/10/cctype":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlbf16intrin.h":"da6bea340165f020a9142ab63fc1aecf","/usr/include/c++/10/bits/std_abs.h":"ignore_header_sys","/usr/include/bits/math-vector.h":"ignore_header_sys","/usr/include/bits/stdint-intn.h":"ignore_header_sys","/usr/include/bits/libm-simd-decl-stubs.h":"ignore_header_sys","/usr/include/c++/10/cmath":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlvbmi2intrin.h":"d09f75ea16d8f1302331016743dca38c","/usr/include/bits/types/struct_tm.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_uninitialized.h":"ignore_header_sys","/usr/include/c++/10/debug/debug.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/opt_random.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/cldemoteintrin.h":"6c282c2bb0cc618292bd47b69fc27641","/usr/include/c++/10/streambuf":"ignore_header_sys","/usr/include/c++/10/bits/exception_defines.h":"ignore_header_sys","/usr/include/bits/types/struct_timespec.h":"ignore_header_sys","/usr/include/bits/thread-shared-types.h":"ignore_header_sys","/usr/include/c++/10/bits/locale_facets.tcc":"ignore_header_sys","/usr/include/locale.h":"ignore_header_sys","/usr/include/bits/types/struct_timeval.h":"ignore_header_sys","/usr/include/c++/10/system_error":"ignore_header_sys","/usr/include/bits/typesizes.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/adxintrin.h":"6828d907a1be13a942ad62e7b4db6870","/usr/include/c++/10/bits/streambuf_iterator.h":"ignore_header_sys","/usr/include/bits/long-double.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512ifmavlintrin.h":"c3576813a57918c2734a8acf08e69b33","/usr/include/c++/10/bits/ios_base.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/bmi2intrin.h":"5421c86f7749d5b931a602c4c605aa59","/usr/include/c++/10/iostream":"ignore_header_sys","/usr/include/c++/10/bits/stl_iterator_base_types.h":"ignore_header_sys","/usr/include/c++/10/bits/hash_bytes.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlvp2intersectintrin.h":"e127597621c37f450875cdc70e9df509","/usr/include/bits/types/time_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/clwbintrin.h":"bc581022bcc5037ab8b06c9c95e15663","/usr/local/ob-clang11/lib/clang/11.1.0/include/mmintrin.h":"1de54663046d007c7b16e4f603262ad8","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vldqintrin.h":"8229c4851f85c40c1f62097dc173e420","/usr/local/ob-clang11/lib/clang/11.1.0/include/pkuintrin.h":"750db2cf252eb52d8e60ad6fffb80c8a","/usr/include/bits/stdio_lim.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/wbnoinvdintrin.h":"8d0e049f9ce4bbcc291c21fe7bc7a508","/usr/include/c++/10/bits/ptr_traits.h":"ignore_header_sys","/usr/include/sys/select.h":"ignore_header_sys","/usr/include/bits/floatn.h":"ignore_header_sys","/usr/include/c++/10/cstdio":"ignore_header_sys","/usr/include/alloca.h":"ignore_header_sys","/usr/include/bits/struct_mutex.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/movdirintrin.h":"4566737781d765bba033913dedfcaa83","/usr/include/c++/10/bits/localefwd.h":"ignore_header_sys","/usr/include/errno.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/pconfigintrin.h":"9da09fbffb9a78b478ac0ce6d43271d7","/usr/include/c++/10/bits/postypes.h":"ignore_header_sys","[GIT_TOP_DIR]/src/impl/matrix_rotator.h":"201b9e418b243731f34df19414d16ccb","/usr/include/stdlib.h":"ignore_header_sys","/usr/include/bits/types/FILE.h":"ignore_header_sys","/usr/include/bits/stdlib-float.h":"ignore_header_sys"},"includes":[{"line":12,"resolved_path":"/usr/local/ob-clang11/lib/clang/11.1.0/include/xmmintrin.h"}],"skipped_ranges":[],"usr2func":[{"usr":31939470524076852,"detailed_name":"extern void _mm_lfence() noexcept","qual_name_offset":12,"short_name_offset":12,"short_name_size":10,"hover":"","comments":"Forces strong memory ordering (serialization) between load\n   instructions preceding this instruction and load instructions following\n   this instruction, ensuring the system completes all previous loads before\n   executing subsequent loads.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> LFENCE </c> instruction.","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":["4235:6-4235:16|4235:1-4235:22|1|-1"],"derived":[],"uses":[]},{"usr":39085718931518199,"detailed_name":"static inline __m128i _mm_set1_epi64x(long long __q)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"3766:1-3766:16|3765:1-3769:2|2|-1","hover":"","comments":"Initializes both values in a 128-bit integer vector with the\n   specified 64-bit integer value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __q\n   Integer value used to initialize the elements of the destination integer\n   vector.\n\\returns An initialized 128-bit integer vector of [2 x i64] with both\n   elements containing the value provided in the operand.","bases":[],"vars":[6686886368950204057],"callees":["3768:10-3768:24|5407471146260504397|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":87734167771904892,"detailed_name":"static inline __m128i _mm_andnot_si128(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":16,"spell":"2763:1-2763:17|2762:1-2766:2|2|-1","hover":"","comments":"Performs a bitwise AND of two 128-bit integer vectors, using the\n   one's complement of the values contained in the first source operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPANDN / PANDN </c> instruction.\n\n\\param __a\n   A 128-bit vector containing the left source operand. The one's complement\n   of this value is used in the bitwise AND.\n\\param __b\n   A 128-bit vector containing the right source operand.\n\\returns A 128-bit integer vector containing the bitwise AND of the one's\n   complement of the first operand and the values in the second operand.","bases":[],"vars":[3225945798708173960,8668666443103934554],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":167264156844429630,"detailed_name":"static inline __m128i _mm_setr_epi8(char __b0, char __b1, char __b2, char __b3, char __b4, char __b5, char __b6, char __b7, char __b8, char __b9, char __b10, char __b11, char __b12, char __b13, char __b14, char __b15)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"3963:1-3963:14|3962:1-3966:2|2|-1","hover":"","comments":"Constructs a 128-bit integer vector, initialized in reverse order\n    with the specified 8-bit integral values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __b0\n   An 8-bit integral value used to initialize bits [7:0] of the result.\n\\param __b1\n   An 8-bit integral value used to initialize bits [15:8] of the result.\n\\param __b2\n   An 8-bit integral value used to initialize bits [23:16] of the result.\n\\param __b3\n   An 8-bit integral value used to initialize bits [31:24] of the result.\n\\param __b4\n   An 8-bit integral value used to initialize bits [39:32] of the result.\n\\param __b5\n   An 8-bit integral value used to initialize bits [47:40] of the result.\n\\param __b6\n   An 8-bit integral value used to initialize bits [55:48] of the result.\n\\param __b7\n   An 8-bit integral value used to initialize bits [63:56] of the result.\n\\param __b8\n   An 8-bit integral value used to initialize bits [71:64] of the result.\n\\param __b9\n   An 8-bit integral value used to initialize bits [79:72] of the result.\n\\param __b10\n   An 8-bit integral value used to initialize bits [87:80] of the result.\n\\param __b11\n   An 8-bit integral value used to initialize bits [95:88] of the result.\n\\param __b12\n   An 8-bit integral value used to initialize bits [103:96] of the result.\n\\param __b13\n   An 8-bit integral value used to initialize bits [111:104] of the result.\n\\param __b14\n   An 8-bit integral value used to initialize bits [119:112] of the result.\n\\param __b15\n   An 8-bit integral value used to initialize bits [127:120] of the result.\n\\returns An initialized 128-bit integer vector.","bases":[],"vars":[13307482053037635346,99365660092565665,10372192864684537076,641274478631265872,4308381231688639130,4029849044985390752,15212870164311177634,11248828828086163458,8979523261473914827,13510379838894481580,16187218155024176063,11218245824476217969,9657390540129294179,11200855105726617646,2056386029113395271,5968185934775368084],"callees":["3965:10-3965:22|9875901901161013165|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":177713399759874257,"detailed_name":"static inline __m128d _mm_cmpnlt_pd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"598:1-598:14|597:1-601:2|2|-1","hover":"","comments":"Compares each of the corresponding double-precision values of the\n   128-bit vectors of [2 x double] to determine if the values in the first\n   operand are not less than those in the second operand.\n\n   Each comparison yields 0x0 for false, 0xFFFFFFFFFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPNLTPD / CMPNLTPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double].\n\\param __b\n   A 128-bit vector of [2 x double].\n\\returns A 128-bit vector containing the comparison results.","bases":[],"vars":[18371363303616317054,12829069083968418614],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":248640734000221045,"detailed_name":"static inline __m128i _mm_srli_epi16(__m128i __a, int __count)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"3057:1-3057:15|3056:1-3060:2|2|-1","hover":"","comments":"Right-shifts each of 16-bit values in the 128-bit integer vector\n   operand by the specified number of bits. High-order bits are cleared.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSRLW / PSRLW </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing the source operand.\n\\param __count\n   An integer value specifying the number of bits to right-shift each value\n   in operand \\a __a.\n\\returns A 128-bit integer vector containing the right-shifted values.","bases":[],"vars":[9180672187836495499,17344538789948785179],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":343961056996969144,"detailed_name":"static inline __m128i _mm_xor_si128(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"2798:1-2798:14|2797:1-2801:2|2|-1","hover":"","comments":"Performs a bitwise exclusive OR of two 128-bit integer vectors.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPXOR / PXOR </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing one of the source operands.\n\\param __b\n   A 128-bit integer vector containing one of the source operands.\n\\returns A 128-bit integer vector containing the bitwise exclusive OR of the\n   values in both operands.","bases":[],"vars":[15009025190600524273,3746742325958678631],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":398025557974790431,"detailed_name":"static inline __m128i _mm_packs_epi32(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"4303:1-4303:16|4302:1-4306:2|2|-1","hover":"","comments":"Converts 32-bit signed integers from both 128-bit integer vector\n   operands into 16-bit signed integers, and packs the results into the\n   destination. Positive values greater than 0x7FFF are saturated to 0x7FFF.\n   Negative values less than 0x8000 are saturated to 0x8000.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPACKSSDW / PACKSSDW </c> instruction.\n\n\\param __a\n   A 128-bit integer vector of [4 x i32]. Each 32-bit element is treated as\n   a signed integer and is converted to a 16-bit signed integer with\n   saturation. Values greater than 0x7FFF are saturated to 0x7FFF. Values\n   less than 0x8000 are saturated to 0x8000. The converted [4 x i16] values\n   are written to the lower 64 bits of the result.\n\\param __b\n   A 128-bit integer vector of [4 x i32]. Each 32-bit element is treated as\n   a signed integer and is converted to a 16-bit signed integer with\n   saturation. Values greater than 0x7FFF are saturated to 0x7FFF. Values\n   less than 0x8000 are saturated to 0x8000. The converted [4 x i16] values\n   are written to the higher 64 bits of the result.\n\\returns A 128-bit vector of [8 x i16] containing the converted values.","bases":[],"vars":[614039306646292788,14445847640855777977],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":452951604799387665,"detailed_name":"static inline __m128d _mm_andnot_pd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"371:1-371:14|370:1-374:2|2|-1","hover":"","comments":"Performs a bitwise AND of two 128-bit vectors of [2 x double], using\n   the one's complement of the values contained in the first source operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPANDN / PANDN </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double] containing the left source operand. The\n   one's complement of this value is used in the bitwise AND.\n\\param __b\n   A 128-bit vector of [2 x double] containing the right source operand.\n\\returns A 128-bit vector of [2 x double] containing the bitwise AND of the\n   values in the second operand and the one's complement of the first\n   operand.","bases":[],"vars":[1074275518581834396,1807211564993553866],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":494482864118827868,"detailed_name":"static inline __m128i _mm_subs_epi8(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"2664:1-2664:14|2663:1-2667:2|2|-1","hover":"","comments":"Subtracts corresponding 8-bit signed integer values in the input and\n   returns the differences in the corresponding bytes in the destination.\n   Differences greater than 0x7F are saturated to 0x7F, and differences less\n   than 0x80 are saturated to 0x80.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSUBSB / PSUBSB </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing the minuends.\n\\param __b\n   A 128-bit integer vector containing the subtrahends.\n\\returns A 128-bit integer vector containing the differences of the values\n   in the operands.","bases":[],"vars":[8235486382361612735,542778756917042902],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":502860745365910388,"detailed_name":"static inline __m128d _mm_loadr_pd(const double *__dp)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"1623:1-1623:13|1622:1-1627:2|2|-1","hover":"","comments":"Loads two double-precision values, in reverse order, from an aligned\n   memory location into a 128-bit vector of [2 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVAPD / MOVAPD </c> instruction +\nneeded shuffling instructions. In AVX mode, the shuffling may be combined\nwith the \\c VMOVAPD, resulting in only a \\c VPERMILPD instruction.\n\n\\param __dp\n   A 16-byte aligned pointer to an array of double-precision values to be\n   loaded in reverse order.\n\\returns A 128-bit vector of [2 x double] containing the reversed loaded\n   values.","bases":[],"vars":[16003321459981447816,16435228425654556444],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":601381589245014638,"detailed_name":"static inline __m128i _mm_cmpeq_epi16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"3190:1-3190:16|3189:1-3193:2|2|-1","hover":"","comments":"Compares each of the corresponding 16-bit values of the 128-bit\n   integer vectors for equality. Each comparison yields 0x0 for false,\n   0xFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPCMPEQW / PCMPEQW </c> instruction.\n\n\\param __a\n   A 128-bit integer vector.\n\\param __b\n   A 128-bit integer vector.\n\\returns A 128-bit integer vector containing the comparison results.","bases":[],"vars":[9102926420490051957,9275716704437210877],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":737974434420208607,"detailed_name":"static inline __m128d _mm_set_sd(double __w)","qual_name_offset":22,"short_name_offset":22,"short_name_size":10,"spell":"1819:1-1819:11|1818:1-1822:2|2|-1","hover":"","comments":"Constructs a 128-bit floating-point vector of [2 x double]. The lower\n   64 bits of the vector are initialized with the specified double-precision\n   floating-point value. The upper 64 bits are set to zero.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVQ / MOVQ </c> instruction.\n\n\\param __w\n   A double-precision floating-point value used to initialize the lower 64\n   bits of the result.\n\\returns An initialized 128-bit floating-point vector of [2 x double]. The\n   lower 64 bits contain the value of the parameter. The upper 64 bits are\n   set to zero.","bases":[],"vars":[4544953711937997570],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":889152421156872063,"detailed_name":"static inline __m128i _mm_set_epi16(short __w7, short __w6, short __w5, short __w4, short __w3, short __w2, short __w1, short __w0)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"3699:1-3699:14|3698:1-3702:2|2|-1","hover":"","comments":"Initializes the 16-bit values in a 128-bit vector of [8 x i16] with\n   the specified 16-bit integer values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __w7\n   A 16-bit integer value used to initialize bits [127:112] of the\n   destination vector.\n\\param __w6\n   A 16-bit integer value used to initialize bits [111:96] of the\n   destination vector.\n\\param __w5\n   A 16-bit integer value used to initialize bits [95:80] of the destination\n   vector.\n\\param __w4\n   A 16-bit integer value used to initialize bits [79:64] of the destination\n   vector.\n\\param __w3\n   A 16-bit integer value used to initialize bits [63:48] of the destination\n   vector.\n\\param __w2\n   A 16-bit integer value used to initialize bits [47:32] of the destination\n   vector.\n\\param __w1\n   A 16-bit integer value used to initialize bits [31:16] of the destination\n   vector.\n\\param __w0\n   A 16-bit integer value used to initialize bits [15:0] of the destination\n   vector.\n\\returns An initialized 128-bit vector of [8 x i16] containing the values\n   provided in the operands.","bases":[],"vars":[8267145982089205389,3175477975407809975,10856478114181763933,5212263928069002524,933372360557409771,12600833717026688551,13449134610354015988,2285243722699251759],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["3825:10-3825:23|16420|-1","3918:10-3918:23|16420|-1"]},{"usr":924540425955867854,"detailed_name":"static inline __m128i _mm_cmpgt_epi16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"3252:1-3252:16|3251:1-3255:2|2|-1","hover":"","comments":"Compares each of the corresponding signed 16-bit values of the\n   128-bit integer vectors to determine if the values in the first operand\n   are greater than those in the second operand.\n\n   Each comparison yields 0x0 for false, 0xFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPCMPGTW / PCMPGTW </c> instruction.\n\n\\param __a\n   A 128-bit integer vector.\n\\param __b\n   A 128-bit integer vector.\n\\returns A 128-bit integer vector containing the comparison results.","bases":[],"vars":[13530833442412871952,6906954792158703597],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["3317:10-3317:25|16420|-1"]},{"usr":930609858989682722,"detailed_name":"static inline __m128d _mm_cmple_sd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"734:1-734:13|733:1-737:2|2|-1","hover":"","comments":"Compares the lower double-precision floating-point values in each of\n   the two 128-bit floating-point vectors of [2 x double] to determine if\n   the value in the first parameter is less than or equal to the\n   corresponding value in the second parameter.\n\n   The comparison yields 0x0 for false, 0xFFFFFFFFFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPLESD / CMPLESD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __b.\n\\param __b\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __a.\n\\returns A 128-bit vector. The lower 64 bits contains the comparison\n   results. The upper 64 bits are copied from the upper 64 bits of \\a __a.","bases":[],"vars":[12699351486235266169,10763342789242295192],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":961528371543162380,"detailed_name":"static inline __m128i _mm_slli_epi32(__m128i __a, int __count)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"2878:1-2878:15|2877:1-2881:2|2|-1","hover":"","comments":"Left-shifts each 32-bit value in the 128-bit integer vector operand\n   by the specified number of bits. Low-order bits are cleared.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSLLD / PSLLD </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing the source operand.\n\\param __count\n   An integer value specifying the number of bits to left-shift each value\n   in operand \\a __a.\n\\returns A 128-bit integer vector containing the left-shifted values.","bases":[],"vars":[4160688674774613323,7626370682532573828],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1076787198922067257,"detailed_name":"static inline __m128 _mm_castsi128_ps(__m128i __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":16,"spell":"4930:1-4930:17|4929:1-4933:2|2|-1","hover":"","comments":"Casts a 128-bit integer vector into a 128-bit floating-point vector\n   of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\param __a\n   A 128-bit integer vector.\n\\returns A 128-bit floating-point vector of [4 x float] containing the same\n   bitwise pattern as the parameter.","bases":[],"vars":[16470036136927638767],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1184509200575662859,"detailed_name":"static inline __m128d _mm_cmpnle_sd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"916:1-916:14|915:1-919:2|2|-1","hover":"","comments":"Compares the lower double-precision floating-point values in each of\n   the two 128-bit floating-point vectors of [2 x double] to determine if\n   the value in the first parameter is not less than or equal to the\n   corresponding value in the second parameter.\n\n   The comparison yields 0x0 for false, 0xFFFFFFFFFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPNLESD / CMPNLESD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __b.\n\\param __b\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __a.\n\\returns  A 128-bit vector. The lower 64 bits contains the comparison\n   results. The upper 64 bits are copied from the upper 64 bits of \\a __a.","bases":[],"vars":[3987695530789984145,15171430964338901221],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1194937127622213911,"detailed_name":"static inline __m128i _mm_subs_epi16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"2685:1-2685:15|2684:1-2688:2|2|-1","hover":"","comments":"Subtracts corresponding 16-bit signed integer values in the input and\n   returns the differences in the corresponding bytes in the destination.\n   Differences greater than 0x7FFF are saturated to 0x7FFF, and values less\n   than 0x8000 are saturated to 0x8000.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSUBSW / PSUBSW </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing the minuends.\n\\param __b\n   A 128-bit integer vector containing the subtrahends.\n\\returns A 128-bit integer vector containing the differences of the values\n   in the operands.","bases":[],"vars":[16379466414138492957,11601260169160782393],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1308364211048239195,"detailed_name":"static inline void _mm_store_si128(__m128i *__p, __m128i __b)","qual_name_offset":19,"short_name_offset":19,"short_name_size":15,"spell":"3995:1-3995:16|3994:1-3998:2|2|-1","hover":"","comments":"Stores a 128-bit integer vector to a memory location aligned on a\n   128-bit boundary.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVAPS / MOVAPS </c> instruction.\n\n\\param __p\n   A pointer to an aligned memory location that will receive the integer\n   values.\n\\param __b\n   A 128-bit integer vector containing the values to be moved.","bases":[],"vars":[2293058339097028384,14281782889781928880],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1328413087216591379,"detailed_name":"static inline __m128i _mm_cvtpd_epi32(__m128d __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"1358:1-1358:16|1357:1-1361:2|2|-1","hover":"","comments":"Converts the two double-precision floating-point elements of a\n   128-bit vector of [2 x double] into two signed 32-bit integer values,\n   returned in the lower 64 bits of a 128-bit vector of [4 x i32]. The upper\n   64 bits of the result vector are set to zero.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTPD2DQ / CVTPD2DQ </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double].\n\\returns A 128-bit vector of [4 x i32] whose lower 64 bits contain the\n   converted values. The upper 64 bits are set to zero.","bases":[],"vars":[7180327604781837828],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1398985596488771708,"detailed_name":"static inline __m64 _mm_cvttpd_pi32(__m128d __a)","qual_name_offset":20,"short_name_offset":20,"short_name_size":15,"spell":"1528:1-1528:16|1527:1-1531:2|2|-1","hover":"","comments":"Converts the two double-precision floating-point elements of a\n   128-bit vector of [2 x double] into two signed 32-bit integer values,\n   returned in a 64-bit vector of [2 x i32].\n\n   If the result of either conversion is inexact, the result is truncated\n   (rounded towards zero) regardless of the current MXCSR setting.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> CVTTPD2PI </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double].\n\\returns A 64-bit vector of [2 x i32] containing the converted values.","bases":[],"vars":[12812121674693167064],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1496873694071598590,"detailed_name":"static inline int _mm_comilt_sd(__m128d __a, __m128d __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":13,"spell":"1018:1-1018:14|1017:1-1021:2|2|-1","hover":"","comments":"Compares the lower double-precision floating-point values in each of\n   the two 128-bit floating-point vectors of [2 x double] to determine if\n   the value in the first parameter is less than the corresponding value in\n   the second parameter.\n\n   The comparison yields 0 for false, 1 for true. If either of the two\n   lower double-precision values is NaN, 0 is returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCOMISD / COMISD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __b.\n\\param __b\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __a.\n\\returns An integer containing the comparison results. If either of the two\n    lower double-precision values is NaN, 0 is returned.","bases":[],"vars":[2878812078223708293,13004896064472281532],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1516589302069461768,"detailed_name":"static inline __m128i _mm_subs_epu16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"2725:1-2725:15|2724:1-2728:2|2|-1","hover":"","comments":"Subtracts corresponding 16-bit unsigned integer values in the input\n   and returns the differences in the corresponding bytes in the\n   destination. Differences less than 0x0000 are saturated to 0x0000.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSUBUSW / PSUBUSW </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing the minuends.\n\\param __b\n   A 128-bit integer vector containing the subtrahends.\n\\returns A 128-bit integer vector containing the unsigned integer\n   differences of the values in the operands.","bases":[],"vars":[6157726037227513990,15965517045050235026],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1844513892463442647,"detailed_name":"static inline __m128i _mm_madd_epi16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"2352:1-2352:15|2351:1-2355:2|2|-1","hover":"","comments":"Multiplies the corresponding elements of two 128-bit signed [8 x i16]\n   vectors, producing eight intermediate 32-bit signed integer products, and\n   adds the consecutive pairs of 32-bit products to form a 128-bit signed\n   [4 x i32] vector.\n\n   For example, bits [15:0] of both parameters are multiplied producing a\n   32-bit product, bits [31:16] of both parameters are multiplied producing\n   a 32-bit product, and the sum of those two products becomes bits [31:0]\n   of the result.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMADDWD / PMADDWD </c> instruction.\n\n\\param __a\n   A 128-bit signed [8 x i16] vector.\n\\param __b\n   A 128-bit signed [8 x i16] vector.\n\\returns A 128-bit signed [4 x i32] vector containing the sums of products\n   of both parameters.","bases":[],"vars":[14184531378038640932,106929757937383496],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1908667349433816117,"detailed_name":"static inline __m128i _mm_set1_epi16(short __w)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"3823:1-3823:15|3822:1-3826:2|2|-1","hover":"","comments":"Initializes all values in a 128-bit vector of [8 x i16] with the\n   specified 16-bit value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __w\n   A 16-bit value used to initialize the elements of the destination integer\n   vector.\n\\returns An initialized 128-bit vector of [8 x i16] with all elements\n   containing the value provided in the operand.","bases":[],"vars":[15049536728116799174],"callees":["3825:10-3825:23|889152421156872063|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1975815018878327398,"detailed_name":"static inline __m64 _mm_movepi64_pi64(__m128i __a)","qual_name_offset":20,"short_name_offset":20,"short_name_size":17,"spell":"4720:1-4720:18|4719:1-4723:2|2|-1","hover":"","comments":"Returns the lower 64 bits of a 128-bit integer vector as a 64-bit\n   integer.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> MOVDQ2Q </c> instruction.\n\n\\param __a\n   A 128-bit integer vector operand. The lower 64 bits are moved to the\n   destination.\n\\returns A 64-bit integer containing the lower 64 bits of the parameter.","bases":[],"vars":[16465423108944585516],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2169198573191184557,"detailed_name":"static inline void _mm_store1_pd(double *__dp, __m128d __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":13,"spell":"1992:1-1992:14|1991:1-1996:2|2|-1","hover":"","comments":"Moves the lower 64 bits of a 128-bit vector of [2 x double] twice to\n   the upper and lower 64 bits of a memory location.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the\n  <c> VMOVDDUP + VMOVAPD / MOVLHPS + MOVAPS </c> instruction.\n\n\\param __dp\n   A pointer to a memory location that can store two double-precision\n   values.\n\\param __a\n   A 128-bit vector of [2 x double] whose lower 64 bits are copied to each\n   of the values in \\a __dp.","bases":[],"vars":[14390266928025429183,11602336605342033266],"callees":["1995:3-1995:15|13740034146582337450|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["2015:3-2015:16|16420|-1"]},{"usr":2236443401961715559,"detailed_name":"static inline __m128d _mm_cmplt_pd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"446:1-446:13|445:1-449:2|2|-1","hover":"","comments":"Compares each of the corresponding double-precision values of the\n   128-bit vectors of [2 x double] to determine if the values in the first\n   operand are less than those in the second operand. Each comparison\n   yields 0x0 for false, 0xFFFFFFFFFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPLTPD / CMPLTPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double].\n\\param __b\n   A 128-bit vector of [2 x double].\n\\returns A 128-bit vector containing the comparison results.","bases":[],"vars":[2114368988194475850,12110694772432335608],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2439619994789043053,"detailed_name":"static inline __m128d _mm_add_sd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":10,"spell":"56:1-56:11|55:1-60:2|2|-1","hover":"","comments":"Adds lower double-precision values in both operands and returns the\n   sum in the lower 64 bits of the result. The upper 64 bits of the result\n   are copied from the upper double-precision value of the first operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VADDSD / ADDSD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double] containing one of the source operands.\n\\param __b\n   A 128-bit vector of [2 x double] containing one of the source operands.\n\\returns A 128-bit vector of [2 x double] whose lower 64 bits contain the\n   sum of the lower 64 bits of both operands. The upper 64 bits are copied\n   from the upper 64 bits of the first source operand.","bases":[],"vars":[17369439073678641157,6565748449975971686],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2495984876089384189,"detailed_name":"static inline __m128i _mm_cmpgt_epi32(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"3273:1-3273:16|3272:1-3276:2|2|-1","hover":"","comments":"Compares each of the corresponding signed 32-bit values of the\n   128-bit integer vectors to determine if the values in the first operand\n   are greater than those in the second operand.\n\n   Each comparison yields 0x0 for false, 0xFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPCMPGTD / PCMPGTD </c> instruction.\n\n\\param __a\n   A 128-bit integer vector.\n\\param __b\n   A 128-bit integer vector.\n\\returns A 128-bit integer vector containing the comparison results.","bases":[],"vars":[863128689853971412,9695294454861581698],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["3338:10-3338:25|16420|-1"]},{"usr":2515127747964859013,"detailed_name":"static inline __m128d _mm_div_sd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":10,"spell":"181:1-181:11|180:1-185:2|2|-1","hover":"","comments":"Divides the lower double-precision value of the first operand by the\n   lower double-precision value of the second operand and returns the\n   quotient in the lower 64 bits of the result. The upper 64 bits of the\n   result are copied from the upper double-precision value of the first\n   operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VDIVSD / DIVSD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double] containing the dividend.\n\\param __b\n   A 128-bit vector of [2 x double] containing divisor.\n\\returns A 128-bit vector of [2 x double] whose lower 64 bits contain the\n   quotient of the lower 64 bits of both operands. The upper 64 bits are\n   copied from the upper 64 bits of the first source operand.","bases":[],"vars":[10417292134851092084,11170208921203926597],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2605597086927031250,"detailed_name":"static inline __m128d _mm_cmpord_sd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"813:1-813:14|812:1-816:2|2|-1","hover":"","comments":"Compares the lower double-precision floating-point values in each of\n   the two 128-bit floating-point vectors of [2 x double] to determine if\n   the value in the first parameter is \"ordered\" with respect to the\n   corresponding value in the second parameter.\n\n   The comparison yields 0x0 for false, 0xFFFFFFFFFFFFFFFF for true. A pair\n   of double-precision values are \"ordered\" with respect to each other if\n   neither value is a NaN.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPORDSD / CMPORDSD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __b.\n\\param __b\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __a.\n\\returns A 128-bit vector. The lower 64 bits contains the comparison\n   results. The upper 64 bits are copied from the upper 64 bits of \\a __a.","bases":[],"vars":[919926012555355868,8172891014764618403],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2682398275410885021,"detailed_name":"static inline __m128d _mm_castps_pd(__m128 __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"4896:1-4896:14|4895:1-4899:2|2|-1","hover":"","comments":"Casts a 128-bit floating-point vector of [4 x float] into a 128-bit\n   floating-point vector of [2 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\param __a\n   A 128-bit floating-point vector of [4 x float].\n\\returns A 128-bit floating-point vector of [2 x double] containing the same\n   bitwise pattern as the parameter.","bases":[],"vars":[13387702710928981470],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2711594863405922829,"detailed_name":"static inline __m128i _mm_unpacklo_epi8(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":17,"spell":"4631:1-4631:18|4630:1-4634:2|2|-1","hover":"","comments":"Unpacks the low-order (index 0-7) values from two 128-bit vectors of\n   [16 x i8] and interleaves them into a 128-bit vector of [16 x i8].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPUNPCKLBW / PUNPCKLBW </c>\n  instruction.\n\n\\param __a\n   A 128-bit vector of [16 x i8]. \\n\n   Bits [7:0] are written to bits [7:0] of the result. \\n\n   Bits [15:8] are written to bits [23:16] of the result. \\n\n   Bits [23:16] are written to bits [39:32] of the result. \\n\n   Bits [31:24] are written to bits [55:48] of the result. \\n\n   Bits [39:32] are written to bits [71:64] of the result. \\n\n   Bits [47:40] are written to bits [87:80] of the result. \\n\n   Bits [55:48] are written to bits [103:96] of the result. \\n\n   Bits [63:56] are written to bits [119:112] of the result.\n\\param __b\n   A 128-bit vector of [16 x i8].\n   Bits [7:0] are written to bits [15:8] of the result. \\n\n   Bits [15:8] are written to bits [31:24] of the result. \\n\n   Bits [23:16] are written to bits [47:40] of the result. \\n\n   Bits [31:24] are written to bits [63:56] of the result. \\n\n   Bits [39:32] are written to bits [79:72] of the result. \\n\n   Bits [47:40] are written to bits [95:88] of the result. \\n\n   Bits [55:48] are written to bits [111:104] of the result. \\n\n   Bits [63:56] are written to bits [127:120] of the result.\n\\returns A 128-bit vector of [16 x i8] containing the interleaved values.","bases":[],"vars":[14661779939755040756,10074462059213995548],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2716730989809485146,"detailed_name":"static inline void _mm_storeu_pd(double *__dp, __m128d __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":13,"spell":"2031:1-2031:14|2030:1-2037:2|2|-1","hover":"","comments":"Stores a 128-bit vector of [2 x double] into an unaligned memory\n   location.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVUPD / MOVUPD </c> instruction.\n\n\\param __dp\n   A pointer to a 128-bit memory location. The address of the memory\n   location does not have to be aligned.\n\\param __a\n   A 128-bit vector of [2 x double] containing the values to be stored.","bases":[],"vars":[13821055076821497536,3628989763634904526],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2880743971687847254,"detailed_name":"static inline __m128i _mm_cmpeq_epi32(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"3209:1-3209:16|3208:1-3212:2|2|-1","hover":"","comments":"Compares each of the corresponding 32-bit values of the 128-bit\n   integer vectors for equality. Each comparison yields 0x0 for false,\n   0xFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPCMPEQD / PCMPEQD </c> instruction.\n\n\\param __a\n   A 128-bit integer vector.\n\\param __b\n   A 128-bit integer vector.\n\\returns A 128-bit integer vector containing the comparison results.","bases":[],"vars":[16172328008153112692,10039808366380103203],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2998839349624394546,"detailed_name":"static inline __m128i _mm_srai_epi16(__m128i __a, int __count)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"2955:1-2955:15|2954:1-2958:2|2|-1","hover":"","comments":"Right-shifts each 16-bit value in the 128-bit integer vector operand\n   by the specified number of bits. High-order bits are filled with the sign\n   bit of the initial value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSRAW / PSRAW </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing the source operand.\n\\param __count\n   An integer value specifying the number of bits to right-shift each value\n   in operand \\a __a.\n\\returns A 128-bit integer vector containing the right-shifted values.","bases":[],"vars":[1368696174429755224,3660260231116033223],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3081640456207688969,"detailed_name":"static inline __m128d _mm_setzero_pd()","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"1911:1-1911:15|1910:1-1914:2|2|-1","hover":"","comments":"Constructs a 128-bit floating-point vector of [2 x double]\n   initialized to zero.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VXORPS / XORPS </c> instruction.\n\n\\returns An initialized 128-bit floating-point vector of [2 x double] with\n   all elements set to zero.","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3118757878541466951,"detailed_name":"static inline __m128d _mm_cmpgt_sd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"759:1-759:13|758:1-763:2|2|-1","hover":"","comments":"Compares the lower double-precision floating-point values in each of\n   the two 128-bit floating-point vectors of [2 x double] to determine if\n   the value in the first parameter is greater than the corresponding value\n   in the second parameter.\n\n   The comparison yields 0x0 for false, 0xFFFFFFFFFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPLTSD / CMPLTSD </c> instruction.\n\n\\param __a\n    A 128-bit vector of [2 x double]. The lower double-precision value is\n    compared to the lower double-precision value of \\a __b.\n\\param __b\n    A 128-bit vector of [2 x double]. The lower double-precision value is\n    compared to the lower double-precision value of \\a __a.\n\\returns A 128-bit vector. The lower 64 bits contains the comparison\n    results. The upper 64 bits are copied from the upper 64 bits of \\a __a.","bases":[],"vars":[5771682252707458049,12225207367168326890,7505121046960619428],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3599324067585345227,"detailed_name":"static inline __m128i _mm_adds_epi8(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"2222:1-2222:14|2221:1-2225:2|2|-1","hover":"","comments":"Adds, with saturation, the corresponding elements of two 128-bit\n   signed [16 x i8] vectors, saving each sum in the corresponding element of\n   a 128-bit result vector of [16 x i8]. Positive sums greater than 0x7F are\n   saturated to 0x7F. Negative sums less than 0x80 are saturated to 0x80.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPADDSB / PADDSB </c> instruction.\n\n\\param __a\n   A 128-bit signed [16 x i8] vector.\n\\param __b\n   A 128-bit signed [16 x i8] vector.\n\\returns A 128-bit signed [16 x i8] vector containing the saturated sums of\n   both parameters.","bases":[],"vars":[2694947719305455284,3994688013664039401],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3629210132558850621,"detailed_name":"static inline __m128d _mm_cmpge_sd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"785:1-785:13|784:1-789:2|2|-1","hover":"","comments":"Compares the lower double-precision floating-point values in each of\n   the two 128-bit floating-point vectors of [2 x double] to determine if\n   the value in the first parameter is greater than or equal to the\n   corresponding value in the second parameter.\n\n   The comparison yields 0x0 for false, 0xFFFFFFFFFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPLESD / CMPLESD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __b.\n\\param __b\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __a.\n\\returns A 128-bit vector. The lower 64 bits contains the comparison\n   results. The upper 64 bits are copied from the upper 64 bits of \\a __a.","bases":[],"vars":[18316946586294908322,17930848158980471983,16763902426758301668],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3678887815421866215,"detailed_name":"static inline __m128i _mm_mulhi_epu16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"2472:1-2472:16|2471:1-2475:2|2|-1","hover":"","comments":"Multiplies the corresponding elements of two unsigned [8 x i16]\n   vectors, saving the upper 16 bits of each 32-bit product in the\n   corresponding element of a 128-bit unsigned [8 x i16] result vector.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMULHUW / PMULHUW </c> instruction.\n\n\\param __a\n   A 128-bit unsigned [8 x i16] vector.\n\\param __b\n   A 128-bit unsigned [8 x i16] vector.\n\\returns A 128-bit unsigned [8 x i16] vector containing the upper 16 bits\n   of each of the eight 32-bit products.","bases":[],"vars":[10798708906249866532,1207482816501054868],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3710605548327025384,"detailed_name":"static inline __m128d _mm_cmpnle_pd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"619:1-619:14|618:1-622:2|2|-1","hover":"","comments":"Compares each of the corresponding double-precision values of the\n   128-bit vectors of [2 x double] to determine if the values in the first\n   operand are not less than or equal to those in the second operand.\n\n   Each comparison yields 0x0 for false, 0xFFFFFFFFFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPNLEPD / CMPNLEPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double].\n\\param __b\n   A 128-bit vector of [2 x double].\n\\returns A 128-bit vector containing the comparison results.","bases":[],"vars":[8528765514903658440,1379238442645959223],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3868553227909875129,"detailed_name":"static inline __m128i _mm_sll_epi32(__m128i __a, __m128i __count)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"2897:1-2897:14|2896:1-2900:2|2|-1","hover":"","comments":"Left-shifts each 32-bit value in the 128-bit integer vector operand\n   by the specified number of bits. Low-order bits are cleared.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSLLD / PSLLD </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing the source operand.\n\\param __count\n   A 128-bit integer vector in which bits [63:0] specify the number of bits\n   to left-shift each value in operand \\a __a.\n\\returns A 128-bit integer vector containing the left-shifted values.","bases":[],"vars":[17032906184880485182,6908256553269953406],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3936570111021778188,"detailed_name":"static inline int _mm_comigt_sd(__m128d __a, __m128d __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":13,"spell":"1070:1-1070:14|1069:1-1073:2|2|-1","hover":"","comments":"Compares the lower double-precision floating-point values in each of\n   the two 128-bit floating-point vectors of [2 x double] to determine if\n   the value in the first parameter is greater than the corresponding value\n   in the second parameter.\n\n   The comparison yields 0 for false, 1 for true. If either of the two\n   lower double-precision values is NaN, 0 is returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCOMISD / COMISD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __b.\n\\param __b\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __a.\n\\returns An integer containing the comparison results. If either of the two\n    lower double-precision values is NaN, 0 is returned.","bases":[],"vars":[16047161413149420836,16836654226396692847],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3968718638072678566,"detailed_name":"static inline __m128i _mm_mulhi_epi16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"2452:1-2452:16|2451:1-2455:2|2|-1","hover":"","comments":"Multiplies the corresponding elements of two signed [8 x i16]\n   vectors, saving the upper 16 bits of each 32-bit product in the\n   corresponding element of a 128-bit signed [8 x i16] result vector.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMULHW / PMULHW </c> instruction.\n\n\\param __a\n   A 128-bit signed [8 x i16] vector.\n\\param __b\n   A 128-bit signed [8 x i16] vector.\n\\returns A 128-bit signed [8 x i16] vector containing the upper 16 bits of\n   each of the eight 32-bit products.","bases":[],"vars":[12005443798754429010,9714965268408006693],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3989827851007635770,"detailed_name":"static inline __m128d _mm_unpackhi_pd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"4776:1-4776:16|4775:1-4779:2|2|-1","hover":"","comments":"Unpacks the high-order 64-bit elements from two 128-bit vectors of\n   [2 x double] and interleaves them into a 128-bit vector of [2 x\n   double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VUNPCKHPD / UNPCKHPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. \\n\n   Bits [127:64] are written to bits [63:0] of the destination.\n\\param __b\n   A 128-bit vector of [2 x double]. \\n\n   Bits [127:64] are written to bits [127:64] of the destination.\n\\returns A 128-bit vector of [2 x double] containing the interleaved values.","bases":[],"vars":[8245327953387867118,3111445436595313680],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4072756172064932453,"detailed_name":"static inline __m128i _mm_setr_epi32(int __i0, int __i1, int __i2, int __i3)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"3885:1-3885:15|3884:1-3888:2|2|-1","hover":"","comments":"Constructs a 128-bit integer vector, initialized in reverse order\n    with the specified 32-bit integral values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __i0\n   A 32-bit integral value used to initialize bits [31:0] of the result.\n\\param __i1\n   A 32-bit integral value used to initialize bits [63:32] of the result.\n\\param __i2\n   A 32-bit integral value used to initialize bits [95:64] of the result.\n\\param __i3\n   A 32-bit integral value used to initialize bits [127:96] of the result.\n\\returns An initialized 128-bit integer vector.","bases":[],"vars":[10012278849073562619,14277442146503130872,8863055744734881088,481318877970774209],"callees":["3887:10-3887:23|16592947826053625709|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4124192301934747017,"detailed_name":"static inline __m128d _mm_add_pd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":10,"spell":"75:1-75:11|74:1-78:2|2|-1","hover":"","comments":"Adds two 128-bit vectors of [2 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VADDPD / ADDPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double] containing one of the source operands.\n\\param __b\n   A 128-bit vector of [2 x double] containing one of the source operands.\n\\returns A 128-bit vector of [2 x double] containing the sums of both\n   operands.","bases":[],"vars":[11158838210191883992,4945170279097301520],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4169977036566036015,"detailed_name":"static inline __m128i _mm_adds_epu16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"2286:1-2286:15|2285:1-2289:2|2|-1","hover":"","comments":"Adds, with saturation, the corresponding elements of two 128-bit\n   unsigned [8 x i16] vectors, saving each sum in the corresponding element\n   of a 128-bit result vector of [8 x i16]. Positive sums greater than\n   0xFFFF are saturated to 0xFFFF. Negative sums are saturated to 0x0000.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPADDUSB / PADDUSB </c> instruction.\n\n\\param __a\n   A 128-bit unsigned [8 x i16] vector.\n\\param __b\n   A 128-bit unsigned [8 x i16] vector.\n\\returns A 128-bit unsigned [8 x i16] vector containing the saturated sums\n   of both parameters.","bases":[],"vars":[13235686201154801259,17648628844213633479],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4368485728930407609,"detailed_name":"static inline __m128i _mm_srl_epi64(__m128i __a, __m128i __count)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"3152:1-3152:14|3151:1-3155:2|2|-1","hover":"","comments":"Right-shifts each of 64-bit values in the 128-bit integer vector\n   operand by the specified number of bits. High-order bits are cleared.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSRLQ / PSRLQ </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing the source operand.\n\\param __count\n   A 128-bit integer vector in which bits [63:0] specify the number of bits\n   to right-shift each value in operand \\a __a.\n\\returns A 128-bit integer vector containing the right-shifted values.","bases":[],"vars":[11901290446688203162,5401297998127863765],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4510096102857354891,"detailed_name":"static inline __m128i _mm_sll_epi64(__m128i __a, __m128i __count)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"2935:1-2935:14|2934:1-2938:2|2|-1","hover":"","comments":"Left-shifts each 64-bit value in the 128-bit integer vector operand\n   by the specified number of bits. Low-order bits are cleared.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSLLQ / PSLLQ </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing the source operand.\n\\param __count\n   A 128-bit integer vector in which bits [63:0] specify the number of bits\n   to left-shift each value in operand \\a __a.\n\\returns A 128-bit integer vector containing the left-shifted values.","bases":[],"vars":[18083793014288700363,7913135435828484575],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4563700117620334161,"detailed_name":"static inline __m128i _mm_add_epi8(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"2117:1-2117:13|2116:1-2120:2|2|-1","hover":"","comments":"Adds the corresponding elements of two 128-bit vectors of [16 x i8],\n   saving the lower 8 bits of each sum in the corresponding element of a\n   128-bit result vector of [16 x i8].\n\n   The integer elements of both parameters can be either signed or unsigned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPADDB / PADDB </c> instruction.\n\n\\param __a\n   A 128-bit vector of [16 x i8].\n\\param __b\n   A 128-bit vector of [16 x i8].\n\\returns A 128-bit vector of [16 x i8] containing the sums of both\n   parameters.","bases":[],"vars":[3340336440083871545,2454230366094698010],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4581995893159739654,"detailed_name":"static inline long long _mm_cvtsd_si64(__m128d __a)","qual_name_offset":24,"short_name_offset":24,"short_name_size":14,"spell":"3378:1-3378:15|3377:1-3381:2|2|-1","hover":"","comments":"Converts the first (lower) element of a vector of [2 x double] into a\n   64-bit signed integer value, according to the current rounding mode.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTSD2SI / CVTSD2SI </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower 64 bits are used in the\n   conversion.\n\\returns A 64-bit signed integer containing the converted value.","bases":[],"vars":[16730907211643678095],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4780142751190556824,"detailed_name":"static inline __m128i _mm_avg_epu16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"2326:1-2326:14|2325:1-2329:2|2|-1","hover":"","comments":"Computes the rounded averages of corresponding elements of two\n   128-bit unsigned [8 x i16] vectors, saving each result in the\n   corresponding element of a 128-bit result vector of [8 x i16].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPAVGW / PAVGW </c> instruction.\n\n\\param __a\n   A 128-bit unsigned [8 x i16] vector.\n\\param __b\n   A 128-bit unsigned [8 x i16] vector.\n\\returns A 128-bit unsigned [8 x i16] vector containing the rounded\n   averages of both parameters.","bases":[],"vars":[2402700425088337270,285563946356453189],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4796122711920831297,"detailed_name":"static inline __m128i _mm_sub_epi8(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"2570:1-2570:13|2569:1-2573:2|2|-1","hover":"","comments":"Subtracts the corresponding 8-bit integer values in the operands.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSUBB / PSUBB </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing the minuends.\n\\param __b\n   A 128-bit integer vector containing the subtrahends.\n\\returns A 128-bit integer vector containing the differences of the values\n   in the operands.","bases":[],"vars":[7909772553798964704,3941478834328825646],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4839839779651227560,"detailed_name":"static inline __m128i _mm_cmplt_epi8(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"3294:1-3294:15|3293:1-3297:2|2|-1","hover":"","comments":"Compares each of the corresponding signed 8-bit values of the 128-bit\n   integer vectors to determine if the values in the first operand are less\n   than those in the second operand.\n\n   Each comparison yields 0x0 for false, 0xFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPCMPGTB / PCMPGTB </c> instruction.\n\n\\param __a\n   A 128-bit integer vector.\n\\param __b\n   A 128-bit integer vector.\n\\returns A 128-bit integer vector containing the comparison results.","bases":[],"vars":[12111805470599592100,14786842321547977464],"callees":["3296:10-3296:24|6749157626663394373|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4891547857481660445,"detailed_name":"static inline void _mm_storeh_pd(double *__dp, __m128d __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":13,"spell":"2072:1-2072:14|2071:1-2078:2|2|-1","hover":"","comments":"Stores the upper 64 bits of a 128-bit vector of [2 x double] to a\n   memory location.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVHPD / MOVHPD </c> instruction.\n\n\\param __dp\n   A pointer to a 64-bit memory location.\n\\param __a\n   A 128-bit vector of [2 x double] containing the value to be stored.","bases":[],"vars":[1677538887430270803,1434039123725065047],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5018376211647449187,"detailed_name":"static inline __m128d _mm_max_pd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":10,"spell":"332:1-332:11|331:1-335:2|2|-1","hover":"","comments":"Performs element-by-element comparison of the two 128-bit vectors of\n   [2 x double] and returns the vector containing the greater of each pair\n   of values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMAXPD / MAXPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double] containing one of the operands.\n\\param __b\n   A 128-bit vector of [2 x double] containing one of the operands.\n\\returns A 128-bit vector of [2 x double] containing the maximum values\n   between both operands.","bases":[],"vars":[15247908239749684837,17203924195817317053],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5145464518114371494,"detailed_name":"static inline __m128i _mm_srli_epi32(__m128i __a, int __count)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"3095:1-3095:15|3094:1-3098:2|2|-1","hover":"","comments":"Right-shifts each of 32-bit values in the 128-bit integer vector\n   operand by the specified number of bits. High-order bits are cleared.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSRLD / PSRLD </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing the source operand.\n\\param __count\n   An integer value specifying the number of bits to right-shift each value\n   in operand \\a __a.\n\\returns A 128-bit integer vector containing the right-shifted values.","bases":[],"vars":[11572002864742449493,8960402900978348608],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5150234430722066635,"detailed_name":"static inline __m128i _mm_mul_epu32(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"2530:1-2530:14|2529:1-2533:2|2|-1","hover":"","comments":"Multiplies 32-bit unsigned integer values contained in the lower\n   bits of the corresponding elements of two [2 x i64] vectors, and returns\n   the 64-bit products in the corresponding elements of a [2 x i64] vector.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMULUDQ / PMULUDQ </c> instruction.\n\n\\param __a\n   A [2 x i64] vector containing one of the source operands.\n\\param __b\n   A [2 x i64] vector containing one of the source operands.\n\\returns A [2 x i64] vector containing the product of both operands.","bases":[],"vars":[8209492599275019433,17661270265080848945],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5204296916692611837,"detailed_name":"static inline __m128i _mm_min_epu8(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"2432:1-2432:13|2431:1-2435:2|2|-1","hover":"","comments":"Compares corresponding elements of two 128-bit unsigned [16 x i8]\n   vectors, saving the smaller value from each comparison in the\n   corresponding element of a 128-bit result vector of [16 x i8].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMINUB / PMINUB </c> instruction.\n\n\\param __a\n   A 128-bit unsigned [16 x i8] vector.\n\\param __b\n   A 128-bit unsigned [16 x i8] vector.\n\\returns A 128-bit unsigned [16 x i8] vector containing the smaller value of\n   each comparison.","bases":[],"vars":[14850879641106055923,17706216899702746774],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5255076649562737874,"detailed_name":"static inline __m128i _mm_move_epi64(__m128i __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"4755:1-4755:15|4754:1-4758:2|2|-1","hover":"","comments":"Moves the lower 64 bits of a 128-bit integer vector to a 128-bit\n   integer vector, zeroing the upper bits.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVQ / MOVQ </c> instruction.\n\n\\param __a\n   A 128-bit integer vector operand. The lower 64 bits are moved to the\n   destination.\n\\returns A 128-bit integer vector. The lower 64 bits contain the value from\n   the operand. The upper 64 bits are assigned zeros.","bases":[],"vars":[11096504111328596164],"callees":["4757:47-4757:64|13933954874642965752|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5321846277811350183,"detailed_name":"static inline __m128d _mm_cmpngt_sd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"941:1-941:14|940:1-945:2|2|-1","hover":"","comments":"Compares the lower double-precision floating-point values in each of\n   the two 128-bit floating-point vectors of [2 x double] to determine if\n   the value in the first parameter is not greater than the corresponding\n   value in the second parameter.\n\n   The comparison yields 0x0 for false, 0xFFFFFFFFFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPNLTSD / CMPNLTSD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __b.\n\\param __b\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __a.\n\\returns A 128-bit vector. The lower 64 bits contains the comparison\n   results. The upper 64 bits are copied from the upper 64 bits of \\a __a.","bases":[],"vars":[1700845553043660394,17209553376254517008,2116324703617865982],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5367973994947037771,"detailed_name":"static inline __m128i _mm_set1_epi32(int __i)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"3804:1-3804:15|3803:1-3807:2|2|-1","hover":"","comments":"Initializes all values in a 128-bit vector of [4 x i32] with the\n   specified 32-bit value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __i\n   A 32-bit value used to initialize the elements of the destination integer\n   vector.\n\\returns An initialized 128-bit vector of [4 x i32] with all elements\n   containing the value provided in the operand.","bases":[],"vars":[13141172028104601007],"callees":["3806:10-3806:23|16592947826053625709|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5407471146260504397,"detailed_name":"static inline __m128i _mm_set_epi64x(long long __q1, long long __q0)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"3609:1-3609:15|3608:1-3612:2|2|-1","hover":"","comments":"Initializes both 64-bit values in a 128-bit vector of [2 x i64] with\n   the specified 64-bit integer values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __q1\n   A 64-bit integer value used to initialize the upper 64 bits of the\n   destination vector of [2 x i64].\n\\param __q0\n   A 64-bit integer value used to initialize the lower 64 bits of the\n   destination vector of [2 x i64].\n\\returns An initialized 128-bit vector of [2 x i64] containing the values\n   provided in the operands.","bases":[],"vars":[1749174313752313928,9328742071707179636],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["3633:10-3633:24|16420|-1","3768:10-3768:24|16420|-1"]},{"usr":5420535582697788431,"detailed_name":"static inline __m128i _mm_srl_epi32(__m128i __a, __m128i __count)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"3114:1-3114:14|3113:1-3117:2|2|-1","hover":"","comments":"Right-shifts each of 32-bit values in the 128-bit integer vector\n   operand by the specified number of bits. High-order bits are cleared.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSRLD / PSRLD </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing the source operand.\n\\param __count\n   A 128-bit integer vector in which bits [63:0] specify the number of bits\n   to right-shift each value in operand \\a __a.\n\\returns A 128-bit integer vector containing the right-shifted values.","bases":[],"vars":[16906235934298331884,3492989707202172589],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5635945880279553025,"detailed_name":"static inline void _mm_storeu_si64(void *__p, __m128i __b)","qual_name_offset":19,"short_name_offset":19,"short_name_size":15,"spell":"4032:1-4032:16|4031:1-4038:2|2|-1","hover":"","comments":"Stores a 64-bit integer value from the low element of a 128-bit integer\n   vector.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVQ / MOVQ </c> instruction.\n\n\\param __p\n   A pointer to a 64-bit memory location. The address of the memory\n   location does not have to be algned.\n\\param __b\n   A 128-bit integer vector containing the value to be stored.","bases":[],"vars":[4372679695966853596,1832878378777085328],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5688282209941746126,"detailed_name":"static inline __m128d _mm_loadl_pd(__m128d __a, const double *__dp)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"1778:1-1778:13|1777:1-1785:2|2|-1","hover":"","comments":"Loads a double-precision value into the low-order bits of a 128-bit\n   vector of [2 x double]. The high-order bits are copied from the\n   high-order bits of the first operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVLPD / MOVLPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. \\n\n   Bits [127:64] are written to bits [127:64] of the result.\n\\param __dp\n   A pointer to a 64-bit memory location containing a double-precision\n   floating-point value that is loaded. The loaded value is written to bits\n   [63:0] of the result. The address of the memory location does not have to\n   be aligned.\n\\returns A 128-bit vector of [2 x double] containing the moved values.","bases":[],"vars":[14933777975930047226,14419466626387955637,16346783200944373752],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5715979185033863684,"detailed_name":"static inline __m128i _mm_unpackhi_epi32(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":18,"spell":"4575:1-4575:19|4574:1-4578:2|2|-1","hover":"","comments":"Unpacks the high-order (index 2,3) values from two 128-bit vectors of\n   [4 x i32] and interleaves them into a 128-bit vector of [4 x i32].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPUNPCKHDQ / PUNPCKHDQ </c>\n  instruction.\n\n\\param __a\n   A 128-bit vector of [4 x i32]. \\n\n   Bits [95:64] are written to bits [31:0] of the destination. \\n\n   Bits [127:96] are written to bits [95:64] of the destination.\n\\param __b\n   A 128-bit vector of [4 x i32]. \\n\n   Bits [95:64] are written to bits [64:32] of the destination. \\n\n   Bits [127:96] are written to bits [127:96] of the destination.\n\\returns A 128-bit vector of [4 x i32] containing the interleaved values.","bases":[],"vars":[12549072345338373522,4560360322090573481],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5964116747504663393,"detailed_name":"static inline __m128i _mm_unpacklo_epi32(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":18,"spell":"4682:1-4682:19|4681:1-4685:2|2|-1","hover":"","comments":"Unpacks the low-order (index 0,1) values from two 128-bit vectors of\n   [4 x i32] and interleaves them into a 128-bit vector of [4 x i32].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPUNPCKLDQ / PUNPCKLDQ </c>\n  instruction.\n\n\\param __a\n   A 128-bit vector of [4 x i32]. \\n\n   Bits [31:0] are written to bits [31:0] of the destination. \\n\n   Bits [63:32] are written to bits [95:64] of the destination.\n\\param __b\n   A 128-bit vector of [4 x i32]. \\n\n   Bits [31:0] are written to bits [64:32] of the destination. \\n\n   Bits [63:32] are written to bits [127:96] of the destination.\n\\returns A 128-bit vector of [4 x i32] containing the interleaved values.","bases":[],"vars":[14457131227364671237,4356707417441899505],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5997638552374428914,"detailed_name":"static inline __m128d _mm_loadu_pd(const double *__dp)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"1641:1-1641:13|1640:1-1647:2|2|-1","hover":"","comments":"Loads a 128-bit floating-point vector of [2 x double] from an\n   unaligned memory location.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVUPD / MOVUPD </c> instruction.\n\n\\param __dp\n   A pointer to a 128-bit memory location. The address of the memory\n   location does not have to be aligned.\n\\returns A 128-bit vector of [2 x double] containing the loaded values.","bases":[],"vars":[6416364529460341359],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6070772720965945376,"detailed_name":"static inline int _mm_ucomige_sd(__m128d __a, __m128d __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":14,"spell":"1250:1-1250:15|1249:1-1253:2|2|-1","hover":"","comments":"Compares the lower double-precision floating-point values in each of\n   the two 128-bit floating-point vectors of [2 x double] to determine if\n   the value in the first parameter is greater than or equal to the\n   corresponding value in the second parameter.\n\n   The comparison yields 0 for false, 1 for true.  If either of the two\n   lower double-precision values is NaN, 0 is returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VUCOMISD / UCOMISD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __b.\n\\param __b\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __a.\n\\returns An integer containing the comparison results. If either of the two\n   lower double-precision values is NaN, 0 is returned.","bases":[],"vars":[2252023993476674378,14249686987542653555],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6151092182155408542,"detailed_name":"static inline __m128i _mm_unpackhi_epi16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":18,"spell":"4552:1-4552:19|4551:1-4555:2|2|-1","hover":"","comments":"Unpacks the high-order (index 4-7) values from two 128-bit vectors of\n   [8 x i16] and interleaves them into a 128-bit vector of [8 x i16].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPUNPCKHWD / PUNPCKHWD </c>\n  instruction.\n\n\\param __a\n   A 128-bit vector of [8 x i16].\n   Bits [79:64] are written to bits [15:0] of the result. \\n\n   Bits [95:80] are written to bits [47:32] of the result. \\n\n   Bits [111:96] are written to bits [79:64] of the result. \\n\n   Bits [127:112] are written to bits [111:96] of the result.\n\\param __b\n   A 128-bit vector of [8 x i16].\n   Bits [79:64] are written to bits [31:16] of the result. \\n\n   Bits [95:80] are written to bits [63:48] of the result. \\n\n   Bits [111:96] are written to bits [95:80] of the result. \\n\n   Bits [127:112] are written to bits [127:112] of the result.\n\\returns A 128-bit vector of [8 x i16] containing the interleaved values.","bases":[],"vars":[6449471617955450729,15386676184484276909],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6178380141689627441,"detailed_name":"static inline __m128d _mm_and_pd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":10,"spell":"350:1-350:11|349:1-353:2|2|-1","hover":"","comments":"Performs a bitwise AND of two 128-bit vectors of [2 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPAND / PAND </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double] containing one of the source operands.\n\\param __b\n   A 128-bit vector of [2 x double] containing one of the source operands.\n\\returns A 128-bit vector of [2 x double] containing the bitwise AND of the\n   values between both operands.","bases":[],"vars":[5172480806969540004,1661645994859722644],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6240833253643519688,"detailed_name":"static inline __m128d _mm_cmpunord_pd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"556:1-556:16|555:1-559:2|2|-1","hover":"","comments":"Compares each of the corresponding double-precision values of the\n   128-bit vectors of [2 x double] to determine if the values in the first\n   operand are unordered with respect to those in the second operand.\n\n   A pair of double-precision values are \"unordered\" with respect to each\n   other if one or both values are NaN. Each comparison yields 0x0 for\n   false, 0xFFFFFFFFFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPUNORDPD / CMPUNORDPD </c>\n  instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double].\n\\param __b\n   A 128-bit vector of [2 x double].\n\\returns A 128-bit vector containing the comparison results.","bases":[],"vars":[2533721015645721366,18133436629670893138],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6304802842335772388,"detailed_name":"static inline __m128i _mm_cvtsi32_si128(int __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":17,"spell":"3461:1-3461:18|3460:1-3464:2|2|-1","hover":"","comments":"Returns a vector of [4 x i32] where the lowest element is the input\n   operand and the remaining elements are zero.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVD / MOVD </c> instruction.\n\n\\param __a\n   A 32-bit signed integer operand.\n\\returns A 128-bit vector of [4 x i32].","bases":[],"vars":[12095748366150210345],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6407926683213858799,"detailed_name":"static inline __m128d _mm_cmpunord_sd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"841:1-841:16|840:1-844:2|2|-1","hover":"","comments":"Compares the lower double-precision floating-point values in each of\n   the two 128-bit floating-point vectors of [2 x double] to determine if\n   the value in the first parameter is \"unordered\" with respect to the\n   corresponding value in the second parameter.\n\n   The comparison yields 0x0 for false, 0xFFFFFFFFFFFFFFFF for true. A pair\n   of double-precision values are \"unordered\" with respect to each other if\n   one or both values are NaN.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPUNORDSD / CMPUNORDSD </c>\n  instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __b.\n\\param __b\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __a.\n\\returns A 128-bit vector. The lower 64 bits contains the comparison\n   results. The upper 64 bits are copied from the upper 64 bits of \\a __a.","bases":[],"vars":[17165086629956910770,12592652542270637942],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6552151891894286153,"detailed_name":"static inline __m128d _mm_load_pd(const double *__dp)","qual_name_offset":22,"short_name_offset":22,"short_name_size":11,"spell":"1579:1-1579:12|1578:1-1582:2|2|-1","hover":"","comments":"Loads a 128-bit floating-point vector of [2 x double] from an aligned\n   memory location.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVAPD / MOVAPD </c> instruction.\n\n\\param __dp\n   A pointer to a 128-bit memory location. The address of the memory\n   location has to be 16-byte aligned.\n\\returns A 128-bit vector of [2 x double] containing the loaded values.","bases":[],"vars":[4449264528116417551],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6562898493923145041,"detailed_name":"static inline __m128d _mm_set_pd(double __w, double __x)","qual_name_offset":22,"short_name_offset":22,"short_name_size":10,"spell":"1875:1-1875:11|1874:1-1878:2|2|-1","hover":"","comments":"Constructs a 128-bit floating-point vector of [2 x double]\n   initialized with the specified double-precision floating-point values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VUNPCKLPD / UNPCKLPD </c> instruction.\n\n\\param __w\n   A double-precision floating-point value used to initialize the upper 64\n   bits of the result.\n\\param __x\n   A double-precision floating-point value used to initialize the lower 64\n   bits of the result.\n\\returns An initialized 128-bit floating-point vector of [2 x double].","bases":[],"vars":[11912022397013417696,14603404917264090197],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6674199594945684631,"detailed_name":"static inline __m128 _mm_castpd_ps(__m128d __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"4862:1-4862:14|4861:1-4865:2|2|-1","hover":"","comments":"Casts a 128-bit floating-point vector of [2 x double] into a 128-bit\n   floating-point vector of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\param __a\n   A 128-bit floating-point vector of [2 x double].\n\\returns A 128-bit floating-point vector of [4 x float] containing the same\n   bitwise pattern as the parameter.","bases":[],"vars":[3170985495824802134],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6685584702509436120,"detailed_name":"static inline __m128 _mm_cvtsd_ss(__m128 __a, __m128d __b)","qual_name_offset":21,"short_name_offset":21,"short_name_size":12,"spell":"1400:1-1400:13|1399:1-1403:2|2|-1","hover":"","comments":"Converts the lower double-precision floating-point element of a\n   128-bit vector of [2 x double], in the second parameter, into a\n   single-precision floating-point value, returned in the lower 32 bits of a\n   128-bit vector of [4 x float]. The upper 96 bits of the result vector are\n   copied from the upper 96 bits of the first parameter.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTSD2SS / CVTSD2SS </c> instruction.\n\n\\param __a\n   A 128-bit vector of [4 x float]. The upper 96 bits of this parameter are\n   copied to the upper 96 bits of the result.\n\\param __b\n   A 128-bit vector of [2 x double]. The lower double-precision\n   floating-point element is used in the conversion.\n\\returns A 128-bit vector of [4 x float]. The lower 32 bits contain the\n   converted value from the second parameter. The upper 96 bits are copied\n   from the upper 96 bits of the first parameter.","bases":[],"vars":[4951576052500434074,13589193147140369330],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6749157626663394373,"detailed_name":"static inline __m128i _mm_cmpgt_epi8(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"3229:1-3229:15|3228:1-3234:2|2|-1","hover":"","comments":"Compares each of the corresponding signed 8-bit values of the 128-bit\n   integer vectors to determine if the values in the first operand are\n   greater than those in the second operand. Each comparison yields 0x0 for\n   false, 0xFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPCMPGTB / PCMPGTB </c> instruction.\n\n\\param __a\n   A 128-bit integer vector.\n\\param __b\n   A 128-bit integer vector.\n\\returns A 128-bit integer vector containing the comparison results.","bases":[],"vars":[16781172437638451981,7512422985434871880],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["3296:10-3296:24|16420|-1"]},{"usr":6764067428302924406,"detailed_name":"static inline void _mm_storeu_si16(void *__p, __m128i __b)","qual_name_offset":19,"short_name_offset":19,"short_name_size":15,"spell":"4074:1-4074:16|4073:1-4080:2|2|-1","hover":"","comments":"Stores a 16-bit integer value from the low element of a 128-bit integer\n   vector.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic does not correspond to a specific instruction.\n\n\\param __p\n   A pointer to a 16-bit memory location. The address of the memory\n   location does not have to be aligned.\n\\param __b\n   A 128-bit integer vector containing the value to be stored.","bases":[],"vars":[1844421861469927885,18331149656684226032],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6968190850768426666,"detailed_name":"static inline __m128i _mm_cvttpd_epi32(__m128d __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":16,"spell":"1473:1-1473:17|1472:1-1476:2|2|-1","hover":"","comments":"Converts the two double-precision floating-point elements of a\n   128-bit vector of [2 x double] into two signed 32-bit integer values,\n   returned in the lower 64 bits of a 128-bit vector of [4 x i32].\n\n   If the result of either conversion is inexact, the result is truncated\n   (rounded towards zero) regardless of the current MXCSR setting. The upper\n   64 bits of the result vector are set to zero.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTTPD2DQ / CVTTPD2DQ </c>\n  instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double].\n\\returns A 128-bit vector of [4 x i32] whose lower 64 bits contain the\n   converted values. The upper 64 bits are set to zero.","bases":[],"vars":[5937646894798478479],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7109212986900975960,"detailed_name":"static inline __m128d _mm_cmpneq_sd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"866:1-866:14|865:1-869:2|2|-1","hover":"","comments":"Compares the lower double-precision floating-point values in each of\n   the two 128-bit floating-point vectors of [2 x double] to determine if\n   the value in the first parameter is unequal to the corresponding value in\n   the second parameter.\n\n   The comparison yields 0x0 for false, 0xFFFFFFFFFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPNEQSD / CMPNEQSD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __b.\n\\param __b\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __a.\n\\returns A 128-bit vector. The lower 64 bits contains the comparison\n   results. The upper 64 bits are copied from the upper 64 bits of \\a __a.","bases":[],"vars":[13786650117543834056,3379469379880446694],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7198041364985378719,"detailed_name":"static inline __m128d _mm_load_sd(const double *__dp)","qual_name_offset":22,"short_name_offset":22,"short_name_size":11,"spell":"1724:1-1724:12|1723:1-1731:2|2|-1","hover":"","comments":"Loads a 64-bit double-precision value to the low element of a\n   128-bit integer vector and clears the upper element.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVSD / MOVSD </c> instruction.\n\n\\param __dp\n   A pointer to a memory location containing a double-precision value.\n   The address of the memory location does not have to be aligned.\n\\returns A 128-bit vector of [2 x double] containing the loaded value.","bases":[],"vars":[6408490720899555343,4634729613595090128],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7217804444754675683,"detailed_name":"static inline __m128i _mm_set1_epi64(__m64 __q)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"3785:1-3785:15|3784:1-3788:2|2|-1","hover":"","comments":"Initializes both values in a 128-bit vector of [2 x i64] with the\n   specified 64-bit value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __q\n   A 64-bit value used to initialize the elements of the destination integer\n   vector.\n\\returns An initialized 128-bit vector of [2 x i64] with all elements\n   containing the value provided in the operand.","bases":[],"vars":[4759529541755913160],"callees":["3787:10-3787:23|14082753678476808487|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7322100692738385368,"detailed_name":"static inline __m128d _mm_cmpeq_sd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"684:1-684:13|683:1-687:2|2|-1","hover":"","comments":"Compares the lower double-precision floating-point values in each of\n   the two 128-bit floating-point vectors of [2 x double] for equality.\n\n   The comparison yields 0x0 for false, 0xFFFFFFFFFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPEQSD / CMPEQSD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __b.\n\\param __b\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __a.\n\\returns A 128-bit vector. The lower 64 bits contains the comparison\n   results. The upper 64 bits are copied from the upper 64 bits of \\a __a.","bases":[],"vars":[5938355501616550346,11293793436170791515],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7591505421790267289,"detailed_name":"static inline __m128d _mm_mul_pd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":10,"spell":"158:1-158:11|157:1-161:2|2|-1","hover":"","comments":"Multiplies two 128-bit vectors of [2 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMULPD / MULPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double] containing one of the operands.\n\\param __b\n   A 128-bit vector of [2 x double] containing one of the operands.\n\\returns A 128-bit vector of [2 x double] containing the products of both\n   operands.","bases":[],"vars":[8733498557890574805,15737085470787564704],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7637927521563586629,"detailed_name":"static inline __m128d _mm_min_pd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":10,"spell":"288:1-288:11|287:1-291:2|2|-1","hover":"","comments":"Performs element-by-element comparison of the two 128-bit vectors of\n   [2 x double] and returns the vector containing the lesser of each pair of\n   values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMINPD / MINPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double] containing one of the operands.\n\\param __b\n   A 128-bit vector of [2 x double] containing one of the operands.\n\\returns A 128-bit vector of [2 x double] containing the minimum values\n   between both operands.","bases":[],"vars":[10729181878674475961,15726569806227293846],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7662139941301182418,"detailed_name":"static inline __m128i _mm_sra_epi32(__m128i __a, __m128i __count)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"3015:1-3015:14|3014:1-3018:2|2|-1","hover":"","comments":"Right-shifts each 32-bit value in the 128-bit integer vector operand\n   by the specified number of bits. High-order bits are filled with the sign\n   bit of the initial value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSRAD / PSRAD </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing the source operand.\n\\param __count\n   A 128-bit integer vector in which bits [63:0] specify the number of bits\n   to right-shift each value in operand \\a __a.\n\\returns A 128-bit integer vector containing the right-shifted values.","bases":[],"vars":[11127335160413709933,2875578404365510453],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7677831928836665137,"detailed_name":"static inline __m128i _mm_add_epi32(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"2161:1-2161:14|2160:1-2164:2|2|-1","hover":"","comments":"Adds the corresponding elements of two 128-bit vectors of [4 x i32],\n   saving the lower 32 bits of each sum in the corresponding element of a\n   128-bit result vector of [4 x i32].\n\n   The integer elements of both parameters can be either signed or unsigned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPADDD / PADDD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [4 x i32].\n\\param __b\n   A 128-bit vector of [4 x i32].\n\\returns A 128-bit vector of [4 x i32] containing the sums of both\n   parameters.","bases":[],"vars":[6537008736738124271,16786298577346112947],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7765165256407986861,"detailed_name":"static inline __m64 _mm_sub_si64(__m64 __a, __m64 __b)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"2625:1-2625:13|2624:1-2628:2|2|-1","hover":"","comments":"Subtracts signed or unsigned 64-bit integer values and writes the\n   difference to the corresponding bits in the destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PSUBQ </c> instruction.\n\n\\param __a\n   A 64-bit integer vector containing the minuend.\n\\param __b\n   A 64-bit integer vector containing the subtrahend.\n\\returns A 64-bit integer vector containing the difference of the values in\n   the operands.","bases":[],"vars":[7977116263982921953,2758328980920557155],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7901588567070840246,"detailed_name":"static inline __m128d _mm_sub_pd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":10,"spell":"117:1-117:11|116:1-120:2|2|-1","hover":"","comments":"Subtracts two 128-bit vectors of [2 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VSUBPD / SUBPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double] containing the minuend.\n\\param __b\n   A 128-bit vector of [2 x double] containing the subtrahend.\n\\returns A 128-bit vector of [2 x double] containing the differences between\n   both operands.","bases":[],"vars":[6955451314871090787,13105097199816193901],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8003005209363665534,"detailed_name":"static inline __m128i _mm_max_epi16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"2372:1-2372:14|2371:1-2375:2|2|-1","hover":"","comments":"Compares corresponding elements of two 128-bit signed [8 x i16]\n   vectors, saving the greater value from each comparison in the\n   corresponding element of a 128-bit result vector of [8 x i16].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMAXSW / PMAXSW </c> instruction.\n\n\\param __a\n   A 128-bit signed [8 x i16] vector.\n\\param __b\n   A 128-bit signed [8 x i16] vector.\n\\returns A 128-bit signed [8 x i16] vector containing the greater value of\n   each comparison.","bases":[],"vars":[11971724051572504204,7928610262415648115],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8022356622455147307,"detailed_name":"static inline void _mm_maskmoveu_si128(__m128i __d, __m128i __n, char *__p)","qual_name_offset":19,"short_name_offset":19,"short_name_size":19,"spell":"4104:1-4104:20|4103:1-4107:2|2|-1","hover":"","comments":"Moves bytes selected by the mask from the first operand to the\n   specified unaligned memory location. When a mask bit is 1, the\n   corresponding byte is written, otherwise it is not written.\n\n   To minimize caching, the data is flagged as non-temporal (unlikely to be\n   used again soon). Exception and trap behavior for elements not selected\n   for storage to memory are implementation dependent.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMASKMOVDQU / MASKMOVDQU </c>\n  instruction.\n\n\\param __d\n   A 128-bit integer vector containing the values to be moved.\n\\param __n\n   A 128-bit integer vector containing the mask. The most significant bit of\n   each byte represents the mask bits.\n\\param __p\n   A pointer to an unaligned 128-bit memory location where the specified\n   values are moved.","bases":[],"vars":[12462105961894676420,8020316021051065247,16748569119767750564],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8072785957192320668,"detailed_name":"static inline __m128d _mm_cmpge_pd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"509:1-509:13|508:1-512:2|2|-1","hover":"","comments":"Compares each of the corresponding double-precision values of the\n   128-bit vectors of [2 x double] to determine if the values in the first\n   operand are greater than or equal to those in the second operand.\n\n   Each comparison yields 0x0 for false, 0xFFFFFFFFFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPLEPD / CMPLEPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double].\n\\param __b\n   A 128-bit vector of [2 x double].\n\\returns A 128-bit vector containing the comparison results.","bases":[],"vars":[8052076358270721900,11496543746586329445],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8091100933442381690,"detailed_name":"static inline __m128d _mm_cmpeq_pd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"426:1-426:13|425:1-429:2|2|-1","hover":"","comments":"Compares each of the corresponding double-precision values of the\n   128-bit vectors of [2 x double] for equality. Each comparison yields 0x0\n   for false, 0xFFFFFFFFFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPEQPD / CMPEQPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double].\n\\param __b\n   A 128-bit vector of [2 x double].\n\\returns A 128-bit vector containing the comparison results.","bases":[],"vars":[16014199390334433957,14659948959435824382],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8107655377849456250,"detailed_name":"static inline __m128i _mm_add_epi16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"2139:1-2139:14|2138:1-2142:2|2|-1","hover":"","comments":"Adds the corresponding elements of two 128-bit vectors of [8 x i16],\n   saving the lower 16 bits of each sum in the corresponding element of a\n   128-bit result vector of [8 x i16].\n\n   The integer elements of both parameters can be either signed or unsigned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPADDW / PADDW </c> instruction.\n\n\\param __a\n   A 128-bit vector of [8 x i16].\n\\param __b\n   A 128-bit vector of [8 x i16].\n\\returns A 128-bit vector of [8 x i16] containing the sums of both\n   parameters.","bases":[],"vars":[5407319808835564246,17171705026075922487],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8159782799488230049,"detailed_name":"static inline __m128i _mm_unpacklo_epi64(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":18,"spell":"4703:1-4703:19|4702:1-4706:2|2|-1","hover":"","comments":"Unpacks the low-order 64-bit elements from two 128-bit vectors of\n   [2 x i64] and interleaves them into a 128-bit vector of [2 x i64].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPUNPCKLQDQ / PUNPCKLQDQ </c>\n  instruction.\n\n\\param __a\n   A 128-bit vector of [2 x i64]. \\n\n   Bits [63:0] are written to bits [63:0] of the destination. \\n\n\\param __b\n   A 128-bit vector of [2 x i64]. \\n\n   Bits [63:0] are written to bits [127:64] of the destination. \\n\n\\returns A 128-bit vector of [2 x i64] containing the interleaved values.","bases":[],"vars":[17147353261507556591,1897332567520482150],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8171987671735279134,"detailed_name":"static inline void _mm_stream_si32(int *__p, int __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":15,"spell":"4184:1-4184:16|4183:1-4187:2|2|-1","hover":"","comments":"Stores a 32-bit integer value in the specified memory location.\n\n   To minimize caching, the data is flagged as non-temporal (unlikely to be\n   used again soon).\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> MOVNTI </c> instruction.\n\n\\param __p\n   A pointer to the 32-bit memory location used to store the value.\n\\param __a\n   A 32-bit integer containing the value to be stored.","bases":[],"vars":[2505347811433185347,10969939961360966585],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8211874916367936000,"detailed_name":"static inline __m128 _mm_cvtpd_ps(__m128d __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":12,"spell":"1295:1-1295:13|1294:1-1298:2|2|-1","hover":"","comments":"Converts the two double-precision floating-point elements of a\n   128-bit vector of [2 x double] into two single-precision floating-point\n   values, returned in the lower 64 bits of a 128-bit vector of [4 x float].\n   The upper 64 bits of the result vector are set to zero.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTPD2PS / CVTPD2PS </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double].\n\\returns A 128-bit vector of [4 x float] whose lower 64 bits contain the\n   converted values. The upper 64 bits are set to zero.","bases":[],"vars":[5525711034489693703],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8473383519043444012,"detailed_name":"static inline int _mm_comieq_sd(__m128d __a, __m128d __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":13,"spell":"992:1-992:14|991:1-995:2|2|-1","hover":"","comments":"Compares the lower double-precision floating-point values in each of\n   the two 128-bit floating-point vectors of [2 x double] for equality.\n\n   The comparison yields 0 for false, 1 for true. If either of the two\n   lower double-precision values is NaN, 0 is returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCOMISD / COMISD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __b.\n\\param __b\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __a.\n\\returns An integer containing the comparison results. If either of the two\n   lower double-precision values is NaN, 0 is returned.","bases":[],"vars":[14272758502912461820,6483777149507004253],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8575000686225321792,"detailed_name":"static inline __m128i _mm_or_si128(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"2780:1-2780:13|2779:1-2783:2|2|-1","hover":"","comments":"Performs a bitwise OR of two 128-bit integer vectors.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPOR / POR </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing one of the source operands.\n\\param __b\n   A 128-bit integer vector containing one of the source operands.\n\\returns A 128-bit integer vector containing the bitwise OR of the values\n   in both operands.","bases":[],"vars":[13844180861481167105,17878407855412226609],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8610197028093257312,"detailed_name":"static inline __m128i _mm_undefined_si128()","qual_name_offset":22,"short_name_offset":22,"short_name_size":19,"spell":"3587:1-3587:20|3586:1-3590:2|2|-1","hover":"","comments":"Generates a 128-bit vector of [4 x i32] with unspecified content.\n   This could be used as an argument to another intrinsic function where the\n   argument is required but the value is not actually used.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\returns A 128-bit vector of [4 x i32] with unspecified content.","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8819050304753452586,"detailed_name":"static inline __m128d _mm_mul_sd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":10,"spell":"139:1-139:11|138:1-143:2|2|-1","hover":"","comments":"Multiplies lower double-precision values in both operands and returns\n   the product in the lower 64 bits of the result. The upper 64 bits of the\n   result are copied from the upper double-precision value of the first\n   operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMULSD / MULSD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double] containing one of the source operands.\n\\param __b\n   A 128-bit vector of [2 x double] containing one of the source operands.\n\\returns A 128-bit vector of [2 x double] whose lower 64 bits contain the\n   product of the lower 64 bits of both operands. The upper 64 bits are\n   copied from the upper 64 bits of the first source operand.","bases":[],"vars":[3657942605065892942,3550248468396061012],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8827276101201232518,"detailed_name":"static inline __m128d _mm_cmplt_sd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"709:1-709:13|708:1-712:2|2|-1","hover":"","comments":"Compares the lower double-precision floating-point values in each of\n   the two 128-bit floating-point vectors of [2 x double] to determine if\n   the value in the first parameter is less than the corresponding value in\n   the second parameter.\n\n   The comparison yields 0x0 for false, 0xFFFFFFFFFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPLTSD / CMPLTSD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __b.\n\\param __b\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __a.\n\\returns A 128-bit vector. The lower 64 bits contains the comparison\n   results. The upper 64 bits are copied from the upper 64 bits of \\a __a.","bases":[],"vars":[9452032961641106790,1671501837251249575],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8831937990385939476,"detailed_name":"static inline __m128i _mm_cvttps_epi32(__m128 __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":16,"spell":"3445:1-3445:17|3444:1-3448:2|2|-1","hover":"","comments":"Converts a vector of [4 x float] into a vector of [4 x i32],\n   truncating the result when it is inexact.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTTPS2DQ / CVTTPS2DQ </c>\n  instruction.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\returns A 128-bit vector of [4 x i32] containing the converted values.","bases":[],"vars":[5464172686364016196],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8845134585181487491,"detailed_name":"static inline int _mm_comineq_sd(__m128d __a, __m128d __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":14,"spell":"1122:1-1122:15|1121:1-1125:2|2|-1","hover":"","comments":"Compares the lower double-precision floating-point values in each of\n   the two 128-bit floating-point vectors of [2 x double] to determine if\n   the value in the first parameter is unequal to the corresponding value in\n   the second parameter.\n\n   The comparison yields 0 for false, 1 for true. If either of the two\n   lower double-precision values is NaN, 1 is returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCOMISD / COMISD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __b.\n\\param __b\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __a.\n\\returns An integer containing the comparison results. If either of the two\n    lower double-precision values is NaN, 1 is returned.","bases":[],"vars":[12141188922793597015,10493262887044636882],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8873942614140450043,"detailed_name":"static inline void _mm_store_sd(double *__dp, __m128d __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":12,"spell":"1950:1-1950:13|1949:1-1956:2|2|-1","hover":"","comments":"Stores the lower 64 bits of a 128-bit vector of [2 x double] to a\n   memory location.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVSD / MOVSD </c> instruction.\n\n\\param __dp\n   A pointer to a 64-bit memory location.\n\\param __a\n   A 128-bit vector of [2 x double] containing the value to be stored.","bases":[],"vars":[7277556268025509413,11670729327470802971],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8907239098408242535,"detailed_name":"static inline __m128d _mm_cmpngt_pd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"640:1-640:14|639:1-643:2|2|-1","hover":"","comments":"Compares each of the corresponding double-precision values of the\n   128-bit vectors of [2 x double] to determine if the values in the first\n   operand are not greater than those in the second operand.\n\n   Each comparison yields 0x0 for false, 0xFFFFFFFFFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPNLTPD / CMPNLTPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double].\n\\param __b\n   A 128-bit vector of [2 x double].\n\\returns A 128-bit vector containing the comparison results.","bases":[],"vars":[7439207308661215937,18270670794250836312],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9091750064326365038,"detailed_name":"static inline __m128i _mm_cvtps_epi32(__m128 __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"3428:1-3428:16|3427:1-3431:2|2|-1","hover":"","comments":"Converts a vector of [4 x float] into a vector of [4 x i32].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTPS2DQ / CVTPS2DQ </c> instruction.\n\n\\param __a\n   A 128-bit vector of [4 x float].\n\\returns A 128-bit integer vector of [4 x i32] containing the converted\n   values.","bases":[],"vars":[7664758329328246211],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9261511251557193785,"detailed_name":"static inline __m128d _mm_cmpnlt_sd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"891:1-891:14|890:1-894:2|2|-1","hover":"","comments":"Compares the lower double-precision floating-point values in each of\n   the two 128-bit floating-point vectors of [2 x double] to determine if\n   the value in the first parameter is not less than the corresponding\n   value in the second parameter.\n\n   The comparison yields 0x0 for false, 0xFFFFFFFFFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPNLTSD / CMPNLTSD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __b.\n\\param __b\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __a.\n\\returns A 128-bit vector. The lower 64 bits contains the comparison\n   results. The upper 64 bits are copied from the upper 64 bits of \\a __a.","bases":[],"vars":[14456344748167693415,10323129194673403181],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9323706821496083197,"detailed_name":"static inline __m128d _mm_cmpneq_pd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"577:1-577:14|576:1-580:2|2|-1","hover":"","comments":"Compares each of the corresponding double-precision values of the\n   128-bit vectors of [2 x double] to determine if the values in the first\n   operand are unequal to those in the second operand.\n\n   Each comparison yields 0x0 for false, 0xFFFFFFFFFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPNEQPD / CMPNEQPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double].\n\\param __b\n   A 128-bit vector of [2 x double].\n\\returns A 128-bit vector containing the comparison results.","bases":[],"vars":[17313823592857572339,2551981035123227901],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9431571041442155008,"detailed_name":"static inline long long _mm_cvtsi128_si64(__m128i __a)","qual_name_offset":24,"short_name_offset":24,"short_name_size":17,"spell":"3515:1-3515:18|3514:1-3518:2|2|-1","hover":"","comments":"Moves the least significant 64 bits of a vector of [2 x i64] to a\n   64-bit signed integer value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVQ / MOVQ </c> instruction.\n\n\\param __a\n   A vector of [2 x i64]. The least significant 64 bits are moved to the\n   destination.\n\\returns A 64-bit signed integer containing the moved value.","bases":[],"vars":[6120956950042781103],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9474382436829650386,"detailed_name":"static inline __m128d _mm_cmpnge_sd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"967:1-967:14|966:1-971:2|2|-1","hover":"","comments":"Compares the lower double-precision floating-point values in each of\n   the two 128-bit floating-point vectors of [2 x double] to determine if\n   the value in the first parameter is not greater than or equal to the\n   corresponding value in the second parameter.\n\n   The comparison yields 0x0 for false, 0xFFFFFFFFFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPNLESD / CMPNLESD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __b.\n\\param __b\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __a.\n\\returns A 128-bit vector. The lower 64 bits contains the comparison\n   results. The upper 64 bits are copied from the upper 64 bits of \\a __a.","bases":[],"vars":[1125627622975774636,2897490835746816951,15328837336364559042],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9509229629830452429,"detailed_name":"static inline __m128d _mm_castsi128_pd(__m128i __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":16,"spell":"4947:1-4947:17|4946:1-4950:2|2|-1","hover":"","comments":"Casts a 128-bit integer vector into a 128-bit floating-point vector\n   of [2 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\param __a\n   A 128-bit integer vector.\n\\returns A 128-bit floating-point vector of [2 x double] containing the same\n   bitwise pattern as the parameter.","bases":[],"vars":[7957422458095361995],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9530927920668684168,"detailed_name":"extern void _mm_mfence() noexcept","qual_name_offset":12,"short_name_offset":12,"short_name_size":10,"hover":"","comments":"Forces strong memory ordering (serialization) between load and store\n   instructions preceding this instruction and load and store instructions\n   following this instruction, ensuring that the system completes all\n   previous memory accesses before executing subsequent memory accesses.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> MFENCE </c> instruction.","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":["4246:6-4246:16|4246:1-4246:22|1|-1"],"derived":[],"uses":[]},{"usr":9581997297649227003,"detailed_name":"static inline void _mm_stream_pd(double *__p, __m128d __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":13,"spell":"4146:1-4146:14|4145:1-4149:2|2|-1","hover":"","comments":"Stores a 128-bit floating point vector of [2 x double] to a 128-bit\n   aligned memory location.\n\n   To minimize caching, the data is flagged as non-temporal (unlikely to be\n   used again soon).\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVNTPS / MOVNTPS </c> instruction.\n\n\\param __p\n   A pointer to the 128-bit aligned memory location used to store the value.\n\\param __a\n   A vector of [2 x double] containing the 64-bit values to be stored.","bases":[],"vars":[11116039573733371454,11883104223517136202],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9718719820522374846,"detailed_name":"static inline void _mm_store_pd1(double *__dp, __m128d __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":13,"spell":"2013:1-2013:14|2012:1-2016:2|2|-1","hover":"","comments":"Moves the lower 64 bits of a 128-bit vector of [2 x double] twice to\n   the upper and lower 64 bits of a memory location.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the\n  <c> VMOVDDUP + VMOVAPD / MOVLHPS + MOVAPS </c> instruction.\n\n\\param __dp\n   A pointer to a memory location that can store two double-precision\n   values.\n\\param __a\n   A 128-bit vector of [2 x double] whose lower 64 bits are copied to each\n   of the values in \\a __dp.","bases":[],"vars":[8505365057637683020,1357744479145467861],"callees":["2015:3-2015:16|2169198573191184557|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9875901901161013165,"detailed_name":"static inline __m128i _mm_set_epi8(char __b15, char __b14, char __b13, char __b12, char __b11, char __b10, char __b9, char __b8, char __b7, char __b6, char __b5, char __b4, char __b3, char __b2, char __b1, char __b0)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"3747:1-3747:13|3746:1-3750:2|2|-1","hover":"","comments":"Initializes the 8-bit values in a 128-bit vector of [16 x i8] with\n   the specified 8-bit integer values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __b15\n   Initializes bits [127:120] of the destination vector.\n\\param __b14\n   Initializes bits [119:112] of the destination vector.\n\\param __b13\n   Initializes bits [111:104] of the destination vector.\n\\param __b12\n   Initializes bits [103:96] of the destination vector.\n\\param __b11\n   Initializes bits [95:88] of the destination vector.\n\\param __b10\n   Initializes bits [87:80] of the destination vector.\n\\param __b9\n   Initializes bits [79:72] of the destination vector.\n\\param __b8\n   Initializes bits [71:64] of the destination vector.\n\\param __b7\n   Initializes bits [63:56] of the destination vector.\n\\param __b6\n   Initializes bits [55:48] of the destination vector.\n\\param __b5\n   Initializes bits [47:40] of the destination vector.\n\\param __b4\n   Initializes bits [39:32] of the destination vector.\n\\param __b3\n   Initializes bits [31:24] of the destination vector.\n\\param __b2\n   Initializes bits [23:16] of the destination vector.\n\\param __b1\n   Initializes bits [15:8] of the destination vector.\n\\param __b0\n   Initializes bits [7:0] of the destination vector.\n\\returns An initialized 128-bit vector of [16 x i8] containing the values\n   provided in the operands.","bases":[],"vars":[8837008289313014066,5600077714589334689,1022990797254858920,17528167612915032104,3791337655811321638,16520353197011506223,9324989524055311530,6615652605711515367,15536512281863701117,12728184748406171578,18155961106364482395,13609447271593054781,13036252901686930434,13429117926418959321,10082540036833364453,14616435735031606876],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["3844:10-3844:22|16420|-1","3965:10-3965:22|16420|-1"]},{"usr":9891025586651551960,"detailed_name":"static inline __m128i _mm_cmplt_epi16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"3315:1-3315:16|3314:1-3318:2|2|-1","hover":"","comments":"Compares each of the corresponding signed 16-bit values of the\n   128-bit integer vectors to determine if the values in the first operand\n   are less than those in the second operand.\n\n   Each comparison yields 0x0 for false, 0xFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPCMPGTW / PCMPGTW </c> instruction.\n\n\\param __a\n   A 128-bit integer vector.\n\\param __b\n   A 128-bit integer vector.\n\\returns A 128-bit integer vector containing the comparison results.","bases":[],"vars":[9351830017045009278,11503631170372070319],"callees":["3317:10-3317:25|924540425955867854|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9938527932130059472,"detailed_name":"static inline __m128d _mm_unpacklo_pd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"4797:1-4797:16|4796:1-4800:2|2|-1","hover":"","comments":"Unpacks the low-order 64-bit elements from two 128-bit vectors\n   of [2 x double] and interleaves them into a 128-bit vector of [2 x\n   double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VUNPCKLPD / UNPCKLPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. \\n\n   Bits [63:0] are written to bits [63:0] of the destination.\n\\param __b\n   A 128-bit vector of [2 x double]. \\n\n   Bits [63:0] are written to bits [127:64] of the destination.\n\\returns A 128-bit vector of [2 x double] containing the interleaved values.","bases":[],"vars":[1539854056108321403,18018449287539539936],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10053725866959795472,"detailed_name":"static inline __m128d _mm_cvtss_sd(__m128d __a, __m128 __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"1449:1-1449:13|1448:1-1453:2|2|-1","hover":"","comments":"Converts the lower single-precision floating-point element of a\n   128-bit vector of [4 x float], in the second parameter, into a\n   double-precision floating-point value, returned in the lower 64 bits of\n   a 128-bit vector of [2 x double]. The upper 64 bits of the result vector\n   are copied from the upper 64 bits of the first parameter.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTSS2SD / CVTSS2SD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The upper 64 bits of this parameter are\n   copied to the upper 64 bits of the result.\n\\param __b\n   A 128-bit vector of [4 x float]. The lower single-precision\n   floating-point element is used in the conversion.\n\\returns A 128-bit vector of [2 x double]. The lower 64 bits contain the\n   converted value from the second parameter. The upper 64 bits are copied\n   from the upper 64 bits of the first parameter.","bases":[],"vars":[521077363391698592,16402046766672569656],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10053744445461270221,"detailed_name":"static inline int _mm_movemask_epi8(__m128i __a)","qual_name_offset":18,"short_name_offset":18,"short_name_size":17,"spell":"4399:1-4399:18|4398:1-4402:2|2|-1","hover":"","comments":"Copies the values of the most significant bits from each 8-bit\n   element in a 128-bit integer vector of [16 x i8] to create a 16-bit mask\n   value, zero-extends the value, and writes it to the destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMOVMSKB / PMOVMSKB </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing the values with bits to be extracted.\n\\returns The most significant bits from each 8-bit element in \\a __a,\n   written to bits [15:0]. The other bits are assigned zeros.","bases":[],"vars":[7913063531453776651],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10067667441034143579,"detailed_name":"static inline __m128i _mm_loadu_si32(const void *__a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"1682:1-1682:15|1681:1-1689:2|2|-1","hover":"","comments":"Loads a 32-bit integer value to the low element of a 128-bit integer\n   vector and clears the upper element.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVD / MOVD </c> instruction.\n\n\\param __a\n   A pointer to a 32-bit memory location. The address of the memory\n   location does not have to be aligned.\n\\returns A 128-bit vector of [4 x i32] containing the loaded value.","bases":[],"vars":[15583105396256363073,14777400602061496284],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10080547212874337032,"detailed_name":"static inline int _mm_ucomilt_sd(__m128d __a, __m128d __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":14,"spell":"1172:1-1172:15|1171:1-1175:2|2|-1","hover":"","comments":"Compares the lower double-precision floating-point values in each of\n   the two 128-bit floating-point vectors of [2 x double] to determine if\n   the value in the first parameter is less than the corresponding value in\n   the second parameter.\n\n   The comparison yields 0 for false, 1 for true. If either of the two lower\n   double-precision values is NaN, 0 is returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VUCOMISD / UCOMISD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __b.\n\\param __b\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __a.\n\\returns An integer containing the comparison results. If either of the two\n   lower double-precision values is NaN, 0 is returned.","bases":[],"vars":[17267431398478311787,11707068748768426304],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10109267042780829061,"detailed_name":"static inline __m128i _mm_sll_epi16(__m128i __a, __m128i __count)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"2859:1-2859:14|2858:1-2862:2|2|-1","hover":"","comments":"Left-shifts each 16-bit value in the 128-bit integer vector operand\n   by the specified number of bits. Low-order bits are cleared.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSLLW / PSLLW </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing the source operand.\n\\param __count\n   A 128-bit integer vector in which bits [63:0] specify the number of bits\n   to left-shift each value in operand \\a __a.\n\\returns A 128-bit integer vector containing the left-shifted values.","bases":[],"vars":[17855345865793934028,8344238792439919622],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10226892378855905960,"detailed_name":"static inline __m128i _mm_loadl_epi64(const __m128i_u *__p)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"3569:1-3569:16|3568:1-3575:2|2|-1","hover":"","comments":"Returns a vector of [2 x i64] where the lower element is taken from\n   the lower element of the operand, and the upper element is zero.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVQ / MOVQ </c> instruction.\n\n\\param __p\n   A 128-bit vector of [2 x i64]. Bits [63:0] are written to bits [63:0] of\n   the destination.\n\\returns A 128-bit vector of [2 x i64]. The lower order bits contain the\n   moved value. The higher order bits are cleared.","bases":[],"vars":[302643050596358074],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10335420976544018982,"detailed_name":"static inline __m64 _mm_mul_su32(__m64 __a, __m64 __b)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"2511:1-2511:13|2510:1-2514:2|2|-1","hover":"","comments":"Multiplies 32-bit unsigned integer values contained in the lower bits\n   of the two 64-bit integer vectors and returns the 64-bit unsigned\n   product.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PMULUDQ </c> instruction.\n\n\\param __a\n   A 64-bit integer containing one of the source operands.\n\\param __b\n   A 64-bit integer containing one of the source operands.\n\\returns A 64-bit integer vector containing the product of both operands.","bases":[],"vars":[2990748318586502229,8411598245260306879],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10602007114967892708,"detailed_name":"static inline __m128d _mm_cmpnge_pd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"661:1-661:14|660:1-664:2|2|-1","hover":"","comments":"Compares each of the corresponding double-precision values of the\n   128-bit vectors of [2 x double] to determine if the values in the first\n   operand are not greater than or equal to those in the second operand.\n\n   Each comparison yields 0x0 for false, 0xFFFFFFFFFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPNLEPD / CMPNLEPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double].\n\\param __b\n   A 128-bit vector of [2 x double].\n\\returns A 128-bit vector containing the comparison results.","bases":[],"vars":[15157148578379384287,4456966204174432168],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10647702538042833875,"detailed_name":"static inline __m128d _mm_cvtps_pd(__m128 __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"1315:1-1315:13|1314:1-1319:2|2|-1","hover":"","comments":"Converts the lower two single-precision floating-point elements of a\n   128-bit vector of [4 x float] into two double-precision floating-point\n   values, returned in a 128-bit vector of [2 x double]. The upper two\n   elements of the input vector are unused.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTPS2PD / CVTPS2PD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [4 x float]. The lower two single-precision\n   floating-point elements are converted to double-precision values. The\n   upper two elements are unused.\n\\returns A 128-bit vector of [2 x double] containing the converted values.","bases":[],"vars":[13671018245906547409],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10681865899127330563,"detailed_name":"static inline void _mm_stream_si64(long long *__p, long long __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":15,"spell":"4204:1-4204:16|4203:1-4207:2|2|-1","hover":"","comments":"Stores a 64-bit integer value in the specified memory location.\n\n   To minimize caching, the data is flagged as non-temporal (unlikely to be\n   used again soon).\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> MOVNTIQ </c> instruction.\n\n\\param __p\n   A pointer to the 64-bit memory location used to store the value.\n\\param __a\n   A 64-bit integer containing the value to be stored.","bases":[],"vars":[6469418630416650158,4702593863796463680],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10683181893091148092,"detailed_name":"static inline __m128d _mm_sqrt_pd(__m128d __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":11,"spell":"244:1-244:12|243:1-247:2|2|-1","hover":"","comments":"Calculates the square root of the each of two values stored in a\n   128-bit vector of [2 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VSQRTPD / SQRTPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double].\n\\returns A 128-bit vector of [2 x double] containing the square roots of the\n   values in the operand.","bases":[],"vars":[14654337790304420763],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10685897471077234173,"detailed_name":"static inline __m128i _mm_castps_si128(__m128 __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":16,"spell":"4913:1-4913:17|4912:1-4916:2|2|-1","hover":"","comments":"Casts a 128-bit floating-point vector of [4 x float] into a 128-bit\n   integer vector.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\param __a\n   A 128-bit floating-point vector of [4 x float].\n\\returns A 128-bit integer vector containing the same bitwise pattern as the\n   parameter.","bases":[],"vars":[7722813466207232704],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10783635911135527680,"detailed_name":"static inline __m128i _mm_movpi64_epi64(__m64 __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":17,"spell":"4737:1-4737:18|4736:1-4740:2|2|-1","hover":"","comments":"Moves the 64-bit operand to a 128-bit integer vector, zeroing the\n   upper bits.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> MOVD+VMOVQ </c> instruction.\n\n\\param __a\n   A 64-bit value.\n\\returns A 128-bit integer vector. The lower 64 bits contain the value from\n   the operand. The upper 64 bits are assigned zeros.","bases":[],"vars":[6486280702138011553],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10828795505694649497,"detailed_name":"static inline __m128i _mm_loadu_si16(const void *__a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"1703:1-1703:15|1702:1-1710:2|2|-1","hover":"","comments":"Loads a 16-bit integer value to the low element of a 128-bit integer\n   vector and clears the upper element.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic does not correspond to a specific instruction.\n\n\\param __a\n   A pointer to a 16-bit memory location. The address of the memory\n   location does not have to be aligned.\n\\returns A 128-bit vector of [8 x i16] containing the loaded value.","bases":[],"vars":[1863923437117333048,730710321419945180],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10941764412593311996,"detailed_name":"static inline __m128i _mm_srl_epi16(__m128i __a, __m128i __count)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"3076:1-3076:14|3075:1-3079:2|2|-1","hover":"","comments":"Right-shifts each of 16-bit values in the 128-bit integer vector\n   operand by the specified number of bits. High-order bits are cleared.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSRLW / PSRLW </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing the source operand.\n\\param __count\n   A 128-bit integer vector in which bits [63:0] specify the number of bits\n   to right-shift each value in operand \\a __a.\n\\returns A 128-bit integer vector containing the right-shifted values.","bases":[],"vars":[8291582103473923535,4580988281087590890],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10966065991364921149,"detailed_name":"static inline __m128i _mm_loadu_si64(const void *__a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"1661:1-1661:15|1660:1-1668:2|2|-1","hover":"","comments":"Loads a 64-bit integer value to the low element of a 128-bit integer\n   vector and clears the upper element.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVQ / MOVQ </c> instruction.\n\n\\param __a\n   A pointer to a 64-bit memory location. The address of the memory\n   location does not have to be aligned.\n\\returns A 128-bit vector of [2 x i64] containing the loaded value.","bases":[],"vars":[15943096958903281351,8516288771838305037],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":11299856214000333430,"detailed_name":"static inline __m128d _mm_cmple_pd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"467:1-467:13|466:1-470:2|2|-1","hover":"","comments":"Compares each of the corresponding double-precision values of the\n   128-bit vectors of [2 x double] to determine if the values in the first\n   operand are less than or equal to those in the second operand.\n\n   Each comparison yields 0x0 for false, 0xFFFFFFFFFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPLEPD / CMPLEPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double].\n\\param __b\n   A 128-bit vector of [2 x double].\n\\returns A 128-bit vector containing the comparison results.","bases":[],"vars":[807970259433722673,17098463736399866675],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":11462959863737357703,"detailed_name":"static inline __m128d _mm_load1_pd(const double *__dp)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"1597:1-1597:13|1596:1-1604:2|2|-1","hover":"","comments":"Loads a double-precision floating-point value from a specified memory\n   location and duplicates it to both vector elements of a 128-bit vector of\n   [2 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVDDUP / MOVDDUP </c> instruction.\n\n\\param __dp\n   A pointer to a memory location containing a double-precision value.\n\\returns A 128-bit vector of [2 x double] containing the loaded and\n   duplicated values.","bases":[],"vars":[3798937761315436803,15301278627795504239],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":11594780952232577122,"detailed_name":"static inline __m128i _mm_cmplt_epi32(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"3336:1-3336:16|3335:1-3339:2|2|-1","hover":"","comments":"Compares each of the corresponding signed 32-bit values of the\n   128-bit integer vectors to determine if the values in the first operand\n   are less than those in the second operand.\n\n   Each comparison yields 0x0 for false, 0xFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPCMPGTD / PCMPGTD </c> instruction.\n\n\\param __a\n   A 128-bit integer vector.\n\\param __b\n   A 128-bit integer vector.\n\\returns A 128-bit integer vector containing the comparison results.","bases":[],"vars":[1084669205011565493,7382180794776486110],"callees":["3338:10-3338:25|2495984876089384189|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":11614384226754346778,"detailed_name":"static inline void _mm_storer_pd(double *__dp, __m128d __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":13,"spell":"2054:1-2054:14|2053:1-2058:2|2|-1","hover":"","comments":"Stores two double-precision values, in reverse order, from a 128-bit\n   vector of [2 x double] to a 16-byte aligned memory location.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to a shuffling instruction followed by a\n<c> VMOVAPD / MOVAPD </c> instruction.\n\n\\param __dp\n   A pointer to a 16-byte aligned memory location that can store two\n   double-precision values.\n\\param __a\n   A 128-bit vector of [2 x double] containing the values to be reversed and\n   stored.","bases":[],"vars":[2592512316950478810,17917755008136121809],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":11681972777880690696,"detailed_name":"static inline __m64 _mm_cvtpd_pi32(__m128d __a)","qual_name_offset":20,"short_name_offset":20,"short_name_size":14,"spell":"1508:1-1508:15|1507:1-1511:2|2|-1","hover":"","comments":"Converts the two double-precision floating-point elements of a\n   128-bit vector of [2 x double] into two signed 32-bit integer values,\n   returned in a 64-bit vector of [2 x i32].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> CVTPD2PI </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double].\n\\returns A 64-bit vector of [2 x i32] containing the converted values.","bases":[],"vars":[6710177670261822635],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":11985605673774706724,"detailed_name":"static inline __m128d _mm_sub_sd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":10,"spell":"98:1-98:11|97:1-102:2|2|-1","hover":"","comments":"Subtracts the lower double-precision value of the second operand\n   from the lower double-precision value of the first operand and returns\n   the difference in the lower 64 bits of the result. The upper 64 bits of\n   the result are copied from the upper double-precision value of the first\n   operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VSUBSD / SUBSD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double] containing the minuend.\n\\param __b\n   A 128-bit vector of [2 x double] containing the subtrahend.\n\\returns A 128-bit vector of [2 x double] whose lower 64 bits contain the\n   difference of the lower 64 bits of both operands. The upper 64 bits are\n   copied from the upper 64 bits of the first source operand.","bases":[],"vars":[7036541197772236599,13748329297568110187],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":11996436062463721253,"detailed_name":"static inline __m128d _mm_or_pd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":9,"spell":"389:1-389:10|388:1-392:2|2|-1","hover":"","comments":"Performs a bitwise OR of two 128-bit vectors of [2 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPOR / POR </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double] containing one of the source operands.\n\\param __b\n   A 128-bit vector of [2 x double] containing one of the source operands.\n\\returns A 128-bit vector of [2 x double] containing the bitwise OR of the\n   values between both operands.","bases":[],"vars":[10139092528889599977,17102246620031539774],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12091172508311258918,"detailed_name":"static inline __m64 _mm_add_si64(__m64 __a, __m64 __b)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"2179:1-2179:13|2178:1-2182:2|2|-1","hover":"","comments":"Adds two signed or unsigned 64-bit integer values, returning the\n   lower 64 bits of the sum.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PADDQ </c> instruction.\n\n\\param __a\n   A 64-bit integer.\n\\param __b\n   A 64-bit integer.\n\\returns A 64-bit integer containing the sum of both parameters.","bases":[],"vars":[10739092667808699143,17996051075144451962],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12192304060105699541,"detailed_name":"static inline __m128d _mm_min_sd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":10,"spell":"268:1-268:11|267:1-271:2|2|-1","hover":"","comments":"Compares lower 64-bit double-precision values of both operands, and\n   returns the lesser of the pair of values in the lower 64-bits of the\n   result. The upper 64 bits of the result are copied from the upper\n   double-precision value of the first operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMINSD / MINSD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double] containing one of the operands. The\n   lower 64 bits of this operand are used in the comparison.\n\\param __b\n   A 128-bit vector of [2 x double] containing one of the operands. The\n   lower 64 bits of this operand are used in the comparison.\n\\returns A 128-bit vector of [2 x double] whose lower 64 bits contain the\n   minimum value between both operands. The upper 64 bits are copied from\n   the upper 64 bits of the first source operand.","bases":[],"vars":[10496458246990920295,14910050159815400222],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12391941979235087127,"detailed_name":"static inline __m128i _mm_sub_epi32(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"2606:1-2606:14|2605:1-2609:2|2|-1","hover":"","comments":"Subtracts the corresponding 32-bit integer values in the operands.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSUBD / PSUBD </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing the minuends.\n\\param __b\n   A 128-bit integer vector containing the subtrahends.\n\\returns A 128-bit integer vector containing the differences of the values\n   in the operands.","bases":[],"vars":[13132237955743683706,8758435595834681099],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12419915859021787498,"detailed_name":"static inline __m128i _mm_max_epu8(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"2392:1-2392:13|2391:1-2395:2|2|-1","hover":"","comments":"Compares corresponding elements of two 128-bit unsigned [16 x i8]\n   vectors, saving the greater value from each comparison in the\n   corresponding element of a 128-bit result vector of [16 x i8].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMAXUB / PMAXUB </c> instruction.\n\n\\param __a\n   A 128-bit unsigned [16 x i8] vector.\n\\param __b\n   A 128-bit unsigned [16 x i8] vector.\n\\returns A 128-bit unsigned [16 x i8] vector containing the greater value of\n   each comparison.","bases":[],"vars":[3658471536704800224,13035924328457162780],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12482298862614439544,"detailed_name":"static inline int _mm_comige_sd(__m128d __a, __m128d __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":13,"spell":"1096:1-1096:14|1095:1-1099:2|2|-1","hover":"","comments":"Compares the lower double-precision floating-point values in each of\n   the two 128-bit floating-point vectors of [2 x double] to determine if\n   the value in the first parameter is greater than or equal to the\n   corresponding value in the second parameter.\n\n   The comparison yields 0 for false, 1 for true. If either of the two\n   lower double-precision values is NaN, 0 is returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCOMISD / COMISD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __b.\n\\param __b\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __a.\n\\returns An integer containing the comparison results. If either of the two\n   lower double-precision values is NaN, 0 is returned.","bases":[],"vars":[17874693569649251676,13374384025942584986],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12482397597725677477,"detailed_name":"static inline __m128i _mm_packus_epi16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":16,"spell":"4331:1-4331:17|4330:1-4334:2|2|-1","hover":"","comments":"Converts 16-bit signed integers from both 128-bit integer vector\n   operands into 8-bit unsigned integers, and packs the results into the\n   destination. Values greater than 0xFF are saturated to 0xFF. Values less\n   than 0x00 are saturated to 0x00.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPACKUSWB / PACKUSWB </c> instruction.\n\n\\param __a\n   A 128-bit integer vector of [8 x i16]. Each 16-bit element is treated as\n   a signed integer and is converted to an 8-bit unsigned integer with\n   saturation. Values greater than 0xFF are saturated to 0xFF. Values less\n   than 0x00 are saturated to 0x00. The converted [8 x i8] values are\n   written to the lower 64 bits of the result.\n\\param __b\n   A 128-bit integer vector of [8 x i16]. Each 16-bit element is treated as\n   a signed integer and is converted to an 8-bit unsigned integer with\n   saturation. Values greater than 0xFF are saturated to 0xFF. Values less\n   than 0x00 are saturated to 0x00. The converted [8 x i8] values are\n   written to the higher 64 bits of the result.\n\\returns A 128-bit vector of [16 x i8] containing the converted values.","bases":[],"vars":[13193933961912586861,2694100949573648030],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12551216769668269776,"detailed_name":"static inline __m128d _mm_sqrt_sd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":11,"spell":"226:1-226:12|225:1-230:2|2|-1","hover":"","comments":"Calculates the square root of the lower double-precision value of\n   the second operand and returns it in the lower 64 bits of the result.\n   The upper 64 bits of the result are copied from the upper\n   double-precision value of the first operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VSQRTSD / SQRTSD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double] containing one of the operands. The\n   upper 64 bits of this operand are copied to the upper 64 bits of the\n   result.\n\\param __b\n   A 128-bit vector of [2 x double] containing one of the operands. The\n   square root is calculated using the lower 64 bits of this operand.\n\\returns A 128-bit vector of [2 x double] whose lower 64 bits contain the\n   square root of the lower 64 bits of operand \\a __b, and whose upper 64\n   bits are copied from the upper 64 bits of operand \\a __a.","bases":[],"vars":[15186873892107211804,2611408178843697261,9222431793997683439],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12586215472234915558,"detailed_name":"static inline __m128i _mm_unpacklo_epi16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":18,"spell":"4659:1-4659:19|4658:1-4662:2|2|-1","hover":"","comments":"Unpacks the low-order (index 0-3) values from each of the two 128-bit\n   vectors of [8 x i16] and interleaves them into a 128-bit vector of\n   [8 x i16].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPUNPCKLWD / PUNPCKLWD </c>\n  instruction.\n\n\\param __a\n   A 128-bit vector of [8 x i16].\n   Bits [15:0] are written to bits [15:0] of the result. \\n\n   Bits [31:16] are written to bits [47:32] of the result. \\n\n   Bits [47:32] are written to bits [79:64] of the result. \\n\n   Bits [63:48] are written to bits [111:96] of the result.\n\\param __b\n   A 128-bit vector of [8 x i16].\n   Bits [15:0] are written to bits [31:16] of the result. \\n\n   Bits [31:16] are written to bits [63:48] of the result. \\n\n   Bits [47:32] are written to bits [95:80] of the result. \\n\n   Bits [63:48] are written to bits [127:112] of the result.\n\\returns A 128-bit vector of [8 x i16] containing the interleaved values.","bases":[],"vars":[4003103525614483924,4032970880669356155],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12648657247281784841,"detailed_name":"static inline __m128i _mm_and_si128(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"2743:1-2743:14|2742:1-2746:2|2|-1","hover":"","comments":"Performs a bitwise AND of two 128-bit integer vectors.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPAND / PAND </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing one of the source operands.\n\\param __b\n   A 128-bit integer vector containing one of the source operands.\n\\returns A 128-bit integer vector containing the bitwise AND of the values\n   in both operands.","bases":[],"vars":[9923069344371902680,5848595482885417208],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12756224531552952102,"detailed_name":"static inline __m128d _mm_div_pd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":10,"spell":"201:1-201:11|200:1-204:2|2|-1","hover":"","comments":"Performs an element-by-element division of two 128-bit vectors of\n   [2 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VDIVPD / DIVPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double] containing the dividend.\n\\param __b\n   A 128-bit vector of [2 x double] containing the divisor.\n\\returns A 128-bit vector of [2 x double] containing the quotients of both\n   operands.","bases":[],"vars":[8964647283522084819,5841682198614911870],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12942462311387644276,"detailed_name":"static inline void _mm_stream_si128(__m128i *__p, __m128i __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":16,"spell":"4165:1-4165:17|4164:1-4168:2|2|-1","hover":"","comments":"Stores a 128-bit integer vector to a 128-bit aligned memory location.\n\n   To minimize caching, the data is flagged as non-temporal (unlikely to be\n   used again soon).\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVNTPS / MOVNTPS </c> instruction.\n\n\\param __p\n   A pointer to the 128-bit aligned memory location used to store the value.\n\\param __a\n   A 128-bit integer vector containing the values to be stored.","bases":[],"vars":[12034542089745806540,820921627886796851],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12950833389857015302,"detailed_name":"static inline __m128i _mm_sad_epu8(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"2552:1-2552:13|2551:1-2555:2|2|-1","hover":"","comments":"Computes the absolute differences of corresponding 8-bit integer\n   values in two 128-bit vectors. Sums the first 8 absolute differences, and\n   separately sums the second 8 absolute differences. Packs these two\n   unsigned 16-bit integer sums into the upper and lower elements of a\n   [2 x i64] vector.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSADBW / PSADBW </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing one of the source operands.\n\\param __b\n   A 128-bit integer vector containing one of the source operands.\n\\returns A [2 x i64] vector containing the sums of the sets of absolute\n   differences between both operands.","bases":[],"vars":[9431959300098011896,9547774772660611456],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13035362894210838326,"detailed_name":"static inline __m128d _mm_setr_pd(double __w, double __x)","qual_name_offset":22,"short_name_offset":22,"short_name_size":11,"spell":"1896:1-1896:12|1895:1-1899:2|2|-1","hover":"","comments":"Constructs a 128-bit floating-point vector of [2 x double],\n   initialized in reverse order with the specified double-precision\n   floating-point values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VUNPCKLPD / UNPCKLPD </c> instruction.\n\n\\param __w\n   A double-precision floating-point value used to initialize the lower 64\n   bits of the result.\n\\param __x\n   A double-precision floating-point value used to initialize the upper 64\n   bits of the result.\n\\returns An initialized 128-bit floating-point vector of [2 x double].","bases":[],"vars":[1074378946786723849,1457491243215471488],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13135868599333051087,"detailed_name":"static inline __m128i _mm_add_epi64(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"2201:1-2201:14|2200:1-2204:2|2|-1","hover":"","comments":"Adds the corresponding elements of two 128-bit vectors of [2 x i64],\n   saving the lower 64 bits of each sum in the corresponding element of a\n   128-bit result vector of [2 x i64].\n\n   The integer elements of both parameters can be either signed or unsigned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPADDQ / PADDQ </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x i64].\n\\param __b\n   A 128-bit vector of [2 x i64].\n\\returns A 128-bit vector of [2 x i64] containing the sums of both\n   parameters.","bases":[],"vars":[5325259379451185376,16116183755175412542],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13255973019098164849,"detailed_name":"static inline __m128i _mm_setr_epi16(short __w0, short __w1, short __w2, short __w3, short __w4, short __w5, short __w6, short __w7)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"3916:1-3916:15|3915:1-3919:2|2|-1","hover":"","comments":"Constructs a 128-bit integer vector, initialized in reverse order\n    with the specified 16-bit integral values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __w0\n   A 16-bit integral value used to initialize bits [15:0] of the result.\n\\param __w1\n   A 16-bit integral value used to initialize bits [31:16] of the result.\n\\param __w2\n   A 16-bit integral value used to initialize bits [47:32] of the result.\n\\param __w3\n   A 16-bit integral value used to initialize bits [63:48] of the result.\n\\param __w4\n   A 16-bit integral value used to initialize bits [79:64] of the result.\n\\param __w5\n   A 16-bit integral value used to initialize bits [95:80] of the result.\n\\param __w6\n   A 16-bit integral value used to initialize bits [111:96] of the result.\n\\param __w7\n   A 16-bit integral value used to initialize bits [127:112] of the result.\n\\returns An initialized 128-bit integer vector.","bases":[],"vars":[13954459462598892696,15435655724498920497,40782193465579994,3155171739780398922,13470639942690235151,16687650369725227099,4615210820465969317,14684449055491180692],"callees":["3918:10-3918:23|889152421156872063|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13288418882222986537,"detailed_name":"static inline int _mm_comile_sd(__m128d __a, __m128d __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":13,"spell":"1044:1-1044:14|1043:1-1047:2|2|-1","hover":"","comments":"Compares the lower double-precision floating-point values in each of\n   the two 128-bit floating-point vectors of [2 x double] to determine if\n   the value in the first parameter is less than or equal to the\n   corresponding value in the second parameter.\n\n   The comparison yields 0 for false, 1 for true. If either of the two\n   lower double-precision values is NaN, 0 is returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCOMISD / COMISD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __b.\n\\param __b\n    A 128-bit vector of [2 x double]. The lower double-precision value is\n    compared to the lower double-precision value of \\a __a.\n\\returns An integer containing the comparison results. If either of the two\n    lower double-precision values is NaN, 0 is returned.","bases":[],"vars":[10066629920865001982,10826005328778891033],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13324621266703556052,"detailed_name":"static inline void _mm_storeu_si32(void *__p, __m128i __b)","qual_name_offset":19,"short_name_offset":19,"short_name_size":15,"spell":"4053:1-4053:16|4052:1-4059:2|2|-1","hover":"","comments":"Stores a 32-bit integer value from the low element of a 128-bit integer\n   vector.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVD / MOVD </c> instruction.\n\n\\param __p\n   A pointer to a 32-bit memory location. The address of the memory\n   location does not have to be aligned.\n\\param __b\n   A 128-bit integer vector containing the value to be stored.","bases":[],"vars":[9665858063563241780,12091056925863094481],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13382949425098530796,"detailed_name":"static inline __m128i _mm_sub_epi64(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"2643:1-2643:14|2642:1-2646:2|2|-1","hover":"","comments":"Subtracts the corresponding elements of two [2 x i64] vectors.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSUBQ / PSUBQ </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing the minuends.\n\\param __b\n   A 128-bit integer vector containing the subtrahends.\n\\returns A 128-bit integer vector containing the differences of the values\n   in the operands.","bases":[],"vars":[8470656373624094236,7582007257577867930],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13387837189194549236,"detailed_name":"static inline long long _mm_cvttsd_si64(__m128d __a)","qual_name_offset":24,"short_name_offset":24,"short_name_size":15,"spell":"3396:1-3396:16|3395:1-3399:2|2|-1","hover":"","comments":"Converts the first (lower) element of a vector of [2 x double] into a\n   64-bit signed integer value, truncating the result when it is inexact.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTTSD2SI / CVTTSD2SI </c>\n  instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower 64 bits are used in the\n   conversion.\n\\returns A 64-bit signed integer containing the converted value.","bases":[],"vars":[14921299840775913464],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13683171143885286574,"detailed_name":"static inline __m128d _mm_cvtsi32_sd(__m128d __a, int __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"1423:1-1423:15|1422:1-1427:2|2|-1","hover":"","comments":"Converts a 32-bit signed integer value, in the second parameter, into\n   a double-precision floating-point value, returned in the lower 64 bits of\n   a 128-bit vector of [2 x double]. The upper 64 bits of the result vector\n   are copied from the upper 64 bits of the first parameter.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTSI2SD / CVTSI2SD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The upper 64 bits of this parameter are\n   copied to the upper 64 bits of the result.\n\\param __b\n   A 32-bit signed integer containing the value to be converted.\n\\returns A 128-bit vector of [2 x double]. The lower 64 bits contain the\n   converted value from the second parameter. The upper 64 bits are copied\n   from the upper 64 bits of the first parameter.","bases":[],"vars":[4891554393842395963,8472367752311901831],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13727007679279529085,"detailed_name":"static inline int _mm_cvtsd_si32(__m128d __a)","qual_name_offset":18,"short_name_offset":18,"short_name_size":14,"spell":"1375:1-1375:15|1374:1-1378:2|2|-1","hover":"","comments":"Converts the low-order element of a 128-bit vector of [2 x double]\n   into a 32-bit signed integer value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTSD2SI / CVTSD2SI </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower 64 bits are used in the\n   conversion.\n\\returns A 32-bit signed integer containing the converted value.","bases":[],"vars":[4054114484492035016],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13729535375120492646,"detailed_name":"static inline void _mm_storel_pd(double *__dp, __m128d __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":13,"spell":"2092:1-2092:14|2091:1-2098:2|2|-1","hover":"","comments":"Stores the lower 64 bits of a 128-bit vector of [2 x double] to a\n   memory location.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVLPD / MOVLPD </c> instruction.\n\n\\param __dp\n   A pointer to a 64-bit memory location.\n\\param __a\n   A 128-bit vector of [2 x double] containing the value to be stored.","bases":[],"vars":[16875035330070849447,11978681079058529406],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13740034146582337450,"detailed_name":"static inline void _mm_store_pd(double *__dp, __m128d __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":12,"spell":"1972:1-1972:13|1971:1-1975:2|2|-1","hover":"","comments":"Moves packed double-precision values from a 128-bit vector of\n   [2 x double] to a memory location.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c>VMOVAPD / MOVAPS</c> instruction.\n\n\\param __dp\n   A pointer to an aligned memory location that can store two\n   double-precision values.\n\\param __a\n   A packed 128-bit vector of [2 x double] containing the values to be\n   moved.","bases":[],"vars":[7303292301798269499,12008489762898756330],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["1995:3-1995:15|16420|-1"]},{"usr":13933954874642965752,"detailed_name":"static inline __m128i _mm_setzero_si128()","qual_name_offset":22,"short_name_offset":22,"short_name_size":17,"spell":"3977:1-3977:18|3976:1-3980:2|2|-1","hover":"","comments":"Creates a 128-bit integer vector initialized to zero.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VXORPS / XORPS </c> instruction.\n\n\\returns An initialized 128-bit integer vector with all elements set to\n   zero.","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["4757:47-4757:64|16420|-1"]},{"usr":13937589947682905069,"detailed_name":"static inline __m128i _mm_slli_epi64(__m128i __a, int __count)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"2916:1-2916:15|2915:1-2919:2|2|-1","hover":"","comments":"Left-shifts each 64-bit value in the 128-bit integer vector operand\n   by the specified number of bits. Low-order bits are cleared.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSLLQ / PSLLQ </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing the source operand.\n\\param __count\n   An integer value specifying the number of bits to left-shift each value\n   in operand \\a __a.\n\\returns A 128-bit integer vector containing the left-shifted values.","bases":[],"vars":[8714460715503917706,9233036175465641337],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14001793528609252657,"detailed_name":"static inline __m128d _mm_set1_pd(double __w)","qual_name_offset":22,"short_name_offset":22,"short_name_size":11,"spell":"1837:1-1837:12|1836:1-1840:2|2|-1","hover":"","comments":"Constructs a 128-bit floating-point vector of [2 x double], with each\n   of the two double-precision floating-point vector elements set to the\n   specified double-precision floating-point value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVDDUP / MOVLHPS </c> instruction.\n\n\\param __w\n   A double-precision floating-point value used to initialize each vector\n   element of the result.\n\\returns An initialized 128-bit floating-point vector of [2 x double].","bases":[],"vars":[10627891372375860670],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["1857:10-1857:21|16420|-1"]},{"usr":14028217739751447572,"detailed_name":"static inline int _mm_ucomile_sd(__m128d __a, __m128d __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":14,"spell":"1198:1-1198:15|1197:1-1201:2|2|-1","hover":"","comments":"Compares the lower double-precision floating-point values in each of\n   the two 128-bit floating-point vectors of [2 x double] to determine if\n   the value in the first parameter is less than or equal to the\n   corresponding value in the second parameter.\n\n   The comparison yields 0 for false, 1 for true. If either of the two lower\n   double-precision values is NaN, 0 is returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VUCOMISD / UCOMISD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __b.\n\\param __b\n    A 128-bit vector of [2 x double]. The lower double-precision value is\n    compared to the lower double-precision value of \\a __a.\n\\returns An integer containing the comparison results. If either of the two\n    lower double-precision values is NaN, 0 is returned.","bases":[],"vars":[14447895861057614247,8061496475377010445],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14045268241268690744,"detailed_name":"static inline __m128i _mm_cmpeq_epi8(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"3171:1-3171:15|3170:1-3174:2|2|-1","hover":"","comments":"Compares each of the corresponding 8-bit values of the 128-bit\n   integer vectors for equality. Each comparison yields 0x0 for false, 0xFF\n   for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPCMPEQB / PCMPEQB </c> instruction.\n\n\\param __a\n   A 128-bit integer vector.\n\\param __b\n   A 128-bit integer vector.\n\\returns A 128-bit integer vector containing the comparison results.","bases":[],"vars":[4874176908663530271,15051551350146023226],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14082753678476808487,"detailed_name":"static inline __m128i _mm_set_epi64(__m64 __q1, __m64 __q0)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"3631:1-3631:14|3630:1-3634:2|2|-1","hover":"","comments":"Initializes both 64-bit values in a 128-bit vector of [2 x i64] with\n   the specified 64-bit integer values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __q1\n   A 64-bit integer value used to initialize the upper 64 bits of the\n   destination vector of [2 x i64].\n\\param __q0\n   A 64-bit integer value used to initialize the lower 64 bits of the\n   destination vector of [2 x i64].\n\\returns An initialized 128-bit vector of [2 x i64] containing the values\n   provided in the operands.","bases":[],"vars":[4813585644024425631,9731333846072765757],"callees":["3633:10-3633:24|5407471146260504397|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["3787:10-3787:23|16420|-1","3864:10-3864:23|16420|-1"]},{"usr":14122677217614347224,"detailed_name":"static inline __m128i _mm_srai_epi32(__m128i __a, int __count)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"2995:1-2995:15|2994:1-2998:2|2|-1","hover":"","comments":"Right-shifts each 32-bit value in the 128-bit integer vector operand\n   by the specified number of bits. High-order bits are filled with the sign\n   bit of the initial value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSRAD / PSRAD </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing the source operand.\n\\param __count\n   An integer value specifying the number of bits to right-shift each value\n   in operand \\a __a.\n\\returns A 128-bit integer vector containing the right-shifted values.","bases":[],"vars":[12743277917358030681,4436758784585797097],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14131813429418650489,"detailed_name":"static inline int _mm_movemask_pd(__m128d __a)","qual_name_offset":18,"short_name_offset":18,"short_name_size":15,"spell":"4816:1-4816:16|4815:1-4819:2|2|-1","hover":"","comments":"Extracts the sign bits of the double-precision values in the 128-bit\n   vector of [2 x double], zero-extends the value, and writes it to the\n   low-order bits of the destination.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVMSKPD / MOVMSKPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double] containing the values with sign bits to\n   be extracted.\n\\returns The sign bits from each of the double-precision elements in \\a __a,\n   written to bits [1:0]. The remaining bits are assigned values of zero.","bases":[],"vars":[4015889797183883420],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14273480773708801298,"detailed_name":"static inline __m128d _mm_cvtepi32_pd(__m128i __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"1338:1-1338:16|1337:1-1342:2|2|-1","hover":"","comments":"Converts the lower two integer elements of a 128-bit vector of\n   [4 x i32] into two double-precision floating-point values, returned in a\n   128-bit vector of [2 x double].\n\n   The upper two elements of the input vector are unused.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTDQ2PD / CVTDQ2PD </c> instruction.\n\n\\param __a\n   A 128-bit integer vector of [4 x i32]. The lower two integer elements are\n   converted to double-precision values.\n\n   The upper two elements are unused.\n\\returns A 128-bit vector of [2 x double] containing the converted values.","bases":[],"vars":[2534664594910511606],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14438199959157587907,"detailed_name":"static inline __m128d _mm_xor_pd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":10,"spell":"407:1-407:11|406:1-410:2|2|-1","hover":"","comments":"Performs a bitwise XOR of two 128-bit vectors of [2 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPXOR / PXOR </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double] containing one of the source operands.\n\\param __b\n   A 128-bit vector of [2 x double] containing one of the source operands.\n\\returns A 128-bit vector of [2 x double] containing the bitwise XOR of the\n   values between both operands.","bases":[],"vars":[18099590296901311517,13060314423441326087],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14663209240927324938,"detailed_name":"static inline __m128i _mm_castpd_si128(__m128d __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":16,"spell":"4879:1-4879:17|4878:1-4882:2|2|-1","hover":"","comments":"Casts a 128-bit floating-point vector of [2 x double] into a 128-bit\n   integer vector.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\param __a\n   A 128-bit floating-point vector of [2 x double].\n\\returns A 128-bit integer vector containing the same bitwise pattern as the\n   parameter.","bases":[],"vars":[4934823981133987641],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14695889751426307058,"detailed_name":"static inline void _mm_storeu_si128(__m128i_u *__p, __m128i __b)","qual_name_offset":19,"short_name_offset":19,"short_name_size":16,"spell":"4011:1-4011:17|4010:1-4017:2|2|-1","hover":"","comments":"Stores a 128-bit integer vector to an unaligned memory location.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVUPS / MOVUPS </c> instruction.\n\n\\param __p\n   A pointer to a memory location that will receive the integer values.\n\\param __b\n   A 128-bit integer vector containing the values to be moved.","bases":[],"vars":[17675855320274796223,17911340828826999055],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14718134986886420590,"detailed_name":"static inline __m128i _mm_unpackhi_epi64(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":18,"spell":"4596:1-4596:19|4595:1-4599:2|2|-1","hover":"","comments":"Unpacks the high-order 64-bit elements from two 128-bit vectors of\n   [2 x i64] and interleaves them into a 128-bit vector of [2 x i64].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPUNPCKHQDQ / PUNPCKHQDQ </c>\n  instruction.\n\n\\param __a\n   A 128-bit vector of [2 x i64]. \\n\n   Bits [127:64] are written to bits [63:0] of the destination.\n\\param __b\n   A 128-bit vector of [2 x i64]. \\n\n   Bits [127:64] are written to bits [127:64] of the destination.\n\\returns A 128-bit vector of [2 x i64] containing the interleaved values.","bases":[],"vars":[3496359237571619370,16661593619352623510],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14917035844949102938,"detailed_name":"static inline __m128d _mm_cmpord_pd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"532:1-532:14|531:1-535:2|2|-1","hover":"","comments":"Compares each of the corresponding double-precision values of the\n   128-bit vectors of [2 x double] to determine if the values in the first\n   operand are ordered with respect to those in the second operand.\n\n   A pair of double-precision values are \"ordered\" with respect to each\n   other if neither value is a NaN. Each comparison yields 0x0 for false,\n   0xFFFFFFFFFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPORDPD / CMPORDPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double].\n\\param __b\n   A 128-bit vector of [2 x double].\n\\returns A 128-bit vector containing the comparison results.","bases":[],"vars":[1242215016383044086,18404060734251275636],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14938955793280033687,"detailed_name":"static inline void _mm_storel_epi64(__m128i_u *__p, __m128i __a)","qual_name_offset":19,"short_name_offset":19,"short_name_size":16,"spell":"4123:1-4123:17|4122:1-4129:2|2|-1","hover":"","comments":"Stores the lower 64 bits of a 128-bit integer vector of [2 x i64] to\n   a memory location.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVLPS / MOVLPS </c> instruction.\n\n\\param __p\n   A pointer to a 64-bit memory location that will receive the lower 64 bits\n   of the integer vector parameter.\n\\param __a\n   A 128-bit integer vector of [2 x i64]. The lower 64 bits contain the\n   value to be stored.","bases":[],"vars":[8686152199217779457,6069615122592311369],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15136718197461796507,"detailed_name":"static inline int _mm_ucomigt_sd(__m128d __a, __m128d __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":14,"spell":"1224:1-1224:15|1223:1-1227:2|2|-1","hover":"","comments":"Compares the lower double-precision floating-point values in each of\n   the two 128-bit floating-point vectors of [2 x double] to determine if\n   the value in the first parameter is greater than the corresponding value\n   in the second parameter.\n\n   The comparison yields 0 for false, 1 for true. If either of the two lower\n   double-precision values is NaN, 0 is returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VUCOMISD / UCOMISD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __b.\n\\param __b\n    A 128-bit vector of [2 x double]. The lower double-precision value is\n    compared to the lower double-precision value of \\a __a.\n\\returns An integer containing the comparison results. If either of the two\n    lower double-precision values is NaN, 0 is returned.","bases":[],"vars":[5901372414097770750,13987977813239464405],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15343981966522453876,"detailed_name":"static inline __m128i _mm_cvtsi64_si128(long long __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":17,"spell":"3478:1-3478:18|3477:1-3481:2|2|-1","hover":"","comments":"Returns a vector of [2 x i64] where the lower element is the input\n   operand and the upper element is zero.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVQ / MOVQ </c> instruction.\n\n\\param __a\n   A 64-bit signed integer operand containing the value to be converted.\n\\returns A 128-bit vector of [2 x i64] containing the converted value.","bases":[],"vars":[14335889992907131608],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15517772622828245140,"detailed_name":"static inline __m128d _mm_loadh_pd(__m128d __a, const double *__dp)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"1751:1-1751:13|1750:1-1758:2|2|-1","hover":"","comments":"Loads a double-precision value into the high-order bits of a 128-bit\n   vector of [2 x double]. The low-order bits are copied from the low-order\n   bits of the first operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVHPD / MOVHPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. \\n\n   Bits [63:0] are written to bits [63:0] of the result.\n\\param __dp\n   A pointer to a 64-bit memory location containing a double-precision\n   floating-point value that is loaded. The loaded value is written to bits\n   [127:64] of the result. The address of the memory location does not have\n   to be aligned.\n\\returns A 128-bit vector of [2 x double] containing the moved values.","bases":[],"vars":[13164281421641331746,14704322817842006941,217738181602203493],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15541209535006823711,"detailed_name":"static inline __m128d _mm_cmpgt_pd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"488:1-488:13|487:1-491:2|2|-1","hover":"","comments":"Compares each of the corresponding double-precision values of the\n   128-bit vectors of [2 x double] to determine if the values in the first\n   operand are greater than those in the second operand.\n\n   Each comparison yields 0x0 for false, 0xFFFFFFFFFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCMPLTPD / CMPLTPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double].\n\\param __b\n   A 128-bit vector of [2 x double].\n\\returns A 128-bit vector containing the comparison results.","bases":[],"vars":[5958345928203013870,17743597510188868915],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15779412769658885978,"detailed_name":"static inline __m128d _mm_undefined_pd()","qual_name_offset":22,"short_name_offset":22,"short_name_size":16,"spell":"1799:1-1799:17|1798:1-1802:2|2|-1","hover":"","comments":"Constructs a 128-bit floating-point vector of [2 x double] with\n   unspecified content. This could be used as an argument to another\n   intrinsic function where the argument is required but the value is not\n   actually used.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\returns A 128-bit floating-point vector of [2 x double] with unspecified\n   content.","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15822584570272335321,"detailed_name":"static inline int _mm_ucomineq_sd(__m128d __a, __m128d __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":15,"spell":"1276:1-1276:16|1275:1-1279:2|2|-1","hover":"","comments":"Compares the lower double-precision floating-point values in each of\n   the two 128-bit floating-point vectors of [2 x double] to determine if\n   the value in the first parameter is unequal to the corresponding value in\n   the second parameter.\n\n   The comparison yields 0 for false, 1 for true. If either of the two lower\n   double-precision values is NaN, 1 is returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VUCOMISD / UCOMISD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __b.\n\\param __b\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __a.\n\\returns An integer containing the comparison result. If either of the two\n   lower double-precision values is NaN, 1 is returned.","bases":[],"vars":[15166341613308837009,6047740268607617648],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15842662908696256140,"detailed_name":"static inline __m128i _mm_packs_epi16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"4275:1-4275:16|4274:1-4278:2|2|-1","hover":"","comments":"Converts 16-bit signed integers from both 128-bit integer vector\n   operands into 8-bit signed integers, and packs the results into the\n   destination. Positive values greater than 0x7F are saturated to 0x7F.\n   Negative values less than 0x80 are saturated to 0x80.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPACKSSWB / PACKSSWB </c> instruction.\n\n\\param __a\n  A 128-bit integer vector of [8 x i16]. Each 16-bit element is treated as\n  a signed integer and is converted to a 8-bit signed integer with\n  saturation. Values greater than 0x7F are saturated to 0x7F. Values less\n  than 0x80 are saturated to 0x80. The converted [8 x i8] values are\n  written to the lower 64 bits of the result.\n\\param __b\n  A 128-bit integer vector of [8 x i16]. Each 16-bit element is treated as\n  a signed integer and is converted to a 8-bit signed integer with\n  saturation. Values greater than 0x7F are saturated to 0x7F. Values less\n  than 0x80 are saturated to 0x80. The converted [8 x i8] values are\n  written to the higher 64 bits of the result.\n\\returns A 128-bit vector of [16 x i8] containing the converted values.","bases":[],"vars":[18010257750967170449,16931283006952235462],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15858761577288770927,"detailed_name":"static inline __m128i _mm_subs_epu8(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"2705:1-2705:14|2704:1-2708:2|2|-1","hover":"","comments":"Subtracts corresponding 8-bit unsigned integer values in the input\n   and returns the differences in the corresponding bytes in the\n   destination. Differences less than 0x00 are saturated to 0x00.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSUBUSB / PSUBUSB </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing the minuends.\n\\param __b\n   A 128-bit integer vector containing the subtrahends.\n\\returns A 128-bit integer vector containing the unsigned integer\n   differences of the values in the operands.","bases":[],"vars":[5057634978547583843,17932531566151009726],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15868130383783087447,"detailed_name":"static inline __m128i _mm_sra_epi16(__m128i __a, __m128i __count)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"2975:1-2975:14|2974:1-2978:2|2|-1","hover":"","comments":"Right-shifts each 16-bit value in the 128-bit integer vector operand\n   by the specified number of bits. High-order bits are filled with the sign\n   bit of the initial value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSRAW / PSRAW </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing the source operand.\n\\param __count\n   A 128-bit integer vector in which bits [63:0] specify the number of bits\n   to right-shift each value in operand \\a __a.\n\\returns A 128-bit integer vector containing the right-shifted values.","bases":[],"vars":[13139481476427319158,15188762011087014606],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15897592067306656706,"detailed_name":"static inline int _mm_ucomieq_sd(__m128d __a, __m128d __b)","qual_name_offset":18,"short_name_offset":18,"short_name_size":14,"spell":"1146:1-1146:15|1145:1-1149:2|2|-1","hover":"","comments":"Compares the lower double-precision floating-point values in each of\n   the two 128-bit floating-point vectors of [2 x double] for equality. The\n   comparison yields 0 for false, 1 for true.\n\n   If either of the two lower double-precision values is NaN, 0 is returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VUCOMISD / UCOMISD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __b.\n\\param __b\n   A 128-bit vector of [2 x double]. The lower double-precision value is\n   compared to the lower double-precision value of \\a __a.\n\\returns An integer containing the comparison results. If either of the two\n   lower double-precision values is NaN, 0 is returned.","bases":[],"vars":[16106501886151141933,13739702787412872809],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16570976266967901518,"detailed_name":"static inline __m128i _mm_loadu_si128(const __m128i_u *__p)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"3548:1-3548:16|3547:1-3554:2|2|-1","hover":"","comments":"Moves packed integer values from an unaligned 128-bit memory location\n   to elements in a 128-bit integer vector.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVDQU / MOVDQU </c> instruction.\n\n\\param __p\n   A pointer to a memory location containing integer values.\n\\returns A 128-bit integer vector containing the moved values.","bases":[],"vars":[10226116098762548314],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16592947826053625709,"detailed_name":"static inline __m128i _mm_set_epi32(int __i3, int __i2, int __i1, int __i0)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"3659:1-3659:14|3658:1-3662:2|2|-1","hover":"","comments":"Initializes the 32-bit values in a 128-bit vector of [4 x i32] with\n   the specified 32-bit integer values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __i3\n   A 32-bit integer value used to initialize bits [127:96] of the\n   destination vector.\n\\param __i2\n   A 32-bit integer value used to initialize bits [95:64] of the destination\n   vector.\n\\param __i1\n   A 32-bit integer value used to initialize bits [63:32] of the destination\n   vector.\n\\param __i0\n   A 32-bit integer value used to initialize bits [31:0] of the destination\n   vector.\n\\returns An initialized 128-bit vector of [4 x i32] containing the values\n   provided in the operands.","bases":[],"vars":[16575813373815979096,9742633317525581272,14518021332831935215,14863751027146364360],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["3806:10-3806:23|16420|-1","3887:10-3887:23|16420|-1"]},{"usr":16619961318353412773,"detailed_name":"extern void _mm_pause() noexcept","qual_name_offset":12,"short_name_offset":12,"short_name_size":9,"hover":"","comments":"Indicates that a spin loop is being executed for the purposes of\n   optimizing power consumption during the loop.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PAUSE </c> instruction.","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":["4963:6-4963:15|4963:1-4963:21|1|-1"],"derived":[],"uses":[]},{"usr":16627920798911682218,"detailed_name":"static inline __m128d _mm_set_pd1(double __w)","qual_name_offset":22,"short_name_offset":22,"short_name_size":11,"spell":"1855:1-1855:12|1854:1-1858:2|2|-1","hover":"","comments":"Constructs a 128-bit floating-point vector of [2 x double], with each\n   of the two double-precision floating-point vector elements set to the\n   specified double-precision floating-point value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVDDUP / MOVLHPS </c> instruction.\n\n\\param __w\n   A double-precision floating-point value used to initialize each vector\n   element of the result.\n\\returns An initialized 128-bit floating-point vector of [2 x double].","bases":[],"vars":[12906278453798732883],"callees":["1857:10-1857:21|14001793528609252657|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16631819644181442786,"detailed_name":"static inline double _mm_cvtsd_f64(__m128d __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"1562:1-1562:14|1561:1-1565:2|2|-1","hover":"","comments":"Returns the low-order element of a 128-bit vector of [2 x double] as\n   a double-precision floating-point value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic has no corresponding instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower 64 bits are returned.\n\\returns A double-precision floating-point value copied from the lower 64\n   bits of \\a __a.","bases":[],"vars":[2424688061720645781],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16813748329212489184,"detailed_name":"static inline __m128i _mm_load_si128(const __m128i *__p)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"3532:1-3532:15|3531:1-3535:2|2|-1","hover":"","comments":"Moves packed integer values from an aligned 128-bit memory location\n   to elements in a 128-bit integer vector.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVDQA / MOVDQA </c> instruction.\n\n\\param __p\n   An aligned pointer to a memory location containing integer values.\n\\returns A 128-bit integer vector containing the moved values.","bases":[],"vars":[16309111289487595437],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16838912990198415905,"detailed_name":"static inline __m128i _mm_mullo_epi16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"2492:1-2492:16|2491:1-2495:2|2|-1","hover":"","comments":"Multiplies the corresponding elements of two signed [8 x i16]\n   vectors, saving the lower 16 bits of each 32-bit product in the\n   corresponding element of a 128-bit signed [8 x i16] result vector.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMULLW / PMULLW </c> instruction.\n\n\\param __a\n   A 128-bit signed [8 x i16] vector.\n\\param __b\n   A 128-bit signed [8 x i16] vector.\n\\returns A 128-bit signed [8 x i16] vector containing the lower 16 bits of\n   each of the eight 32-bit products.","bases":[],"vars":[8531524037464390992,7215990721698728669],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16842652417868629357,"detailed_name":"static inline __m128i _mm_adds_epi16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"2244:1-2244:15|2243:1-2247:2|2|-1","hover":"","comments":"Adds, with saturation, the corresponding elements of two 128-bit\n   signed [8 x i16] vectors, saving each sum in the corresponding element of\n   a 128-bit result vector of [8 x i16]. Positive sums greater than 0x7FFF\n   are saturated to 0x7FFF. Negative sums less than 0x8000 are saturated to\n   0x8000.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPADDSW / PADDSW </c> instruction.\n\n\\param __a\n   A 128-bit signed [8 x i16] vector.\n\\param __b\n   A 128-bit signed [8 x i16] vector.\n\\returns A 128-bit signed [8 x i16] vector containing the saturated sums of\n   both parameters.","bases":[],"vars":[1516214500349441583,13563677858558910729],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16883116226074685625,"detailed_name":"static inline __m128d _mm_max_sd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":10,"spell":"312:1-312:11|311:1-315:2|2|-1","hover":"","comments":"Compares lower 64-bit double-precision values of both operands, and\n   returns the greater of the pair of values in the lower 64-bits of the\n   result. The upper 64 bits of the result are copied from the upper\n   double-precision value of the first operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMAXSD / MAXSD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double] containing one of the operands. The\n   lower 64 bits of this operand are used in the comparison.\n\\param __b\n   A 128-bit vector of [2 x double] containing one of the operands. The\n   lower 64 bits of this operand are used in the comparison.\n\\returns A 128-bit vector of [2 x double] whose lower 64 bits contain the\n   maximum value between both operands. The upper 64 bits are copied from\n   the upper 64 bits of the first source operand.","bases":[],"vars":[8706976712168885739,8812909274770326929],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17011979540368052746,"detailed_name":"static inline __m128d _mm_cvtpi32_pd(__m64 __a)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"1545:1-1545:15|1544:1-1548:2|2|-1","hover":"","comments":"Converts the two signed 32-bit integer elements of a 64-bit vector of\n   [2 x i32] into two double-precision floating-point values, returned in a\n   128-bit vector of [2 x double].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> CVTPI2PD </c> instruction.\n\n\\param __a\n   A 64-bit vector of [2 x i32].\n\\returns A 128-bit vector of [2 x double] containing the converted values.","bases":[],"vars":[1605915373254914859],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17109091901362827244,"detailed_name":"static inline __m128i _mm_slli_epi16(__m128i __a, int __count)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"2840:1-2840:15|2839:1-2843:2|2|-1","hover":"","comments":"Left-shifts each 16-bit value in the 128-bit integer vector operand\n   by the specified number of bits. Low-order bits are cleared.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSLLW / PSLLW </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing the source operand.\n\\param __count\n   An integer value specifying the number of bits to left-shift each value\n   in operand \\a __a.\n\\returns A 128-bit integer vector containing the left-shifted values.","bases":[],"vars":[1270199304651730773,10006891468156939404],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17236079214377310005,"detailed_name":"static inline __m128i _mm_unpackhi_epi8(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":17,"spell":"4525:1-4525:18|4524:1-4528:2|2|-1","hover":"","comments":"Unpacks the high-order (index 8-15) values from two 128-bit vectors\n   of [16 x i8] and interleaves them into a 128-bit vector of [16 x i8].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPUNPCKHBW / PUNPCKHBW </c>\n  instruction.\n\n\\param __a\n   A 128-bit vector of [16 x i8].\n   Bits [71:64] are written to bits [7:0] of the result. \\n\n   Bits [79:72] are written to bits [23:16] of the result. \\n\n   Bits [87:80] are written to bits [39:32] of the result. \\n\n   Bits [95:88] are written to bits [55:48] of the result. \\n\n   Bits [103:96] are written to bits [71:64] of the result. \\n\n   Bits [111:104] are written to bits [87:80] of the result. \\n\n   Bits [119:112] are written to bits [103:96] of the result. \\n\n   Bits [127:120] are written to bits [119:112] of the result.\n\\param __b\n   A 128-bit vector of [16 x i8]. \\n\n   Bits [71:64] are written to bits [15:8] of the result. \\n\n   Bits [79:72] are written to bits [31:24] of the result. \\n\n   Bits [87:80] are written to bits [47:40] of the result. \\n\n   Bits [95:88] are written to bits [63:56] of the result. \\n\n   Bits [103:96] are written to bits [79:72] of the result. \\n\n   Bits [111:104] are written to bits [95:88] of the result. \\n\n   Bits [119:112] are written to bits [111:104] of the result. \\n\n   Bits [127:120] are written to bits [127:120] of the result.\n\\returns A 128-bit vector of [16 x i8] containing the interleaved values.","bases":[],"vars":[10660763796453408828,1280803192995567864],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17345013119299159562,"detailed_name":"static inline __m128i _mm_sub_epi16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"2588:1-2588:14|2587:1-2591:2|2|-1","hover":"","comments":"Subtracts the corresponding 16-bit integer values in the operands.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSUBW / PSUBW </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing the minuends.\n\\param __b\n   A 128-bit integer vector containing the subtrahends.\n\\returns A 128-bit integer vector containing the differences of the values\n   in the operands.","bases":[],"vars":[8880623387982406722,1262364228064639801],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17419681267362940310,"detailed_name":"static inline __m128d _mm_move_sd(__m128d __a, __m128d __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":11,"spell":"1932:1-1932:12|1931:1-1936:2|2|-1","hover":"","comments":"Constructs a 128-bit floating-point vector of [2 x double]. The lower\n   64 bits are set to the lower 64 bits of the second parameter. The upper\n   64 bits are set to the upper 64 bits of the first parameter.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VBLENDPD / BLENDPD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The upper 64 bits are written to the\n   upper 64 bits of the result.\n\\param __b\n   A 128-bit vector of [2 x double]. The lower 64 bits are written to the\n   lower 64 bits of the result.\n\\returns A 128-bit vector of [2 x double] containing the moved values.","bases":[],"vars":[15564957288426733437,8469306566796059898],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17427926230377348009,"detailed_name":"static inline __m128i _mm_min_epi16(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"2412:1-2412:14|2411:1-2415:2|2|-1","hover":"","comments":"Compares corresponding elements of two 128-bit signed [8 x i16]\n   vectors, saving the smaller value from each comparison in the\n   corresponding element of a 128-bit result vector of [8 x i16].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMINSW / PMINSW </c> instruction.\n\n\\param __a\n   A 128-bit signed [8 x i16] vector.\n\\param __b\n   A 128-bit signed [8 x i16] vector.\n\\returns A 128-bit signed [8 x i16] vector containing the smaller value of\n   each comparison.","bases":[],"vars":[3814995712046114877,1136390522854960870],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17678535358842134307,"detailed_name":"static inline int _mm_cvtsi128_si32(__m128i __a)","qual_name_offset":18,"short_name_offset":18,"short_name_size":17,"spell":"3496:1-3496:18|3495:1-3500:2|2|-1","hover":"","comments":"Moves the least significant 32 bits of a vector of [4 x i32] to a\n   32-bit signed integer value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VMOVD / MOVD </c> instruction.\n\n\\param __a\n   A vector of [4 x i32]. The least significant 32 bits are moved to the\n   destination.\n\\returns A 32-bit signed integer containing the moved value.","bases":[],"vars":[4983931250214362453,14055079033783813424],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17699511103160142864,"detailed_name":"static inline __m128d _mm_cvtsi64_sd(__m128d __a, long long __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"3360:1-3360:15|3359:1-3364:2|2|-1","hover":"","comments":"Converts a 64-bit signed integer value from the second operand into a\n   double-precision value and returns it in the lower element of a [2 x\n   double] vector; the upper element of the returned vector is copied from\n   the upper element of the first operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTSI2SD / CVTSI2SD </c> instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The upper 64 bits of this operand are\n   copied to the upper 64 bits of the destination.\n\\param __b\n   A 64-bit signed integer operand containing the value to be converted.\n\\returns A 128-bit vector of [2 x double] whose lower 64 bits contain the\n   converted value of the second operand. The upper 64 bits are copied from\n   the upper 64 bits of the first operand.","bases":[],"vars":[7453365206935658503,13931760424286711462],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17795454099966789536,"detailed_name":"static inline __m128i _mm_setr_epi64(__m64 __q0, __m64 __q1)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"3862:1-3862:15|3861:1-3865:2|2|-1","hover":"","comments":"Constructs a 128-bit integer vector, initialized in reverse order\n    with the specified 64-bit integral values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic does not correspond to a specific instruction.\n\n\\param __q0\n   A 64-bit integral value used to initialize the lower 64 bits of the\n   result.\n\\param __q1\n   A 64-bit integral value used to initialize the upper 64 bits of the\n   result.\n\\returns An initialized 128-bit integer vector.","bases":[],"vars":[5495600351878679245,5061209054843425027],"callees":["3864:10-3864:23|14082753678476808487|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17878200358630247154,"detailed_name":"static inline __m128i _mm_srli_epi64(__m128i __a, int __count)","qual_name_offset":22,"short_name_offset":22,"short_name_size":14,"spell":"3133:1-3133:15|3132:1-3136:2|2|-1","hover":"","comments":"Right-shifts each of 64-bit values in the 128-bit integer vector\n   operand by the specified number of bits. High-order bits are cleared.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPSRLQ / PSRLQ </c> instruction.\n\n\\param __a\n   A 128-bit integer vector containing the source operand.\n\\param __count\n   An integer value specifying the number of bits to right-shift each value\n   in operand \\a __a.\n\\returns A 128-bit integer vector containing the right-shifted values.","bases":[],"vars":[18266822295712864148,6855549944504138180],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17944999009145653166,"detailed_name":"static inline __m128i _mm_set1_epi8(char __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"3842:1-3842:14|3841:1-3845:2|2|-1","hover":"","comments":"Initializes all values in a 128-bit vector of [16 x i8] with the\n   specified 8-bit value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __b\n   An 8-bit value used to initialize the elements of the destination integer\n   vector.\n\\returns An initialized 128-bit vector of [16 x i8] with all elements\n   containing the value provided in the operand.","bases":[],"vars":[8987443468184152550],"callees":["3844:10-3844:22|9875901901161013165|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":18066876646194693948,"detailed_name":"static inline __m128i _mm_adds_epu8(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"2265:1-2265:14|2264:1-2268:2|2|-1","hover":"","comments":"Adds, with saturation, the corresponding elements of two 128-bit\n   unsigned [16 x i8] vectors, saving each sum in the corresponding element\n   of a 128-bit result vector of [16 x i8]. Positive sums greater than 0xFF\n   are saturated to 0xFF. Negative sums are saturated to 0x00.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPADDUSB / PADDUSB </c> instruction.\n\n\\param __a\n   A 128-bit unsigned [16 x i8] vector.\n\\param __b\n   A 128-bit unsigned [16 x i8] vector.\n\\returns A 128-bit unsigned [16 x i8] vector containing the saturated sums\n   of both parameters.","bases":[],"vars":[11013421055802077307,1986303045737088062],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":18154409514378059628,"detailed_name":"extern void _mm_clflush(const void *) noexcept","qual_name_offset":12,"short_name_offset":12,"short_name_size":11,"hover":"","comments":"The cache line containing \\a __p is flushed and invalidated from all\n   caches in the coherency domain.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> CLFLUSH </c> instruction.\n\n\\param __p\n   A pointer to the memory location used to identify the cache line to be\n   flushed.","bases":[],"vars":[3183560467278283177],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":["4224:6-4224:17|4224:1-4224:35|1|-1"],"derived":[],"uses":[]},{"usr":18306049662906274830,"detailed_name":"static inline __m128 _mm_cvtepi32_ps(__m128i __a)","qual_name_offset":21,"short_name_offset":21,"short_name_size":15,"spell":"3412:1-3412:16|3411:1-3415:2|2|-1","hover":"","comments":"Converts a vector of [4 x i32] into a vector of [4 x float].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTDQ2PS / CVTDQ2PS </c> instruction.\n\n\\param __a\n   A 128-bit integer vector.\n\\returns A 128-bit vector of [4 x float] containing the converted values.","bases":[],"vars":[9418834997706821897],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":18364301592238498667,"detailed_name":"static inline int _mm_cvttsd_si32(__m128d __a)","qual_name_offset":18,"short_name_offset":18,"short_name_size":15,"spell":"1491:1-1491:16|1490:1-1494:2|2|-1","hover":"","comments":"Converts the low-order element of a [2 x double] vector into a 32-bit\n   signed integer value, truncating the result when it is inexact.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VCVTTSD2SI / CVTTSD2SI </c>\n  instruction.\n\n\\param __a\n   A 128-bit vector of [2 x double]. The lower 64 bits are used in the\n   conversion.\n\\returns A 32-bit signed integer containing the converted value.","bases":[],"vars":[11459684565266325148],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":18395842266139788908,"detailed_name":"static inline __m128i _mm_avg_epu8(__m128i __a, __m128i __b)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"2306:1-2306:13|2305:1-2309:2|2|-1","hover":"","comments":"Computes the rounded averages of corresponding elements of two\n   128-bit unsigned [16 x i8] vectors, saving each result in the\n   corresponding element of a 128-bit result vector of [16 x i8].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPAVGB / PAVGB </c> instruction.\n\n\\param __a\n   A 128-bit unsigned [16 x i8] vector.\n\\param __b\n   A 128-bit unsigned [16 x i8] vector.\n\\returns A 128-bit unsigned [16 x i8] vector containing the rounded\n   averages of both parameters.","bases":[],"vars":[4227284781688364161,9379017002111665682],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]}],"usr2type":[{"usr":110,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[8837008289313014066,5600077714589334689,1022990797254858920,17528167612915032104,3791337655811321638,16520353197011506223,9324989524055311530,6615652605711515367,15536512281863701117,12728184748406171578,18155961106364482395,13609447271593054781,13036252901686930434,13429117926418959321,10082540036833364453,14616435735031606876,8987443468184152550,13307482053037635346,99365660092565665,10372192864684537076,641274478631265872,4308381231688639130,4029849044985390752,15212870164311177634,11248828828086163458,8979523261473914827,13510379838894481580,16187218155024176063,11218245824476217969,9657390540129294179,11200855105726617646,2056386029113395271,5968185934775368084],"uses":[]},{"usr":113,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[14947690320679648769,730710321419945180,8267145982089205389,3175477975407809975,10856478114181763933,5212263928069002524,933372360557409771,12600833717026688551,13449134610354015988,2285243722699251759,15049536728116799174,13954459462598892696,15435655724498920497,40782193465579994,3155171739780398922,13470639942690235151,16687650369725227099,4615210820465969317,14684449055491180692,5926994359513891692],"uses":[]},{"usr":114,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[8472367752311901831,7472167172482343617,14777400602061496284,10006891468156939404,7626370682532573828,9233036175465641337,3660260231116033223,4436758784585797097,17344538789948785179,8960402900978348608,6855549944504138180,12095748366150210345,16575813373815979096,9742633317525581272,14518021332831935215,14863751027146364360,13141172028104601007,10012278849073562619,14277442146503130872,8863055744734881088,481318877970774209,13865094330686036453,10969939961360966585],"uses":[]},{"usr":116,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[6282784695876228860,8516288771838305037,13931760424286711462,14335889992907131608,12595350548102685845,1749174313752313928,9328742071707179636,6686886368950204057,10692355663619620242,15077688228061799495,4702593863796463680],"uses":[]},{"usr":144,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[10852562902943851478,15301278627795504239,18434911739562623980,4634729613595090128,10300166495956668347,217738181602203493,12049904733363153001,16346783200944373752,4544953711937997570,10627891372375860670,12906278453798732883,11912022397013417696,14603404917264090197,1074378946786723849,1457491243215471488,8362819436965807239,15647208035159297926,14047343420476441699],"uses":[]},{"usr":681283343111673259,"detailed_name":"typedef __attribute__((__vector_size__(16 * sizeof(char)))) char __v16qi","qual_name_offset":65,"short_name_offset":65,"short_name_size":7,"hover":"","comments":"","spell":"25:14-25:21|25:1-25:21|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[],"uses":["2224:45-2224:52|4|-1","2224:59-2224:66|4|-1","2267:46-2267:53|4|-1","2267:60-2267:67|4|-1","2308:44-2308:51|4|-1","2308:58-2308:65|4|-1","2394:45-2394:52|4|-1","2394:59-2394:66|4|-1","2434:45-2434:52|4|-1","2434:59-2434:66|4|-1","2554:36-2554:43|4|-1","2554:50-2554:57|4|-1","2666:45-2666:52|4|-1","2666:59-2666:66|4|-1","2707:46-2707:53|4|-1","2707:60-2707:67|4|-1","3173:21-3173:28|4|-1","3173:37-3173:44|4|-1","3749:34-3749:41|4|-1","4106:30-4106:37|4|-1","4106:44-4106:51|4|-1","4401:38-4401:45|4|-1","4527:44-4527:51|4|-1","4527:58-4527:65|4|-1","4633:44-4633:51|4|-1","4633:58-4633:65|4|-1"]},{"usr":1190554259452593755,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(float)))) float __v4sf","qual_name_offset":66,"short_name_offset":66,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["1318:32-1318:38|4|-1","1318:45-1318:51|4|-1","1402:43-1402:49|4|-1","3430:44-3430:50|4|-1","3447:45-3447:51|4|-1"]},{"usr":1310320220573231466,"detailed_name":"struct __storeu_si128 {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":14,"hover":"","comments":"","spell":"4013:10-4013:24|4013:3-4015:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":1416836343480154036,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["4016:12-4016:26|4|-1"]},{"usr":1736703121814576790,"detailed_name":"struct __loadu_pd {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":10,"hover":"","comments":"","spell":"1643:10-1643:20|1643:3-1645:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":3863498069780562204,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["1646:25-1646:35|4|-1"]},{"usr":2063555900944740406,"detailed_name":"struct __mm_load1_pd_struct {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":20,"hover":"","comments":"","spell":"1599:10-1599:30|1599:3-1601:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":10852562902943851478,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["1602:31-1602:51|4|-1"]},{"usr":2089679718632112875,"detailed_name":"typedef __attribute__((__vector_size__(2 * sizeof(long long)))) long long __m128i_u","qual_name_offset":74,"short_name_offset":74,"short_name_size":9,"hover":"","comments":"","spell":"19:19-19:28|19:1-19:28|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[10226116098762548314,13836703005813254066,302643050596358074,17675855320274796223,1416836343480154036,8686152199217779457],"uses":["3548:17-3548:26|4|-1","3551:5-3551:14|4|-1","3569:17-3569:26|4|-1","4011:18-4011:27|4|-1","4014:5-4014:14|4|-1","4123:18-4123:27|4|-1"]},{"usr":2242645443532242708,"detailed_name":"struct __loadu_si128 {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":13,"hover":"","comments":"","spell":"3550:10-3550:23|3550:3-3552:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":13836703005813254066,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["3553:25-3553:38|4|-1"]},{"usr":2365342485469508492,"detailed_name":"struct __mm_storeh_pd_struct {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":21,"hover":"","comments":"","spell":"2074:10-2074:31|2074:3-2076:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":15647208035159297926,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["2077:12-2077:33|4|-1"]},{"usr":2382070233928383143,"detailed_name":"struct __mm_store_sd_struct {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":20,"hover":"","comments":"","spell":"1952:10-1952:30|1952:3-1954:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":8362819436965807239,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["1955:12-1955:32|4|-1"]},{"usr":3216147351524767878,"detailed_name":"typedef __attribute__((__vector_size__(2 * sizeof(long long)))) long long __v2di","qual_name_offset":74,"short_name_offset":74,"short_name_size":6,"hover":"","comments":"","spell":"23:19-23:25|23:1-23:25|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[],"uses":["1667:34-1667:40|4|-1","2918:36-2918:42|4|-1","2937:35-2937:41|4|-1","2937:48-2937:54|4|-1","3135:36-3135:42|4|-1","3154:35-3154:41|4|-1","3154:48-3154:54|4|-1","3480:34-3480:40|4|-1","3611:34-3611:40|4|-1","3979:34-3979:40|4|-1","4037:41-4037:47|4|-1","4167:32-4167:38|4|-1","4167:45-4167:51|4|-1","4598:44-4598:50|4|-1","4598:57-4598:63|4|-1","4705:44-4705:50|4|-1","4705:57-4705:63|4|-1","4739:34-4739:40|4|-1","4757:35-4757:41|4|-1"]},{"usr":3339445528070039486,"detailed_name":"struct __mm_loadl_pd_struct {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":20,"hover":"","comments":"","spell":"1780:10-1780:30|1780:3-1782:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":12049904733363153001,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["1783:31-1783:51|4|-1"]},{"usr":3469599036321807560,"detailed_name":"struct __mm_loadh_pd_struct {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":20,"hover":"","comments":"","spell":"1753:10-1753:30|1753:3-1755:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":10300166495956668347,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["1756:31-1756:51|4|-1"]},{"usr":4416280291491238031,"detailed_name":"typedef __attribute__((__vector_size__(2 * sizeof(double)))) double __m128d_u","qual_name_offset":68,"short_name_offset":68,"short_name_size":9,"hover":"","comments":"","spell":"18:16-18:25|18:1-18:25|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[3863498069780562204,7526319836676706452],"uses":["1644:5-1644:14|4|-1","2034:5-2034:14|4|-1"]},{"usr":5690122445787264002,"detailed_name":"struct __storeu_si16 {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":13,"hover":"","comments":"","spell":"4076:10-4076:23|4076:3-4078:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":5926994359513891692,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["4079:12-4079:25|4|-1"]},{"usr":6480013680171271791,"detailed_name":"struct __loadu_si16 {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":12,"hover":"","comments":"","spell":"1705:10-1705:22|1705:3-1707:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":14947690320679648769,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["1708:30-1708:42|4|-1"]},{"usr":6694484644766561266,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(int)))) int __v4si","qual_name_offset":62,"short_name_offset":62,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[14055079033783813424],"uses":["1341:32-1341:38|4|-1","1341:45-1341:51|4|-1","1688:34-1688:40|4|-1","2532:37-2532:43|4|-1","2532:50-2532:56|4|-1","2880:45-2880:51|4|-1","2899:44-2899:50|4|-1","2899:57-2899:63|4|-1","2997:45-2997:51|4|-1","3017:44-3017:50|4|-1","3017:57-3017:63|4|-1","3097:45-3097:51|4|-1","3116:44-3116:50|4|-1","3116:57-3116:63|4|-1","3211:21-3211:27|4|-1","3211:36-3211:42|4|-1","3275:21-3275:27|4|-1","3275:35-3275:41|4|-1","3414:43-3414:49|4|-1","3463:34-3463:40|4|-1","3498:3-3498:9|4|-1","3498:17-3498:23|4|-1","3661:34-3661:40|4|-1","4058:41-4058:47|4|-1","4305:47-4305:53|4|-1","4305:60-4305:66|4|-1","4577:44-4577:50|4|-1","4577:57-4577:63|4|-1","4684:44-4684:50|4|-1","4684:57-4684:63|4|-1"]},{"usr":7047341386549480175,"detailed_name":"typedef __attribute__((__vector_size__(16 * sizeof(unsigned char)))) unsigned char __v16qu","qual_name_offset":83,"short_name_offset":83,"short_name_size":7,"hover":"","comments":"","spell":"30:23-30:30|30:1-30:30|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[],"uses":["2119:21-2119:28|4|-1","2119:36-2119:43|4|-1","2572:21-2572:28|4|-1","2572:36-2572:43|4|-1"]},{"usr":8071107645410950837,"detailed_name":"typedef __attribute__((__vector_size__(8 * sizeof(short)))) short __v8hi","qual_name_offset":66,"short_name_offset":66,"short_name_size":6,"hover":"","comments":"","spell":"24:15-24:21|24:1-24:21|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[],"uses":["1709:34-1709:40|4|-1","2246:45-2246:51|4|-1","2246:58-2246:64|4|-1","2288:46-2288:52|4|-1","2288:59-2288:65|4|-1","2328:44-2328:50|4|-1","2328:57-2328:63|4|-1","2354:46-2354:52|4|-1","2354:59-2354:65|4|-1","2374:45-2374:51|4|-1","2374:58-2374:64|4|-1","2414:45-2414:51|4|-1","2414:58-2414:64|4|-1","2454:45-2454:51|4|-1","2454:58-2454:64|4|-1","2474:46-2474:52|4|-1","2474:59-2474:65|4|-1","2687:45-2687:51|4|-1","2687:58-2687:64|4|-1","2727:46-2727:52|4|-1","2727:59-2727:65|4|-1","2842:45-2842:51|4|-1","2861:44-2861:50|4|-1","2861:57-2861:63|4|-1","2957:45-2957:51|4|-1","2977:44-2977:50|4|-1","2977:57-2977:63|4|-1","3059:45-3059:51|4|-1","3078:44-3078:50|4|-1","3078:57-3078:63|4|-1","3192:21-3192:27|4|-1","3192:36-3192:42|4|-1","3254:21-3254:27|4|-1","3254:35-3254:41|4|-1","3701:34-3701:40|4|-1","4079:41-4079:47|4|-1","4277:47-4277:53|4|-1","4277:60-4277:66|4|-1","4333:47-4333:53|4|-1","4333:60-4333:66|4|-1","4554:44-4554:50|4|-1","4554:57-4554:63|4|-1","4661:44-4661:50|4|-1","4661:57-4661:63|4|-1"]},{"usr":8788115492869736674,"detailed_name":"typedef __attribute__((__vector_size__(1 * sizeof(long long)))) long long __m64","qual_name_offset":74,"short_name_offset":74,"short_name_size":5,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[1605915373254914859,10739092667808699143,17996051075144451962,2990748318586502229,8411598245260306879,7977116263982921953,2758328980920557155,4813585644024425631,9731333846072765757,4759529541755913160,5495600351878679245,5061209054843425027,6486280702138011553],"uses":["1507:19-1507:24|4|-1","1510:11-1510:16|4|-1","1527:19-1527:24|4|-1","1530:11-1530:16|4|-1","1545:16-1545:21|4|-1","2178:19-2178:24|4|-1","2179:14-2179:19|4|-1","2179:25-2179:30|4|-1","2181:11-2181:16|4|-1","2510:19-2510:24|4|-1","2511:14-2511:19|4|-1","2511:25-2511:30|4|-1","2624:19-2624:24|4|-1","2625:14-2625:19|4|-1","2625:25-2625:30|4|-1","2627:11-2627:16|4|-1","3631:15-3631:20|4|-1","3631:27-3631:32|4|-1","3785:16-3785:21|4|-1","3862:16-3862:21|4|-1","3862:28-3862:33|4|-1","4719:19-4719:24|4|-1","4722:11-4722:16|4|-1","4737:19-4737:24|4|-1"]},{"usr":9069052851945393272,"detailed_name":"struct __mm_storel_epi64_struct {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":24,"hover":"","comments":"","spell":"4125:10-4125:34|4125:3-4127:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":15077688228061799495,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["4128:12-4128:36|4|-1"]},{"usr":9307668512027311864,"detailed_name":"typedef __attribute__((__vector_size__(2 * sizeof(long long)))) long long __m128i","qual_name_offset":74,"short_name_offset":74,"short_name_size":7,"hover":"","comments":"","spell":"16:19-16:26|16:1-16:26|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[2534664594910511606,3340336440083871545,2454230366094698010,5407319808835564246,17171705026075922487,6537008736738124271,16786298577346112947,5325259379451185376,16116183755175412542,2694947719305455284,3994688013664039401,1516214500349441583,13563677858558910729,11013421055802077307,1986303045737088062,13235686201154801259,17648628844213633479,4227284781688364161,9379017002111665682,2402700425088337270,285563946356453189,14184531378038640932,106929757937383496,11971724051572504204,7928610262415648115,3658471536704800224,13035924328457162780,3814995712046114877,1136390522854960870,14850879641106055923,17706216899702746774,12005443798754429010,9714965268408006693,10798708906249866532,1207482816501054868,8531524037464390992,7215990721698728669,8209492599275019433,17661270265080848945,9431959300098011896,9547774772660611456,7909772553798964704,3941478834328825646,8880623387982406722,1262364228064639801,13132237955743683706,8758435595834681099,8470656373624094236,7582007257577867930,8235486382361612735,542778756917042902,16379466414138492957,11601260169160782393,5057634978547583843,17932531566151009726,6157726037227513990,15965517045050235026,9923069344371902680,5848595482885417208,3225945798708173960,8668666443103934554,13844180861481167105,17878407855412226609,15009025190600524273,3746742325958678631,1270199304651730773,17855345865793934028,8344238792439919622,4160688674774613323,17032906184880485182,6908256553269953406,8714460715503917706,18083793014288700363,7913135435828484575,1368696174429755224,13139481476427319158,15188762011087014606,12743277917358030681,11127335160413709933,2875578404365510453,9180672187836495499,8291582103473923535,4580988281087590890,11572002864742449493,16906235934298331884,3492989707202172589,18266822295712864148,11901290446688203162,5401297998127863765,4874176908663530271,15051551350146023226,9102926420490051957,9275716704437210877,16172328008153112692,10039808366380103203,16781172437638451981,7512422985434871880,13530833442412871952,6906954792158703597,863128689853971412,9695294454861581698,12111805470599592100,14786842321547977464,9351830017045009278,11503631170372070319,1084669205011565493,7382180794776486110,9418834997706821897,4983931250214362453,6120956950042781103,16309111289487595437,2293058339097028384,14281782889781928880,17911340828826999055,1832878378777085328,12091056925863094481,18331149656684226032,12462105961894676420,8020316021051065247,6069615122592311369,12034542089745806540,820921627886796851,18010257750967170449,16931283006952235462,614039306646292788,14445847640855777977,13193933961912586861,2694100949573648030,7913063531453776651,10660763796453408828,1280803192995567864,6449471617955450729,15386676184484276909,12549072345338373522,4560360322090573481,3496359237571619370,16661593619352623510,14661779939755040756,10074462059213995548,4003103525614483924,4032970880669356155,14457131227364671237,4356707417441899505,17147353261507556591,1897332567520482150,16465423108944585516,11096504111328596164,16470036136927638767,7957422458095361995],"uses":["1338:17-1338:24|4|-1","1357:19-1357:26|4|-1","1472:19-1472:26|4|-1","1475:11-1475:18|4|-1","1660:19-1660:26|4|-1","1667:25-1667:32|4|-1","1681:19-1681:26|4|-1","1688:25-1688:32|4|-1","1702:19-1702:26|4|-1","1709:25-1709:32|4|-1","2116:19-2116:26|4|-1","2117:14-2117:21|4|-1","2117:27-2117:34|4|-1","2119:11-2119:18|4|-1","2138:19-2138:26|4|-1","2139:15-2139:22|4|-1","2139:28-2139:35|4|-1","2141:11-2141:18|4|-1","2160:19-2160:26|4|-1","2161:15-2161:22|4|-1","2161:28-2161:35|4|-1","2163:11-2163:18|4|-1","2200:19-2200:26|4|-1","2201:15-2201:22|4|-1","2201:28-2201:35|4|-1","2203:11-2203:18|4|-1","2221:19-2221:26|4|-1","2222:15-2222:22|4|-1","2222:28-2222:35|4|-1","2224:11-2224:18|4|-1","2243:19-2243:26|4|-1","2244:16-2244:23|4|-1","2244:29-2244:36|4|-1","2246:11-2246:18|4|-1","2264:19-2264:26|4|-1","2265:15-2265:22|4|-1","2265:28-2265:35|4|-1","2267:11-2267:18|4|-1","2285:19-2285:26|4|-1","2286:16-2286:23|4|-1","2286:29-2286:36|4|-1","2288:11-2288:18|4|-1","2305:19-2305:26|4|-1","2306:14-2306:21|4|-1","2306:27-2306:34|4|-1","2308:11-2308:18|4|-1","2325:19-2325:26|4|-1","2326:15-2326:22|4|-1","2326:28-2326:35|4|-1","2328:11-2328:18|4|-1","2351:19-2351:26|4|-1","2352:16-2352:23|4|-1","2352:29-2352:36|4|-1","2354:11-2354:18|4|-1","2371:19-2371:26|4|-1","2372:15-2372:22|4|-1","2372:28-2372:35|4|-1","2374:11-2374:18|4|-1","2391:19-2391:26|4|-1","2392:14-2392:21|4|-1","2392:27-2392:34|4|-1","2394:11-2394:18|4|-1","2411:19-2411:26|4|-1","2412:15-2412:22|4|-1","2412:28-2412:35|4|-1","2414:11-2414:18|4|-1","2431:19-2431:26|4|-1","2432:14-2432:21|4|-1","2432:27-2432:34|4|-1","2434:11-2434:18|4|-1","2451:19-2451:26|4|-1","2452:17-2452:24|4|-1","2452:30-2452:37|4|-1","2454:11-2454:18|4|-1","2471:19-2471:26|4|-1","2472:17-2472:24|4|-1","2472:30-2472:37|4|-1","2474:11-2474:18|4|-1","2491:19-2491:26|4|-1","2492:17-2492:24|4|-1","2492:30-2492:37|4|-1","2494:11-2494:18|4|-1","2529:19-2529:26|4|-1","2530:15-2530:22|4|-1","2530:28-2530:35|4|-1","2551:19-2551:26|4|-1","2552:14-2552:21|4|-1","2552:27-2552:34|4|-1","2569:19-2569:26|4|-1","2570:14-2570:21|4|-1","2570:27-2570:34|4|-1","2572:11-2572:18|4|-1","2587:19-2587:26|4|-1","2588:15-2588:22|4|-1","2588:28-2588:35|4|-1","2590:11-2590:18|4|-1","2605:19-2605:26|4|-1","2606:15-2606:22|4|-1","2606:28-2606:35|4|-1","2608:11-2608:18|4|-1","2642:19-2642:26|4|-1","2643:15-2643:22|4|-1","2643:28-2643:35|4|-1","2645:11-2645:18|4|-1","2663:19-2663:26|4|-1","2664:15-2664:22|4|-1","2664:28-2664:35|4|-1","2666:11-2666:18|4|-1","2684:19-2684:26|4|-1","2685:16-2685:23|4|-1","2685:29-2685:36|4|-1","2687:11-2687:18|4|-1","2704:19-2704:26|4|-1","2705:15-2705:22|4|-1","2705:28-2705:35|4|-1","2707:11-2707:18|4|-1","2724:19-2724:26|4|-1","2725:16-2725:23|4|-1","2725:29-2725:36|4|-1","2727:11-2727:18|4|-1","2742:19-2742:26|4|-1","2743:15-2743:22|4|-1","2743:28-2743:35|4|-1","2745:11-2745:18|4|-1","2762:19-2762:26|4|-1","2763:18-2763:25|4|-1","2763:31-2763:38|4|-1","2765:11-2765:18|4|-1","2779:19-2779:26|4|-1","2780:14-2780:21|4|-1","2780:27-2780:34|4|-1","2782:11-2782:18|4|-1","2797:19-2797:26|4|-1","2798:15-2798:22|4|-1","2798:28-2798:35|4|-1","2800:11-2800:18|4|-1","2839:19-2839:26|4|-1","2840:16-2840:23|4|-1","2842:11-2842:18|4|-1","2858:19-2858:26|4|-1","2859:15-2859:22|4|-1","2859:28-2859:35|4|-1","2861:11-2861:18|4|-1","2877:19-2877:26|4|-1","2878:16-2878:23|4|-1","2880:11-2880:18|4|-1","2896:19-2896:26|4|-1","2897:15-2897:22|4|-1","2897:28-2897:35|4|-1","2899:11-2899:18|4|-1","2915:19-2915:26|4|-1","2916:16-2916:23|4|-1","2934:19-2934:26|4|-1","2935:15-2935:22|4|-1","2935:28-2935:35|4|-1","2954:19-2954:26|4|-1","2955:16-2955:23|4|-1","2957:11-2957:18|4|-1","2974:19-2974:26|4|-1","2975:15-2975:22|4|-1","2975:28-2975:35|4|-1","2977:11-2977:18|4|-1","2994:19-2994:26|4|-1","2995:16-2995:23|4|-1","2997:11-2997:18|4|-1","3014:19-3014:26|4|-1","3015:15-3015:22|4|-1","3015:28-3015:35|4|-1","3017:11-3017:18|4|-1","3056:19-3056:26|4|-1","3057:16-3057:23|4|-1","3059:11-3059:18|4|-1","3075:19-3075:26|4|-1","3076:15-3076:22|4|-1","3076:28-3076:35|4|-1","3078:11-3078:18|4|-1","3094:19-3094:26|4|-1","3095:16-3095:23|4|-1","3097:11-3097:18|4|-1","3113:19-3113:26|4|-1","3114:15-3114:22|4|-1","3114:28-3114:35|4|-1","3116:11-3116:18|4|-1","3132:19-3132:26|4|-1","3133:16-3133:23|4|-1","3151:19-3151:26|4|-1","3152:15-3152:22|4|-1","3152:28-3152:35|4|-1","3170:19-3170:26|4|-1","3171:16-3171:23|4|-1","3171:29-3171:36|4|-1","3173:11-3173:18|4|-1","3189:19-3189:26|4|-1","3190:17-3190:24|4|-1","3190:30-3190:37|4|-1","3192:11-3192:18|4|-1","3208:19-3208:26|4|-1","3209:17-3209:24|4|-1","3209:30-3209:37|4|-1","3211:11-3211:18|4|-1","3228:19-3228:26|4|-1","3229:16-3229:23|4|-1","3229:29-3229:36|4|-1","3233:11-3233:18|4|-1","3251:19-3251:26|4|-1","3252:17-3252:24|4|-1","3252:30-3252:37|4|-1","3254:11-3254:18|4|-1","3272:19-3272:26|4|-1","3273:17-3273:24|4|-1","3273:30-3273:37|4|-1","3275:11-3275:18|4|-1","3293:19-3293:26|4|-1","3294:16-3294:23|4|-1","3294:29-3294:36|4|-1","3314:19-3314:26|4|-1","3315:17-3315:24|4|-1","3315:30-3315:37|4|-1","3335:19-3335:26|4|-1","3336:17-3336:24|4|-1","3336:30-3336:37|4|-1","3412:17-3412:24|4|-1","3427:19-3427:26|4|-1","3430:11-3430:18|4|-1","3444:19-3444:26|4|-1","3447:11-3447:18|4|-1","3460:19-3460:26|4|-1","3463:25-3463:32|4|-1","3477:19-3477:26|4|-1","3480:25-3480:32|4|-1","3496:19-3496:26|4|-1","3515:19-3515:26|4|-1","3531:19-3531:26|4|-1","3532:16-3532:23|4|-1","3547:19-3547:26|4|-1","3568:19-3568:26|4|-1","3574:25-3574:32|4|-1","3586:19-3586:26|4|-1","3589:11-3589:18|4|-1","3608:19-3608:26|4|-1","3611:25-3611:32|4|-1","3630:19-3630:26|4|-1","3658:19-3658:26|4|-1","3661:25-3661:32|4|-1","3698:19-3698:26|4|-1","3701:25-3701:32|4|-1","3746:19-3746:26|4|-1","3749:25-3749:32|4|-1","3765:19-3765:26|4|-1","3784:19-3784:26|4|-1","3803:19-3803:26|4|-1","3822:19-3822:26|4|-1","3841:19-3841:26|4|-1","3861:19-3861:26|4|-1","3884:19-3884:26|4|-1","3915:19-3915:26|4|-1","3962:19-3962:26|4|-1","3976:19-3976:26|4|-1","3979:25-3979:32|4|-1","3995:17-3995:24|4|-1","3995:31-3995:38|4|-1","4011:34-4011:41|4|-1","4032:28-4032:35|4|-1","4053:28-4053:35|4|-1","4074:28-4074:35|4|-1","4104:21-4104:28|4|-1","4104:34-4104:41|4|-1","4123:34-4123:41|4|-1","4165:18-4165:25|4|-1","4165:32-4165:39|4|-1","4274:19-4274:26|4|-1","4275:17-4275:24|4|-1","4275:30-4275:37|4|-1","4277:11-4277:18|4|-1","4302:19-4302:26|4|-1","4303:17-4303:24|4|-1","4303:30-4303:37|4|-1","4305:11-4305:18|4|-1","4330:19-4330:26|4|-1","4331:18-4331:25|4|-1","4331:31-4331:38|4|-1","4333:11-4333:18|4|-1","4399:19-4399:26|4|-1","4524:19-4524:26|4|-1","4525:19-4525:26|4|-1","4525:32-4525:39|4|-1","4527:11-4527:18|4|-1","4551:19-4551:26|4|-1","4552:20-4552:27|4|-1","4552:33-4552:40|4|-1","4554:11-4554:18|4|-1","4574:19-4574:26|4|-1","4575:20-4575:27|4|-1","4575:33-4575:40|4|-1","4577:11-4577:18|4|-1","4595:19-4595:26|4|-1","4596:20-4596:27|4|-1","4596:33-4596:40|4|-1","4598:11-4598:18|4|-1","4630:19-4630:26|4|-1","4631:19-4631:26|4|-1","4631:32-4631:39|4|-1","4633:11-4633:18|4|-1","4658:19-4658:26|4|-1","4659:20-4659:27|4|-1","4659:33-4659:40|4|-1","4661:11-4661:18|4|-1","4681:19-4681:26|4|-1","4682:20-4682:27|4|-1","4682:33-4682:40|4|-1","4684:11-4684:18|4|-1","4702:19-4702:26|4|-1","4703:20-4703:27|4|-1","4703:33-4703:40|4|-1","4705:11-4705:18|4|-1","4720:19-4720:26|4|-1","4736:19-4736:26|4|-1","4739:25-4739:32|4|-1","4754:19-4754:26|4|-1","4755:16-4755:23|4|-1","4878:19-4878:26|4|-1","4881:11-4881:18|4|-1","4912:19-4912:26|4|-1","4915:11-4915:18|4|-1","4930:18-4930:25|4|-1","4947:18-4947:25|4|-1"]},{"usr":9787341394710254332,"detailed_name":"typedef __attribute__((__vector_size__(2 * sizeof(int)))) int __v2si","qual_name_offset":62,"short_name_offset":62,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["1547:35-1547:41|4|-1","2513:34-2513:40|4|-1","2513:47-2513:53|4|-1"]},{"usr":10005199880469215223,"detailed_name":"struct __mm_loadl_epi64_struct {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":23,"hover":"","comments":"","spell":"3571:10-3571:33|3571:3-3573:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":12595350548102685845,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["3574:51-3574:74|4|-1"]},{"usr":11011707672865084979,"detailed_name":"typedef __attribute__((__vector_size__(2 * sizeof(unsigned long long)))) unsigned long long __v2du","qual_name_offset":92,"short_name_offset":92,"short_name_size":6,"hover":"","comments":"Unsigned types","spell":"28:28-28:34|28:1-28:34|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[],"uses":["352:21-352:27|4|-1","352:35-352:41|4|-1","373:22-373:28|4|-1","373:36-373:42|4|-1","391:21-391:27|4|-1","391:35-391:41|4|-1","409:21-409:27|4|-1","409:35-409:41|4|-1","2203:21-2203:27|4|-1","2203:35-2203:41|4|-1","2645:21-2645:27|4|-1","2645:35-2645:41|4|-1","2745:21-2745:27|4|-1","2745:35-2745:41|4|-1","2765:22-2765:28|4|-1","2765:36-2765:42|4|-1","2782:21-2782:27|4|-1","2782:35-2782:41|4|-1","2800:21-2800:27|4|-1","2800:35-2800:41|4|-1"]},{"usr":11985984413760502591,"detailed_name":"typedef __attribute__((__vector_size__(2 * sizeof(double)))) double __v2df","qual_name_offset":68,"short_name_offset":68,"short_name_size":6,"hover":"","comments":"Type defines.","spell":"22:16-22:22|22:1-22:22|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[],"uses":["77:21-77:27|4|-1","77:35-77:41|4|-1","119:21-119:27|4|-1","119:35-119:41|4|-1","160:21-160:27|4|-1","160:35-160:41|4|-1","203:21-203:27|4|-1","203:35-203:41|4|-1","228:40-228:46|4|-1","246:33-246:39|4|-1","270:32-270:38|4|-1","270:45-270:51|4|-1","290:32-290:38|4|-1","290:45-290:51|4|-1","314:32-314:38|4|-1","314:45-314:51|4|-1","334:32-334:38|4|-1","334:45-334:51|4|-1","428:43-428:49|4|-1","428:56-428:62|4|-1","448:43-448:49|4|-1","448:56-448:62|4|-1","469:43-469:49|4|-1","469:56-469:62|4|-1","490:43-490:49|4|-1","490:56-490:62|4|-1","511:43-511:49|4|-1","511:56-511:62|4|-1","534:44-534:50|4|-1","534:57-534:63|4|-1","558:46-558:52|4|-1","558:59-558:65|4|-1","579:44-579:50|4|-1","579:57-579:63|4|-1","600:44-600:50|4|-1","600:57-600:63|4|-1","621:44-621:50|4|-1","621:57-621:63|4|-1","642:44-642:50|4|-1","642:57-642:63|4|-1","663:44-663:50|4|-1","663:57-663:63|4|-1","686:43-686:49|4|-1","686:56-686:62|4|-1","711:43-711:49|4|-1","711:56-711:62|4|-1","736:43-736:49|4|-1","736:56-736:62|4|-1","761:41-761:47|4|-1","761:54-761:60|4|-1","787:41-787:47|4|-1","787:54-787:60|4|-1","815:44-815:50|4|-1","815:57-815:63|4|-1","843:46-843:52|4|-1","843:59-843:65|4|-1","868:44-868:50|4|-1","868:57-868:63|4|-1","893:44-893:50|4|-1","893:57-893:63|4|-1","918:44-918:50|4|-1","918:57-918:63|4|-1","943:42-943:48|4|-1","943:55-943:61|4|-1","969:42-969:48|4|-1","969:55-969:61|4|-1","994:35-994:41|4|-1","994:48-994:54|4|-1","1020:35-1020:41|4|-1","1020:48-1020:54|4|-1","1046:35-1046:41|4|-1","1046:48-1046:54|4|-1","1072:35-1072:41|4|-1","1072:48-1072:54|4|-1","1098:35-1098:41|4|-1","1098:48-1098:54|4|-1","1124:36-1124:42|4|-1","1124:49-1124:55|4|-1","1148:36-1148:42|4|-1","1148:49-1148:55|4|-1","1174:36-1174:42|4|-1","1174:49-1174:55|4|-1","1200:36-1200:42|4|-1","1200:49-1200:55|4|-1","1226:36-1226:42|4|-1","1226:49-1226:55|4|-1","1252:36-1252:42|4|-1","1252:49-1252:55|4|-1","1278:37-1278:43|4|-1","1278:50-1278:56|4|-1","1297:35-1297:41|4|-1","1360:35-1360:41|4|-1","1377:35-1377:41|4|-1","1402:56-1402:62|4|-1","1475:45-1475:51|4|-1","1493:36-1493:42|4|-1","1510:42-1510:48|4|-1","1530:43-1530:49|4|-1","1626:35-1626:41|4|-1","1626:48-1626:54|4|-1","1994:34-1994:40|4|-1","1994:47-1994:53|4|-1","2056:34-2056:40|4|-1","2056:47-2056:53|4|-1","3380:37-3380:43|4|-1","3398:38-3398:44|4|-1","4148:32-4148:38|4|-1","4148:45-4148:51|4|-1","4778:35-4778:41|4|-1","4778:48-4778:54|4|-1","4799:35-4799:41|4|-1","4799:48-4799:54|4|-1","4818:35-4818:41|4|-1"]},{"usr":12436497392017854237,"detailed_name":"typedef __attribute__((__vector_size__(16 * sizeof(signed char)))) signed char __v16qs","qual_name_offset":79,"short_name_offset":79,"short_name_size":7,"hover":"","comments":"We need an explicitly signed variant for char. Note that this shouldn't\nappear in the interface though.","spell":"34:21-34:28|34:1-34:28|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[],"uses":["3233:21-3233:28|4|-1","3233:36-3233:43|4|-1"]},{"usr":12486202783824379988,"detailed_name":"struct __mm_load_sd_struct {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":19,"hover":"","comments":"","spell":"1726:10-1726:29|1726:3-1728:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":18434911739562623980,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["1729:31-1729:50|4|-1"]},{"usr":12870334422284019238,"detailed_name":"struct __loadu_si32 {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":12,"hover":"","comments":"","spell":"1684:10-1684:22|1684:3-1686:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":7472167172482343617,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["1687:28-1687:40|4|-1"]},{"usr":12921169845601936899,"detailed_name":"typedef __attribute__((__vector_size__(1 * sizeof(long long)))) long long __v1di","qual_name_offset":74,"short_name_offset":74,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["2181:39-2181:45|4|-1","2181:52-2181:58|4|-1","2627:39-2627:45|4|-1","2627:52-2627:58|4|-1"]},{"usr":12944714932172126693,"detailed_name":"typedef __attribute__((__vector_size__(8 * sizeof(unsigned short)))) unsigned short __v8hu","qual_name_offset":84,"short_name_offset":84,"short_name_size":6,"hover":"","comments":"","spell":"29:24-29:30|29:1-29:30|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[],"uses":["2141:21-2141:27|4|-1","2141:35-2141:41|4|-1","2494:21-2494:27|4|-1","2494:35-2494:41|4|-1","2590:21-2590:27|4|-1","2590:35-2590:41|4|-1"]},{"usr":13285599535348046933,"detailed_name":"struct __storeu_pd {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":11,"hover":"","comments":"","spell":"2033:10-2033:21|2033:3-2035:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":7526319836676706452,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["2036:12-2036:23|4|-1"]},{"usr":13406401976043515761,"detailed_name":"struct __mm_storeh_pd_struct {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":21,"hover":"","comments":"","spell":"2094:10-2094:31|2094:3-2096:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":14047343420476441699,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["2097:12-2097:33|4|-1"]},{"usr":13703771911006219080,"detailed_name":"struct __storeu_si32 {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":13,"hover":"","comments":"","spell":"4055:10-4055:23|4055:3-4057:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":13865094330686036453,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["4058:12-4058:25|4|-1"]},{"usr":14612348971871390879,"detailed_name":"struct __storeu_si64 {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":13,"hover":"","comments":"","spell":"4034:10-4034:23|4034:3-4036:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":10692355663619620242,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["4037:12-4037:25|4|-1"]},{"usr":15682930942610409926,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(float)))) float __m128","qual_name_offset":66,"short_name_offset":66,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[13671018245906547409,4951576052500434074,16402046766672569656,7664758329328246211,5464172686364016196,13387702710928981470,7722813466207232704],"uses":["1294:19-1294:25|4|-1","1315:14-1315:20|4|-1","1399:19-1399:25|4|-1","1400:14-1400:20|4|-1","1402:11-1402:17|4|-1","1449:27-1449:33|4|-1","3411:19-3411:25|4|-1","3414:11-3414:17|4|-1","3428:17-3428:23|4|-1","3445:18-3445:24|4|-1","4861:19-4861:25|4|-1","4864:11-4864:17|4|-1","4896:15-4896:21|4|-1","4913:18-4913:24|4|-1","4929:19-4929:25|4|-1","4932:11-4932:17|4|-1"]},{"usr":17014917149991124568,"detailed_name":"typedef __attribute__((__vector_size__(2 * sizeof(double)))) double __m128d","qual_name_offset":68,"short_name_offset":68,"short_name_size":7,"hover":"","comments":"","spell":"15:16-15:23|15:1-15:23|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[17369439073678641157,6565748449975971686,11158838210191883992,4945170279097301520,7036541197772236599,13748329297568110187,6955451314871090787,13105097199816193901,3657942605065892942,3550248468396061012,8733498557890574805,15737085470787564704,10417292134851092084,11170208921203926597,8964647283522084819,5841682198614911870,15186873892107211804,2611408178843697261,9222431793997683439,14654337790304420763,10496458246990920295,14910050159815400222,10729181878674475961,15726569806227293846,8706976712168885739,8812909274770326929,15247908239749684837,17203924195817317053,5172480806969540004,1661645994859722644,1074275518581834396,1807211564993553866,10139092528889599977,17102246620031539774,18099590296901311517,13060314423441326087,16014199390334433957,14659948959435824382,2114368988194475850,12110694772432335608,807970259433722673,17098463736399866675,5958345928203013870,17743597510188868915,8052076358270721900,11496543746586329445,1242215016383044086,18404060734251275636,2533721015645721366,18133436629670893138,17313823592857572339,2551981035123227901,18371363303616317054,12829069083968418614,8528765514903658440,1379238442645959223,7439207308661215937,18270670794250836312,15157148578379384287,4456966204174432168,5938355501616550346,11293793436170791515,9452032961641106790,1671501837251249575,12699351486235266169,10763342789242295192,5771682252707458049,12225207367168326890,7505121046960619428,18316946586294908322,17930848158980471983,16763902426758301668,919926012555355868,8172891014764618403,17165086629956910770,12592652542270637942,13786650117543834056,3379469379880446694,14456344748167693415,10323129194673403181,3987695530789984145,15171430964338901221,1700845553043660394,17209553376254517008,2116324703617865982,1125627622975774636,2897490835746816951,15328837336364559042,14272758502912461820,6483777149507004253,2878812078223708293,13004896064472281532,10066629920865001982,10826005328778891033,16047161413149420836,16836654226396692847,17874693569649251676,13374384025942584986,12141188922793597015,10493262887044636882,16106501886151141933,13739702787412872809,17267431398478311787,11707068748768426304,14447895861057614247,8061496475377010445,5901372414097770750,13987977813239464405,2252023993476674378,14249686987542653555,15166341613308837009,6047740268607617648,5525711034489693703,7180327604781837828,4054114484492035016,13589193147140369330,4891554393842395963,521077363391698592,5937646894798478479,11459684565266325148,6710177670261822635,12812121674693167064,2424688061720645781,16435228425654556444,13164281421641331746,14933777975930047226,15564957288426733437,8469306566796059898,11670729327470802971,12008489762898756330,11602336605342033266,1357744479145467861,3628989763634904526,17917755008136121809,1434039123725065047,11978681079058529406,7453365206935658503,16730907211643678095,14921299840775913464,11883104223517136202,8245327953387867118,3111445436595313680,1539854056108321403,18018449287539539936,4015889797183883420,3170985495824802134,4934823981133987641],"uses":["55:19-55:26|4|-1","56:12-56:19|4|-1","56:25-56:32|4|-1","74:19-74:26|4|-1","75:12-75:19|4|-1","75:25-75:32|4|-1","77:11-77:18|4|-1","97:19-97:26|4|-1","98:12-98:19|4|-1","98:25-98:32|4|-1","116:19-116:26|4|-1","117:12-117:19|4|-1","117:25-117:32|4|-1","119:11-119:18|4|-1","138:19-138:26|4|-1","139:12-139:19|4|-1","139:25-139:32|4|-1","157:19-157:26|4|-1","158:12-158:19|4|-1","158:25-158:32|4|-1","160:11-160:18|4|-1","180:19-180:26|4|-1","181:12-181:19|4|-1","181:25-181:32|4|-1","200:19-200:26|4|-1","201:12-201:19|4|-1","201:25-201:32|4|-1","203:11-203:18|4|-1","225:19-225:26|4|-1","226:13-226:20|4|-1","226:26-226:33|4|-1","228:3-228:10|4|-1","229:25-229:32|4|-1","243:19-243:26|4|-1","244:13-244:20|4|-1","267:19-267:26|4|-1","268:12-268:19|4|-1","268:25-268:32|4|-1","287:19-287:26|4|-1","288:12-288:19|4|-1","288:25-288:32|4|-1","311:19-311:26|4|-1","312:12-312:19|4|-1","312:25-312:32|4|-1","331:19-331:26|4|-1","332:12-332:19|4|-1","332:25-332:32|4|-1","349:19-349:26|4|-1","350:12-350:19|4|-1","350:25-350:32|4|-1","352:11-352:18|4|-1","370:19-370:26|4|-1","371:15-371:22|4|-1","371:28-371:35|4|-1","373:11-373:18|4|-1","388:19-388:26|4|-1","389:11-389:18|4|-1","389:24-389:31|4|-1","391:11-391:18|4|-1","406:19-406:26|4|-1","407:12-407:19|4|-1","407:25-407:32|4|-1","409:11-409:18|4|-1","425:19-425:26|4|-1","426:14-426:21|4|-1","426:27-426:34|4|-1","428:11-428:18|4|-1","445:19-445:26|4|-1","446:14-446:21|4|-1","446:27-446:34|4|-1","448:11-448:18|4|-1","466:19-466:26|4|-1","467:14-467:21|4|-1","467:27-467:34|4|-1","469:11-469:18|4|-1","487:19-487:26|4|-1","488:14-488:21|4|-1","488:27-488:34|4|-1","490:11-490:18|4|-1","508:19-508:26|4|-1","509:14-509:21|4|-1","509:27-509:34|4|-1","511:11-511:18|4|-1","531:19-531:26|4|-1","532:15-532:22|4|-1","532:28-532:35|4|-1","534:11-534:18|4|-1","555:19-555:26|4|-1","556:17-556:24|4|-1","556:30-556:37|4|-1","558:11-558:18|4|-1","576:19-576:26|4|-1","577:15-577:22|4|-1","577:28-577:35|4|-1","579:11-579:18|4|-1","597:19-597:26|4|-1","598:15-598:22|4|-1","598:28-598:35|4|-1","600:11-600:18|4|-1","618:19-618:26|4|-1","619:15-619:22|4|-1","619:28-619:35|4|-1","621:11-621:18|4|-1","639:19-639:26|4|-1","640:15-640:22|4|-1","640:28-640:35|4|-1","642:11-642:18|4|-1","660:19-660:26|4|-1","661:15-661:22|4|-1","661:28-661:35|4|-1","663:11-663:18|4|-1","683:19-683:26|4|-1","684:14-684:21|4|-1","684:27-684:34|4|-1","686:11-686:18|4|-1","708:19-708:26|4|-1","709:14-709:21|4|-1","709:27-709:34|4|-1","711:11-711:18|4|-1","733:19-733:26|4|-1","734:14-734:21|4|-1","734:27-734:34|4|-1","736:11-736:18|4|-1","758:19-758:26|4|-1","759:14-759:21|4|-1","759:27-759:34|4|-1","761:3-761:10|4|-1","762:25-762:32|4|-1","784:19-784:26|4|-1","785:14-785:21|4|-1","785:27-785:34|4|-1","787:3-787:10|4|-1","788:25-788:32|4|-1","812:19-812:26|4|-1","813:15-813:22|4|-1","813:28-813:35|4|-1","815:11-815:18|4|-1","840:19-840:26|4|-1","841:17-841:24|4|-1","841:30-841:37|4|-1","843:11-843:18|4|-1","865:19-865:26|4|-1","866:15-866:22|4|-1","866:28-866:35|4|-1","868:11-868:18|4|-1","890:19-890:26|4|-1","891:15-891:22|4|-1","891:28-891:35|4|-1","893:11-893:18|4|-1","915:19-915:26|4|-1","916:15-916:22|4|-1","916:28-916:35|4|-1","918:11-918:18|4|-1","940:19-940:26|4|-1","941:15-941:22|4|-1","941:28-941:35|4|-1","943:3-943:10|4|-1","944:25-944:32|4|-1","966:19-966:26|4|-1","967:15-967:22|4|-1","967:28-967:35|4|-1","969:3-969:10|4|-1","970:25-970:32|4|-1","992:15-992:22|4|-1","992:28-992:35|4|-1","1018:15-1018:22|4|-1","1018:28-1018:35|4|-1","1044:15-1044:22|4|-1","1044:28-1044:35|4|-1","1070:15-1070:22|4|-1","1070:28-1070:35|4|-1","1096:15-1096:22|4|-1","1096:28-1096:35|4|-1","1122:16-1122:23|4|-1","1122:29-1122:36|4|-1","1146:16-1146:23|4|-1","1146:29-1146:36|4|-1","1172:16-1172:23|4|-1","1172:29-1172:36|4|-1","1198:16-1198:23|4|-1","1198:29-1198:36|4|-1","1224:16-1224:23|4|-1","1224:29-1224:36|4|-1","1250:16-1250:23|4|-1","1250:29-1250:36|4|-1","1276:17-1276:24|4|-1","1276:30-1276:37|4|-1","1295:14-1295:21|4|-1","1314:19-1314:26|4|-1","1317:11-1317:18|4|-1","1337:19-1337:26|4|-1","1340:11-1340:18|4|-1","1358:17-1358:24|4|-1","1375:16-1375:23|4|-1","1400:26-1400:33|4|-1","1422:19-1422:26|4|-1","1423:16-1423:23|4|-1","1448:19-1448:26|4|-1","1449:14-1449:21|4|-1","1473:18-1473:25|4|-1","1491:17-1491:24|4|-1","1508:16-1508:23|4|-1","1528:17-1528:24|4|-1","1544:19-1544:26|4|-1","1562:15-1562:22|4|-1","1578:19-1578:26|4|-1","1581:18-1581:25|4|-1","1596:19-1596:26|4|-1","1603:25-1603:32|4|-1","1622:19-1622:26|4|-1","1625:3-1625:10|4|-1","1625:25-1625:32|4|-1","1640:19-1640:26|4|-1","1723:19-1723:26|4|-1","1730:25-1730:32|4|-1","1750:19-1750:26|4|-1","1751:14-1751:21|4|-1","1757:25-1757:32|4|-1","1777:19-1777:26|4|-1","1778:14-1778:21|4|-1","1784:25-1784:32|4|-1","1798:19-1798:26|4|-1","1801:11-1801:18|4|-1","1818:19-1818:26|4|-1","1821:25-1821:32|4|-1","1836:19-1836:26|4|-1","1839:25-1839:32|4|-1","1854:19-1854:26|4|-1","1874:19-1874:26|4|-1","1877:25-1877:32|4|-1","1895:19-1895:26|4|-1","1898:25-1898:32|4|-1","1910:19-1910:26|4|-1","1913:25-1913:32|4|-1","1931:19-1931:26|4|-1","1932:13-1932:20|4|-1","1932:26-1932:33|4|-1","1950:28-1950:35|4|-1","1972:28-1972:35|4|-1","1974:5-1974:12|4|-1","1992:29-1992:36|4|-1","2013:29-2013:36|4|-1","2031:29-2031:36|4|-1","2054:29-2054:36|4|-1","2057:5-2057:12|4|-1","2072:29-2072:36|4|-1","2092:29-2092:36|4|-1","3359:19-3359:26|4|-1","3360:16-3360:23|4|-1","3378:16-3378:23|4|-1","3396:17-3396:24|4|-1","4146:28-4146:35|4|-1","4775:19-4775:26|4|-1","4776:17-4776:24|4|-1","4776:30-4776:37|4|-1","4796:19-4796:26|4|-1","4797:17-4797:24|4|-1","4797:30-4797:37|4|-1","4816:17-4816:24|4|-1","4862:15-4862:22|4|-1","4879:18-4879:25|4|-1","4895:19-4895:26|4|-1","4898:11-4898:18|4|-1","4946:19-4946:26|4|-1","4949:11-4949:18|4|-1"]},{"usr":17474906088355715721,"detailed_name":"struct __loadu_si64 {}","qual_name_offset":7,"short_name_offset":7,"short_name_size":12,"hover":"","comments":"","spell":"1663:10-1663:22|1663:3-1665:4|2|-1","bases":[],"funcs":[],"types":[],"vars":[{"L":6282784695876228860,"R":0}],"alias_of":0,"kind":23,"parent_kind":12,"declarations":[],"derived":[],"instances":[],"uses":["1666:34-1666:46|4|-1"]},{"usr":17688558412358925216,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(unsigned int)))) unsigned int __v4su","qual_name_offset":80,"short_name_offset":80,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["2163:21-2163:27|4|-1","2163:35-2163:41|4|-1","2608:21-2608:27|4|-1","2608:35-2608:41|4|-1"]}],"usr2var":[{"usr":40782193465579994,"detailed_name":"short __w2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"3916:46-3916:50|3916:40-3916:50|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3918:54-3918:58|12|-1"]},{"usr":99365660092565665,"detailed_name":"char __b1","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"3963:31-3963:35|3963:26-3963:35|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3965:113-3965:117|12|-1"]},{"usr":106929757937383496,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2352:37-2352:40|2352:29-2352:40|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2354:66-2354:69|12|-1"]},{"usr":217738181602203493,"detailed_name":"double __u","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"double __u = ((const struct __mm_loadh_pd_struct*)__dp)->__u","comments":"","spell":"1756:10-1756:13|1756:3-1756:63|2|-1","type":144,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["1757:43-1757:46|12|-1"]},{"usr":285563946356453189,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2326:36-2326:39|2326:28-2326:39|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2328:64-2328:67|12|-1"]},{"usr":302643050596358074,"detailed_name":"const __m128i_u *__p","qual_name_offset":17,"short_name_offset":17,"short_name_size":3,"hover":"","comments":"","spell":"3569:34-3569:37|3569:17-3569:37|1026|-1","type":2089679718632112875,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3574:76-3574:79|12|-1"]},{"usr":343982457520916741,"detailed_name":"_mm_insert_epi16","qual_name_offset":0,"short_name_offset":0,"short_name_size":16,"hover":"#define _mm_insert_epi16(a, b, imm) \\\n  (__m128i)__builtin_ia32_vec_set_v8hi((__v8hi)(__m128i)(a), (int)(b), \\\n                                       (int)(imm))","comments":"","spell":"4382:9-4382:25|4382:9-4384:51|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":481318877970774209,"detailed_name":"int __i3","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"3885:50-3885:54|3885:46-3885:54|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3887:24-3887:28|12|-1"]},{"usr":521077363391698592,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1449:22-1449:25|1449:14-1449:25|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1451:3-1451:6|4|-1","1452:10-1452:13|12|-1"]},{"usr":542778756917042902,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2664:36-2664:39|2664:28-2664:39|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2666:67-2666:70|12|-1"]},{"usr":614039306646292788,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4303:25-4303:28|4303:17-4303:28|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4305:54-4305:57|12|-1"]},{"usr":641274478631265872,"detailed_name":"char __b3","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"3963:53-3963:57|3963:48-3963:57|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3965:101-3965:105|12|-1"]},{"usr":730710321419945180,"detailed_name":"short __u","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"short __u = ((const struct __loadu_si16*)__a)->__v","comments":"","spell":"1708:9-1708:12|1708:3-1708:53|2|-1","type":113,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["1709:42-1709:45|12|-1"]},{"usr":807970259433722673,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"467:22-467:25|467:14-467:25|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["469:50-469:53|12|-1"]},{"usr":820921627886796851,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4165:40-4165:43|4165:32-4165:43|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4167:39-4167:42|12|-1"]},{"usr":863128689853971412,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3273:25-3273:28|3273:17-3273:28|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3275:28-3275:31|12|-1"]},{"usr":919926012555355868,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"813:23-813:26|813:15-813:26|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["815:51-815:54|12|-1"]},{"usr":933372360557409771,"detailed_name":"short __w3","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"3699:69-3699:73|3699:63-3699:73|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3701:61-3701:65|12|-1"]},{"usr":1022990797254858920,"detailed_name":"char __b13","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3747:43-3747:48|3747:38-3747:48|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3749:125-3749:130|12|-1"]},{"usr":1074275518581834396,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"371:23-371:26|371:15-371:26|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["373:29-373:32|12|-1"]},{"usr":1074378946786723849,"detailed_name":"double __w","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1896:20-1896:23|1896:13-1896:23|1026|-1","type":144,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1898:35-1898:38|12|-1"]},{"usr":1084669205011565493,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3336:25-3336:28|3336:17-3336:28|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3338:31-3338:34|12|-1"]},{"usr":1125627622975774636,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"967:23-967:26|967:15-967:26|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["969:62-969:65|12|-1","970:44-970:47|4|-1"]},{"usr":1136390522854960870,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2412:36-2412:39|2412:28-2412:39|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2414:65-2414:68|12|-1"]},{"usr":1207482816501054868,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2472:38-2472:41|2472:30-2472:41|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2474:66-2474:69|12|-1"]},{"usr":1242215016383044086,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"532:23-532:26|532:15-532:26|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["534:51-534:54|12|-1"]},{"usr":1262364228064639801,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2588:36-2588:39|2588:28-2588:39|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2590:42-2590:45|12|-1"]},{"usr":1270199304651730773,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2840:24-2840:27|2840:16-2840:27|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2842:52-2842:55|12|-1"]},{"usr":1280803192995567864,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4525:40-4525:43|4525:32-4525:43|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4527:66-4527:69|12|-1"]},{"usr":1357744479145467861,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2013:37-2013:40|2013:29-2013:40|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2015:23-2015:26|12|-1"]},{"usr":1368696174429755224,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2955:24-2955:27|2955:16-2955:27|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2957:52-2957:55|12|-1"]},{"usr":1379238442645959223,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"619:36-619:39|619:28-619:39|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["621:64-621:67|12|-1"]},{"usr":1416836343480154036,"detailed_name":"__m128i_u _mm_storeu_si128(__m128i_u *, __m128i)::__storeu_si128::__v","qual_name_offset":10,"short_name_offset":66,"short_name_size":3,"hover":"","comments":"","spell":"4014:15-4014:18|4014:5-4014:18|2|-1","type":2089679718632112875,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["4016:34-4016:37|20|-1"]},{"usr":1434039123725065047,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2072:37-2072:40|2072:29-2072:40|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2077:48-2077:51|4|-1"]},{"usr":1457491243215471488,"detailed_name":"double __x","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1896:32-1896:35|1896:25-1896:35|1026|-1","type":144,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1898:40-1898:43|12|-1"]},{"usr":1516214500349441583,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2244:24-2244:27|2244:16-2244:27|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2246:52-2246:55|12|-1"]},{"usr":1539854056108321403,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4797:25-4797:28|4797:17-4797:28|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4799:42-4799:45|12|-1"]},{"usr":1605915373254914859,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"1545:22-1545:25|1545:16-1545:25|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1547:42-1547:45|12|-1"]},{"usr":1661645994859722644,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"350:33-350:36|350:25-350:36|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["352:42-352:45|12|-1"]},{"usr":1671501837251249575,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"709:35-709:38|709:27-709:38|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["711:63-711:66|12|-1"]},{"usr":1677538887430270803,"detailed_name":"double *__dp","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"2072:23-2072:27|2072:15-2072:27|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2077:35-2077:39|12|-1"]},{"usr":1700845553043660394,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"941:23-941:26|941:15-941:26|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["943:62-943:65|12|-1","944:44-944:47|4|-1"]},{"usr":1749174313752313928,"detailed_name":"long long __q1","qual_name_offset":10,"short_name_offset":10,"short_name_size":4,"hover":"","comments":"","spell":"3609:26-3609:30|3609:16-3609:30|1026|-1","type":116,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3611:49-3611:53|12|-1"]},{"usr":1807211564993553866,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"371:36-371:39|371:28-371:39|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["373:43-373:46|12|-1"]},{"usr":1832878378777085328,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4032:36-4032:39|4032:28-4032:39|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4037:48-4037:51|12|-1"]},{"usr":1844421861469927885,"detailed_name":"void *__p","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"4074:23-4074:26|4074:17-4074:26|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4079:27-4079:30|12|-1"]},{"usr":1863923437117333048,"detailed_name":"const void *__a","qual_name_offset":12,"short_name_offset":12,"short_name_size":3,"hover":"","comments":"","spell":"1703:28-1703:31|1703:16-1703:31|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1708:44-1708:47|12|-1"]},{"usr":1897332567520482150,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4703:41-4703:44|4703:33-4703:44|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4705:64-4705:67|12|-1"]},{"usr":1986303045737088062,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2265:36-2265:39|2265:28-2265:39|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2267:68-2267:71|12|-1"]},{"usr":2056386029113395271,"detailed_name":"char __b14","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3963:178-3963:183|3963:173-3963:183|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3965:30-3965:35|12|-1"]},{"usr":2114368988194475850,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"446:22-446:25|446:14-446:25|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["448:50-448:53|12|-1"]},{"usr":2116324703617865982,"detailed_name":"__m128d __c","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"__m128d __c = __builtin_ia32_cmpnltsd((__v2df)__b, (__v2df)__a)","comments":"","spell":"943:11-943:14|943:3-943:66|2|-1","type":17014917149991124568,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["944:36-944:39|4|-1"]},{"usr":2252023993476674378,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1250:24-1250:27|1250:16-1250:27|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1252:43-1252:46|12|-1"]},{"usr":2285243722699251759,"detailed_name":"short __w0","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"3699:105-3699:109|3699:99-3699:109|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3701:43-3701:47|12|-1"]},{"usr":2293058339097028384,"detailed_name":"__m128i *__p","qual_name_offset":9,"short_name_offset":9,"short_name_size":3,"hover":"","comments":"","spell":"3995:26-3995:29|3995:17-3995:29|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3997:4-3997:7|12|-1"]},{"usr":2402700425088337270,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2326:23-2326:26|2326:15-2326:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2328:51-2328:54|12|-1"]},{"usr":2424688061720645781,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1562:23-1562:26|1562:15-1562:26|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1564:10-1564:13|4|-1"]},{"usr":2454230366094698010,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2117:35-2117:38|2117:27-2117:38|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2119:44-2119:47|12|-1"]},{"usr":2505347811433185347,"detailed_name":"int *__p","qual_name_offset":5,"short_name_offset":5,"short_name_size":3,"hover":"","comments":"","spell":"4184:22-4184:25|4184:17-4184:25|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4186:25-4186:28|12|-1"]},{"usr":2533721015645721366,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"556:25-556:28|556:17-556:28|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["558:53-558:56|12|-1"]},{"usr":2534664594910511606,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1338:25-1338:28|1338:17-1338:28|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1341:39-1341:42|12|-1","1341:52-1341:55|12|-1"]},{"usr":2551981035123227901,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"577:36-577:39|577:28-577:39|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["579:64-579:67|12|-1"]},{"usr":2592512316950478810,"detailed_name":"double *__dp","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"2054:23-2054:27|2054:15-2054:27|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2057:15-2057:19|12|-1"]},{"usr":2611408178843697261,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"226:34-226:37|226:26-226:37|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["228:47-228:50|12|-1"]},{"usr":2694100949573648030,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4331:39-4331:42|4331:31-4331:42|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4333:67-4333:70|12|-1"]},{"usr":2694947719305455284,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2222:23-2222:26|2222:15-2222:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2224:53-2224:56|12|-1"]},{"usr":2758328980920557155,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2625:31-2625:34|2625:25-2625:34|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2627:59-2627:62|12|-1"]},{"usr":2875578404365510453,"detailed_name":"__m128i __count","qual_name_offset":8,"short_name_offset":8,"short_name_size":7,"hover":"","comments":"","spell":"3015:36-3015:43|3015:28-3015:43|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3017:64-3017:71|12|-1"]},{"usr":2878812078223708293,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1018:23-1018:26|1018:15-1018:26|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1020:42-1020:45|12|-1"]},{"usr":2897490835746816951,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"967:36-967:39|967:28-967:39|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["969:49-969:52|12|-1"]},{"usr":2990748318586502229,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2511:20-2511:23|2511:14-2511:23|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2513:41-2513:44|12|-1"]},{"usr":3111445436595313680,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4776:38-4776:41|4776:30-4776:41|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4778:55-4778:58|12|-1"]},{"usr":3155171739780398922,"detailed_name":"short __w3","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"3916:58-3916:62|3916:52-3916:62|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3918:48-3918:52|12|-1"]},{"usr":3170985495824802134,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4862:23-4862:26|4862:15-4862:26|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4864:18-4864:21|12|-1"]},{"usr":3175477975407809975,"detailed_name":"short __w6","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"3699:33-3699:37|3699:27-3699:37|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3701:79-3701:83|12|-1"]},{"usr":3183560467278283177,"detailed_name":"const void *__p","qual_name_offset":12,"short_name_offset":12,"short_name_size":3,"hover":"","comments":"","spell":"4224:31-4224:34|4224:18-4224:34|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":[]},{"usr":3225945798708173960,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2763:26-2763:29|2763:18-2763:29|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2765:29-2765:32|12|-1"]},{"usr":3340336440083871545,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2117:22-2117:25|2117:14-2117:25|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2119:29-2119:32|12|-1"]},{"usr":3379469379880446694,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"866:36-866:39|866:28-866:39|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["868:64-868:67|12|-1"]},{"usr":3492989707202172589,"detailed_name":"__m128i __count","qual_name_offset":8,"short_name_offset":8,"short_name_size":7,"hover":"","comments":"","spell":"3114:36-3114:43|3114:28-3114:43|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3116:64-3116:71|12|-1"]},{"usr":3496359237571619370,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4596:28-4596:31|4596:20-4596:31|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4598:51-4598:54|12|-1"]},{"usr":3550248468396061012,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"139:33-139:36|139:25-139:36|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["141:13-141:16|4|-1"]},{"usr":3628989763634904526,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2031:37-2031:40|2031:29-2031:40|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2036:38-2036:41|12|-1"]},{"usr":3657942605065892942,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"139:20-139:23|139:12-139:23|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["141:3-141:6|4|-1","142:10-142:13|12|-1"]},{"usr":3658471536704800224,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2392:22-2392:25|2392:14-2392:25|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2394:53-2394:56|12|-1"]},{"usr":3660260231116033223,"detailed_name":"int __count","qual_name_offset":4,"short_name_offset":4,"short_name_size":7,"hover":"","comments":"","spell":"2955:33-2955:40|2955:29-2955:40|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2957:57-2957:64|12|-1"]},{"usr":3746742325958678631,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2798:36-2798:39|2798:28-2798:39|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2800:42-2800:45|12|-1"]},{"usr":3790574699456744992,"detailed_name":"_MM_SHUFFLE2","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _MM_SHUFFLE2(x, y) (((x) << 1) | (y))","comments":"","spell":"4971:9-4971:21|4971:9-4971:46|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":3791337655811321638,"detailed_name":"char __b11","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3747:67-3747:72|3747:62-3747:72|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3749:111-3749:116|12|-1"]},{"usr":3798937761315436803,"detailed_name":"const double *__dp","qual_name_offset":14,"short_name_offset":14,"short_name_size":4,"hover":"","comments":"","spell":"1597:28-1597:32|1597:14-1597:32|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1602:53-1602:57|12|-1"]},{"usr":3814995712046114877,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2412:23-2412:26|2412:15-2412:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2414:52-2414:55|12|-1"]},{"usr":3857680074489986190,"detailed_name":"_MM_DENORMALS_ZERO_MASK","qual_name_offset":0,"short_name_offset":0,"short_name_size":23,"hover":"#define _MM_DENORMALS_ZERO_MASK (0x0040U)","comments":"","spell":"4976:9-4976:32|4976:9-4976:42|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":3863498069780562204,"detailed_name":"__m128d_u _mm_loadu_pd(const double *)::__loadu_pd::__v","qual_name_offset":10,"short_name_offset":52,"short_name_size":3,"hover":"","comments":"","spell":"1644:15-1644:18|1644:5-1644:18|2|-1","type":4416280291491238031,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1646:44-1646:47|12|-1"]},{"usr":3941478834328825646,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2570:35-2570:38|2570:27-2570:38|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2572:44-2572:47|12|-1"]},{"usr":3987695530789984145,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"916:23-916:26|916:15-916:26|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["918:51-918:54|12|-1"]},{"usr":3994688013664039401,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2222:36-2222:39|2222:28-2222:39|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2224:67-2224:70|12|-1"]},{"usr":4003103525614483924,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4659:28-4659:31|4659:20-4659:31|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4661:51-4661:54|12|-1"]},{"usr":4015889797183883420,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4816:25-4816:28|4816:17-4816:28|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4818:42-4818:45|12|-1"]},{"usr":4029849044985390752,"detailed_name":"char __b5","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"3963:75-3963:79|3963:70-3963:79|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3965:89-3965:93|12|-1"]},{"usr":4032970880669356155,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4659:41-4659:44|4659:33-4659:44|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4661:64-4661:67|12|-1"]},{"usr":4054114484492035016,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1375:24-1375:27|1375:16-1375:27|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1377:42-1377:45|12|-1"]},{"usr":4160688674774613323,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2878:24-2878:27|2878:16-2878:27|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2880:52-2880:55|12|-1"]},{"usr":4227284781688364161,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2306:22-2306:25|2306:14-2306:25|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2308:52-2308:55|12|-1"]},{"usr":4308381231688639130,"detailed_name":"char __b4","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"3963:64-3963:68|3963:59-3963:68|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3965:95-3965:99|12|-1"]},{"usr":4356707417441899505,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4682:41-4682:44|4682:33-4682:44|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4684:64-4684:67|12|-1"]},{"usr":4372679695966853596,"detailed_name":"void *__p","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"4032:23-4032:26|4032:17-4032:26|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4037:27-4037:30|12|-1"]},{"usr":4436758784585797097,"detailed_name":"int __count","qual_name_offset":4,"short_name_offset":4,"short_name_size":7,"hover":"","comments":"","spell":"2995:33-2995:40|2995:29-2995:40|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2997:57-2997:64|12|-1"]},{"usr":4449264528116417551,"detailed_name":"const double *__dp","qual_name_offset":14,"short_name_offset":14,"short_name_size":4,"hover":"","comments":"","spell":"1579:27-1579:31|1579:13-1579:31|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1581:27-1581:31|12|-1"]},{"usr":4456966204174432168,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"661:36-661:39|661:28-661:39|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["663:51-663:54|12|-1"]},{"usr":4472066186931890250,"detailed_name":"_MM_DENORMALS_ZERO_OFF","qual_name_offset":0,"short_name_offset":0,"short_name_size":22,"hover":"#define _MM_DENORMALS_ZERO_OFF  (0x0000U)","comments":"","spell":"4974:9-4974:31|4974:9-4974:42|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":4544953711937997570,"detailed_name":"double __w","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1819:19-1819:22|1819:12-1819:22|1026|-1","type":144,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1821:35-1821:38|12|-1"]},{"usr":4560360322090573481,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4575:41-4575:44|4575:33-4575:44|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4577:64-4577:67|12|-1"]},{"usr":4580988281087590890,"detailed_name":"__m128i __count","qual_name_offset":8,"short_name_offset":8,"short_name_size":7,"hover":"","comments":"","spell":"3076:36-3076:43|3076:28-3076:43|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3078:64-3078:71|12|-1"]},{"usr":4615210820465969317,"detailed_name":"short __w6","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"3916:94-3916:98|3916:88-3916:98|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3918:30-3918:34|12|-1"]},{"usr":4634729613595090128,"detailed_name":"double __u","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"double __u = ((const struct __mm_load_sd_struct*)__dp)->__u","comments":"","spell":"1729:10-1729:13|1729:3-1729:62|2|-1","type":144,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["1730:35-1730:38|12|-1"]},{"usr":4702593863796463680,"detailed_name":"long long __a","qual_name_offset":10,"short_name_offset":10,"short_name_size":3,"hover":"","comments":"","spell":"4204:43-4204:46|4204:33-4204:46|1026|-1","type":116,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4206:32-4206:35|12|-1"]},{"usr":4759529541755913160,"detailed_name":"__m64 __q","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"3785:22-3785:25|3785:16-3785:25|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3787:24-3787:27|12|-1","3787:29-3787:32|12|-1"]},{"usr":4813585644024425631,"detailed_name":"__m64 __q1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"3631:21-3631:25|3631:15-3631:25|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3633:36-3633:40|12|-1"]},{"usr":4874176908663530271,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3171:24-3171:27|3171:16-3171:27|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3173:29-3173:32|12|-1"]},{"usr":4891554393842395963,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1423:24-1423:27|1423:16-1423:27|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1425:3-1425:6|4|-1","1426:10-1426:13|12|-1"]},{"usr":4934823981133987641,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4879:26-4879:29|4879:18-4879:29|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4881:19-4881:22|12|-1"]},{"usr":4945170279097301520,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"75:33-75:36|75:25-75:36|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["77:42-77:45|12|-1"]},{"usr":4951576052500434074,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1400:21-1400:24|1400:14-1400:24|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1402:50-1402:53|12|-1"]},{"usr":4983931250214362453,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3496:27-3496:30|3496:19-3496:30|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3498:24-3498:27|12|-1"]},{"usr":5057634978547583843,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2705:23-2705:26|2705:15-2705:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2707:54-2707:57|12|-1"]},{"usr":5061209054843425027,"detailed_name":"__m64 __q1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"3862:34-3862:38|3862:28-3862:38|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3864:24-3864:28|12|-1"]},{"usr":5172480806969540004,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"350:20-350:23|350:12-350:23|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["352:28-352:31|12|-1"]},{"usr":5212263928069002524,"detailed_name":"short __w4","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"3699:57-3699:61|3699:51-3699:61|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3701:67-3701:71|12|-1"]},{"usr":5325259379451185376,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2201:23-2201:26|2201:15-2201:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2203:28-2203:31|12|-1"]},{"usr":5401297998127863765,"detailed_name":"__m128i __count","qual_name_offset":8,"short_name_offset":8,"short_name_size":7,"hover":"","comments":"","spell":"3152:36-3152:43|3152:28-3152:43|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3154:55-3154:62|12|-1"]},{"usr":5407319808835564246,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2139:23-2139:26|2139:15-2139:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2141:28-2141:31|12|-1"]},{"usr":5464172686364016196,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"3445:25-3445:28|3445:18-3445:28|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3447:52-3447:55|12|-1"]},{"usr":5495600351878679245,"detailed_name":"__m64 __q0","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"3862:22-3862:26|3862:16-3862:26|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3864:30-3864:34|12|-1"]},{"usr":5525711034489693703,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1295:22-1295:25|1295:14-1295:25|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1297:42-1297:45|12|-1"]},{"usr":5600077714589334689,"detailed_name":"char __b14","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3747:31-3747:36|3747:26-3747:36|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3749:132-3749:137|12|-1"]},{"usr":5771682252707458049,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"759:22-759:25|759:14-759:25|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["761:61-761:64|12|-1","762:44-762:47|4|-1"]},{"usr":5820945775981201706,"detailed_name":"_MM_SET_DENORMALS_ZERO_MODE","qual_name_offset":0,"short_name_offset":0,"short_name_size":27,"hover":"#define _MM_SET_DENORMALS_ZERO_MODE(x) (_mm_setcsr((_mm_getcsr() & ~_MM_DENORMALS_ZERO_MASK) | (x)))","comments":"","spell":"4979:9-4979:36|4979:9-4979:101|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":5841682198614911870,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"201:33-201:36|201:25-201:36|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["203:42-203:45|12|-1"]},{"usr":5848595482885417208,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2743:36-2743:39|2743:28-2743:39|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2745:42-2745:45|12|-1"]},{"usr":5901372414097770750,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1224:24-1224:27|1224:16-1224:27|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1226:43-1226:46|12|-1"]},{"usr":5926994359513891692,"detailed_name":"short _mm_storeu_si16(void *, __m128i)::__storeu_si16::__v","qual_name_offset":6,"short_name_offset":55,"short_name_size":3,"hover":"","comments":"","spell":"4077:11-4077:14|4077:5-4077:14|2|-1","type":113,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["4079:33-4079:36|20|-1"]},{"usr":5937646894798478479,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1473:26-1473:29|1473:18-1473:29|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1475:52-1475:55|12|-1"]},{"usr":5938355501616550346,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"684:22-684:25|684:14-684:25|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["686:50-686:53|12|-1"]},{"usr":5958345928203013870,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"488:22-488:25|488:14-488:25|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["490:63-490:66|12|-1"]},{"usr":5968185934775368084,"detailed_name":"char __b15","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3963:190-3963:195|3963:185-3963:195|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3965:23-3965:28|12|-1"]},{"usr":6047740268607617648,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1276:38-1276:41|1276:30-1276:41|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1278:57-1278:60|12|-1"]},{"usr":6069615122592311369,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4123:42-4123:45|4123:34-4123:45|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4128:50-4128:53|4|-1"]},{"usr":6120956950042781103,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3515:27-3515:30|3515:19-3515:30|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3517:10-3517:13|4|-1"]},{"usr":6157726037227513990,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2725:24-2725:27|2725:16-2725:27|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2727:53-2727:56|12|-1"]},{"usr":6282784695876228860,"detailed_name":"long long _mm_loadu_si64(const void *)::__loadu_si64::__v","qual_name_offset":10,"short_name_offset":54,"short_name_size":3,"hover":"","comments":"","spell":"1664:15-1664:18|1664:5-1664:18|2|-1","type":116,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1666:54-1666:57|12|-1"]},{"usr":6408490720899555343,"detailed_name":"const double *__dp","qual_name_offset":14,"short_name_offset":14,"short_name_size":4,"hover":"","comments":"","spell":"1724:27-1724:31|1724:13-1724:31|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1729:52-1729:56|12|-1"]},{"usr":6416364529460341359,"detailed_name":"const double *__dp","qual_name_offset":14,"short_name_offset":14,"short_name_size":4,"hover":"","comments":"","spell":"1641:28-1641:32|1641:14-1641:32|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1646:37-1646:41|12|-1"]},{"usr":6449471617955450729,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4552:28-4552:31|4552:20-4552:31|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4554:51-4554:54|12|-1"]},{"usr":6469418630416650158,"detailed_name":"long long *__p","qual_name_offset":11,"short_name_offset":11,"short_name_size":3,"hover":"","comments":"","spell":"4204:28-4204:31|4204:17-4204:31|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4206:27-4206:30|12|-1"]},{"usr":6483777149507004253,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"992:36-992:39|992:28-992:39|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["994:55-994:58|12|-1"]},{"usr":6486280702138011553,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"4737:25-4737:28|4737:19-4737:28|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4739:54-4739:57|12|-1"]},{"usr":6537008736738124271,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2161:23-2161:26|2161:15-2161:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2163:28-2163:31|12|-1"]},{"usr":6565748449975971686,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"56:33-56:36|56:25-56:36|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["58:13-58:16|4|-1"]},{"usr":6615652605711515367,"detailed_name":"char __b8","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"3747:102-3747:106|3747:97-3747:106|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3749:92-3749:96|12|-1"]},{"usr":6686886368950204057,"detailed_name":"long long __q","qual_name_offset":10,"short_name_offset":10,"short_name_size":3,"hover":"","comments":"","spell":"3766:27-3766:30|3766:17-3766:30|1026|-1","type":116,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3768:25-3768:28|12|-1","3768:30-3768:33|12|-1"]},{"usr":6710177670261822635,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1508:24-1508:27|1508:16-1508:27|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1510:49-1510:52|12|-1"]},{"usr":6855549944504138180,"detailed_name":"int __count","qual_name_offset":4,"short_name_offset":4,"short_name_size":7,"hover":"","comments":"","spell":"3133:33-3133:40|3133:29-3133:40|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3135:48-3135:55|12|-1"]},{"usr":6906954792158703597,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3252:38-3252:41|3252:30-3252:41|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3254:42-3254:45|12|-1"]},{"usr":6908256553269953406,"detailed_name":"__m128i __count","qual_name_offset":8,"short_name_offset":8,"short_name_size":7,"hover":"","comments":"","spell":"2897:36-2897:43|2897:28-2897:43|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2899:64-2899:71|12|-1"]},{"usr":6955451314871090787,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"117:20-117:23|117:12-117:23|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["119:28-119:31|12|-1"]},{"usr":7036541197772236599,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"98:20-98:23|98:12-98:23|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["100:3-100:6|4|-1","101:10-101:13|12|-1"]},{"usr":7180327604781837828,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1358:25-1358:28|1358:17-1358:28|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1360:42-1360:45|12|-1"]},{"usr":7215990721698728669,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2492:38-2492:41|2492:30-2492:41|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2494:42-2494:45|12|-1"]},{"usr":7277556268025509413,"detailed_name":"double *__dp","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"1950:22-1950:26|1950:14-1950:26|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1955:34-1955:38|12|-1"]},{"usr":7303292301798269499,"detailed_name":"double *__dp","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"1972:22-1972:26|1972:14-1972:26|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1974:14-1974:18|12|-1"]},{"usr":7382180794776486110,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3336:38-3336:41|3336:30-3336:41|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3338:26-3338:29|12|-1"]},{"usr":7415913149476659590,"detailed_name":"_mm_shuffle_epi32","qual_name_offset":0,"short_name_offset":0,"short_name_size":17,"hover":"#define _mm_shuffle_epi32(a, imm) \\\n  (__m128i)__builtin_ia32_pshufd((__v4si)(__m128i)(a), (int)(imm))","comments":"","spell":"4432:9-4432:26|4432:9-4433:67|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":7439207308661215937,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"640:23-640:26|640:15-640:26|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["642:64-642:67|12|-1"]},{"usr":7453365206935658503,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3360:24-3360:27|3360:16-3360:27|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3362:3-3362:6|4|-1","3363:10-3363:13|12|-1"]},{"usr":7472167172482343617,"detailed_name":"int _mm_loadu_si32(const void *)::__loadu_si32::__v","qual_name_offset":4,"short_name_offset":48,"short_name_size":3,"hover":"","comments":"","spell":"1685:9-1685:12|1685:5-1685:12|2|-1","type":114,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1687:48-1687:51|12|-1"]},{"usr":7505121046960619428,"detailed_name":"__m128d __c","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"__m128d __c = __builtin_ia32_cmpltsd((__v2df)__b, (__v2df)__a)","comments":"","spell":"761:11-761:14|761:3-761:65|2|-1","type":17014917149991124568,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["762:36-762:39|4|-1"]},{"usr":7512422985434871880,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3229:37-3229:40|3229:29-3229:40|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3233:44-3233:47|12|-1"]},{"usr":7526319836676706452,"detailed_name":"__m128d_u _mm_storeu_pd(double *, __m128d)::__storeu_pd::__v","qual_name_offset":10,"short_name_offset":57,"short_name_size":3,"hover":"","comments":"","spell":"2034:15-2034:18|2034:5-2034:18|2|-1","type":4416280291491238031,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["2036:32-2036:35|20|-1"]},{"usr":7582007257577867930,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2643:36-2643:39|2643:28-2643:39|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2645:42-2645:45|12|-1"]},{"usr":7626370682532573828,"detailed_name":"int __count","qual_name_offset":4,"short_name_offset":4,"short_name_size":7,"hover":"","comments":"","spell":"2878:33-2878:40|2878:29-2878:40|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2880:57-2880:64|12|-1"]},{"usr":7664758329328246211,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"3428:24-3428:27|3428:17-3428:27|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3430:51-3430:54|12|-1"]},{"usr":7722813466207232704,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"4913:25-4913:28|4913:18-4913:28|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4915:19-4915:22|12|-1"]},{"usr":7909772553798964704,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2570:22-2570:25|2570:14-2570:25|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2572:29-2572:32|12|-1"]},{"usr":7913063531453776651,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4399:27-4399:30|4399:19-4399:30|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4401:46-4401:49|12|-1"]},{"usr":7913135435828484575,"detailed_name":"__m128i __count","qual_name_offset":8,"short_name_offset":8,"short_name_size":7,"hover":"","comments":"","spell":"2935:36-2935:43|2935:28-2935:43|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2937:55-2937:62|12|-1"]},{"usr":7928610262415648115,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2372:36-2372:39|2372:28-2372:39|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2374:65-2374:68|12|-1"]},{"usr":7957422458095361995,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4947:26-4947:29|4947:18-4947:29|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4949:19-4949:22|12|-1"]},{"usr":7977116263982921953,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2625:20-2625:23|2625:14-2625:23|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2627:46-2627:49|12|-1"]},{"usr":8020316021051065247,"detailed_name":"__m128i __n","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4104:42-4104:45|4104:34-4104:45|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4106:52-4106:55|12|-1"]},{"usr":8052076358270721900,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"509:22-509:25|509:14-509:25|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["511:63-511:66|12|-1"]},{"usr":8061496475377010445,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1198:37-1198:40|1198:29-1198:40|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1200:56-1200:59|12|-1"]},{"usr":8172891014764618403,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"813:36-813:39|813:28-813:39|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["815:64-815:67|12|-1"]},{"usr":8209492599275019433,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2530:23-2530:26|2530:15-2530:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2532:44-2532:47|12|-1"]},{"usr":8235486382361612735,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2664:23-2664:26|2664:15-2664:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2666:53-2666:56|12|-1"]},{"usr":8245327953387867118,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4776:25-4776:28|4776:17-4776:28|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4778:42-4778:45|12|-1"]},{"usr":8247287233058430223,"detailed_name":"_mm_extract_epi16","qual_name_offset":0,"short_name_offset":0,"short_name_size":17,"hover":"#define _mm_extract_epi16(a, imm) \\\n  (int)(unsigned short)__builtin_ia32_vec_ext_v8hi((__v8hi)(__m128i)(a), \\\n                                                   (int)(imm))","comments":"","spell":"4358:9-4358:26|4358:9-4360:63|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":8267145982089205389,"detailed_name":"short __w7","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"3699:21-3699:25|3699:15-3699:25|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3701:85-3701:89|12|-1"]},{"usr":8291582103473923535,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3076:23-3076:26|3076:15-3076:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3078:51-3078:54|12|-1"]},{"usr":8344238792439919622,"detailed_name":"__m128i __count","qual_name_offset":8,"short_name_offset":8,"short_name_size":7,"hover":"","comments":"","spell":"2859:36-2859:43|2859:28-2859:43|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2861:64-2861:71|12|-1"]},{"usr":8362819436965807239,"detailed_name":"double _mm_store_sd(double *, __m128d)::__mm_store_sd_struct::__u","qual_name_offset":7,"short_name_offset":62,"short_name_size":3,"hover":"","comments":"","spell":"1953:12-1953:15|1953:5-1953:15|2|-1","type":144,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1955:41-1955:44|20|-1"]},{"usr":8411598245260306879,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2511:31-2511:34|2511:25-2511:34|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2513:54-2513:57|12|-1"]},{"usr":8469306566796059898,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1932:34-1932:37|1932:26-1932:37|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1934:12-1934:15|4|-1"]},{"usr":8470656373624094236,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2643:23-2643:26|2643:15-2643:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2645:28-2645:31|12|-1"]},{"usr":8472367752311901831,"detailed_name":"int __b","qual_name_offset":4,"short_name_offset":4,"short_name_size":3,"hover":"","comments":"","spell":"1423:33-1423:36|1423:29-1423:36|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1425:12-1425:15|12|-1"]},{"usr":8505365057637683020,"detailed_name":"double *__dp","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"2013:23-2013:27|2013:15-2013:27|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2015:17-2015:21|12|-1"]},{"usr":8516288771838305037,"detailed_name":"long long __u","qual_name_offset":10,"short_name_offset":10,"short_name_size":3,"hover":"long long __u = ((const struct __loadu_si64*)__a)->__v","comments":"","spell":"1666:13-1666:16|1666:3-1666:57|2|-1","type":116,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["1667:42-1667:45|12|-1"]},{"usr":8528765514903658440,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"619:23-619:26|619:15-619:26|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["621:51-621:54|12|-1"]},{"usr":8531524037464390992,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2492:25-2492:28|2492:17-2492:28|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2494:28-2494:31|12|-1"]},{"usr":8668666443103934554,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2763:39-2763:42|2763:31-2763:42|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2765:43-2765:46|12|-1"]},{"usr":8686152199217779457,"detailed_name":"__m128i_u *__p","qual_name_offset":11,"short_name_offset":11,"short_name_size":3,"hover":"","comments":"","spell":"4123:29-4123:32|4123:18-4123:32|1026|-1","type":2089679718632112875,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4128:38-4128:41|12|-1"]},{"usr":8706976712168885739,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"312:20-312:23|312:12-312:23|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["314:39-314:42|12|-1"]},{"usr":8714460715503917706,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2916:24-2916:27|2916:16-2916:27|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2918:43-2918:46|12|-1"]},{"usr":8733498557890574805,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"158:20-158:23|158:12-158:23|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["160:28-160:31|12|-1"]},{"usr":8758435595834681099,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2606:36-2606:39|2606:28-2606:39|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2608:42-2608:45|12|-1"]},{"usr":8812909274770326929,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"312:33-312:36|312:25-312:36|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["314:52-314:55|12|-1"]},{"usr":8837008289313014066,"detailed_name":"char __b15","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3747:19-3747:24|3747:14-3747:24|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3749:139-3749:144|12|-1"]},{"usr":8863055744734881088,"detailed_name":"int __i2","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"3885:40-3885:44|3885:36-3885:44|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3887:30-3887:34|12|-1"]},{"usr":8880623387982406722,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2588:23-2588:26|2588:15-2588:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2590:28-2590:31|12|-1"]},{"usr":8960402900978348608,"detailed_name":"int __count","qual_name_offset":4,"short_name_offset":4,"short_name_size":7,"hover":"","comments":"","spell":"3095:33-3095:40|3095:29-3095:40|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3097:57-3097:64|12|-1"]},{"usr":8964647283522084819,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"201:20-201:23|201:12-201:23|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["203:28-203:31|12|-1"]},{"usr":8979523261473914827,"detailed_name":"char __b8","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"3963:108-3963:112|3963:103-3963:112|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3965:71-3965:75|12|-1"]},{"usr":8987443468184152550,"detailed_name":"char __b","qual_name_offset":5,"short_name_offset":5,"short_name_size":3,"hover":"","comments":"","spell":"3842:20-3842:23|3842:15-3842:23|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3844:23-3844:26|12|-1","3844:28-3844:31|12|-1","3844:33-3844:36|12|-1","3844:38-3844:41|12|-1","3844:43-3844:46|12|-1","3844:48-3844:51|12|-1","3844:53-3844:56|12|-1","3844:58-3844:61|12|-1","3844:63-3844:66|12|-1","3844:68-3844:71|12|-1","3844:73-3844:76|12|-1","3844:78-3844:81|12|-1","3844:83-3844:86|12|-1","3844:88-3844:91|12|-1","3844:93-3844:96|12|-1","3844:98-3844:101|12|-1"]},{"usr":9102926420490051957,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3190:25-3190:28|3190:17-3190:28|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3192:28-3192:31|12|-1"]},{"usr":9180672187836495499,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3057:24-3057:27|3057:16-3057:27|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3059:52-3059:55|12|-1"]},{"usr":9222431793997683439,"detailed_name":"__m128d __c","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"__m128d __c = __builtin_ia32_sqrtsd((__v2df)__b)","comments":"","spell":"228:11-228:14|228:3-228:51|2|-1","type":17014917149991124568,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["229:36-229:39|4|-1"]},{"usr":9233036175465641337,"detailed_name":"int __count","qual_name_offset":4,"short_name_offset":4,"short_name_size":7,"hover":"","comments":"","spell":"2916:33-2916:40|2916:29-2916:40|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2918:48-2918:55|12|-1"]},{"usr":9275716704437210877,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3190:38-3190:41|3190:30-3190:41|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3192:43-3192:46|12|-1"]},{"usr":9324989524055311530,"detailed_name":"char __b9","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"3747:91-3747:95|3747:86-3747:95|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3749:98-3749:102|12|-1"]},{"usr":9328742071707179636,"detailed_name":"long long __q0","qual_name_offset":10,"short_name_offset":10,"short_name_size":4,"hover":"","comments":"","spell":"3609:42-3609:46|3609:32-3609:46|1026|-1","type":116,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3611:43-3611:47|12|-1"]},{"usr":9351830017045009278,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3315:25-3315:28|3315:17-3315:28|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3317:31-3317:34|12|-1"]},{"usr":9379017002111665682,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2306:35-2306:38|2306:27-2306:38|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2308:66-2308:69|12|-1"]},{"usr":9418834997706821897,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3412:25-3412:28|3412:17-3412:28|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3414:50-3414:53|12|-1"]},{"usr":9431959300098011896,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2552:22-2552:25|2552:14-2552:25|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2554:44-2554:47|12|-1"]},{"usr":9452032961641106790,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"709:22-709:25|709:14-709:25|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["711:50-711:53|12|-1"]},{"usr":9547774772660611456,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2552:35-2552:38|2552:27-2552:38|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2554:58-2554:61|12|-1"]},{"usr":9657390540129294179,"detailed_name":"char __b12","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3963:154-3963:159|3963:149-3963:159|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3965:44-3965:49|12|-1"]},{"usr":9665858063563241780,"detailed_name":"void *__p","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"4053:23-4053:26|4053:17-4053:26|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4058:27-4058:30|12|-1"]},{"usr":9695294454861581698,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3273:38-3273:41|3273:30-3273:41|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3275:42-3275:45|12|-1"]},{"usr":9714965268408006693,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2452:38-2452:41|2452:30-2452:41|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2454:65-2454:68|12|-1"]},{"usr":9731333846072765757,"detailed_name":"__m64 __q0","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"3631:33-3631:37|3631:27-3631:37|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3633:53-3633:57|12|-1"]},{"usr":9742633317525581272,"detailed_name":"int __i2","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"3659:29-3659:33|3659:25-3659:33|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3661:55-3661:59|12|-1"]},{"usr":9923069344371902680,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2743:23-2743:26|2743:15-2743:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2745:28-2745:31|12|-1"]},{"usr":10006891468156939404,"detailed_name":"int __count","qual_name_offset":4,"short_name_offset":4,"short_name_size":7,"hover":"","comments":"","spell":"2840:33-2840:40|2840:29-2840:40|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2842:57-2842:64|12|-1"]},{"usr":10012278849073562619,"detailed_name":"int __i0","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"3885:20-3885:24|3885:16-3885:24|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3887:42-3887:46|12|-1"]},{"usr":10039808366380103203,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3209:38-3209:41|3209:30-3209:41|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3211:43-3211:46|12|-1"]},{"usr":10066629920865001982,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1044:23-1044:26|1044:15-1044:26|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1046:42-1046:45|12|-1"]},{"usr":10074462059213995548,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4631:40-4631:43|4631:32-4631:43|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4633:66-4633:69|12|-1"]},{"usr":10082540036833364453,"detailed_name":"char __b1","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"3747:179-3747:183|3747:174-3747:183|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3749:50-3749:54|12|-1"]},{"usr":10139092528889599977,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"389:19-389:22|389:11-389:22|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["391:28-391:31|12|-1"]},{"usr":10226116098762548314,"detailed_name":"const __m128i_u *__p","qual_name_offset":17,"short_name_offset":17,"short_name_size":3,"hover":"","comments":"","spell":"3548:34-3548:37|3548:17-3548:37|1026|-1","type":2089679718632112875,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3553:40-3553:43|12|-1"]},{"usr":10300166495956668347,"detailed_name":"double _mm_loadh_pd(__m128d, const double *)::__mm_loadh_pd_struct::__u","qual_name_offset":7,"short_name_offset":68,"short_name_size":3,"hover":"","comments":"","spell":"1754:12-1754:15|1754:5-1754:15|2|-1","type":144,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1756:60-1756:63|12|-1"]},{"usr":10323129194673403181,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"891:36-891:39|891:28-891:39|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["893:64-893:67|12|-1"]},{"usr":10372192864684537076,"detailed_name":"char __b2","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"3963:42-3963:46|3963:37-3963:46|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3965:107-3965:111|12|-1"]},{"usr":10417292134851092084,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"181:20-181:23|181:12-181:23|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["183:3-183:6|4|-1","184:10-184:13|12|-1"]},{"usr":10493262887044636882,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1122:37-1122:40|1122:29-1122:40|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1124:56-1124:59|12|-1"]},{"usr":10496458246990920295,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"268:20-268:23|268:12-268:23|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["270:39-270:42|12|-1"]},{"usr":10627891372375860670,"detailed_name":"double __w","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1837:20-1837:23|1837:13-1837:23|1026|-1","type":144,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1839:35-1839:38|12|-1","1839:40-1839:43|12|-1"]},{"usr":10660763796453408828,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4525:27-4525:30|4525:19-4525:30|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4527:52-4527:55|12|-1"]},{"usr":10692355663619620242,"detailed_name":"long long _mm_storeu_si64(void *, __m128i)::__storeu_si64::__v","qual_name_offset":10,"short_name_offset":59,"short_name_size":3,"hover":"","comments":"","spell":"4035:15-4035:18|4035:5-4035:18|2|-1","type":116,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["4037:33-4037:36|20|-1"]},{"usr":10717972579800040350,"detailed_name":"_mm_shufflelo_epi16","qual_name_offset":0,"short_name_offset":0,"short_name_size":19,"hover":"#define _mm_shufflelo_epi16(a, imm) \\\n  (__m128i)__builtin_ia32_pshuflw((__v8hi)(__m128i)(a), (int)(imm))","comments":"","spell":"4462:9-4462:28|4462:9-4463:68|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":10729181878674475961,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"288:20-288:23|288:12-288:23|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["290:39-290:42|12|-1"]},{"usr":10739092667808699143,"detailed_name":"__m64 __a","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2179:20-2179:23|2179:14-2179:23|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2181:46-2181:49|12|-1"]},{"usr":10763342789242295192,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"734:35-734:38|734:27-734:38|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["736:63-736:66|12|-1"]},{"usr":10798708906249866532,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2472:25-2472:28|2472:17-2472:28|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2474:53-2474:56|12|-1"]},{"usr":10826005328778891033,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1044:36-1044:39|1044:28-1044:39|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1046:55-1046:58|12|-1"]},{"usr":10852562902943851478,"detailed_name":"double _mm_load1_pd(const double *)::__mm_load1_pd_struct::__u","qual_name_offset":7,"short_name_offset":59,"short_name_size":3,"hover":"","comments":"","spell":"1600:12-1600:15|1600:5-1600:15|2|-1","type":144,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1602:60-1602:63|12|-1"]},{"usr":10856478114181763933,"detailed_name":"short __w5","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"3699:45-3699:49|3699:39-3699:49|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3701:73-3701:77|12|-1"]},{"usr":10969939961360966585,"detailed_name":"int __a","qual_name_offset":4,"short_name_offset":4,"short_name_size":3,"hover":"","comments":"","spell":"4184:31-4184:34|4184:27-4184:34|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4186:30-4186:33|12|-1"]},{"usr":11013421055802077307,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2265:23-2265:26|2265:15-2265:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2267:54-2267:57|12|-1"]},{"usr":11096504111328596164,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4755:24-4755:27|4755:16-4755:27|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4757:42-4757:45|12|-1"]},{"usr":11116039573733371454,"detailed_name":"double *__p","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4146:23-4146:26|4146:15-4146:26|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4148:53-4148:56|12|-1"]},{"usr":11127335160413709933,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3015:23-3015:26|3015:15-3015:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3017:51-3017:54|12|-1"]},{"usr":11158838210191883992,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"75:20-75:23|75:12-75:23|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["77:28-77:31|12|-1"]},{"usr":11170208921203926597,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"181:33-181:36|181:25-181:36|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["183:13-183:16|4|-1"]},{"usr":11200855105726617646,"detailed_name":"char __b13","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3963:166-3963:171|3963:161-3963:171|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3965:37-3965:42|12|-1"]},{"usr":11218245824476217969,"detailed_name":"char __b11","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3963:142-3963:147|3963:137-3963:147|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3965:51-3965:56|12|-1"]},{"usr":11248828828086163458,"detailed_name":"char __b7","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"3963:97-3963:101|3963:92-3963:101|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3965:77-3965:81|12|-1"]},{"usr":11293793436170791515,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"684:35-684:38|684:27-684:38|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["686:63-686:66|12|-1"]},{"usr":11459684565266325148,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1491:25-1491:28|1491:17-1491:28|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1493:43-1493:46|12|-1"]},{"usr":11496543746586329445,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"509:35-509:38|509:27-509:38|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["511:50-511:53|12|-1"]},{"usr":11503631170372070319,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3315:38-3315:41|3315:30-3315:41|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3317:26-3317:29|12|-1"]},{"usr":11572002864742449493,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3095:24-3095:27|3095:16-3095:27|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3097:52-3097:55|12|-1"]},{"usr":11601260169160782393,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2685:37-2685:40|2685:29-2685:40|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2687:65-2687:68|12|-1"]},{"usr":11602336605342033266,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1992:37-1992:40|1992:29-1992:40|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1994:3-1994:6|20|-1","1994:41-1994:44|12|-1","1994:54-1994:57|12|-1","1995:22-1995:25|12|-1"]},{"usr":11670729327470802971,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1950:36-1950:39|1950:28-1950:39|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1955:47-1955:50|4|-1"]},{"usr":11707068748768426304,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1172:37-1172:40|1172:29-1172:40|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1174:56-1174:59|12|-1"]},{"usr":11883104223517136202,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4146:36-4146:39|4146:28-4146:39|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4148:39-4148:42|12|-1"]},{"usr":11901290446688203162,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3152:23-3152:26|3152:15-3152:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3154:42-3154:45|12|-1"]},{"usr":11912022397013417696,"detailed_name":"double __w","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1875:19-1875:22|1875:12-1875:22|1026|-1","type":144,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1877:40-1877:43|12|-1"]},{"usr":11971724051572504204,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2372:23-2372:26|2372:15-2372:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2374:52-2374:55|12|-1"]},{"usr":11978681079058529406,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2092:37-2092:40|2092:29-2092:40|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2097:48-2097:51|4|-1"]},{"usr":12005443798754429010,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2452:25-2452:28|2452:17-2452:28|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2454:52-2454:55|12|-1"]},{"usr":12008489762898756330,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1972:36-1972:39|1972:28-1972:39|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1974:21-1974:24|12|-1"]},{"usr":12034542089745806540,"detailed_name":"__m128i *__p","qual_name_offset":9,"short_name_offset":9,"short_name_size":3,"hover":"","comments":"","spell":"4165:27-4165:30|4165:18-4165:30|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4167:53-4167:56|12|-1"]},{"usr":12046994566165951648,"detailed_name":"_mm_slli_si128","qual_name_offset":0,"short_name_offset":0,"short_name_size":14,"hover":"#define _mm_slli_si128(a, imm) \\\n  (__m128i)__builtin_ia32_pslldqi128_byteshift((__v2di)(__m128i)(a), (int)(imm))","comments":"","spell":"2820:9-2820:23|2820:9-2821:81|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":12049904733363153001,"detailed_name":"double _mm_loadl_pd(__m128d, const double *)::__mm_loadl_pd_struct::__u","qual_name_offset":7,"short_name_offset":68,"short_name_size":3,"hover":"","comments":"","spell":"1781:12-1781:15|1781:5-1781:15|2|-1","type":144,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1783:60-1783:63|12|-1"]},{"usr":12091056925863094481,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4053:36-4053:39|4053:28-4053:39|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4058:48-4058:51|12|-1"]},{"usr":12095748366150210345,"detailed_name":"int __a","qual_name_offset":4,"short_name_offset":4,"short_name_size":3,"hover":"","comments":"","spell":"3461:23-3461:26|3461:19-3461:26|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3463:43-3463:46|12|-1"]},{"usr":12110694772432335608,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"446:35-446:38|446:27-446:38|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["448:63-448:66|12|-1"]},{"usr":12111805470599592100,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3294:24-3294:27|3294:16-3294:27|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3296:30-3296:33|12|-1"]},{"usr":12140277634088827908,"detailed_name":"__DEFAULT_FN_ATTRS","qual_name_offset":0,"short_name_offset":0,"short_name_size":18,"hover":"#define __DEFAULT_FN_ATTRS __attribute__((__always_inline__, __nodebug__, __target__(\"sse2\"), __min_vector_width__(128)))","comments":"","spell":"37:9-37:27|37:9-37:122|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":["55:27-55:45|64|-1","74:27-74:45|64|-1","97:27-97:45|64|-1","116:27-116:45|64|-1","138:27-138:45|64|-1","157:27-157:45|64|-1","180:27-180:45|64|-1","200:27-200:45|64|-1","225:27-225:45|64|-1","243:27-243:45|64|-1","267:27-267:45|64|-1","287:27-287:45|64|-1","311:27-311:45|64|-1","331:27-331:45|64|-1","349:27-349:45|64|-1","370:27-370:45|64|-1","388:27-388:45|64|-1","406:27-406:45|64|-1","425:27-425:45|64|-1","445:27-445:45|64|-1","466:27-466:45|64|-1","487:27-487:45|64|-1","508:27-508:45|64|-1","531:27-531:45|64|-1","555:27-555:45|64|-1","576:27-576:45|64|-1","597:27-597:45|64|-1","618:27-618:45|64|-1","639:27-639:45|64|-1","660:27-660:45|64|-1","683:27-683:45|64|-1","708:27-708:45|64|-1","733:27-733:45|64|-1","758:27-758:45|64|-1","784:27-784:45|64|-1","812:27-812:45|64|-1","840:27-840:45|64|-1","865:27-865:45|64|-1","890:27-890:45|64|-1","915:27-915:45|64|-1","940:27-940:45|64|-1","966:27-966:45|64|-1","991:23-991:41|64|-1","1017:23-1017:41|64|-1","1043:23-1043:41|64|-1","1069:23-1069:41|64|-1","1095:23-1095:41|64|-1","1121:23-1121:41|64|-1","1145:23-1145:41|64|-1","1171:23-1171:41|64|-1","1197:23-1197:41|64|-1","1223:23-1223:41|64|-1","1249:23-1249:41|64|-1","1275:23-1275:41|64|-1","1294:26-1294:44|64|-1","1314:27-1314:45|64|-1","1337:27-1337:45|64|-1","1357:27-1357:45|64|-1","1374:23-1374:41|64|-1","1399:26-1399:44|64|-1","1422:27-1422:45|64|-1","1448:27-1448:45|64|-1","1472:27-1472:45|64|-1","1490:23-1490:41|64|-1","1561:26-1561:44|64|-1","1578:27-1578:45|64|-1","1596:27-1596:45|64|-1","1622:27-1622:45|64|-1","1640:27-1640:45|64|-1","1660:27-1660:45|64|-1","1681:27-1681:45|64|-1","1702:27-1702:45|64|-1","1723:27-1723:45|64|-1","1750:27-1750:45|64|-1","1777:27-1777:45|64|-1","1798:27-1798:45|64|-1","1818:27-1818:45|64|-1","1836:27-1836:45|64|-1","1854:27-1854:45|64|-1","1874:27-1874:45|64|-1","1895:27-1895:45|64|-1","1910:27-1910:45|64|-1","1931:27-1931:45|64|-1","1949:24-1949:42|64|-1","1971:24-1971:42|64|-1","1991:24-1991:42|64|-1","2012:24-2012:42|64|-1","2030:24-2030:42|64|-1","2053:24-2053:42|64|-1","2071:24-2071:42|64|-1","2091:24-2091:42|64|-1","2116:27-2116:45|64|-1","2138:27-2138:45|64|-1","2160:27-2160:45|64|-1","2200:27-2200:45|64|-1","2221:27-2221:45|64|-1","2243:27-2243:45|64|-1","2264:27-2264:45|64|-1","2285:27-2285:45|64|-1","2305:27-2305:45|64|-1","2325:27-2325:45|64|-1","2351:27-2351:45|64|-1","2371:27-2371:45|64|-1","2391:27-2391:45|64|-1","2411:27-2411:45|64|-1","2431:27-2431:45|64|-1","2451:27-2451:45|64|-1","2471:27-2471:45|64|-1","2491:27-2491:45|64|-1","2529:27-2529:45|64|-1","2551:27-2551:45|64|-1","2569:27-2569:45|64|-1","2587:27-2587:45|64|-1","2605:27-2605:45|64|-1","2642:27-2642:45|64|-1","2663:27-2663:45|64|-1","2684:27-2684:45|64|-1","2704:27-2704:45|64|-1","2724:27-2724:45|64|-1","2742:27-2742:45|64|-1","2762:27-2762:45|64|-1","2779:27-2779:45|64|-1","2797:27-2797:45|64|-1","2839:27-2839:45|64|-1","2858:27-2858:45|64|-1","2877:27-2877:45|64|-1","2896:27-2896:45|64|-1","2915:27-2915:45|64|-1","2934:27-2934:45|64|-1","2954:27-2954:45|64|-1","2974:27-2974:45|64|-1","2994:27-2994:45|64|-1","3014:27-3014:45|64|-1","3056:27-3056:45|64|-1","3075:27-3075:45|64|-1","3094:27-3094:45|64|-1","3113:27-3113:45|64|-1","3132:27-3132:45|64|-1","3151:27-3151:45|64|-1","3170:27-3170:45|64|-1","3189:27-3189:45|64|-1","3208:27-3208:45|64|-1","3228:27-3228:45|64|-1","3251:27-3251:45|64|-1","3272:27-3272:45|64|-1","3293:27-3293:45|64|-1","3314:27-3314:45|64|-1","3335:27-3335:45|64|-1","3359:27-3359:45|64|-1","3377:29-3377:47|64|-1","3395:29-3395:47|64|-1","3411:26-3411:44|64|-1","3427:27-3427:45|64|-1","3444:27-3444:45|64|-1","3460:27-3460:45|64|-1","3477:27-3477:45|64|-1","3495:23-3495:41|64|-1","3514:29-3514:47|64|-1","3531:27-3531:45|64|-1","3547:27-3547:45|64|-1","3568:27-3568:45|64|-1","3586:27-3586:45|64|-1","3608:27-3608:45|64|-1","3630:27-3630:45|64|-1","3658:27-3658:45|64|-1","3698:27-3698:45|64|-1","3746:27-3746:45|64|-1","3765:27-3765:45|64|-1","3784:27-3784:45|64|-1","3803:27-3803:45|64|-1","3822:27-3822:45|64|-1","3841:27-3841:45|64|-1","3861:27-3861:45|64|-1","3884:27-3884:45|64|-1","3915:27-3915:45|64|-1","3962:27-3962:45|64|-1","3976:27-3976:45|64|-1","3994:24-3994:42|64|-1","4010:24-4010:42|64|-1","4031:24-4031:42|64|-1","4052:24-4052:42|64|-1","4073:24-4073:42|64|-1","4103:24-4103:42|64|-1","4122:24-4122:42|64|-1","4145:24-4145:42|64|-1","4164:24-4164:42|64|-1","4274:27-4274:45|64|-1","4302:27-4302:45|64|-1","4330:27-4330:45|64|-1","4398:23-4398:41|64|-1","4524:27-4524:45|64|-1","4551:27-4551:45|64|-1","4574:27-4574:45|64|-1","4595:27-4595:45|64|-1","4630:27-4630:45|64|-1","4658:27-4658:45|64|-1","4681:27-4681:45|64|-1","4702:27-4702:45|64|-1","4719:25-4719:43|64|-1","4736:27-4736:45|64|-1","4754:27-4754:45|64|-1","4775:27-4775:45|64|-1","4796:27-4796:45|64|-1","4815:23-4815:41|64|-1","4861:26-4861:44|64|-1","4878:27-4878:45|64|-1","4895:27-4895:45|64|-1","4912:27-4912:45|64|-1","4929:26-4929:44|64|-1","4946:27-4946:45|64|-1","4968:8-4968:26|64|-1"]},{"usr":12141188922793597015,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1122:24-1122:27|1122:16-1122:27|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1124:43-1124:46|12|-1"]},{"usr":12225207367168326890,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"759:35-759:38|759:27-759:38|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["761:48-761:51|12|-1"]},{"usr":12266915430094623234,"detailed_name":"_mm_shuffle_pd","qual_name_offset":0,"short_name_offset":0,"short_name_size":14,"hover":"#define _mm_shuffle_pd(a, b, i) \\\n  (__m128d)__builtin_ia32_shufpd((__v2df)(__m128d)(a), (__v2df)(__m128d)(b), \\\n                                 (int)(i))","comments":"","spell":"4846:9-4846:23|4846:9-4848:43|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":12462105961894676420,"detailed_name":"__m128i __d","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4104:29-4104:32|4104:21-4104:32|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4106:38-4106:41|12|-1"]},{"usr":12549072345338373522,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4575:28-4575:31|4575:20-4575:31|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4577:51-4577:54|12|-1"]},{"usr":12592652542270637942,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"841:38-841:41|841:30-841:41|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["843:66-843:69|12|-1"]},{"usr":12595350548102685845,"detailed_name":"long long _mm_loadl_epi64(const __m128i_u *)::__mm_loadl_epi64_struct::__u","qual_name_offset":10,"short_name_offset":71,"short_name_size":3,"hover":"","comments":"","spell":"3572:15-3572:18|3572:5-3572:18|2|-1","type":116,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["3574:82-3574:85|12|-1"]},{"usr":12600833717026688551,"detailed_name":"short __w2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"3699:81-3699:85|3699:75-3699:85|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3701:55-3701:59|12|-1"]},{"usr":12699351486235266169,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"734:22-734:25|734:14-734:25|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["736:50-736:53|12|-1"]},{"usr":12728184748406171578,"detailed_name":"char __b6","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"3747:124-3747:128|3747:119-3747:128|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3749:80-3749:84|12|-1"]},{"usr":12743277917358030681,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2995:24-2995:27|2995:16-2995:27|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2997:52-2997:55|12|-1"]},{"usr":12812121674693167064,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1528:25-1528:28|1528:17-1528:28|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1530:50-1530:53|12|-1"]},{"usr":12829069083968418614,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"598:36-598:39|598:28-598:39|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["600:64-600:67|12|-1"]},{"usr":12906278453798732883,"detailed_name":"double __w","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1855:20-1855:23|1855:13-1855:23|1026|-1","type":144,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1857:22-1857:25|12|-1"]},{"usr":12912838285571918873,"detailed_name":"_mm_load_pd1","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_load_pd1(dp)        _mm_load1_pd(dp)","comments":"","spell":"1606:16-1606:28|1606:16-1606:56|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":12955134000488509813,"detailed_name":"_MM_DENORMALS_ZERO_ON","qual_name_offset":0,"short_name_offset":0,"short_name_size":21,"hover":"#define _MM_DENORMALS_ZERO_ON   (0x0040U)","comments":"","spell":"4973:9-4973:30|4973:9-4973:42|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":13004896064472281532,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1018:36-1018:39|1018:28-1018:39|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1020:55-1020:58|12|-1"]},{"usr":13035924328457162780,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2392:35-2392:38|2392:27-2392:38|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2394:67-2394:70|12|-1"]},{"usr":13036252901686930434,"detailed_name":"char __b3","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"3747:157-3747:161|3747:152-3747:161|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3749:62-3749:66|12|-1"]},{"usr":13060314423441326087,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"407:33-407:36|407:25-407:36|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["409:42-409:45|12|-1"]},{"usr":13105097199816193901,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"117:33-117:36|117:25-117:36|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["119:42-119:45|12|-1"]},{"usr":13132237955743683706,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2606:23-2606:26|2606:15-2606:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2608:28-2608:31|12|-1"]},{"usr":13139481476427319158,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2975:23-2975:26|2975:15-2975:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2977:51-2977:54|12|-1"]},{"usr":13141172028104601007,"detailed_name":"int __i","qual_name_offset":4,"short_name_offset":4,"short_name_size":3,"hover":"","comments":"","spell":"3804:20-3804:23|3804:16-3804:23|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3806:24-3806:27|12|-1","3806:29-3806:32|12|-1","3806:34-3806:37|12|-1","3806:39-3806:42|12|-1"]},{"usr":13164281421641331746,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1751:22-1751:25|1751:14-1751:25|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1757:35-1757:38|4|-1"]},{"usr":13193933961912586861,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4331:26-4331:29|4331:18-4331:29|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4333:54-4333:57|12|-1"]},{"usr":13235686201154801259,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2286:24-2286:27|2286:16-2286:27|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2288:53-2288:56|12|-1"]},{"usr":13307482053037635346,"detailed_name":"char __b0","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"3963:20-3963:24|3963:15-3963:24|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3965:119-3965:123|12|-1"]},{"usr":13374384025942584986,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1096:36-1096:39|1096:28-1096:39|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1098:55-1098:58|12|-1"]},{"usr":13387702710928981470,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"4896:22-4896:25|4896:15-4896:25|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4898:19-4898:22|12|-1"]},{"usr":13429117926418959321,"detailed_name":"char __b2","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"3747:168-3747:172|3747:163-3747:172|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3749:56-3749:60|12|-1"]},{"usr":13449134610354015988,"detailed_name":"short __w1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"3699:93-3699:97|3699:87-3699:97|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3701:49-3701:53|12|-1"]},{"usr":13470639942690235151,"detailed_name":"short __w4","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"3916:70-3916:74|3916:64-3916:74|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3918:42-3918:46|12|-1"]},{"usr":13510379838894481580,"detailed_name":"char __b9","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"3963:119-3963:123|3963:114-3963:123|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3965:65-3965:69|12|-1"]},{"usr":13530833442412871952,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3252:25-3252:28|3252:17-3252:28|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3254:28-3254:31|12|-1"]},{"usr":13563677858558910729,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2244:37-2244:40|2244:29-2244:40|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2246:65-2246:68|12|-1"]},{"usr":13589193147140369330,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1400:34-1400:37|1400:26-1400:37|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1402:63-1402:66|12|-1"]},{"usr":13609447271593054781,"detailed_name":"char __b4","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"3747:146-3747:150|3747:141-3747:150|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3749:68-3749:72|12|-1"]},{"usr":13671018245906547409,"detailed_name":"__m128 __a","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1315:21-1315:24|1315:14-1315:24|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1318:39-1318:42|12|-1","1318:52-1318:55|12|-1"]},{"usr":13739702787412872809,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1146:37-1146:40|1146:29-1146:40|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1148:56-1148:59|12|-1"]},{"usr":13748329297568110187,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"98:33-98:36|98:25-98:36|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["100:13-100:16|4|-1"]},{"usr":13786650117543834056,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"866:23-866:26|866:15-866:26|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["868:51-868:54|12|-1"]},{"usr":13790110245572938694,"detailed_name":"__DEFAULT_FN_ATTRS_MMX","qual_name_offset":0,"short_name_offset":0,"short_name_size":22,"hover":"#define __DEFAULT_FN_ATTRS_MMX __attribute__((__always_inline__, __nodebug__, __target__(\"mmx,sse2\"), __min_vector_width__(64)))","comments":"","spell":"38:9-38:31|38:9-38:129|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":["1507:25-1507:47|64|-1","1527:25-1527:47|64|-1","1544:27-1544:49|64|-1","2178:25-2178:47|64|-1","2510:25-2510:47|64|-1","2624:25-2624:47|64|-1","4969:8-4969:30|64|-1"]},{"usr":13821055076821497536,"detailed_name":"double *__dp","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"2031:23-2031:27|2031:15-2031:27|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2036:25-2036:29|12|-1"]},{"usr":13824053014295056526,"detailed_name":"_mm_srli_si128","qual_name_offset":0,"short_name_offset":0,"short_name_size":14,"hover":"#define _mm_srli_si128(a, imm) \\\n  (__m128i)__builtin_ia32_psrldqi128_byteshift((__v2di)(__m128i)(a), (int)(imm))","comments":"","spell":"3037:9-3037:23|3037:9-3038:81|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":13836703005813254066,"detailed_name":"__m128i_u _mm_loadu_si128(const __m128i_u *)::__loadu_si128::__v","qual_name_offset":10,"short_name_offset":61,"short_name_size":3,"hover":"","comments":"","spell":"3551:15-3551:18|3551:5-3551:18|2|-1","type":2089679718632112875,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["3553:46-3553:49|12|-1"]},{"usr":13844180861481167105,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2780:22-2780:25|2780:14-2780:25|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2782:28-2782:31|12|-1"]},{"usr":13848858418977924665,"detailed_name":"_mm_shufflehi_epi16","qual_name_offset":0,"short_name_offset":0,"short_name_size":19,"hover":"#define _mm_shufflehi_epi16(a, imm) \\\n  (__m128i)__builtin_ia32_pshufhw((__v8hi)(__m128i)(a), (int)(imm))","comments":"","spell":"4492:9-4492:28|4492:9-4493:68|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":13865094330686036453,"detailed_name":"int _mm_storeu_si32(void *, __m128i)::__storeu_si32::__v","qual_name_offset":4,"short_name_offset":53,"short_name_size":3,"hover":"","comments":"","spell":"4056:9-4056:12|4056:5-4056:12|2|-1","type":114,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["4058:33-4058:36|20|-1"]},{"usr":13888652875884576987,"detailed_name":"_mm_bsrli_si128","qual_name_offset":0,"short_name_offset":0,"short_name_size":15,"hover":"#define _mm_bsrli_si128(a, imm) \\\n  (__m128i)__builtin_ia32_psrldqi128_byteshift((__v2di)(__m128i)(a), (int)(imm))","comments":"","spell":"3040:9-3040:24|3040:9-3041:81|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":13931760424286711462,"detailed_name":"long long __b","qual_name_offset":10,"short_name_offset":10,"short_name_size":3,"hover":"","comments":"","spell":"3360:39-3360:42|3360:29-3360:42|1026|-1","type":116,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3362:12-3362:15|12|-1"]},{"usr":13954459462598892696,"detailed_name":"short __w0","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"3916:22-3916:26|3916:16-3916:26|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3918:66-3918:70|12|-1"]},{"usr":13987977813239464405,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1224:37-1224:40|1224:29-1224:40|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1226:56-1226:59|12|-1"]},{"usr":14047343420476441699,"detailed_name":"double _mm_storel_pd(double *, __m128d)::__mm_storeh_pd_struct::__u","qual_name_offset":7,"short_name_offset":64,"short_name_size":3,"hover":"","comments":"","spell":"2095:12-2095:15|2095:5-2095:15|2|-1","type":144,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["2097:42-2097:45|20|-1"]},{"usr":14055079033783813424,"detailed_name":"__v4si __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"__v4si __b = (__v4si)__a","comments":"","spell":"3498:10-3498:13|3498:3-3498:27|2|-1","type":6694484644766561266,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["3499:10-3499:13|4|-1"]},{"usr":14184531378038640932,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2352:24-2352:27|2352:16-2352:27|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2354:53-2354:56|12|-1"]},{"usr":14249686987542653555,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1250:37-1250:40|1250:29-1250:40|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1252:56-1252:59|12|-1"]},{"usr":14272758502912461820,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"992:23-992:26|992:15-992:26|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["994:42-994:45|12|-1"]},{"usr":14277442146503130872,"detailed_name":"int __i1","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"3885:30-3885:34|3885:26-3885:34|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3887:36-3887:40|12|-1"]},{"usr":14281782889781928880,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3995:39-3995:42|3995:31-3995:42|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3997:10-3997:13|12|-1"]},{"usr":14335889992907131608,"detailed_name":"long long __a","qual_name_offset":10,"short_name_offset":10,"short_name_size":3,"hover":"","comments":"","spell":"3478:29-3478:32|3478:19-3478:32|1026|-1","type":116,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3480:43-3480:46|12|-1"]},{"usr":14390266928025429183,"detailed_name":"double *__dp","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"1992:23-1992:27|1992:15-1992:27|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1995:16-1995:20|12|-1"]},{"usr":14419466626387955637,"detailed_name":"const double *__dp","qual_name_offset":14,"short_name_offset":14,"short_name_size":4,"hover":"","comments":"","spell":"1778:41-1778:45|1778:27-1778:45|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1783:53-1783:57|12|-1"]},{"usr":14445847640855777977,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4303:38-4303:41|4303:30-4303:41|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4305:67-4305:70|12|-1"]},{"usr":14447895861057614247,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1198:24-1198:27|1198:16-1198:27|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1200:43-1200:46|12|-1"]},{"usr":14456344748167693415,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"891:23-891:26|891:15-891:26|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["893:51-893:54|12|-1"]},{"usr":14457131227364671237,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4682:28-4682:31|4682:20-4682:31|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4684:51-4684:54|12|-1"]},{"usr":14518021332831935215,"detailed_name":"int __i1","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"3659:39-3659:43|3659:35-3659:43|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3661:49-3661:53|12|-1"]},{"usr":14603404917264090197,"detailed_name":"double __x","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1875:31-1875:34|1875:24-1875:34|1026|-1","type":144,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1877:35-1877:38|12|-1"]},{"usr":14616435735031606876,"detailed_name":"char __b0","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"3747:190-3747:194|3747:185-3747:194|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3749:44-3749:48|12|-1"]},{"usr":14654337790304420763,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"244:21-244:24|244:13-244:24|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["246:40-246:43|12|-1"]},{"usr":14659948959435824382,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"426:35-426:38|426:27-426:38|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["428:63-428:66|12|-1"]},{"usr":14661779939755040756,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4631:27-4631:30|4631:19-4631:30|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4633:52-4633:55|12|-1"]},{"usr":14684449055491180692,"detailed_name":"short __w7","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"3916:106-3916:110|3916:100-3916:110|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3918:24-3918:28|12|-1"]},{"usr":14704322817842006941,"detailed_name":"const double *__dp","qual_name_offset":14,"short_name_offset":14,"short_name_size":4,"hover":"","comments":"","spell":"1751:41-1751:45|1751:27-1751:45|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1756:53-1756:57|12|-1"]},{"usr":14777400602061496284,"detailed_name":"int __u","qual_name_offset":4,"short_name_offset":4,"short_name_size":3,"hover":"int __u = ((const struct __loadu_si32*)__a)->__v","comments":"","spell":"1687:7-1687:10|1687:3-1687:51|2|-1","type":114,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["1688:42-1688:45|12|-1"]},{"usr":14786842321547977464,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3294:37-3294:40|3294:29-3294:40|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3296:25-3296:28|12|-1"]},{"usr":14850879641106055923,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2432:22-2432:25|2432:14-2432:25|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2434:53-2434:56|12|-1"]},{"usr":14863751027146364360,"detailed_name":"int __i0","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"3659:49-3659:53|3659:45-3659:53|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3661:43-3661:47|12|-1"]},{"usr":14909314473083230145,"detailed_name":"_mm_bslli_si128","qual_name_offset":0,"short_name_offset":0,"short_name_size":15,"hover":"#define _mm_bslli_si128(a, imm) \\\n  (__m128i)__builtin_ia32_pslldqi128_byteshift((__v2di)(__m128i)(a), (int)(imm))","comments":"","spell":"2823:9-2823:24|2823:9-2824:81|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":14910050159815400222,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"268:33-268:36|268:25-268:36|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["270:52-270:55|12|-1"]},{"usr":14921299840775913464,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3396:25-3396:28|3396:17-3396:28|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3398:45-3398:48|12|-1"]},{"usr":14933777975930047226,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1778:22-1778:25|1778:14-1778:25|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1784:40-1784:43|4|-1"]},{"usr":14947690320679648769,"detailed_name":"short _mm_loadu_si16(const void *)::__loadu_si16::__v","qual_name_offset":6,"short_name_offset":50,"short_name_size":3,"hover":"","comments":"","spell":"1706:11-1706:14|1706:5-1706:14|2|-1","type":113,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1708:50-1708:53|12|-1"]},{"usr":15009025190600524273,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2798:23-2798:26|2798:15-2798:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2800:28-2800:31|12|-1"]},{"usr":15049536728116799174,"detailed_name":"short __w","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"3823:22-3823:25|3823:16-3823:25|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3825:24-3825:27|12|-1","3825:29-3825:32|12|-1","3825:34-3825:37|12|-1","3825:39-3825:42|12|-1","3825:44-3825:47|12|-1","3825:49-3825:52|12|-1","3825:54-3825:57|12|-1","3825:59-3825:62|12|-1"]},{"usr":15051551350146023226,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3171:37-3171:40|3171:29-3171:40|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3173:45-3173:48|12|-1"]},{"usr":15077688228061799495,"detailed_name":"long long _mm_storel_epi64(__m128i_u *, __m128i)::__mm_storel_epi64_struct::__u","qual_name_offset":10,"short_name_offset":76,"short_name_size":3,"hover":"","comments":"","spell":"4126:15-4126:18|4126:5-4126:18|2|-1","type":116,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["4128:44-4128:47|20|-1"]},{"usr":15157148578379384287,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"661:23-661:26|661:15-661:26|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["663:64-663:67|12|-1"]},{"usr":15166341613308837009,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1276:25-1276:28|1276:17-1276:28|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1278:44-1278:47|12|-1"]},{"usr":15171430964338901221,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"916:36-916:39|916:28-916:39|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["918:64-918:67|12|-1"]},{"usr":15186873892107211804,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"226:21-226:24|226:13-226:24|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["229:44-229:47|4|-1"]},{"usr":15188762011087014606,"detailed_name":"__m128i __count","qual_name_offset":8,"short_name_offset":8,"short_name_size":7,"hover":"","comments":"","spell":"2975:36-2975:43|2975:28-2975:43|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2977:64-2977:71|12|-1"]},{"usr":15212870164311177634,"detailed_name":"char __b6","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"3963:86-3963:90|3963:81-3963:90|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3965:83-3965:87|12|-1"]},{"usr":15247908239749684837,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"332:20-332:23|332:12-332:23|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["334:39-334:42|12|-1"]},{"usr":15301278627795504239,"detailed_name":"double __u","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"double __u = ((const struct __mm_load1_pd_struct*)__dp)->__u","comments":"","spell":"1602:10-1602:13|1602:3-1602:63|2|-1","type":144,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["1603:35-1603:38|12|-1","1603:40-1603:43|12|-1"]},{"usr":15328837336364559042,"detailed_name":"__m128d __c","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"__m128d __c = __builtin_ia32_cmpnlesd((__v2df)__b, (__v2df)__a)","comments":"","spell":"969:11-969:14|969:3-969:66|2|-1","type":17014917149991124568,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["970:36-970:39|4|-1"]},{"usr":15386676184484276909,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4552:41-4552:44|4552:33-4552:44|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4554:64-4554:67|12|-1"]},{"usr":15435655724498920497,"detailed_name":"short __w1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"3916:34-3916:38|3916:28-3916:38|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3918:60-3918:64|12|-1"]},{"usr":15536512281863701117,"detailed_name":"char __b7","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"3747:113-3747:117|3747:108-3747:117|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3749:86-3749:90|12|-1"]},{"usr":15541587868483168324,"detailed_name":"_MM_GET_DENORMALS_ZERO_MODE","qual_name_offset":0,"short_name_offset":0,"short_name_size":27,"hover":"#define _MM_GET_DENORMALS_ZERO_MODE() (_mm_getcsr() & _MM_DENORMALS_ZERO_MASK)","comments":"","spell":"4978:9-4978:36|4978:9-4978:79|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":15564957288426733437,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1932:21-1932:24|1932:13-1932:24|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1934:3-1934:6|4|-1","1935:10-1935:13|12|-1"]},{"usr":15583105396256363073,"detailed_name":"const void *__a","qual_name_offset":12,"short_name_offset":12,"short_name_size":3,"hover":"","comments":"","spell":"1682:28-1682:31|1682:16-1682:31|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1687:42-1687:45|12|-1"]},{"usr":15647208035159297926,"detailed_name":"double _mm_storeh_pd(double *, __m128d)::__mm_storeh_pd_struct::__u","qual_name_offset":7,"short_name_offset":64,"short_name_size":3,"hover":"","comments":"","spell":"2075:12-2075:15|2075:5-2075:15|2|-1","type":144,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["2077:42-2077:45|20|-1"]},{"usr":15726569806227293846,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"288:33-288:36|288:25-288:36|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["290:52-290:55|12|-1"]},{"usr":15737085470787564704,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"158:33-158:36|158:25-158:36|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["160:42-160:45|12|-1"]},{"usr":15943096958903281351,"detailed_name":"const void *__a","qual_name_offset":12,"short_name_offset":12,"short_name_size":3,"hover":"","comments":"","spell":"1661:28-1661:31|1661:16-1661:31|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1666:48-1666:51|12|-1"]},{"usr":15965517045050235026,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2725:37-2725:40|2725:29-2725:40|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2727:66-2727:69|12|-1"]},{"usr":16003321459981447816,"detailed_name":"const double *__dp","qual_name_offset":14,"short_name_offset":14,"short_name_size":4,"hover":"","comments":"","spell":"1623:28-1623:32|1623:14-1623:32|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1625:34-1625:38|12|-1"]},{"usr":16014199390334433957,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"426:22-426:25|426:14-426:25|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["428:50-428:53|12|-1"]},{"usr":16047161413149420836,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1070:23-1070:26|1070:15-1070:26|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1072:42-1072:45|12|-1"]},{"usr":16106501886151141933,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1146:24-1146:27|1146:16-1146:27|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1148:43-1148:46|12|-1"]},{"usr":16116183755175412542,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2201:36-2201:39|2201:28-2201:39|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2203:42-2203:45|12|-1"]},{"usr":16172328008153112692,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3209:25-3209:28|3209:17-3209:28|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3211:28-3211:31|12|-1"]},{"usr":16187218155024176063,"detailed_name":"char __b10","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3963:130-3963:135|3963:125-3963:135|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3965:58-3965:63|12|-1"]},{"usr":16309111289487595437,"detailed_name":"const __m128i *__p","qual_name_offset":15,"short_name_offset":15,"short_name_size":3,"hover":"","comments":"","spell":"3532:31-3532:34|3532:16-3532:34|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3534:11-3534:14|12|-1"]},{"usr":16346783200944373752,"detailed_name":"double __u","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"double __u = ((const struct __mm_loadl_pd_struct*)__dp)->__u","comments":"","spell":"1783:10-1783:13|1783:3-1783:63|2|-1","type":144,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["1784:35-1784:38|12|-1"]},{"usr":16379466414138492957,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2685:24-2685:27|2685:16-2685:27|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2687:52-2687:55|12|-1"]},{"usr":16402046766672569656,"detailed_name":"__m128 __b","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"1449:34-1449:37|1449:27-1449:37|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1451:12-1451:15|4|-1"]},{"usr":16435228425654556444,"detailed_name":"__m128d __u","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"__m128d __u = *(const __m128d*)__dp","comments":"","spell":"1625:11-1625:14|1625:3-1625:38|2|-1","type":17014917149991124568,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["1626:42-1626:45|12|-1","1626:55-1626:58|12|-1"]},{"usr":16465423108944585516,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4720:27-4720:30|4720:19-4720:30|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4722:17-4722:20|4|-1"]},{"usr":16470036136927638767,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4930:26-4930:29|4930:18-4930:29|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4932:18-4932:21|12|-1"]},{"usr":16520353197011506223,"detailed_name":"char __b10","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3747:79-3747:84|3747:74-3747:84|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3749:104-3749:109|12|-1"]},{"usr":16575813373815979096,"detailed_name":"int __i3","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"3659:19-3659:23|3659:15-3659:23|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3661:61-3661:65|12|-1"]},{"usr":16661593619352623510,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4596:41-4596:44|4596:33-4596:44|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4598:64-4598:67|12|-1"]},{"usr":16687650369725227099,"detailed_name":"short __w5","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"3916:82-3916:86|3916:76-3916:86|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3918:36-3918:40|12|-1"]},{"usr":16730907211643678095,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3378:24-3378:27|3378:16-3378:27|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3380:44-3380:47|12|-1"]},{"usr":16748569119767750564,"detailed_name":"char *__p","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"4104:53-4104:56|4104:47-4104:56|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4106:57-4106:60|12|-1"]},{"usr":16763902426758301668,"detailed_name":"__m128d __c","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"__m128d __c = __builtin_ia32_cmplesd((__v2df)__b, (__v2df)__a)","comments":"","spell":"787:11-787:14|787:3-787:65|2|-1","type":17014917149991124568,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["788:36-788:39|4|-1"]},{"usr":16781172437638451981,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3229:24-3229:27|3229:16-3229:27|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3233:29-3233:32|12|-1"]},{"usr":16786298577346112947,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2161:36-2161:39|2161:28-2161:39|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2163:42-2163:45|12|-1"]},{"usr":16836654226396692847,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1070:36-1070:39|1070:28-1070:39|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1072:55-1072:58|12|-1"]},{"usr":16875035330070849447,"detailed_name":"double *__dp","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"2092:23-2092:27|2092:15-2092:27|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2097:35-2097:39|12|-1"]},{"usr":16895001582102591526,"detailed_name":"__EMMINTRIN_H","qual_name_offset":0,"short_name_offset":0,"short_name_size":13,"hover":"#define __EMMINTRIN_H","comments":"","spell":"11:9-11:22|11:9-11:22|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":16906235934298331884,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3114:23-3114:26|3114:15-3114:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3116:51-3116:54|12|-1"]},{"usr":16931283006952235462,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4275:38-4275:41|4275:30-4275:41|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4277:67-4277:70|12|-1"]},{"usr":17032906184880485182,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2897:23-2897:26|2897:15-2897:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2899:51-2899:54|12|-1"]},{"usr":17098463736399866675,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"467:35-467:38|467:27-467:38|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["469:63-469:66|12|-1"]},{"usr":17102246620031539774,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"389:32-389:35|389:24-389:35|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["391:42-391:45|12|-1"]},{"usr":17147353261507556591,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4703:28-4703:31|4703:20-4703:31|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4705:51-4705:54|12|-1"]},{"usr":17165086629956910770,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"841:25-841:28|841:17-841:28|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["843:53-843:56|12|-1"]},{"usr":17171705026075922487,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2139:36-2139:39|2139:28-2139:39|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2141:42-2141:45|12|-1"]},{"usr":17203924195817317053,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"332:33-332:36|332:25-332:36|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["334:52-334:55|12|-1"]},{"usr":17209553376254517008,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"941:36-941:39|941:28-941:39|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["943:49-943:52|12|-1"]},{"usr":17267431398478311787,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1172:24-1172:27|1172:16-1172:27|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1174:43-1174:46|12|-1"]},{"usr":17313823592857572339,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"577:23-577:26|577:15-577:26|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["579:51-579:54|12|-1"]},{"usr":17344538789948785179,"detailed_name":"int __count","qual_name_offset":4,"short_name_offset":4,"short_name_size":7,"hover":"","comments":"","spell":"3057:33-3057:40|3057:29-3057:40|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3059:57-3059:64|12|-1"]},{"usr":17369439073678641157,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"56:20-56:23|56:12-56:23|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["58:3-58:6|4|-1","59:10-59:13|12|-1"]},{"usr":17528167612915032104,"detailed_name":"char __b12","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"3747:55-3747:60|3747:50-3747:60|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3749:118-3749:123|12|-1"]},{"usr":17648628844213633479,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2286:37-2286:40|2286:29-2286:40|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2288:66-2288:69|12|-1"]},{"usr":17661270265080848945,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2530:36-2530:39|2530:28-2530:39|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2532:57-2532:60|12|-1"]},{"usr":17675855320274796223,"detailed_name":"__m128i_u *__p","qual_name_offset":11,"short_name_offset":11,"short_name_size":3,"hover":"","comments":"","spell":"4011:29-4011:32|4011:18-4011:32|1026|-1","type":2089679718632112875,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4016:28-4016:31|12|-1"]},{"usr":17706216899702746774,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2432:35-2432:38|2432:27-2432:38|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2434:67-2434:70|12|-1"]},{"usr":17743597510188868915,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"488:35-488:38|488:27-488:38|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["490:50-490:53|12|-1"]},{"usr":17855345865793934028,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2859:23-2859:26|2859:15-2859:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2861:51-2861:54|12|-1"]},{"usr":17874693569649251676,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1096:23-1096:26|1096:15-1096:26|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1098:42-1098:45|12|-1"]},{"usr":17878407855412226609,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2780:35-2780:38|2780:27-2780:38|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2782:42-2782:45|12|-1"]},{"usr":17911340828826999055,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4011:42-4011:45|4011:34-4011:45|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4016:40-4016:43|12|-1"]},{"usr":17917755008136121809,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2054:37-2054:40|2054:29-2054:40|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2056:3-2056:6|20|-1","2056:41-2056:44|12|-1","2056:54-2056:57|12|-1","2057:22-2057:25|12|-1"]},{"usr":17930848158980471983,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"785:35-785:38|785:27-785:38|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["787:48-787:51|12|-1"]},{"usr":17932531566151009726,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2705:36-2705:39|2705:28-2705:39|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2707:68-2707:71|12|-1"]},{"usr":17996051075144451962,"detailed_name":"__m64 __b","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2179:31-2179:34|2179:25-2179:34|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2181:59-2181:62|12|-1"]},{"usr":18010257750967170449,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4275:25-4275:28|4275:17-4275:28|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4277:54-4277:57|12|-1"]},{"usr":18018449287539539936,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4797:38-4797:41|4797:30-4797:41|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4799:55-4799:58|12|-1"]},{"usr":18083793014288700363,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2935:23-2935:26|2935:15-2935:26|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2937:42-2937:45|12|-1"]},{"usr":18099590296901311517,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"407:20-407:23|407:12-407:23|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["409:28-409:31|12|-1"]},{"usr":18133436629670893138,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"556:38-556:41|556:30-556:41|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["558:66-558:69|12|-1"]},{"usr":18155961106364482395,"detailed_name":"char __b5","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"3747:135-3747:139|3747:130-3747:139|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3749:74-3749:78|12|-1"]},{"usr":18266822295712864148,"detailed_name":"__m128i __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"3133:24-3133:27|3133:16-3133:27|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["3135:43-3135:46|12|-1"]},{"usr":18270670794250836312,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"640:36-640:39|640:28-640:39|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["642:51-642:54|12|-1"]},{"usr":18316946586294908322,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"785:22-785:25|785:14-785:25|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["787:61-787:64|12|-1","788:44-788:47|4|-1"]},{"usr":18331149656684226032,"detailed_name":"__m128i __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"4074:36-4074:39|4074:28-4074:39|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["4079:48-4079:51|12|-1"]},{"usr":18371363303616317054,"detailed_name":"__m128d __a","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"598:23-598:26|598:15-598:26|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["600:51-600:54|12|-1"]},{"usr":18404060734251275636,"detailed_name":"__m128d __b","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"532:36-532:39|532:28-532:39|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["534:64-534:67|12|-1"]},{"usr":18434911739562623980,"detailed_name":"double _mm_load_sd(const double *)::__mm_load_sd_struct::__u","qual_name_offset":7,"short_name_offset":57,"short_name_size":3,"hover":"","comments":"","spell":"1727:12-1727:15|1727:5-1727:15|2|-1","type":144,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1729:59-1729:62|12|-1"]}]}