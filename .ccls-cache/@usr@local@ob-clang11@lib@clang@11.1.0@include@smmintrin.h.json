21
{"md5":"dde1073b90fcdddf514ff14bf7b0a39b","language":0,"no_linkage":true,"lid2path":[],"import_file":"[GIT_TOP_DIR]/src/impl/FhtKacRotator.cpp","args":["clang","[GIT_TOP_DIR]/src/impl/FhtKacRotator.cpp","-working-directory=[GIT_TOP_DIR]/"],"dependencies":{"/usr/include/c++/10/bits/stl_numeric.h":"ignore_header_sys","/usr/include/ctype.h":"ignore_header_sys","/usr/include/bits/types/__mbstate_t.h":"ignore_header_sys","/usr/include/features.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/immintrin.h":"774d8f5fec0961c7f69eaa3c69870fd7","/usr/include/math.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_algobase.h":"ignore_header_sys","/usr/include/bits/byteswap.h":"ignore_header_sys","/usr/include/c++/10/vector":"ignore_header_sys","/usr/include/c++/10/bits/iterator_concepts.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avxintrin.h":"772d5fd2b95bf581b4338458db989424","/usr/include/string.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlintrin.h":"cd26383f2f06392556848bfb374034c1","/usr/local/ob-clang11/lib/clang/11.1.0/include/vaesintrin.h":"230da0a10bfb803dd07d1d4859b589b9","/usr/include/bits/types/struct_FILE.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vbmivlintrin.h":"7a23233bba4c34e5185e02ea4208670c","/usr/include/bits/types/cookie_io_functions_t.h":"ignore_header_sys","/usr/include/bits/fp-logb.h":"ignore_header_sys","/usr/include/sys/cdefs.h":"ignore_header_sys","/usr/include/bits/types/__fpos_t.h":"ignore_header_sys","/usr/include/bits/types/timer_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512bf16intrin.h":"4f5ef6213a91abea3f5d53232215497c","/usr/include/c++/10/bits/locale_classes.h":"ignore_header_sys","/usr/include/c++/10/bits/streambuf.tcc":"ignore_header_sys","/usr/include/c++/10/bits/basic_ios.tcc":"ignore_header_sys","/usr/include/bits/types/mbstate_t.h":"ignore_header_sys","/usr/include/c++/10/bits/locale_facets.h":"ignore_header_sys","/usr/include/bits/sched.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/xmmintrin.h":"04b4174745d9f46d48080aefb7d04c2c","/usr/include/bits/types/wint_t.h":"ignore_header_sys","/usr/include/c++/10/bits/charconv.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_pair.h":"ignore_header_sys","/usr/include/c++/10/bits/char_traits.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/vpclmulqdqintrin.h":"a0ef53b1374f1ff070c815a7572221fa","/usr/include/time.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/wmmintrin.h":"420e06fc7b100109fe408d8cf15dfbbc","/usr/include/c++/10/bits/stl_bvector.h":"ignore_header_sys","/usr/include/c++/10/istream":"ignore_header_sys","/usr/include/bits/types/__sigset_t.h":"ignore_header_sys","/usr/include/c++/10/bits/allocator.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/emmintrin.h":"15ee96a71ec1a4288c0b5ffdad114450","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsavesintrin.h":"dfeb07884315d36739e4aa9dfd1d72ed","/usr/include/sys/types.h":"ignore_header_sys","/usr/include/c++/10/ios":"ignore_header_sys","/usr/include/c++/10/bits/uniform_int_dist.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/lzcntintrin.h":"070db0e5ecc75a113daa65f1a9a569a5","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vpopcntdqintrin.h":"748799b7fb86515d202460f78d94a3c3","/usr/include/bits/time64.h":"ignore_header_sys","/usr/include/bits/uintn-identity.h":"ignore_header_sys","/usr/include/c++/10/bits/cpp_type_traits.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vbmi2intrin.h":"d2eaacea81a5a13e0f771f69d62529ec","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512erintrin.h":"d8a0db1358f0c4f5db208e20fece727d","/usr/include/c++/10/bits/move.h":"ignore_header_sys","/usr/include/c++/10/cstdint":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/c++config.h":"ignore_header_sys","/usr/include/bits/endian.h":"ignore_header_sys","/usr/include/bits/types/__locale_t.h":"ignore_header_sys","/usr/include/bits/fp-fast.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512bitalgintrin.h":"065b5f6c02ddf57ee43a304b33d301c4","/usr/include/bits/wordsize.h":"ignore_header_sys","/usr/include/stdio.h":"ignore_header_sys","/usr/include/c++/10/bits/istream.tcc":"ignore_header_sys","/usr/include/bits/setjmp.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512fintrin.h":"4ce3a9eff70ef9558590a27aa986fc0e","/usr/include/gnu/stubs-64.h":"ignore_header_sys","/usr/include/asm/errno.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/enqcmdintrin.h":"6d8136c8969e9c723c195c33da2bb768","/usr/include/c++/10/ext/type_traits.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512bwintrin.h":"64c1b4a5d84a0126158179cc8904e8bd","/usr/include/bits/types.h":"ignore_header_sys","/usr/include/c++/10/string":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vnniintrin.h":"7cd1a414c4acf95129406d966bc736b5","/usr/include/c++/10/x86_64-redhat-linux/bits/os_defines.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/__wmmintrin_aes.h":"b7829f7e5a4221574897b8e365715ced","/usr/include/c++/10/numeric":"ignore_header_sys","/usr/include/c++/10/type_traits":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/stdint.h":"d6abd57f44fe5f48dbfb05fd9adc130a","/usr/include/c++/10/x86_64-redhat-linux/bits/ctype_inline.h":"ignore_header_sys","/usr/include/c++/10/new":"ignore_header_sys","/usr/include/bits/iscanonical.h":"ignore_header_sys","/usr/include/c++/10/bits/memoryfwd.h":"ignore_header_sys","/usr/include/asm-generic/errno-base.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/__stddef_max_align_t.h":"48e8e2456f77e6cda35d245130fa7259","/usr/local/ob-clang11/lib/clang/11.1.0/include/gfniintrin.h":"e0e20e8bab44c33118878b2889b2f2c8","/usr/include/c++/10/ext/new_allocator.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512ifmaintrin.h":"f52649bdc1dc467b7eadc3e1a810a0e2","/usr/include/c++/10/bits/functexcept.h":"ignore_header_sys","/usr/include/c++/10/bits/functional_hash.h":"ignore_header_sys","/usr/include/bits/endianness.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/popcntintrin.h":"7c3573a43b1c0704aac4cb098811cbb1","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512cdintrin.h":"650ead4d3b72acc353b9327d5ae2a07e","/usr/include/c++/10/bits/random.tcc":"ignore_header_sys","/usr/include/c++/10/debug/assertions.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_iterator_base_funcs.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsavecintrin.h":"8d492bf7b081416e797300c239dba796","/usr/include/c++/10/bits/stl_vector.h":"ignore_header_sys","/usr/include/c++/10/bits/basic_string.tcc":"ignore_header_sys","/usr/include/stdint.h":"ignore_header_sys","/usr/include/bits/types/__fpos64_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/rtmintrin.h":"591e544f8d70825a4bbf807dd287584a","/usr/include/c++/10/iosfwd":"ignore_header_sys","/usr/include/c++/10/cstdlib":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vpopcntdqvlintrin.h":"6af0e4f4c55f44ba40bac27558c51b3c","/usr/include/c++/10/cstring":"ignore_header_sys","/usr/include/bits/struct_rwlock.h":"ignore_header_sys","/usr/include/c++/10/bits/range_access.h":"ignore_header_sys","/usr/include/bits/libc-header-start.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/c++locale.h":"ignore_header_sys","/usr/include/c++/10/bits/vector.tcc":"ignore_header_sys","/usr/include/bits/cpu-set.h":"ignore_header_sys","/usr/include/bits/pthreadtypes-arch.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/ctype_base.h":"ignore_header_sys","/usr/include/c++/10/bits/cxxabi_init_exception.h":"ignore_header_sys","/usr/include/c++/10/bits/concept_check.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/gthr.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_iterator.h":"ignore_header_sys","/usr/include/bits/timex.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/waitpkgintrin.h":"2d1c4c5484fb9ec3a2f974b84ccead3c","/usr/include/bits/errno.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/shaintrin.h":"dd1634de945b1ffc8c6b7f39fa8a60c8","/usr/include/bits/select.h":"ignore_header_sys","/usr/include/wctype.h":"ignore_header_sys","/usr/include/bits/mathcalls.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vbmiintrin.h":"54a67d8ab20b9961e36a3fe16b875d4b","[GIT_TOP_DIR]/src/impl/FhtKacRotator.h":"f2f44cb0ba5dc218fc37736f2bab2192","/usr/local/ob-clang11/lib/clang/11.1.0/include/cetintrin.h":"30568779db4d995828cfd0dc8ab749f3","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx2intrin.h":"b787b869cf3250697b509a53b8f84261","/usr/local/ob-clang11/lib/clang/11.1.0/include/rdseedintrin.h":"d5c4d6f9ca83aa6d76891aa467a9c442","/usr/include/bits/waitflags.h":"ignore_header_sys","/usr/include/stdc-predef.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_construct.h":"ignore_header_sys","/usr/include/bits/waitstatus.h":"ignore_header_sys","/usr/include/c++/10/bits/ostream_insert.h":"ignore_header_sys","/usr/include/c++/10/bits/exception.h":"ignore_header_sys","/usr/include/linux/errno.h":"ignore_header_sys","/usr/include/bits/flt-eval-method.h":"ignore_header_sys","/usr/include/c++/10/bits/basic_string.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/amxintrin.h":"df04c665cb8533b77392c57a15d0c13e","/usr/local/ob-clang11/lib/clang/11.1.0/include/stddef.h":"2499dd2361b915724b073282bea3a7bc","/usr/local/ob-clang11/lib/clang/11.1.0/include/xtestintrin.h":"ddbb320bafef81c16f4db301b5d692b4","/usr/include/c++/10/ext/alloc_traits.h":"ignore_header_sys","/usr/include/sched.h":"ignore_header_sys","/usr/include/bits/pthreadtypes.h":"ignore_header_sys","/usr/include/c++/10/bits/random.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512pfintrin.h":"4f558d52a120f2dbc17724370f698f70","/usr/local/ob-clang11/lib/clang/11.1.0/include/sgxintrin.h":"1d380dfee68686a7fa21e5c5888eaf05","/usr/local/ob-clang11/lib/clang/11.1.0/include/fxsrintrin.h":"2288062b986bd0a526c32df2bd2e2c7b","/usr/local/ob-clang11/lib/clang/11.1.0/include/mm_malloc.h":"ed68cf68a5b4db09df709fc93a5e9b12","/usr/local/ob-clang11/lib/clang/11.1.0/include/fmaintrin.h":"e5555b944d57763068cff3823905dcda","/usr/include/bits/mathcalls-narrow.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/bmiintrin.h":"30db6d08581335daa785b893e982ec21","/usr/include/bits/floatn-common.h":"ignore_header_sys","/usr/include/asm-generic/errno.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/gthr-default.h":"ignore_header_sys","/usr/include/c++/10/concepts":"ignore_header_sys","/usr/include/bits/wctype-wchar.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512dqintrin.h":"0a5f59d3a1b4c24596a35fc4d831362d","/usr/include/bits/timesize.h":"ignore_header_sys","/usr/include/bits/types/clock_t.h":"ignore_header_sys","/usr/include/bits/types/locale_t.h":"ignore_header_sys","/usr/include/strings.h":"ignore_header_sys","/usr/include/bits/types/__FILE.h":"ignore_header_sys","/usr/include/c++/10/bits/int_limits.h":"ignore_header_sys","/usr/include/bits/types/struct_itimerspec.h":"ignore_header_sys","/usr/include/c++/10/backward/binders.h":"ignore_header_sys","/usr/include/c++/10/typeinfo":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/c++allocator.h":"ignore_header_sys","/usr/include/c++/10/bits/predefined_ops.h":"ignore_header_sys","/usr/include/bits/time.h":"ignore_header_sys","/usr/include/bits/types/error_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/ptwriteintrin.h":"d07b5c84c015bb93867eab402d31ebca","/usr/include/c++/10/bits/stringfwd.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/cpu_defines.h":"ignore_header_sys","/usr/include/c++/10/bits/alloc_traits.h":"ignore_header_sys","/usr/include/c++/10/ext/string_conversions.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/serializeintrin.h":"9c34b27612aea430b36983691b4efe29","[GIT_TOP_DIR]/src/logger.h":"bc3e03e770b051e6cadc16e5f96c170f","/usr/include/c++/10/bits/ostream.tcc":"ignore_header_sys","/usr/include/c++/10/limits":"ignore_header_sys","/usr/include/c++/10/bits/cxxabi_forced.h":"ignore_header_sys","/usr/include/c++/10/ext/atomicity.h":"ignore_header_sys","/usr/include/wchar.h":"ignore_header_sys","/usr/include/c++/10/ext/numeric_traits.h":"ignore_header_sys","/usr/include/c++/10/ostream":"ignore_header_sys","/usr/include/endian.h":"ignore_header_sys","/usr/include/bits/types/sigset_t.h":"ignore_header_sys","/usr/include/c++/10/clocale":"ignore_header_sys","/usr/include/c++/10/bits/nested_exception.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsaveoptintrin.h":"30a5b7413ecc5157d3c788a4fc5f30f7","/usr/local/ob-clang11/lib/clang/11.1.0/include/invpcidintrin.h":"ff85318ef7dbac300480b3249673816b","/usr/include/c++/10/cwchar":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/atomic_word.h":"ignore_header_sys","/usr/include/pthread.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/stdarg.h":"4de3cbd931b589d291e5c39387aecf82","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsaveintrin.h":"bf0d37fbd9112292164e41d157229261","/usr/local/ob-clang11/lib/clang/11.1.0/include/f16cintrin.h":"e1d777f3170634f5a307f86472b0fb57","/usr/include/c++/10/cwctype":"ignore_header_sys","/usr/include/bits/types/clockid_t.h":"ignore_header_sys","/usr/include/c++/10/bits/basic_ios.h":"ignore_header_sys","/usr/include/c++/10/bits/locale_classes.tcc":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/tmmintrin.h":"d905b09b29cb36b015d25405cfbf8e5a","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlvnniintrin.h":"64180305ff9c6bfad63ee41cbd66093d","/usr/local/ob-clang11/lib/clang/11.1.0/include/pmmintrin.h":"3157414820008b3ad90647450dcf904b","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlcdintrin.h":"6f8f18f6874f9c1a5f19b1c55e3c0cb5","/usr/include/c++/10/stdexcept":"ignore_header_sys","/usr/include/c++/10/bits/exception_ptr.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/__wmmintrin_pclmul.h":"7cbd2793e783b90f193cebfa3675e55a","/usr/include/c++/10/random":"ignore_header_sys","/usr/include/c++/10/stdlib.h":"ignore_header_sys","/usr/include/bits/stdint-uintn.h":"ignore_header_sys","/usr/include/bits/types/struct_sched_param.h":"ignore_header_sys","/usr/include/c++/10/bits/range_cmp.h":"ignore_header_sys","/usr/include/gnu/stubs.h":"ignore_header_sys","/usr/include/c++/10/cerrno":"ignore_header_sys","/usr/include/bits/mathcalls-helper-functions.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/clflushoptintrin.h":"2a269418efbdd932851586bbfa8726a3","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlbwintrin.h":"449273cd1de2c72197e012c804a8c056","/usr/local/ob-clang11/lib/clang/11.1.0/include/tsxldtrkintrin.h":"317e5aa78e58a9618f04d7532a36a253","/usr/include/c++/10/exception":"ignore_header_sys","/usr/include/c++/10/bits/stl_function.h":"ignore_header_sys","/usr/include/bits/locale.h":"ignore_header_sys","/usr/include/c++/10/initializer_list":"ignore_header_sys","/usr/include/bits/wchar.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/error_constants.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vp2intersectintrin.h":"7f431ec4ddce958af8a75cc7a71b3a57","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlbitalgintrin.h":"50b7714a556eb5e52999b7dd18de7d4e","/usr/include/c++/10/cctype":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlbf16intrin.h":"da6bea340165f020a9142ab63fc1aecf","/usr/include/c++/10/bits/std_abs.h":"ignore_header_sys","/usr/include/bits/math-vector.h":"ignore_header_sys","/usr/include/bits/stdint-intn.h":"ignore_header_sys","/usr/include/bits/libm-simd-decl-stubs.h":"ignore_header_sys","/usr/include/c++/10/cmath":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlvbmi2intrin.h":"d09f75ea16d8f1302331016743dca38c","/usr/include/bits/types/struct_tm.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_uninitialized.h":"ignore_header_sys","/usr/include/c++/10/debug/debug.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/opt_random.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/cldemoteintrin.h":"6c282c2bb0cc618292bd47b69fc27641","/usr/include/c++/10/streambuf":"ignore_header_sys","/usr/include/c++/10/bits/exception_defines.h":"ignore_header_sys","/usr/include/bits/types/struct_timespec.h":"ignore_header_sys","/usr/include/bits/thread-shared-types.h":"ignore_header_sys","/usr/include/c++/10/bits/locale_facets.tcc":"ignore_header_sys","/usr/include/locale.h":"ignore_header_sys","/usr/include/bits/types/struct_timeval.h":"ignore_header_sys","/usr/include/c++/10/system_error":"ignore_header_sys","/usr/include/bits/typesizes.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/adxintrin.h":"6828d907a1be13a942ad62e7b4db6870","/usr/include/c++/10/bits/streambuf_iterator.h":"ignore_header_sys","/usr/include/bits/long-double.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512ifmavlintrin.h":"c3576813a57918c2734a8acf08e69b33","/usr/include/c++/10/bits/ios_base.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/bmi2intrin.h":"5421c86f7749d5b931a602c4c605aa59","/usr/include/c++/10/iostream":"ignore_header_sys","/usr/include/c++/10/bits/stl_iterator_base_types.h":"ignore_header_sys","/usr/include/c++/10/bits/hash_bytes.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlvp2intersectintrin.h":"e127597621c37f450875cdc70e9df509","/usr/include/bits/types/time_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/clwbintrin.h":"bc581022bcc5037ab8b06c9c95e15663","/usr/local/ob-clang11/lib/clang/11.1.0/include/mmintrin.h":"1de54663046d007c7b16e4f603262ad8","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vldqintrin.h":"8229c4851f85c40c1f62097dc173e420","/usr/local/ob-clang11/lib/clang/11.1.0/include/pkuintrin.h":"750db2cf252eb52d8e60ad6fffb80c8a","/usr/include/bits/stdio_lim.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/wbnoinvdintrin.h":"8d0e049f9ce4bbcc291c21fe7bc7a508","/usr/include/c++/10/bits/ptr_traits.h":"ignore_header_sys","/usr/include/sys/select.h":"ignore_header_sys","/usr/include/bits/floatn.h":"ignore_header_sys","/usr/include/c++/10/cstdio":"ignore_header_sys","/usr/include/alloca.h":"ignore_header_sys","/usr/include/bits/struct_mutex.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/movdirintrin.h":"4566737781d765bba033913dedfcaa83","/usr/include/c++/10/bits/localefwd.h":"ignore_header_sys","/usr/include/errno.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/pconfigintrin.h":"9da09fbffb9a78b478ac0ce6d43271d7","/usr/include/c++/10/bits/postypes.h":"ignore_header_sys","[GIT_TOP_DIR]/src/impl/matrix_rotator.h":"201b9e418b243731f34df19414d16ccb","/usr/include/stdlib.h":"ignore_header_sys","/usr/include/bits/types/FILE.h":"ignore_header_sys","/usr/include/bits/stdlib-float.h":"ignore_header_sys"},"includes":[{"line":12,"resolved_path":"/usr/local/ob-clang11/lib/clang/11.1.0/include/tmmintrin.h"},{"line":2427,"resolved_path":"/usr/local/ob-clang11/lib/clang/11.1.0/include/popcntintrin.h"}],"skipped_ranges":[],"usr2func":[{"usr":37746980491379012,"detailed_name":"static inline unsigned int _mm_crc32_u32(unsigned int __C, unsigned int __D)","qual_name_offset":27,"short_name_offset":27,"short_name_size":13,"spell":"2399:1-2399:14|2398:1-2402:2|2|-1","hover":"","comments":"Adds the first unsigned integer operand to the CRC-32C checksum of\n   the second unsigned integer operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> CRC32L </c> instruction.\n\n\\param __C\n   An unsigned integer operand to add to the CRC-32C checksum of operand\n   \\a __D.\n\\param __D\n   An unsigned 32-bit integer operand used to compute the CRC-32C checksum.\n\\returns The result of adding operand \\a __C to the CRC-32C checksum of\n   operand \\a __D.","bases":[],"vars":[13983789107058552845,5606209576913257267],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":683960501472826689,"detailed_name":"static inline __m128i _mm_cvtepu32_epi64(__m128i __V)","qual_name_offset":22,"short_name_offset":22,"short_name_size":18,"spell":"1446:1-1446:19|1445:1-1449:2|2|-1","hover":"","comments":"Zero-extends each of the lower two 32-bit integer elements of a\n   128-bit integer vector of [4 x i32] to 64-bit values and returns them in\n   a 128-bit vector of [2 x i64]. The upper two elements of the input vector\n   are unused.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMOVZXDQ / PMOVZXDQ </c> instruction.\n\n\\param __V\n   A 128-bit vector of [4 x i32]. The lower two 32-bit elements are\n   zero-extended to 64-bit values.\n\\returns A 128-bit vector of [2 x i64] containing the zero-extended values.","bases":[],"vars":[6361162893534940129],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":887585515127519134,"detailed_name":"static inline __m128i _mm_min_epi32(__m128i __V1, __m128i __V2)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"741:1-741:14|740:1-744:2|2|-1","hover":"","comments":"Compares the corresponding elements of two 128-bit vectors of\n   [4 x i32] and returns a 128-bit vector of [4 x i32] containing the lesser\n   value of the two.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMINSD / PMINSD </c> instruction.\n\n\\param __V1\n   A 128-bit vector of [4 x i32].\n\\param __V2\n   A 128-bit vector of [4 x i32].\n\\returns A 128-bit vector of [4 x i32] containing the lesser values.","bases":[],"vars":[14637582993575062431,8080088509529889477],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1310131048574611866,"detailed_name":"static inline int _mm_testc_si128(__m128i __M, __m128i __V)","qual_name_offset":18,"short_name_offset":18,"short_name_size":15,"spell":"1118:1-1118:16|1117:1-1121:2|2|-1","hover":"","comments":"Tests whether the specified bits in a 128-bit integer vector are all\n   ones.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPTEST / PTEST </c> instruction.\n\n\\param __M\n   A 128-bit integer vector containing the bits to be tested.\n\\param __V\n   A 128-bit integer vector selecting which bits to test in operand \\a __M.\n\\returns TRUE if the specified bits are all ones; FALSE otherwise.","bases":[],"vars":[3677536382062718076,16447197232885676832],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1665086081163408682,"detailed_name":"static inline __m128i _mm_cvtepi8_epi16(__m128i __V)","qual_name_offset":22,"short_name_offset":22,"short_name_size":17,"spell":"1230:1-1230:18|1229:1-1235:2|2|-1","hover":"","comments":"SSE4 Packed Integer Sign-Extension.  */\n Sign-extends each of the lower eight 8-bit integer elements of a\n    128-bit vector of [16 x i8] to 16-bit values and returns them in a\n    128-bit vector of [8 x i16]. The upper eight elements of the input vector\n    are unused.\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VPMOVSXBW / PMOVSXBW </c> instruction.\n\n \\param __V\n    A 128-bit vector of [16 x i8]. The lower eight 8-bit elements are sign-\n    extended to 16-bit values.\n \\returns A 128-bit vector of [8 x i16] containing the sign-extended values.","bases":[],"vars":[4953639658283107457],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1754731213997355542,"detailed_name":"static inline __m128i _mm_cmpgt_epi64(__m128i __V1, __m128i __V2)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"2338:1-2338:16|2337:1-2341:2|2|-1","hover":"","comments":"SSE4.2 Compare Packed Data -- Greater Than.  */\n Compares each of the corresponding 64-bit values of the 128-bit\n    integer vectors to determine if the values in the first operand are\n    greater than those in the second operand.\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VPCMPGTQ / PCMPGTQ </c> instruction.\n\n \\param __V1\n    A 128-bit integer vector.\n \\param __V2\n    A 128-bit integer vector.\n \\returns A 128-bit integer vector containing the comparison results.","bases":[],"vars":[11635985705958632653,14287864935083157811],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2194603643130352746,"detailed_name":"static inline __m128i _mm_min_epu32(__m128i __V1, __m128i __V2)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"779:1-779:14|778:1-782:2|2|-1","hover":"","comments":"Compares the corresponding elements of two 128-bit vectors of\n   [4 x u32] and returns a 128-bit vector of [4 x u32] containing the lesser\n   value of the two.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMINUD / PMINUD </c>  instruction.\n\n\\param __V1\n   A 128-bit vector of [4 x u32].\n\\param __V2\n   A 128-bit vector of [4 x u32].\n\\returns A 128-bit vector of [4 x u32] containing the lesser values.","bases":[],"vars":[3861527698034976352,5016473015100435435],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3030924452107834271,"detailed_name":"static inline __m128i _mm_mullo_epi32(__m128i __V1, __m128i __V2)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"534:1-534:16|533:1-537:2|2|-1","hover":"","comments":"SSE4 Dword Multiply Instructions.  */\n Multiples corresponding elements of two 128-bit vectors of [4 x i32]\n    and returns the lower 32 bits of the each product in a 128-bit vector of\n    [4 x i32].\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VPMULLD / PMULLD </c> instruction.\n\n \\param __V1\n    A 128-bit integer vector.\n \\param __V2\n    A 128-bit integer vector.\n \\returns A 128-bit integer vector containing the products of both operands.","bases":[],"vars":[6425253692548545234,14509879634757905130],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4638972838548476094,"detailed_name":"static inline unsigned int _mm_crc32_u16(unsigned int __C, unsigned short __D)","qual_name_offset":27,"short_name_offset":27,"short_name_size":13,"spell":"2379:1-2379:14|2378:1-2382:2|2|-1","hover":"","comments":"Adds the unsigned integer operand to the CRC-32C checksum of the\n   unsigned short operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> CRC32W </c> instruction.\n\n\\param __C\n   An unsigned integer operand to add to the CRC-32C checksum of operand\n   \\a __D.\n\\param __D\n   An unsigned 16-bit integer operand used to compute the CRC-32C checksum.\n\\returns The result of adding operand \\a __C to the CRC-32C checksum of\n   operand \\a __D.","bases":[],"vars":[15568169097243121639,316864018709425022],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5016655995240706633,"detailed_name":"static inline __m128i _mm_minpos_epu16(__m128i __V)","qual_name_offset":22,"short_name_offset":22,"short_name_size":16,"spell":"1534:1-1534:17|1533:1-1537:2|2|-1","hover":"","comments":"Finds the minimum unsigned 16-bit element in the input 128-bit\n   vector of [8 x u16] and returns it and along with its index.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPHMINPOSUW / PHMINPOSUW </c>\ninstruction.\n\n\\param __V\n   A 128-bit vector of [8 x u16].\n\\returns A 128-bit value where bits [15:0] contain the minimum value found\n   in parameter \\a __V, bits [18:16] contain the index of the minimum value\n   and the remaining bits are set to 0.","bases":[],"vars":[14417661154142186735],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6807751013579241231,"detailed_name":"static inline __m128 _mm_blendv_ps(__m128 __V1, __m128 __V2, __m128 __M)","qual_name_offset":21,"short_name_offset":21,"short_name_size":13,"spell":"458:1-458:14|457:1-462:2|2|-1","hover":"","comments":"Returns a 128-bit vector of [4 x float] where the values are\n   selected from either the first or second operand as specified by the\n   third operand, the control mask.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VBLENDVPS / BLENDVPS </c> instruction.\n\n\\param __V1\n   A 128-bit vector of [4 x float].\n\\param __V2\n   A 128-bit vector of [4 x float].\n\\param __M\n   A 128-bit vector operand, with mask bits 127, 95, 63, and 31 specifying\n   how the values are to be copied. The position of the mask bit corresponds\n   to the most significant bit of a copied value. When a mask bit is 0, the\n   corresponding 32-bit element in operand \\a __V1 is copied to the same\n   position in the result. When a mask bit is 1, the corresponding 32-bit\n   element in operand \\a __V2 is copied to the same position in the result.\n\\returns A 128-bit vector of [4 x float] containing the copied values.","bases":[],"vars":[10181331330478377059,11365071863680394660,6632760630417998210],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6858866530260382228,"detailed_name":"static inline __m128i _mm_cvtepu8_epi32(__m128i __V)","qual_name_offset":22,"short_name_offset":22,"short_name_size":17,"spell":"1370:1-1370:18|1369:1-1373:2|2|-1","hover":"","comments":"Zero-extends each of the lower four 8-bit integer elements of a\n   128-bit vector of [16 x i8] to 32-bit values and returns them in a\n   128-bit vector of [4 x i32]. The upper twelve elements of the input\n   vector are unused.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMOVZXBD / PMOVZXBD </c> instruction.\n\n\\param __V\n   A 128-bit vector of [16 x i8]. The lower four 8-bit elements are\n   zero-extended to 32-bit values.\n\\returns A 128-bit vector of [4 x i32] containing the zero-extended values.","bases":[],"vars":[5040394282207162439],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7463539822367652979,"detailed_name":"static inline __m128i _mm_min_epu16(__m128i __V1, __m128i __V2)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"703:1-703:14|702:1-706:2|2|-1","hover":"","comments":"Compares the corresponding elements of two 128-bit vectors of\n   [8 x u16] and returns a 128-bit vector of [8 x u16] containing the lesser\n   value of the two.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMINUW / PMINUW </c> instruction.\n\n\\param __V1\n   A 128-bit vector of [8 x u16].\n\\param __V2\n   A 128-bit vector of [8 x u16].\n\\returns A 128-bit vector of [8 x u16] containing the lesser values.","bases":[],"vars":[5178069851148814963,4888670989501229849],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7571939823253119080,"detailed_name":"static inline __m128i _mm_cvtepu8_epi16(__m128i __V)","qual_name_offset":22,"short_name_offset":22,"short_name_size":17,"spell":"1351:1-1351:18|1350:1-1354:2|2|-1","hover":"","comments":"SSE4 Packed Integer Zero-Extension.  */\n Zero-extends each of the lower eight 8-bit integer elements of a\n    128-bit vector of [16 x i8] to 16-bit values and returns them in a\n    128-bit vector of [8 x i16]. The upper eight elements of the input vector\n    are unused.\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VPMOVZXBW / PMOVZXBW </c> instruction.\n\n \\param __V\n    A 128-bit vector of [16 x i8]. The lower eight 8-bit elements are\n    zero-extended to 16-bit values.\n \\returns A 128-bit vector of [8 x i16] containing the zero-extended values.","bases":[],"vars":[5357928053708173674],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7828924114713892583,"detailed_name":"static inline __m128i _mm_max_epu16(__m128i __V1, __m128i __V2)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"722:1-722:14|721:1-725:2|2|-1","hover":"","comments":"Compares the corresponding elements of two 128-bit vectors of\n   [8 x u16] and returns a 128-bit vector of [8 x u16] containing the\n   greater value of the two.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMAXUW / PMAXUW </c> instruction.\n\n\\param __V1\n   A 128-bit vector of [8 x u16].\n\\param __V2\n   A 128-bit vector of [8 x u16].\n\\returns A 128-bit vector of [8 x u16] containing the greater values.","bases":[],"vars":[7162920281894830208,17502878670701135076],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7881958281474269768,"detailed_name":"static inline __m128i _mm_max_epi32(__m128i __V1, __m128i __V2)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"760:1-760:14|759:1-763:2|2|-1","hover":"","comments":"Compares the corresponding elements of two 128-bit vectors of\n   [4 x i32] and returns a 128-bit vector of [4 x i32] containing the\n   greater value of the two.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMAXSD / PMAXSD </c> instruction.\n\n\\param __V1\n   A 128-bit vector of [4 x i32].\n\\param __V2\n   A 128-bit vector of [4 x i32].\n\\returns A 128-bit vector of [4 x i32] containing the greater values.","bases":[],"vars":[17246635346414033734,3875345676667255156],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8383076003496112173,"detailed_name":"static inline __m128i _mm_cvtepi16_epi64(__m128i __V)","qual_name_offset":22,"short_name_offset":22,"short_name_size":18,"spell":"1312:1-1312:19|1311:1-1315:2|2|-1","hover":"","comments":"Sign-extends each of the lower two 16-bit integer elements of a\n   128-bit integer vector of [8 x i16] to 64-bit values and returns them in\n   a 128-bit vector of [2 x i64]. The upper six elements of the input\n   vector are unused.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMOVSXWQ / PMOVSXWQ </c> instruction.\n\n\\param __V\n   A 128-bit vector of [8 x i16]. The lower two 16-bit elements are\n    sign-extended to 64-bit values.\n\\returns A 128-bit vector of [2 x i64] containing the sign-extended values.","bases":[],"vars":[1410932876063543507],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8673015016184563267,"detailed_name":"static inline __m128i _mm_cvtepi16_epi32(__m128i __V)","qual_name_offset":22,"short_name_offset":22,"short_name_size":18,"spell":"1293:1-1293:19|1292:1-1296:2|2|-1","hover":"","comments":"Sign-extends each of the lower four 16-bit integer elements of a\n   128-bit integer vector of [8 x i16] to 32-bit values and returns them in\n   a 128-bit vector of [4 x i32]. The upper four elements of the input\n   vector are unused.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMOVSXWD / PMOVSXWD </c> instruction.\n\n\\param __V\n   A 128-bit vector of [8 x i16]. The lower four 16-bit elements are\n   sign-extended to 32-bit values.\n\\returns A 128-bit vector of [4 x i32] containing the sign-extended values.","bases":[],"vars":[16935894292064693917],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9358141184504046799,"detailed_name":"static inline __m128i _mm_cvtepi8_epi32(__m128i __V)","qual_name_offset":22,"short_name_offset":22,"short_name_size":17,"spell":"1251:1-1251:18|1250:1-1256:2|2|-1","hover":"","comments":"Sign-extends each of the lower four 8-bit integer elements of a\n   128-bit vector of [16 x i8] to 32-bit values and returns them in a\n   128-bit vector of [4 x i32]. The upper twelve elements of the input\n   vector are unused.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMOVSXBD / PMOVSXBD </c> instruction.\n\n\\param __V\n   A 128-bit vector of [16 x i8]. The lower four 8-bit elements are\n   sign-extended to 32-bit values.\n\\returns A 128-bit vector of [4 x i32] containing the sign-extended values.","bases":[],"vars":[12832715755784052135],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9500066214398251136,"detailed_name":"static inline __m128i _mm_cvtepu8_epi64(__m128i __V)","qual_name_offset":22,"short_name_offset":22,"short_name_size":17,"spell":"1389:1-1389:18|1388:1-1392:2|2|-1","hover":"","comments":"Zero-extends each of the lower two 8-bit integer elements of a\n   128-bit integer vector of [16 x i8] to 64-bit values and returns them in\n   a 128-bit vector of [2 x i64]. The upper fourteen elements of the input\n   vector are unused.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMOVZXBQ / PMOVZXBQ </c> instruction.\n\n\\param __V\n   A 128-bit vector of [16 x i8]. The lower two 8-bit elements are\n   zero-extended to 64-bit values.\n\\returns A 128-bit vector of [2 x i64] containing the zero-extended values.","bases":[],"vars":[15669057141584266891],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9553147065480422202,"detailed_name":"static inline int _mm_testz_si128(__m128i __M, __m128i __V)","qual_name_offset":18,"short_name_offset":18,"short_name_size":15,"spell":"1100:1-1100:16|1099:1-1103:2|2|-1","hover":"","comments":"SSE4 128-bit Packed Integer Comparisons.  */\n Tests whether the specified bits in a 128-bit integer vector are all\n    zeros.\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VPTEST / PTEST </c> instruction.\n\n \\param __M\n    A 128-bit integer vector containing the bits to be tested.\n \\param __V\n    A 128-bit integer vector selecting which bits to test in operand \\a __M.\n \\returns TRUE if the specified bits are all zeros; FALSE otherwise.","bases":[],"vars":[2971616872002593754,15767606581937283556],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9709440462742322144,"detailed_name":"static inline __m128d _mm_blendv_pd(__m128d __V1, __m128d __V2, __m128d __M)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"431:1-431:14|430:1-435:2|2|-1","hover":"","comments":"Returns a 128-bit vector of [2 x double] where the values are\n   selected from either the first or second operand as specified by the\n   third operand, the control mask.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VBLENDVPD / BLENDVPD </c> instruction.\n\n\\param __V1\n   A 128-bit vector of [2 x double].\n\\param __V2\n   A 128-bit vector of [2 x double].\n\\param __M\n   A 128-bit vector operand, with mask bits 127 and 63 specifying how the\n   values are to be copied. The position of the mask bit corresponds to the\n   most significant bit of a copied value. When a mask bit is 0, the\n   corresponding 64-bit element in operand \\a __V1 is copied to the same\n   position in the result. When a mask bit is 1, the corresponding 64-bit\n   element in operand \\a __V2 is copied to the same position in the result.\n\\returns A 128-bit vector of [2 x double] containing the copied values.","bases":[],"vars":[10930494430473657707,2852913240665233200,152552206237338073],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10171379615553209007,"detailed_name":"static inline __m128i _mm_min_epi8(__m128i __V1, __m128i __V2)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"665:1-665:13|664:1-668:2|2|-1","hover":"","comments":"SSE4 Packed Integer Min/Max Instructions.  */\n Compares the corresponding elements of two 128-bit vectors of\n    [16 x i8] and returns a 128-bit vector of [16 x i8] containing the lesser\n    of the two values.\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VPMINSB / PMINSB </c> instruction.\n\n \\param __V1\n    A 128-bit vector of [16 x i8].\n \\param __V2\n    A 128-bit vector of [16 x i8]\n \\returns A 128-bit vector of [16 x i8] containing the lesser values.","bases":[],"vars":[7686382520126623061,14788051944980417455],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10893414512986825572,"detailed_name":"static inline unsigned int _mm_crc32_u8(unsigned int __C, unsigned char __D)","qual_name_offset":27,"short_name_offset":27,"short_name_size":12,"spell":"2359:1-2359:13|2358:1-2362:2|2|-1","hover":"","comments":"SSE4.2 Accumulate CRC32.  */\n Adds the unsigned integer operand to the CRC-32C checksum of the\n    unsigned char operand.\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> CRC32B </c> instruction.\n\n \\param __C\n    An unsigned integer operand to add to the CRC-32C checksum of operand\n    \\a  __D.\n \\param __D\n    An unsigned 8-bit integer operand used to compute the CRC-32C checksum.\n \\returns The result of adding operand \\a __C to the CRC-32C checksum of\n    operand \\a __D.","bases":[],"vars":[9492562499811773286,1807874814165670490],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10981021876776442295,"detailed_name":"static inline __m128i _mm_max_epi8(__m128i __V1, __m128i __V2)","qual_name_offset":22,"short_name_offset":22,"short_name_size":12,"spell":"684:1-684:13|683:1-687:2|2|-1","hover":"","comments":"Compares the corresponding elements of two 128-bit vectors of\n   [16 x i8] and returns a 128-bit vector of [16 x i8] containing the\n   greater value of the two.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMAXSB / PMAXSB </c> instruction.\n\n\\param __V1\n   A 128-bit vector of [16 x i8].\n\\param __V2\n   A 128-bit vector of [16 x i8].\n\\returns A 128-bit vector of [16 x i8] containing the greater values.","bases":[],"vars":[4730968606789394154,312291766581946665],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":11390396468061472102,"detailed_name":"static inline unsigned long long _mm_crc32_u64(unsigned long long __C, unsigned long long __D)","qual_name_offset":33,"short_name_offset":33,"short_name_size":13,"spell":"2420:1-2420:14|2419:1-2423:2|2|-1","hover":"","comments":"Adds the unsigned integer operand to the CRC-32C checksum of the\n   unsigned 64-bit integer operand.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> CRC32Q </c> instruction.\n\n\\param __C\n   An unsigned integer operand to add to the CRC-32C checksum of operand\n   \\a __D.\n\\param __D\n   An unsigned 64-bit integer operand used to compute the CRC-32C checksum.\n\\returns The result of adding operand \\a __C to the CRC-32C checksum of\n   operand \\a __D.","bases":[],"vars":[13040170063733442050,7046184163514487069],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":11521388364074034647,"detailed_name":"static inline __m128i _mm_cvtepi8_epi64(__m128i __V)","qual_name_offset":22,"short_name_offset":22,"short_name_size":17,"spell":"1272:1-1272:18|1271:1-1277:2|2|-1","hover":"","comments":"Sign-extends each of the lower two 8-bit integer elements of a\n   128-bit integer vector of [16 x i8] to 64-bit values and returns them in\n   a 128-bit vector of [2 x i64]. The upper fourteen elements of the input\n   vector are unused.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMOVSXBQ / PMOVSXBQ </c> instruction.\n\n\\param __V\n   A 128-bit vector of [16 x i8]. The lower two 8-bit elements are\n   sign-extended to 64-bit values.\n\\returns A 128-bit vector of [2 x i64] containing the sign-extended values.","bases":[],"vars":[9991319847878669363],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12452569934120541333,"detailed_name":"static inline __m128i _mm_cvtepi32_epi64(__m128i __V)","qual_name_offset":22,"short_name_offset":22,"short_name_size":18,"spell":"1331:1-1331:19|1330:1-1334:2|2|-1","hover":"","comments":"Sign-extends each of the lower two 32-bit integer elements of a\n   128-bit integer vector of [4 x i32] to 64-bit values and returns them in\n   a 128-bit vector of [2 x i64]. The upper two elements of the input vector\n   are unused.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMOVSXDQ / PMOVSXDQ </c> instruction.\n\n\\param __V\n   A 128-bit vector of [4 x i32]. The lower two 32-bit elements are\n   sign-extended to 64-bit values.\n\\returns A 128-bit vector of [2 x i64] containing the sign-extended values.","bases":[],"vars":[17627394449455585997],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14469992410605381393,"detailed_name":"static inline __m128i _mm_blendv_epi8(__m128i __V1, __m128i __V2, __m128i __M)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"485:1-485:16|484:1-489:2|2|-1","hover":"","comments":"Returns a 128-bit vector of [16 x i8] where the values are selected\n   from either of the first or second operand as specified by the third\n   operand, the control mask.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPBLENDVB / PBLENDVB </c> instruction.\n\n\\param __V1\n   A 128-bit vector of [16 x i8].\n\\param __V2\n   A 128-bit vector of [16 x i8].\n\\param __M\n   A 128-bit vector operand, with mask bits 127, 119, 111...7 specifying\n   how the values are to be copied. The position of the mask bit corresponds\n   to the most significant bit of a copied value. When a mask bit is 0, the\n   corresponding 8-bit element in operand \\a __V1 is copied to the same\n   position in the result. When a mask bit is 1, the corresponding 8-bit\n   element in operand \\a __V2 is copied to the same position in the result.\n\\returns A 128-bit vector of [16 x i8] containing the copied values.","bases":[],"vars":[15454582550783058046,15763240870213582730,5389789859749592712],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14759438548746062508,"detailed_name":"static inline int _mm_testnzc_si128(__m128i __M, __m128i __V)","qual_name_offset":18,"short_name_offset":18,"short_name_size":17,"spell":"1137:1-1137:18|1136:1-1140:2|2|-1","hover":"","comments":"Tests whether the specified bits in a 128-bit integer vector are\n   neither all zeros nor all ones.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPTEST / PTEST </c> instruction.\n\n\\param __M\n   A 128-bit integer vector containing the bits to be tested.\n\\param __V\n   A 128-bit integer vector selecting which bits to test in operand \\a __M.\n\\returns TRUE if the specified bits are neither all zeros nor all ones;\n   FALSE otherwise.","bases":[],"vars":[9821731552560419584,5623526579114394444],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14866619096034615148,"detailed_name":"static inline __m128i _mm_cmpeq_epi64(__m128i __V1, __m128i __V2)","qual_name_offset":22,"short_name_offset":22,"short_name_size":15,"spell":"1210:1-1210:16|1209:1-1213:2|2|-1","hover":"","comments":"SSE4 64-bit Packed Integer Comparisons.  */\n Compares each of the corresponding 64-bit values of the 128-bit\n    integer vectors for equality.\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VPCMPEQQ / PCMPEQQ </c> instruction.\n\n \\param __V1\n    A 128-bit integer vector.\n \\param __V2\n    A 128-bit integer vector.\n \\returns A 128-bit integer vector containing the comparison results.","bases":[],"vars":[9999295800882975296,4693018214401473772],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15046165810225593898,"detailed_name":"static inline __m128i _mm_cvtepu16_epi64(__m128i __V)","qual_name_offset":22,"short_name_offset":22,"short_name_size":18,"spell":"1427:1-1427:19|1426:1-1430:2|2|-1","hover":"","comments":"Zero-extends each of the lower two 16-bit integer elements of a\n   128-bit integer vector of [8 x i16] to 64-bit values and returns them in\n   a 128-bit vector of [2 x i64]. The upper six elements of the input vector\n   are unused.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMOVZXWQ / PMOVZXWQ </c> instruction.\n\n\\param __V\n   A 128-bit vector of [8 x i16]. The lower two 16-bit elements are\n   zero-extended to 64-bit values.\n\\returns A 128-bit vector of [2 x i64] containing the zero-extended values.","bases":[],"vars":[16031328861013526972],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15242255069798146568,"detailed_name":"static inline __m128i _mm_stream_load_si128(const __m128i *__V)","qual_name_offset":22,"short_name_offset":22,"short_name_size":21,"spell":"645:1-645:22|644:1-648:2|2|-1","hover":"","comments":"SSE4 Streaming Load Hint Instruction.  */\n Loads integer values from a 128-bit aligned memory location to a\n    128-bit integer vector.\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VMOVNTDQA / MOVNTDQA </c> instruction.\n\n \\param __V\n    A pointer to a 128-bit aligned memory location that contains the integer\n    values.\n \\returns A 128-bit integer vector containing the data stored at the\n    specified memory location.","bases":[],"vars":[4533408844164028854],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15756558675774208999,"detailed_name":"static inline __m128i _mm_max_epu32(__m128i __V1, __m128i __V2)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"798:1-798:14|797:1-801:2|2|-1","hover":"","comments":"Compares the corresponding elements of two 128-bit vectors of\n   [4 x u32] and returns a 128-bit vector of [4 x u32] containing the\n   greater value of the two.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMAXUD / PMAXUD </c> instruction.\n\n\\param __V1\n   A 128-bit vector of [4 x u32].\n\\param __V2\n   A 128-bit vector of [4 x u32].\n\\returns A 128-bit vector of [4 x u32] containing the greater values.","bases":[],"vars":[4574883342122780075,10793918438951711006],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16007039652738031484,"detailed_name":"static inline __m128i _mm_cvtepu16_epi32(__m128i __V)","qual_name_offset":22,"short_name_offset":22,"short_name_size":18,"spell":"1408:1-1408:19|1407:1-1411:2|2|-1","hover":"","comments":"Zero-extends each of the lower four 16-bit integer elements of a\n   128-bit integer vector of [8 x i16] to 32-bit values and returns them in\n   a 128-bit vector of [4 x i32]. The upper four elements of the input\n   vector are unused.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMOVZXWD / PMOVZXWD </c> instruction.\n\n\\param __V\n   A 128-bit vector of [8 x i16]. The lower four 16-bit elements are\n   zero-extended to 32-bit values.\n\\returns A 128-bit vector of [4 x i32] containing the zero-extended values.","bases":[],"vars":[7136211127182336848],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17652786612633725742,"detailed_name":"static inline __m128i _mm_mul_epi32(__m128i __V1, __m128i __V2)","qual_name_offset":22,"short_name_offset":22,"short_name_size":13,"spell":"554:1-554:14|553:1-557:2|2|-1","hover":"","comments":"Multiplies corresponding even-indexed elements of two 128-bit\n   vectors of [4 x i32] and returns a 128-bit vector of [2 x i64]\n   containing the products.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> VPMULDQ / PMULDQ </c> instruction.\n\n\\param __V1\n   A 128-bit vector of [4 x i32].\n\\param __V2\n   A 128-bit vector of [4 x i32].\n\\returns A 128-bit vector of [2 x i64] containing the products of both\n   operands.","bases":[],"vars":[12417269705969864793,477264280773481524],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17666201033656757340,"detailed_name":"static inline __m128i _mm_packus_epi32(__m128i __V1, __m128i __V2)","qual_name_offset":22,"short_name_offset":22,"short_name_size":16,"spell":"1475:1-1475:17|1474:1-1478:2|2|-1","hover":"","comments":"SSE4 Pack with Unsigned Saturation.  */\n Converts 32-bit signed integers from both 128-bit integer vector\n    operands into 16-bit unsigned integers, and returns the packed result.\n    Values greater than 0xFFFF are saturated to 0xFFFF. Values less than\n    0x0000 are saturated to 0x0000.\n\n \\headerfile <x86intrin.h>\n\n This intrinsic corresponds to the <c> VPACKUSDW / PACKUSDW </c> instruction.\n\n \\param __V1\n    A 128-bit vector of [4 x i32]. Each 32-bit element is treated as a\n    signed integer and is converted to a 16-bit unsigned integer with\n    saturation. Values greater than 0xFFFF are saturated to 0xFFFF. Values\n    less than 0x0000 are saturated to 0x0000. The converted [4 x i16] values\n    are written to the lower 64 bits of the result.\n \\param __V2\n    A 128-bit vector of [4 x i32]. Each 32-bit element is treated as a\n    signed integer and is converted to a 16-bit unsigned integer with\n    saturation. Values greater than 0xFFFF are saturated to 0xFFFF. Values\n    less than 0x0000 are saturated to 0x0000. The converted [4 x i16] values\n    are written to the higher 64 bits of the result.\n \\returns A 128-bit vector of [8 x i16] containing the converted values.","bases":[],"vars":[8865785649862698218,3629525569750259816],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]}],"usr2type":[{"usr":100,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[1807874814165670490],"uses":[]},{"usr":105,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[316864018709425022],"uses":[]},{"usr":106,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[9492562499811773286,15568169097243121639,13983789107058552845,5606209576913257267],"uses":[]},{"usr":108,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[13040170063733442050,7046184163514487069],"uses":[]},{"usr":681283343111673259,"detailed_name":"typedef __attribute__((__vector_size__(16 * sizeof(char)))) char __v16qi","qual_name_offset":65,"short_name_offset":65,"short_name_size":7,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["487:49-487:56|4|-1","487:64-487:71|4|-1","488:49-488:56|4|-1","667:47-667:54|4|-1","667:63-667:70|4|-1","686:47-686:54|4|-1","686:63-686:70|4|-1"]},{"usr":1190554259452593755,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(float)))) float __v4sf","qual_name_offset":66,"short_name_offset":66,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["460:45-460:51|4|-1","460:59-460:65|4|-1","461:45-461:51|4|-1"]},{"usr":3216147351524767878,"detailed_name":"typedef __attribute__((__vector_size__(2 * sizeof(long long)))) long long __v2di","qual_name_offset":74,"short_name_offset":74,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["647:55-647:61|4|-1","1102:36-1102:42|4|-1","1102:49-1102:55|4|-1","1120:36-1120:42|4|-1","1120:49-1120:55|4|-1","1139:38-1139:44|4|-1","1139:51-1139:57|4|-1","1212:21-1212:27|4|-1","1212:37-1212:43|4|-1","2340:21-2340:27|4|-1","2340:36-2340:42|4|-1"]},{"usr":6694484644766561266,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(int)))) int __v4si","qual_name_offset":62,"short_name_offset":62,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["556:47-556:53|4|-1","556:61-556:67|4|-1","743:47-743:53|4|-1","743:62-743:68|4|-1","762:47-762:53|4|-1","762:62-762:68|4|-1","781:46-781:52|4|-1","781:61-781:67|4|-1","800:46-800:52|4|-1","800:61-800:67|4|-1","1333:68-1333:74|4|-1","1333:81-1333:87|4|-1","1477:48-1477:54|4|-1","1477:62-1477:68|4|-1"]},{"usr":7047341386549480175,"detailed_name":"typedef __attribute__((__vector_size__(16 * sizeof(unsigned char)))) unsigned char __v16qu","qual_name_offset":83,"short_name_offset":83,"short_name_size":7,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["1353:68-1353:75|4|-1","1353:82-1353:89|4|-1","1372:68-1372:75|4|-1","1372:82-1372:89|4|-1","1391:68-1391:75|4|-1","1391:82-1391:89|4|-1"]},{"usr":8071107645410950837,"detailed_name":"typedef __attribute__((__vector_size__(8 * sizeof(short)))) short __v8hi","qual_name_offset":66,"short_name_offset":66,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["705:47-705:53|4|-1","705:62-705:68|4|-1","724:47-724:53|4|-1","724:62-724:68|4|-1","1295:68-1295:74|4|-1","1295:81-1295:87|4|-1","1314:68-1314:74|4|-1","1314:81-1314:87|4|-1","1536:50-1536:56|4|-1"]},{"usr":9307668512027311864,"detailed_name":"typedef __attribute__((__vector_size__(2 * sizeof(long long)))) long long __m128i","qual_name_offset":74,"short_name_offset":74,"short_name_size":7,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[15454582550783058046,15763240870213582730,5389789859749592712,6425253692548545234,14509879634757905130,12417269705969864793,477264280773481524,4533408844164028854,7686382520126623061,14788051944980417455,4730968606789394154,312291766581946665,5178069851148814963,4888670989501229849,7162920281894830208,17502878670701135076,14637582993575062431,8080088509529889477,17246635346414033734,3875345676667255156,3861527698034976352,5016473015100435435,4574883342122780075,10793918438951711006,2971616872002593754,15767606581937283556,3677536382062718076,16447197232885676832,9821731552560419584,5623526579114394444,9999295800882975296,4693018214401473772,4953639658283107457,12832715755784052135,9991319847878669363,16935894292064693917,1410932876063543507,17627394449455585997,5357928053708173674,5040394282207162439,15669057141584266891,7136211127182336848,16031328861013526972,6361162893534940129,8865785649862698218,3629525569750259816,14417661154142186735,11635985705958632653,14287864935083157811],"uses":["484:19-484:26|4|-1","485:18-485:25|4|-1","485:32-485:39|4|-1","485:46-485:53|4|-1","487:11-487:18|4|-1","533:20-533:27|4|-1","534:18-534:25|4|-1","534:32-534:39|4|-1","536:11-536:18|4|-1","553:20-553:27|4|-1","554:16-554:23|4|-1","554:30-554:37|4|-1","556:11-556:18|4|-1","644:20-644:27|4|-1","645:24-645:31|4|-1","647:11-647:18|4|-1","664:20-664:27|4|-1","665:15-665:22|4|-1","665:29-665:36|4|-1","667:11-667:18|4|-1","683:20-683:27|4|-1","684:15-684:22|4|-1","684:29-684:36|4|-1","686:11-686:18|4|-1","702:20-702:27|4|-1","703:16-703:23|4|-1","703:30-703:37|4|-1","705:11-705:18|4|-1","721:20-721:27|4|-1","722:16-722:23|4|-1","722:30-722:37|4|-1","724:11-724:18|4|-1","740:20-740:27|4|-1","741:16-741:23|4|-1","741:30-741:37|4|-1","743:11-743:18|4|-1","759:20-759:27|4|-1","760:16-760:23|4|-1","760:30-760:37|4|-1","762:11-762:18|4|-1","778:20-778:27|4|-1","779:16-779:23|4|-1","779:30-779:37|4|-1","781:11-781:18|4|-1","797:20-797:27|4|-1","798:16-798:23|4|-1","798:30-798:37|4|-1","800:11-800:18|4|-1","1100:17-1100:24|4|-1","1100:30-1100:37|4|-1","1118:17-1118:24|4|-1","1118:30-1118:37|4|-1","1137:19-1137:26|4|-1","1137:32-1137:39|4|-1","1209:19-1209:26|4|-1","1210:17-1210:24|4|-1","1210:31-1210:38|4|-1","1212:11-1212:18|4|-1","1229:19-1229:26|4|-1","1230:19-1230:26|4|-1","1234:11-1234:18|4|-1","1250:19-1250:26|4|-1","1251:19-1251:26|4|-1","1255:11-1255:18|4|-1","1271:19-1271:26|4|-1","1272:19-1272:26|4|-1","1276:11-1276:18|4|-1","1292:19-1292:26|4|-1","1293:20-1293:27|4|-1","1295:11-1295:18|4|-1","1311:19-1311:26|4|-1","1312:20-1312:27|4|-1","1314:11-1314:18|4|-1","1330:19-1330:26|4|-1","1331:20-1331:27|4|-1","1333:11-1333:18|4|-1","1350:19-1350:26|4|-1","1351:19-1351:26|4|-1","1353:11-1353:18|4|-1","1369:19-1369:26|4|-1","1370:19-1370:26|4|-1","1372:11-1372:18|4|-1","1388:19-1388:26|4|-1","1389:19-1389:26|4|-1","1391:11-1391:18|4|-1","1407:19-1407:26|4|-1","1408:20-1408:27|4|-1","1410:11-1410:18|4|-1","1426:19-1426:26|4|-1","1427:20-1427:27|4|-1","1429:11-1429:18|4|-1","1445:19-1445:26|4|-1","1446:20-1446:27|4|-1","1448:11-1448:18|4|-1","1474:19-1474:26|4|-1","1475:18-1475:25|4|-1","1475:32-1475:39|4|-1","1477:11-1477:18|4|-1","1533:19-1533:26|4|-1","1534:18-1534:25|4|-1","1536:11-1536:18|4|-1","2337:19-2337:26|4|-1","2338:17-2338:24|4|-1","2338:31-2338:38|4|-1","2340:11-2340:18|4|-1"]},{"usr":11985984413760502591,"detailed_name":"typedef __attribute__((__vector_size__(2 * sizeof(double)))) double __v2df","qual_name_offset":68,"short_name_offset":68,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["433:46-433:52|4|-1","433:60-433:66|4|-1","434:46-434:52|4|-1"]},{"usr":12436497392017854237,"detailed_name":"typedef __attribute__((__vector_size__(16 * sizeof(signed char)))) signed char __v16qs","qual_name_offset":79,"short_name_offset":79,"short_name_size":7,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["1234:68-1234:75|4|-1","1234:82-1234:89|4|-1","1255:68-1255:75|4|-1","1255:82-1255:89|4|-1","1276:68-1276:75|4|-1","1276:82-1276:89|4|-1"]},{"usr":12944714932172126693,"detailed_name":"typedef __attribute__((__vector_size__(8 * sizeof(unsigned short)))) unsigned short __v8hu","qual_name_offset":84,"short_name_offset":84,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["1410:68-1410:74|4|-1","1410:81-1410:87|4|-1","1429:68-1429:74|4|-1","1429:81-1429:87|4|-1"]},{"usr":15682930942610409926,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(float)))) float __m128","qual_name_offset":66,"short_name_offset":66,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[10181331330478377059,11365071863680394660,6632760630417998210],"uses":["457:19-457:25|4|-1","458:16-458:22|4|-1","458:29-458:35|4|-1","458:42-458:48|4|-1","460:11-460:17|4|-1"]},{"usr":17014917149991124568,"detailed_name":"typedef __attribute__((__vector_size__(2 * sizeof(double)))) double __m128d","qual_name_offset":68,"short_name_offset":68,"short_name_size":7,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[10930494430473657707,2852913240665233200,152552206237338073],"uses":["430:19-430:26|4|-1","431:16-431:23|4|-1","431:30-431:37|4|-1","431:44-431:51|4|-1","433:11-433:18|4|-1"]},{"usr":17688558412358925216,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(unsigned int)))) unsigned int __v4su","qual_name_offset":80,"short_name_offset":80,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["536:22-536:28|4|-1","536:37-536:43|4|-1","1448:68-1448:74|4|-1","1448:81-1448:87|4|-1"]}],"usr2var":[{"usr":152552206237338073,"detailed_name":"__m128d __M","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"431:52-431:55|431:44-431:55|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["434:53-434:56|12|-1"]},{"usr":312291766581946665,"detailed_name":"__m128i __V2","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"684:37-684:41|684:29-684:41|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["686:72-686:76|12|-1"]},{"usr":316864018709425022,"detailed_name":"unsigned short __D","qual_name_offset":15,"short_name_offset":15,"short_name_size":3,"hover":"","comments":"","spell":"2379:48-2379:51|2379:33-2379:51|1026|-1","type":105,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2381:38-2381:41|12|-1"]},{"usr":477264280773481524,"detailed_name":"__m128i __V2","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"554:38-554:42|554:30-554:42|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["556:68-556:72|12|-1"]},{"usr":528152270441330877,"detailed_name":"_SIDD_BIT_MASK","qual_name_offset":0,"short_name_offset":0,"short_name_size":14,"hover":"#define _SIDD_BIT_MASK                  0x00","comments":"","spell":"1570:9-1570:23|1570:9-1570:45|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":768973719391371832,"detailed_name":"_SIDD_UWORD_OPS","qual_name_offset":0,"short_name_offset":0,"short_name_size":15,"hover":"#define _SIDD_UWORD_OPS                 0x01","comments":"","spell":"1549:9-1549:24|1549:9-1549:45|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":876947080438856374,"detailed_name":"_mm_cmpistra","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_cmpistra(A, B, M) \\\n  (int)__builtin_ia32_pcmpistria128((__v16qi)(__m128i)(A), \\\n                                    (__v16qi)(__m128i)(B), (int)(M))","comments":"","spell":"1851:9-1851:21|1851:9-1853:69|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":1022786111173957069,"detailed_name":"_SIDD_SWORD_OPS","qual_name_offset":0,"short_name_offset":0,"short_name_size":15,"hover":"#define _SIDD_SWORD_OPS                 0x03","comments":"","spell":"1551:9-1551:24|1551:9-1551:45|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":1057552183208839806,"detailed_name":"_mm_insert_epi8","qual_name_offset":0,"short_name_offset":0,"short_name_size":15,"hover":"#define _mm_insert_epi8(X, I, N) \\\n  (__m128i)__builtin_ia32_vec_set_v16qi((__v16qi)(__m128i)(X), \\\n                                        (int)(I), (int)(N))","comments":"","spell":"927:9-927:24|927:9-929:60|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":1410932876063543507,"detailed_name":"__m128i __V","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1312:28-1312:31|1312:20-1312:31|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1314:75-1314:78|12|-1","1314:88-1314:91|12|-1"]},{"usr":1748428246068343815,"detailed_name":"_mm_cmpistrm","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_cmpistrm(A, B, M) \\\n  (__m128i)__builtin_ia32_pcmpistrm128((__v16qi)(__m128i)(A), \\\n                                       (__v16qi)(__m128i)(B), (int)(M))","comments":"","spell":"1626:9-1626:21|1626:9-1628:72|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":1752432985470559315,"detailed_name":"_mm_floor_sd","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_floor_sd(X, Y)   _mm_round_sd((X), (Y), _MM_FROUND_FLOOR)","comments":"","spell":"201:9-201:21|201:9-201:70|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":1807874814165670490,"detailed_name":"unsigned char __D","qual_name_offset":14,"short_name_offset":14,"short_name_size":3,"hover":"","comments":"","spell":"2359:46-2359:49|2359:32-2359:49|1026|-1","type":100,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2361:38-2361:41|12|-1"]},{"usr":2028818648728872595,"detailed_name":"_SIDD_NEGATIVE_POLARITY","qual_name_offset":0,"short_name_offset":0,"short_name_size":23,"hover":"#define _SIDD_NEGATIVE_POLARITY         0x10","comments":"","spell":"1561:9-1561:32|1561:9-1561:45|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":2148320160677230802,"detailed_name":"_mm_cmpestrm","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_cmpestrm(A, LA, B, LB, M) \\\n  (__m128i)__builtin_ia32_pcmpestrm128((__v16qi)(__m128i)(A), (int)(LA), \\\n                                       (__v16qi)(__m128i)(B), (int)(LB), \\\n                                       (int)(M))","comments":"","spell":"1740:9-1740:21|1740:9-1743:49|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":2301661373755005210,"detailed_name":"_mm_cmpestra","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_cmpestra(A, LA, B, LB, M) \\\n  (int)__builtin_ia32_pcmpestria128((__v16qi)(__m128i)(A), (int)(LA), \\\n                                    (__v16qi)(__m128i)(B), (int)(LB), \\\n                                    (int)(M))","comments":"","spell":"2102:9-2102:21|2102:9-2105:46|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":2423332539385332339,"detailed_name":"_mm_cmpistro","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_cmpistro(A, B, M) \\\n  (int)__builtin_ia32_pcmpistrio128((__v16qi)(__m128i)(A), \\\n                                    (__v16qi)(__m128i)(B), (int)(M))","comments":"","spell":"1948:9-1948:21|1948:9-1950:69|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":2564975759612057710,"detailed_name":"_MM_FROUND_TO_NEG_INF","qual_name_offset":0,"short_name_offset":0,"short_name_size":21,"hover":"#define _MM_FROUND_TO_NEG_INF        0x01","comments":"","spell":"20:9-20:30|20:9-20:42|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":["29:54-29:75|64|-1"]},{"usr":2852913240665233200,"detailed_name":"__m128d __V2","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"431:38-431:42|431:30-431:42|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["433:67-433:71|12|-1"]},{"usr":2910776883864122935,"detailed_name":"_MM_FROUND_NINT","qual_name_offset":0,"short_name_offset":0,"short_name_size":15,"hover":"#define _MM_FROUND_NINT      (_MM_FROUND_RAISE_EXC | _MM_FROUND_TO_NEAREST_INT)","comments":"","spell":"28:9-28:24|28:9-28:80|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":2971616872002593754,"detailed_name":"__m128i __M","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1100:25-1100:28|1100:17-1100:28|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1102:43-1102:46|12|-1"]},{"usr":3578353520936904021,"detailed_name":"_mm_cmpistrs","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_cmpistrs(A, B, M) \\\n  (int)__builtin_ia32_pcmpistris128((__v16qi)(__m128i)(A), \\\n                                    (__v16qi)(__m128i)(B), (int)(M))","comments":"","spell":"1998:9-1998:21|1998:9-2000:69|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":3629525569750259816,"detailed_name":"__m128i __V2","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"1475:40-1475:44|1475:32-1475:44|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1477:69-1477:73|12|-1"]},{"usr":3663793240254828975,"detailed_name":"_SIDD_MOST_SIGNIFICANT","qual_name_offset":0,"short_name_offset":0,"short_name_size":22,"hover":"#define _SIDD_MOST_SIGNIFICANT          0x40","comments":"","spell":"1567:9-1567:31|1567:9-1567:45|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":3677536382062718076,"detailed_name":"__m128i __M","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1118:25-1118:28|1118:17-1118:28|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1120:43-1120:46|12|-1"]},{"usr":3861527698034976352,"detailed_name":"__m128i __V1","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"779:24-779:28|779:16-779:28|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["781:54-781:58|12|-1"]},{"usr":3866651491410712971,"detailed_name":"_mm_blend_epi16","qual_name_offset":0,"short_name_offset":0,"short_name_size":15,"hover":"#define _mm_blend_epi16(V1, V2, M) \\\n  (__m128i) __builtin_ia32_pblendw128 ((__v8hi)(__m128i)(V1), \\\n                                       (__v8hi)(__m128i)(V2), (int)(M))","comments":"","spell":"515:9-515:24|515:9-517:72|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":3875345676667255156,"detailed_name":"__m128i __V2","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"760:38-760:42|760:30-760:42|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["762:70-762:74|12|-1"]},{"usr":4411345765440281192,"detailed_name":"_mm_extract_epi32","qual_name_offset":0,"short_name_offset":0,"short_name_size":17,"hover":"#define _mm_extract_epi32(X, N) \\\n  (int)__builtin_ia32_vec_ext_v4si((__v4si)(__m128i)(X), (int)(N))","comments":"","spell":"1059:9-1059:26|1059:9-1060:67|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":4533408844164028854,"detailed_name":"const __m128i *__V","qual_name_offset":15,"short_name_offset":15,"short_name_size":3,"hover":"","comments":"","spell":"645:39-645:42|645:24-645:42|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["647:65-647:68|12|-1"]},{"usr":4574883342122780075,"detailed_name":"__m128i __V1","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"798:24-798:28|798:16-798:28|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["800:54-800:58|12|-1"]},{"usr":4693018214401473772,"detailed_name":"__m128i __V2","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"1210:39-1210:43|1210:31-1210:43|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1212:44-1212:48|12|-1"]},{"usr":4725941142211694164,"detailed_name":"_SIDD_MASKED_NEGATIVE_POLARITY","qual_name_offset":0,"short_name_offset":0,"short_name_size":30,"hover":"#define _SIDD_MASKED_NEGATIVE_POLARITY  0x30","comments":"","spell":"1563:9-1563:39|1563:9-1563:45|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":4730968606789394154,"detailed_name":"__m128i __V1","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"684:23-684:27|684:15-684:27|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["686:56-686:60|12|-1"]},{"usr":4888670989501229849,"detailed_name":"__m128i __V2","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"703:38-703:42|703:30-703:42|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["705:70-705:74|12|-1"]},{"usr":4935174054129113000,"detailed_name":"_mm_round_ps","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_round_ps(X, M) \\\n  (__m128)__builtin_ia32_roundps((__v4sf)(__m128)(X), (M))","comments":"","spell":"233:9-233:21|233:9-234:59|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":4953639658283107457,"detailed_name":"__m128i __V","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1230:27-1230:30|1230:19-1230:30|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1234:76-1234:79|12|-1","1234:90-1234:93|12|-1"]},{"usr":5016473015100435435,"detailed_name":"__m128i __V2","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"779:38-779:42|779:30-779:42|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["781:69-781:73|12|-1"]},{"usr":5040394282207162439,"detailed_name":"__m128i __V","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1370:27-1370:30|1370:19-1370:30|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1372:76-1372:79|12|-1","1372:90-1372:93|12|-1"]},{"usr":5096817344503370843,"detailed_name":"_SIDD_UBYTE_OPS","qual_name_offset":0,"short_name_offset":0,"short_name_size":15,"hover":"#define _SIDD_UBYTE_OPS                 0x00","comments":"","spell":"1548:9-1548:24|1548:9-1548:45|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":5102294871289576139,"detailed_name":"__SMMINTRIN_H","qual_name_offset":0,"short_name_offset":0,"short_name_size":13,"hover":"#define __SMMINTRIN_H","comments":"","spell":"11:9-11:22|11:9-11:22|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":5178069851148814963,"detailed_name":"__m128i __V1","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"703:24-703:28|703:16-703:28|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["705:55-705:59|12|-1"]},{"usr":5214403904313341332,"detailed_name":"_MM_FROUND_TO_POS_INF","qual_name_offset":0,"short_name_offset":0,"short_name_size":21,"hover":"#define _MM_FROUND_TO_POS_INF        0x02","comments":"","spell":"21:9-21:30|21:9-21:42|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":["30:54-30:75|64|-1"]},{"usr":5254611228419656841,"detailed_name":"_mm_ceil_pd","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _mm_ceil_pd(X)       _mm_round_pd((X), _MM_FROUND_CEIL)","comments":"","spell":"67:9-67:20|67:9-67:64|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":5357928053708173674,"detailed_name":"__m128i __V","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1351:27-1351:30|1351:19-1351:30|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1353:76-1353:79|12|-1","1353:90-1353:93|12|-1"]},{"usr":5389789859749592712,"detailed_name":"__m128i __M","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"485:54-485:57|485:46-485:57|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["488:57-488:60|12|-1"]},{"usr":5595254135924120889,"detailed_name":"_mm_floor_ss","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_floor_ss(X, Y)   _mm_round_ss((X), (Y), _MM_FROUND_FLOOR)","comments":"","spell":"176:9-176:21|176:9-176:70|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":5606209576913257267,"detailed_name":"unsigned int __D","qual_name_offset":13,"short_name_offset":13,"short_name_size":3,"hover":"","comments":"","spell":"2399:46-2399:49|2399:33-2399:49|1026|-1","type":106,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2401:38-2401:41|12|-1"]},{"usr":5623526579114394444,"detailed_name":"__m128i __V","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1137:40-1137:43|1137:32-1137:43|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1139:58-1139:61|12|-1"]},{"usr":5709873802611737722,"detailed_name":"_MM_FROUND_NO_EXC","qual_name_offset":0,"short_name_offset":0,"short_name_size":17,"hover":"#define _MM_FROUND_NO_EXC            0x08","comments":"","spell":"26:9-26:26|26:9-26:42|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":6140835979500251739,"detailed_name":"_mm_cmpistrc","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_cmpistrc(A, B, M) \\\n  (int)__builtin_ia32_pcmpistric128((__v16qi)(__m128i)(A), \\\n                                    (__v16qi)(__m128i)(B), (int)(M))","comments":"","spell":"1900:9-1900:21|1900:9-1902:69|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":6205240053354285885,"detailed_name":"_mm_insert_ps","qual_name_offset":0,"short_name_offset":0,"short_name_size":13,"hover":"#define _mm_insert_ps(X, Y, N) __builtin_ia32_insertps128((X), (Y), (N))","comments":"","spell":"844:9-844:22|844:9-844:73|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":6291855976138957854,"detailed_name":"_mm_dp_ps","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _mm_dp_ps(X, Y, M) \\\n  (__m128) __builtin_ia32_dpps((__v4sf)(__m128)(X), \\\n                               (__v4sf)(__m128)(Y), (M))","comments":"","spell":"592:9-592:18|592:9-594:57|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":6361162893534940129,"detailed_name":"__m128i __V","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1446:28-1446:31|1446:20-1446:31|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1448:75-1448:78|12|-1","1448:88-1448:91|12|-1"]},{"usr":6378692091300974735,"detailed_name":"_mm_floor_ps","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_floor_ps(X)      _mm_round_ps((X), _MM_FROUND_FLOOR)","comments":"","spell":"134:9-134:21|134:9-134:65|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":6425253692548545234,"detailed_name":"__m128i __V1","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"534:26-534:30|534:18-534:30|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["536:29-536:33|12|-1"]},{"usr":6632760630417998210,"detailed_name":"__m128 __M","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"458:49-458:52|458:42-458:52|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["461:52-461:55|12|-1"]},{"usr":7046184163514487069,"detailed_name":"unsigned long long __D","qual_name_offset":19,"short_name_offset":19,"short_name_size":3,"hover":"","comments":"","spell":"2420:58-2420:61|2420:39-2420:61|1026|-1","type":108,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2422:38-2422:41|12|-1"]},{"usr":7136211127182336848,"detailed_name":"__m128i __V","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1408:28-1408:31|1408:20-1408:31|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1410:75-1410:78|12|-1","1410:88-1410:91|12|-1"]},{"usr":7162920281894830208,"detailed_name":"__m128i __V1","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"722:24-722:28|722:16-722:28|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["724:55-724:59|12|-1"]},{"usr":7653547227088786445,"detailed_name":"_mm_cmpestrc","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_cmpestrc(A, LA, B, LB, M) \\\n  (int)__builtin_ia32_pcmpestric128((__v16qi)(__m128i)(A), (int)(LA), \\\n                                    (__v16qi)(__m128i)(B), (int)(LB), \\\n                                    (int)(M))","comments":"","spell":"2156:9-2156:21|2156:9-2159:46|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":7686382520126623061,"detailed_name":"__m128i __V1","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"665:23-665:27|665:15-665:27|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["667:56-667:60|12|-1"]},{"usr":8080088509529889477,"detailed_name":"__m128i __V2","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"741:38-741:42|741:30-741:42|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["743:70-743:74|12|-1"]},{"usr":8245293539377120863,"detailed_name":"_SIDD_CMP_EQUAL_ANY","qual_name_offset":0,"short_name_offset":0,"short_name_size":19,"hover":"#define _SIDD_CMP_EQUAL_ANY             0x00","comments":"","spell":"1554:9-1554:28|1554:9-1554:45|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":8542243962855903079,"detailed_name":"_mm_extract_epi64","qual_name_offset":0,"short_name_offset":0,"short_name_size":17,"hover":"#define _mm_extract_epi64(X, N) \\\n  (long long)__builtin_ia32_vec_ext_v2di((__v2di)(__m128i)(X), (int)(N))","comments":"","spell":"1082:9-1082:26|1082:9-1083:73|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":8559704243048887390,"detailed_name":"_SIDD_POSITIVE_POLARITY","qual_name_offset":0,"short_name_offset":0,"short_name_size":23,"hover":"#define _SIDD_POSITIVE_POLARITY         0x00","comments":"","spell":"1560:9-1560:32|1560:9-1560:45|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":8664683968224684505,"detailed_name":"_mm_extract_ps","qual_name_offset":0,"short_name_offset":0,"short_name_size":14,"hover":"#define _mm_extract_ps(X, N) (__extension__                      \\\n  ({ union { int __i; float __f; } __t;  \\\n     __t.__f = __builtin_ia32_vec_ext_v4sf((__v4sf)(__m128)(X), (int)(N)); \\\n     __t.__i;}))","comments":"","spell":"868:9-868:23|868:9-871:17|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":8865785649862698218,"detailed_name":"__m128i __V1","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"1475:26-1475:30|1475:18-1475:30|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1477:55-1477:59|12|-1"]},{"usr":8919854162525422047,"detailed_name":"_MM_FROUND_TRUNC","qual_name_offset":0,"short_name_offset":0,"short_name_size":16,"hover":"#define _MM_FROUND_TRUNC     (_MM_FROUND_RAISE_EXC | _MM_FROUND_TO_ZERO)","comments":"","spell":"31:9-31:25|31:9-31:73|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":9492562499811773286,"detailed_name":"unsigned int __C","qual_name_offset":13,"short_name_offset":13,"short_name_size":3,"hover":"","comments":"","spell":"2359:27-2359:30|2359:14-2359:30|1026|-1","type":106,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2361:33-2361:36|12|-1"]},{"usr":9648436204354035384,"detailed_name":"_SIDD_CMP_RANGES","qual_name_offset":0,"short_name_offset":0,"short_name_size":16,"hover":"#define _SIDD_CMP_RANGES                0x04","comments":"","spell":"1555:9-1555:25|1555:9-1555:45|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":9697930942043893679,"detailed_name":"_mm_test_mix_ones_zeros","qual_name_offset":0,"short_name_offset":0,"short_name_size":23,"hover":"#define _mm_test_mix_ones_zeros(M, V) _mm_testnzc_si128((M), (V))","comments":"","spell":"1176:9-1176:32|1176:9-1176:66|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":9776476340123236077,"detailed_name":"_mm_cmpestrs","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_cmpestrs(A, LA, B, LB, M) \\\n  (int)__builtin_ia32_pcmpestris128((__v16qi)(__m128i)(A), (int)(LA), \\\n                                    (__v16qi)(__m128i)(B), (int)(LB), \\\n                                    (int)(M))","comments":"","spell":"2264:9-2264:21|2264:9-2267:46|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":9785313436153001847,"detailed_name":"_SIDD_SBYTE_OPS","qual_name_offset":0,"short_name_offset":0,"short_name_size":15,"hover":"#define _SIDD_SBYTE_OPS                 0x02","comments":"","spell":"1550:9-1550:24|1550:9-1550:45|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":9800746202136430269,"detailed_name":"_mm_cmpestrz","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_cmpestrz(A, LA, B, LB, M) \\\n  (int)__builtin_ia32_pcmpestriz128((__v16qi)(__m128i)(A), (int)(LA), \\\n                                    (__v16qi)(__m128i)(B), (int)(LB), \\\n                                    (int)(M))","comments":"","spell":"2318:9-2318:21|2318:9-2321:46|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":9821731552560419584,"detailed_name":"__m128i __M","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1137:27-1137:30|1137:19-1137:30|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1139:45-1139:48|12|-1"]},{"usr":9828496283333463399,"detailed_name":"_mm_test_all_zeros","qual_name_offset":0,"short_name_offset":0,"short_name_size":18,"hover":"#define _mm_test_all_zeros(M, V) _mm_testz_si128 ((M), (V))","comments":"","spell":"1194:9-1194:27|1194:9-1194:60|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":9916405363962709159,"detailed_name":"_SIDD_MASKED_POSITIVE_POLARITY","qual_name_offset":0,"short_name_offset":0,"short_name_size":30,"hover":"#define _SIDD_MASKED_POSITIVE_POLARITY  0x20","comments":"","spell":"1562:9-1562:39|1562:9-1562:45|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":9991319847878669363,"detailed_name":"__m128i __V","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1272:27-1272:30|1272:19-1272:30|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1276:76-1276:79|12|-1","1276:90-1276:93|12|-1"]},{"usr":9999295800882975296,"detailed_name":"__m128i __V1","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"1210:25-1210:29|1210:17-1210:29|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1212:28-1212:32|12|-1"]},{"usr":10012507776125565763,"detailed_name":"_MM_FROUND_TO_ZERO","qual_name_offset":0,"short_name_offset":0,"short_name_size":18,"hover":"#define _MM_FROUND_TO_ZERO           0x03","comments":"","spell":"22:9-22:27|22:9-22:42|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":10181331330478377059,"detailed_name":"__m128 __V1","qual_name_offset":7,"short_name_offset":7,"short_name_size":4,"hover":"","comments":"","spell":"458:23-458:27|458:16-458:27|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["460:52-460:56|12|-1"]},{"usr":10300944254273383900,"detailed_name":"_SIDD_UNIT_MASK","qual_name_offset":0,"short_name_offset":0,"short_name_size":15,"hover":"#define _SIDD_UNIT_MASK                 0x40","comments":"","spell":"1571:9-1571:24|1571:9-1571:45|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":10790616492202359490,"detailed_name":"_mm_blend_pd","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_blend_pd(V1, V2, M) \\\n  (__m128d) __builtin_ia32_blendpd ((__v2df)(__m128d)(V1), \\\n                                    (__v2df)(__m128d)(V2), (int)(M))","comments":"","spell":"378:9-378:21|378:9-380:69|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":10793918438951711006,"detailed_name":"__m128i __V2","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"798:38-798:42|798:30-798:42|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["800:69-800:73|12|-1"]},{"usr":10930494430473657707,"detailed_name":"__m128d __V1","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"431:24-431:28|431:16-431:28|1026|-1","type":17014917149991124568,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["433:53-433:57|12|-1"]},{"usr":11084412961112361624,"detailed_name":"_MM_FROUND_CEIL","qual_name_offset":0,"short_name_offset":0,"short_name_size":15,"hover":"#define _MM_FROUND_CEIL      (_MM_FROUND_RAISE_EXC | _MM_FROUND_TO_POS_INF)","comments":"","spell":"30:9-30:24|30:9-30:76|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":11244687222549041577,"detailed_name":"_MM_EXTRACT_FLOAT","qual_name_offset":0,"short_name_offset":0,"short_name_size":17,"hover":"#define _MM_EXTRACT_FLOAT(D, X, N) \\\n  { (D) = __builtin_ia32_vec_ext_v4sf((__v4sf)(__m128)(X), (int)(N)); }","comments":"","spell":"875:9-875:26|875:9-876:72|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":11365071863680394660,"detailed_name":"__m128 __V2","qual_name_offset":7,"short_name_offset":7,"short_name_size":4,"hover":"","comments":"","spell":"458:36-458:40|458:29-458:40|1026|-1","type":15682930942610409926,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["460:66-460:70|12|-1"]},{"usr":11635985705958632653,"detailed_name":"__m128i __V1","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"2338:25-2338:29|2338:17-2338:29|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2340:28-2340:32|12|-1"]},{"usr":11654401774120299574,"detailed_name":"_mm_cmpistri","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_cmpistri(A, B, M) \\\n  (int)__builtin_ia32_pcmpistri128((__v16qi)(__m128i)(A), \\\n                                   (__v16qi)(__m128i)(B), (int)(M))","comments":"","spell":"1680:9-1680:21|1680:9-1682:68|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":11980312892536068528,"detailed_name":"_MM_MK_INSERTPS_NDX","qual_name_offset":0,"short_name_offset":0,"short_name_size":19,"hover":"#define _MM_MK_INSERTPS_NDX(X, Y, Z) (((X) << 6) | ((Y) << 4) | (Z))","comments":"","spell":"880:9-880:28|880:9-880:69|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":12070395512408236618,"detailed_name":"_mm_ceil_sd","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _mm_ceil_sd(X, Y)    _mm_round_sd((X), (Y), _MM_FROUND_CEIL)","comments":"","spell":"117:9-117:20|117:9-117:69|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":12076413843346321489,"detailed_name":"_MM_FROUND_NEARBYINT","qual_name_offset":0,"short_name_offset":0,"short_name_size":20,"hover":"#define _MM_FROUND_NEARBYINT (_MM_FROUND_NO_EXC | _MM_FROUND_CUR_DIRECTION)","comments":"","spell":"33:9-33:29|33:9-33:76|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":12140277634088827908,"detailed_name":"__DEFAULT_FN_ATTRS","qual_name_offset":0,"short_name_offset":0,"short_name_size":18,"hover":"#define __DEFAULT_FN_ATTRS __attribute__((__always_inline__, __nodebug__, __target__(\"sse4.1\"), __min_vector_width__(128)))","comments":"","spell":"1545:9-1545:27|1545:9-1545:97|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":["16:9-16:27|16:9-16:124|2|-1"],"uses":["430:27-430:45|64|-1","457:26-457:44|64|-1","484:27-484:45|64|-1","533:28-533:46|64|-1","553:28-553:46|64|-1","644:28-644:46|64|-1","664:28-664:46|64|-1","683:28-683:46|64|-1","702:28-702:46|64|-1","721:28-721:46|64|-1","740:28-740:46|64|-1","759:28-759:46|64|-1","778:28-778:46|64|-1","797:28-797:46|64|-1","1099:23-1099:41|64|-1","1117:23-1117:41|64|-1","1136:23-1136:41|64|-1","1209:27-1209:45|64|-1","1229:27-1229:45|64|-1","1250:27-1250:45|64|-1","1271:27-1271:45|64|-1","1292:27-1292:45|64|-1","1311:27-1311:45|64|-1","1330:27-1330:45|64|-1","1350:27-1350:45|64|-1","1369:27-1369:45|64|-1","1388:27-1388:45|64|-1","1407:27-1407:45|64|-1","1426:27-1426:45|64|-1","1445:27-1445:45|64|-1","1474:27-1474:45|64|-1","1533:27-1533:45|64|-1","1544:8-1544:26|64|-1","2337:27-2337:45|64|-1","2358:32-2358:50|64|-1","2378:32-2378:50|64|-1","2398:32-2398:50|64|-1","2419:38-2419:56|64|-1","2426:8-2426:26|64|-1"]},{"usr":12417269705969864793,"detailed_name":"__m128i __V1","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"554:24-554:28|554:16-554:28|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["556:54-556:58|12|-1"]},{"usr":12446585770209484097,"detailed_name":"_mm_mpsadbw_epu8","qual_name_offset":0,"short_name_offset":0,"short_name_size":16,"hover":"#define _mm_mpsadbw_epu8(X, Y, M) \\\n  (__m128i) __builtin_ia32_mpsadbw128((__v16qi)(__m128i)(X), \\\n                                      (__v16qi)(__m128i)(Y), (M))","comments":"","spell":"1516:9-1516:25|1516:9-1518:66|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":12832715755784052135,"detailed_name":"__m128i __V","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1251:27-1251:30|1251:19-1251:30|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1255:76-1255:79|12|-1","1255:90-1255:93|12|-1"]},{"usr":13040170063733442050,"detailed_name":"unsigned long long __C","qual_name_offset":19,"short_name_offset":19,"short_name_size":3,"hover":"","comments":"","spell":"2420:34-2420:37|2420:15-2420:37|1026|-1","type":108,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2422:33-2422:36|12|-1"]},{"usr":13063452197209887863,"detailed_name":"_SIDD_LEAST_SIGNIFICANT","qual_name_offset":0,"short_name_offset":0,"short_name_size":23,"hover":"#define _SIDD_LEAST_SIGNIFICANT         0x00","comments":"","spell":"1566:9-1566:32|1566:9-1566:45|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":13200392070421968987,"detailed_name":"_mm_round_pd","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_round_pd(X, M) \\\n  (__m128d)__builtin_ia32_roundpd((__v2df)(__m128d)(X), (M))","comments":"","spell":"308:9-308:21|308:9-309:61|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":13239772609139735714,"detailed_name":"_mm_round_sd","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_round_sd(X, Y, M) \\\n  (__m128d)__builtin_ia32_roundsd((__v2df)(__m128d)(X), \\\n                                  (__v2df)(__m128d)(Y), (M))","comments":"","spell":"349:9-349:21|349:9-351:61|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":13415649059260087828,"detailed_name":"_mm_floor_pd","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_floor_pd(X)      _mm_round_pd((X), _MM_FROUND_FLOOR)","comments":"","spell":"151:9-151:21|151:9-151:65|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":13606807323924453249,"detailed_name":"_mm_round_ss","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_round_ss(X, Y, M) \\\n  (__m128)__builtin_ia32_roundss((__v4sf)(__m128)(X), \\\n                                 (__v4sf)(__m128)(Y), (M))","comments":"","spell":"274:9-274:21|274:9-276:59|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":13798196229757620399,"detailed_name":"_mm_cmpistrz","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_cmpistrz(A, B, M) \\\n  (int)__builtin_ia32_pcmpistriz128((__v16qi)(__m128i)(A), \\\n                                    (__v16qi)(__m128i)(B), (int)(M))","comments":"","spell":"2048:9-2048:21|2048:9-2050:69|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":13839415545497569908,"detailed_name":"_mm_ceil_ps","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _mm_ceil_ps(X)       _mm_round_ps((X), _MM_FROUND_CEIL)","comments":"","spell":"50:9-50:20|50:9-50:64|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":13900916532685134309,"detailed_name":"_MM_FROUND_RINT","qual_name_offset":0,"short_name_offset":0,"short_name_size":15,"hover":"#define _MM_FROUND_RINT      (_MM_FROUND_RAISE_EXC | _MM_FROUND_CUR_DIRECTION)","comments":"","spell":"32:9-32:24|32:9-32:79|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":13919251949486770356,"detailed_name":"_MM_FROUND_FLOOR","qual_name_offset":0,"short_name_offset":0,"short_name_size":16,"hover":"#define _MM_FROUND_FLOOR     (_MM_FROUND_RAISE_EXC | _MM_FROUND_TO_NEG_INF)","comments":"","spell":"29:9-29:25|29:9-29:76|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":13971354563259682107,"detailed_name":"_MM_FROUND_RAISE_EXC","qual_name_offset":0,"short_name_offset":0,"short_name_size":20,"hover":"#define _MM_FROUND_RAISE_EXC         0x00","comments":"","spell":"25:9-25:29|25:9-25:42|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":["29:31-29:51|64|-1","30:31-30:51|64|-1"]},{"usr":13983789107058552845,"detailed_name":"unsigned int __C","qual_name_offset":13,"short_name_offset":13,"short_name_size":3,"hover":"","comments":"","spell":"2399:28-2399:31|2399:15-2399:31|1026|-1","type":106,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2401:33-2401:36|12|-1"]},{"usr":14282826989382906558,"detailed_name":"_MM_FROUND_CUR_DIRECTION","qual_name_offset":0,"short_name_offset":0,"short_name_size":24,"hover":"#define _MM_FROUND_CUR_DIRECTION     0x04","comments":"","spell":"23:9-23:33|23:9-23:42|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":14287864935083157811,"detailed_name":"__m128i __V2","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"2338:39-2338:43|2338:31-2338:43|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2340:43-2340:47|12|-1"]},{"usr":14417661154142186735,"detailed_name":"__m128i __V","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1534:26-1534:29|1534:18-1534:29|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1536:57-1536:60|12|-1"]},{"usr":14509879634757905130,"detailed_name":"__m128i __V2","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"534:40-534:44|534:32-534:44|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["536:44-536:48|12|-1"]},{"usr":14637582993575062431,"detailed_name":"__m128i __V1","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"741:24-741:28|741:16-741:28|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["743:55-743:59|12|-1"]},{"usr":14788051944980417455,"detailed_name":"__m128i __V2","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"665:37-665:41|665:29-665:41|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["667:72-667:76|12|-1"]},{"usr":15046241434065561459,"detailed_name":"_mm_insert_epi64","qual_name_offset":0,"short_name_offset":0,"short_name_size":16,"hover":"#define _mm_insert_epi64(X, I, N) \\\n  (__m128i)__builtin_ia32_vec_set_v2di((__v2di)(__m128i)(X), \\\n                                       (long long)(I), (int)(N))","comments":"","spell":"990:9-990:25|990:9-992:65|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":15362608230895575049,"detailed_name":"_SIDD_CMP_EQUAL_ORDERED","qual_name_offset":0,"short_name_offset":0,"short_name_size":23,"hover":"#define _SIDD_CMP_EQUAL_ORDERED         0x0c","comments":"","spell":"1557:9-1557:32|1557:9-1557:45|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":15454582550783058046,"detailed_name":"__m128i __V1","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"485:26-485:30|485:18-485:30|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["487:57-487:61|12|-1"]},{"usr":15564893079912672445,"detailed_name":"_mm_test_all_ones","qual_name_offset":0,"short_name_offset":0,"short_name_size":17,"hover":"#define _mm_test_all_ones(V) _mm_testc_si128((V), _mm_cmpeq_epi32((V), (V)))","comments":"","spell":"1157:9-1157:26|1157:9-1157:77|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":15568169097243121639,"detailed_name":"unsigned int __C","qual_name_offset":13,"short_name_offset":13,"short_name_size":3,"hover":"","comments":"","spell":"2379:28-2379:31|2379:15-2379:31|1026|-1","type":106,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2381:33-2381:36|12|-1"]},{"usr":15669057141584266891,"detailed_name":"__m128i __V","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1389:27-1389:30|1389:19-1389:30|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1391:76-1391:79|12|-1","1391:90-1391:93|12|-1"]},{"usr":15763240870213582730,"detailed_name":"__m128i __V2","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"485:40-485:44|485:32-485:44|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["487:72-487:76|12|-1"]},{"usr":15767606581937283556,"detailed_name":"__m128i __V","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1100:38-1100:41|1100:30-1100:41|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1102:56-1102:59|12|-1"]},{"usr":16031328861013526972,"detailed_name":"__m128i __V","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1427:28-1427:31|1427:20-1427:31|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1429:75-1429:78|12|-1","1429:88-1429:91|12|-1"]},{"usr":16188823334899828307,"detailed_name":"_mm_extract_epi8","qual_name_offset":0,"short_name_offset":0,"short_name_size":16,"hover":"#define _mm_extract_epi8(X, N) \\\n  (int)(unsigned char)__builtin_ia32_vec_ext_v16qi((__v16qi)(__m128i)(X), \\\n                                                   (int)(N))","comments":"","spell":"1033:9-1033:25|1033:9-1035:61|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":16216702412245038390,"detailed_name":"_mm_blend_ps","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_blend_ps(V1, V2, M) \\\n  (__m128) __builtin_ia32_blendps ((__v4sf)(__m128)(V1), \\\n                                   (__v4sf)(__m128)(V2), (int)(M))","comments":"","spell":"406:9-406:21|406:9-408:67|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":16266313281305704693,"detailed_name":"_mm_cmpestro","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_cmpestro(A, LA, B, LB, M) \\\n  (int)__builtin_ia32_pcmpestrio128((__v16qi)(__m128i)(A), (int)(LA), \\\n                                    (__v16qi)(__m128i)(B), (int)(LB), \\\n                                    (int)(M))","comments":"","spell":"2209:9-2209:21|2209:9-2212:46|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":16319206791384467916,"detailed_name":"_MM_FROUND_TO_NEAREST_INT","qual_name_offset":0,"short_name_offset":0,"short_name_size":25,"hover":"#define _MM_FROUND_TO_NEAREST_INT    0x00","comments":"","spell":"19:9-19:34|19:9-19:42|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":16447197232885676832,"detailed_name":"__m128i __V","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1118:38-1118:41|1118:30-1118:41|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1120:56-1120:59|12|-1"]},{"usr":16647324542727404670,"detailed_name":"_mm_ceil_ss","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _mm_ceil_ss(X, Y)    _mm_round_ss((X), (Y), _MM_FROUND_CEIL)","comments":"","spell":"92:9-92:20|92:9-92:69|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":16935894292064693917,"detailed_name":"__m128i __V","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1293:28-1293:31|1293:20-1293:31|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1295:75-1295:78|12|-1","1295:88-1295:91|12|-1"]},{"usr":17246635346414033734,"detailed_name":"__m128i __V1","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"760:24-760:28|760:16-760:28|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["762:55-762:59|12|-1"]},{"usr":17260380195365314579,"detailed_name":"_MM_PICK_OUT_PS","qual_name_offset":0,"short_name_offset":0,"short_name_size":15,"hover":"#define _MM_PICK_OUT_PS(X, N) _mm_insert_ps (_mm_setzero_ps(), (X),   \\\n                                             _MM_MK_INSERTPS_NDX((N), 0, 0x0e))","comments":"","spell":"883:9-883:24|883:9-884:80|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":17396091327928613391,"detailed_name":"_mm_insert_epi32","qual_name_offset":0,"short_name_offset":0,"short_name_size":16,"hover":"#define _mm_insert_epi32(X, I, N) \\\n  (__m128i)__builtin_ia32_vec_set_v4si((__v4si)(__m128i)(X), \\\n                                       (int)(I), (int)(N))","comments":"","spell":"959:9-959:25|959:9-961:59|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":17498760672059438543,"detailed_name":"_SIDD_CMP_EQUAL_EACH","qual_name_offset":0,"short_name_offset":0,"short_name_size":20,"hover":"#define _SIDD_CMP_EQUAL_EACH            0x08","comments":"","spell":"1556:9-1556:29|1556:9-1556:45|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":17502878670701135076,"detailed_name":"__m128i __V2","qual_name_offset":8,"short_name_offset":8,"short_name_size":4,"hover":"","comments":"","spell":"722:38-722:42|722:30-722:42|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["724:70-724:74|12|-1"]},{"usr":17627394449455585997,"detailed_name":"__m128i __V","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"1331:28-1331:31|1331:20-1331:31|1026|-1","type":9307668512027311864,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1333:75-1333:78|12|-1","1333:88-1333:91|12|-1"]},{"usr":17825568239504050813,"detailed_name":"_mm_dp_pd","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _mm_dp_pd(X, Y, M) \\\n  (__m128d) __builtin_ia32_dppd((__v2df)(__m128d)(X), \\\n                                (__v2df)(__m128d)(Y), (M))","comments":"","spell":"627:9-627:18|627:9-629:59|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":18230110933467870261,"detailed_name":"_mm_cmpestri","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _mm_cmpestri(A, LA, B, LB, M) \\\n  (int)__builtin_ia32_pcmpestri128((__v16qi)(__m128i)(A), (int)(LA), \\\n                                   (__v16qi)(__m128i)(B), (int)(LB), \\\n                                   (int)(M))","comments":"","spell":"1799:9-1799:21|1799:9-1802:45|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]}]}