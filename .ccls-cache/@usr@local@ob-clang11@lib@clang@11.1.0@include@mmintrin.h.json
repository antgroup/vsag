21
{"md5":"1de54663046d007c7b16e4f603262ad8","language":0,"no_linkage":true,"lid2path":[],"import_file":"[GIT_TOP_DIR]/src/impl/FhtKacRotator.cpp","args":["clang","[GIT_TOP_DIR]/src/impl/FhtKacRotator.cpp","-working-directory=[GIT_TOP_DIR]/"],"dependencies":{"/usr/include/c++/10/bits/stl_numeric.h":"ignore_header_sys","/usr/include/ctype.h":"ignore_header_sys","/usr/include/bits/types/__mbstate_t.h":"ignore_header_sys","/usr/include/features.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/immintrin.h":"774d8f5fec0961c7f69eaa3c69870fd7","/usr/include/math.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_algobase.h":"ignore_header_sys","/usr/include/bits/byteswap.h":"ignore_header_sys","/usr/include/c++/10/vector":"ignore_header_sys","/usr/include/c++/10/bits/iterator_concepts.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avxintrin.h":"772d5fd2b95bf581b4338458db989424","/usr/include/string.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlintrin.h":"cd26383f2f06392556848bfb374034c1","/usr/local/ob-clang11/lib/clang/11.1.0/include/vaesintrin.h":"230da0a10bfb803dd07d1d4859b589b9","/usr/include/bits/types/struct_FILE.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vbmivlintrin.h":"7a23233bba4c34e5185e02ea4208670c","/usr/include/bits/types/cookie_io_functions_t.h":"ignore_header_sys","/usr/include/bits/fp-logb.h":"ignore_header_sys","/usr/include/sys/cdefs.h":"ignore_header_sys","/usr/include/bits/types/__fpos_t.h":"ignore_header_sys","/usr/include/bits/types/timer_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512bf16intrin.h":"4f5ef6213a91abea3f5d53232215497c","/usr/include/c++/10/bits/locale_classes.h":"ignore_header_sys","/usr/include/c++/10/bits/streambuf.tcc":"ignore_header_sys","/usr/include/c++/10/bits/basic_ios.tcc":"ignore_header_sys","/usr/include/bits/types/mbstate_t.h":"ignore_header_sys","/usr/include/c++/10/bits/locale_facets.h":"ignore_header_sys","/usr/include/bits/sched.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/xmmintrin.h":"04b4174745d9f46d48080aefb7d04c2c","/usr/include/bits/types/wint_t.h":"ignore_header_sys","/usr/include/c++/10/bits/charconv.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_pair.h":"ignore_header_sys","/usr/include/c++/10/bits/char_traits.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/vpclmulqdqintrin.h":"a0ef53b1374f1ff070c815a7572221fa","/usr/include/time.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/wmmintrin.h":"420e06fc7b100109fe408d8cf15dfbbc","/usr/include/c++/10/bits/stl_bvector.h":"ignore_header_sys","/usr/include/c++/10/istream":"ignore_header_sys","/usr/include/bits/types/__sigset_t.h":"ignore_header_sys","/usr/include/c++/10/bits/allocator.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/emmintrin.h":"15ee96a71ec1a4288c0b5ffdad114450","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsavesintrin.h":"dfeb07884315d36739e4aa9dfd1d72ed","/usr/local/ob-clang11/lib/clang/11.1.0/include/smmintrin.h":"dde1073b90fcdddf514ff14bf7b0a39b","/usr/include/sys/types.h":"ignore_header_sys","/usr/include/c++/10/ios":"ignore_header_sys","/usr/include/c++/10/bits/uniform_int_dist.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/lzcntintrin.h":"070db0e5ecc75a113daa65f1a9a569a5","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vpopcntdqintrin.h":"748799b7fb86515d202460f78d94a3c3","/usr/include/bits/time64.h":"ignore_header_sys","/usr/include/bits/uintn-identity.h":"ignore_header_sys","/usr/include/c++/10/bits/cpp_type_traits.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vbmi2intrin.h":"d2eaacea81a5a13e0f771f69d62529ec","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512erintrin.h":"d8a0db1358f0c4f5db208e20fece727d","/usr/include/c++/10/bits/move.h":"ignore_header_sys","/usr/include/c++/10/cstdint":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/c++config.h":"ignore_header_sys","/usr/include/bits/endian.h":"ignore_header_sys","/usr/include/bits/types/__locale_t.h":"ignore_header_sys","/usr/include/bits/fp-fast.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512bitalgintrin.h":"065b5f6c02ddf57ee43a304b33d301c4","/usr/include/bits/wordsize.h":"ignore_header_sys","/usr/include/stdio.h":"ignore_header_sys","/usr/include/c++/10/bits/istream.tcc":"ignore_header_sys","/usr/include/bits/setjmp.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512fintrin.h":"4ce3a9eff70ef9558590a27aa986fc0e","/usr/include/gnu/stubs-64.h":"ignore_header_sys","/usr/include/asm/errno.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/enqcmdintrin.h":"6d8136c8969e9c723c195c33da2bb768","/usr/include/c++/10/ext/type_traits.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512bwintrin.h":"64c1b4a5d84a0126158179cc8904e8bd","/usr/include/bits/types.h":"ignore_header_sys","/usr/include/c++/10/string":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vnniintrin.h":"7cd1a414c4acf95129406d966bc736b5","/usr/include/c++/10/x86_64-redhat-linux/bits/os_defines.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/__wmmintrin_aes.h":"b7829f7e5a4221574897b8e365715ced","/usr/include/c++/10/numeric":"ignore_header_sys","/usr/include/c++/10/type_traits":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/stdint.h":"d6abd57f44fe5f48dbfb05fd9adc130a","/usr/include/c++/10/x86_64-redhat-linux/bits/ctype_inline.h":"ignore_header_sys","/usr/include/c++/10/new":"ignore_header_sys","/usr/include/bits/iscanonical.h":"ignore_header_sys","/usr/include/c++/10/bits/memoryfwd.h":"ignore_header_sys","/usr/include/asm-generic/errno-base.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/__stddef_max_align_t.h":"48e8e2456f77e6cda35d245130fa7259","/usr/local/ob-clang11/lib/clang/11.1.0/include/gfniintrin.h":"e0e20e8bab44c33118878b2889b2f2c8","/usr/include/c++/10/ext/new_allocator.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512ifmaintrin.h":"f52649bdc1dc467b7eadc3e1a810a0e2","/usr/include/c++/10/bits/functexcept.h":"ignore_header_sys","/usr/include/c++/10/bits/functional_hash.h":"ignore_header_sys","/usr/include/bits/endianness.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/popcntintrin.h":"7c3573a43b1c0704aac4cb098811cbb1","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512cdintrin.h":"650ead4d3b72acc353b9327d5ae2a07e","/usr/include/c++/10/bits/random.tcc":"ignore_header_sys","/usr/include/c++/10/debug/assertions.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_iterator_base_funcs.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsavecintrin.h":"8d492bf7b081416e797300c239dba796","/usr/include/c++/10/bits/stl_vector.h":"ignore_header_sys","/usr/include/c++/10/bits/basic_string.tcc":"ignore_header_sys","/usr/include/stdint.h":"ignore_header_sys","/usr/include/bits/types/__fpos64_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/rtmintrin.h":"591e544f8d70825a4bbf807dd287584a","/usr/include/c++/10/iosfwd":"ignore_header_sys","/usr/include/c++/10/cstdlib":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vpopcntdqvlintrin.h":"6af0e4f4c55f44ba40bac27558c51b3c","/usr/include/c++/10/cstring":"ignore_header_sys","/usr/include/bits/struct_rwlock.h":"ignore_header_sys","/usr/include/c++/10/bits/range_access.h":"ignore_header_sys","/usr/include/bits/libc-header-start.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/c++locale.h":"ignore_header_sys","/usr/include/c++/10/bits/vector.tcc":"ignore_header_sys","/usr/include/bits/cpu-set.h":"ignore_header_sys","/usr/include/bits/pthreadtypes-arch.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/ctype_base.h":"ignore_header_sys","/usr/include/c++/10/bits/cxxabi_init_exception.h":"ignore_header_sys","/usr/include/c++/10/bits/concept_check.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/gthr.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_iterator.h":"ignore_header_sys","/usr/include/bits/timex.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/waitpkgintrin.h":"2d1c4c5484fb9ec3a2f974b84ccead3c","/usr/include/bits/errno.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/shaintrin.h":"dd1634de945b1ffc8c6b7f39fa8a60c8","/usr/include/bits/select.h":"ignore_header_sys","/usr/include/wctype.h":"ignore_header_sys","/usr/include/bits/mathcalls.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vbmiintrin.h":"54a67d8ab20b9961e36a3fe16b875d4b","[GIT_TOP_DIR]/src/impl/FhtKacRotator.h":"f2f44cb0ba5dc218fc37736f2bab2192","/usr/local/ob-clang11/lib/clang/11.1.0/include/cetintrin.h":"30568779db4d995828cfd0dc8ab749f3","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx2intrin.h":"b787b869cf3250697b509a53b8f84261","/usr/local/ob-clang11/lib/clang/11.1.0/include/rdseedintrin.h":"d5c4d6f9ca83aa6d76891aa467a9c442","/usr/include/bits/waitflags.h":"ignore_header_sys","/usr/include/stdc-predef.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_construct.h":"ignore_header_sys","/usr/include/bits/waitstatus.h":"ignore_header_sys","/usr/include/c++/10/bits/ostream_insert.h":"ignore_header_sys","/usr/include/c++/10/bits/exception.h":"ignore_header_sys","/usr/include/linux/errno.h":"ignore_header_sys","/usr/include/bits/flt-eval-method.h":"ignore_header_sys","/usr/include/c++/10/bits/basic_string.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/amxintrin.h":"df04c665cb8533b77392c57a15d0c13e","/usr/local/ob-clang11/lib/clang/11.1.0/include/stddef.h":"2499dd2361b915724b073282bea3a7bc","/usr/local/ob-clang11/lib/clang/11.1.0/include/xtestintrin.h":"ddbb320bafef81c16f4db301b5d692b4","/usr/include/c++/10/ext/alloc_traits.h":"ignore_header_sys","/usr/include/sched.h":"ignore_header_sys","/usr/include/bits/pthreadtypes.h":"ignore_header_sys","/usr/include/c++/10/bits/random.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512pfintrin.h":"4f558d52a120f2dbc17724370f698f70","/usr/local/ob-clang11/lib/clang/11.1.0/include/sgxintrin.h":"1d380dfee68686a7fa21e5c5888eaf05","/usr/local/ob-clang11/lib/clang/11.1.0/include/fxsrintrin.h":"2288062b986bd0a526c32df2bd2e2c7b","/usr/local/ob-clang11/lib/clang/11.1.0/include/mm_malloc.h":"ed68cf68a5b4db09df709fc93a5e9b12","/usr/local/ob-clang11/lib/clang/11.1.0/include/fmaintrin.h":"e5555b944d57763068cff3823905dcda","/usr/include/bits/mathcalls-narrow.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/bmiintrin.h":"30db6d08581335daa785b893e982ec21","/usr/include/bits/floatn-common.h":"ignore_header_sys","/usr/include/asm-generic/errno.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/gthr-default.h":"ignore_header_sys","/usr/include/c++/10/concepts":"ignore_header_sys","/usr/include/bits/wctype-wchar.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512dqintrin.h":"0a5f59d3a1b4c24596a35fc4d831362d","/usr/include/bits/timesize.h":"ignore_header_sys","/usr/include/bits/types/clock_t.h":"ignore_header_sys","/usr/include/bits/types/locale_t.h":"ignore_header_sys","/usr/include/strings.h":"ignore_header_sys","/usr/include/bits/types/__FILE.h":"ignore_header_sys","/usr/include/c++/10/bits/int_limits.h":"ignore_header_sys","/usr/include/bits/types/struct_itimerspec.h":"ignore_header_sys","/usr/include/c++/10/backward/binders.h":"ignore_header_sys","/usr/include/c++/10/typeinfo":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/c++allocator.h":"ignore_header_sys","/usr/include/c++/10/bits/predefined_ops.h":"ignore_header_sys","/usr/include/bits/time.h":"ignore_header_sys","/usr/include/bits/types/error_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/ptwriteintrin.h":"d07b5c84c015bb93867eab402d31ebca","/usr/include/c++/10/bits/stringfwd.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/cpu_defines.h":"ignore_header_sys","/usr/include/c++/10/bits/alloc_traits.h":"ignore_header_sys","/usr/include/c++/10/ext/string_conversions.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/serializeintrin.h":"9c34b27612aea430b36983691b4efe29","[GIT_TOP_DIR]/src/logger.h":"bc3e03e770b051e6cadc16e5f96c170f","/usr/include/c++/10/bits/ostream.tcc":"ignore_header_sys","/usr/include/c++/10/limits":"ignore_header_sys","/usr/include/c++/10/bits/cxxabi_forced.h":"ignore_header_sys","/usr/include/c++/10/ext/atomicity.h":"ignore_header_sys","/usr/include/wchar.h":"ignore_header_sys","/usr/include/c++/10/ext/numeric_traits.h":"ignore_header_sys","/usr/include/c++/10/ostream":"ignore_header_sys","/usr/include/endian.h":"ignore_header_sys","/usr/include/bits/types/sigset_t.h":"ignore_header_sys","/usr/include/c++/10/clocale":"ignore_header_sys","/usr/include/c++/10/bits/nested_exception.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsaveoptintrin.h":"30a5b7413ecc5157d3c788a4fc5f30f7","/usr/local/ob-clang11/lib/clang/11.1.0/include/invpcidintrin.h":"ff85318ef7dbac300480b3249673816b","/usr/include/c++/10/cwchar":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/atomic_word.h":"ignore_header_sys","/usr/include/pthread.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/stdarg.h":"4de3cbd931b589d291e5c39387aecf82","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsaveintrin.h":"bf0d37fbd9112292164e41d157229261","/usr/local/ob-clang11/lib/clang/11.1.0/include/f16cintrin.h":"e1d777f3170634f5a307f86472b0fb57","/usr/include/c++/10/cwctype":"ignore_header_sys","/usr/include/bits/types/clockid_t.h":"ignore_header_sys","/usr/include/c++/10/bits/basic_ios.h":"ignore_header_sys","/usr/include/c++/10/bits/locale_classes.tcc":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/tmmintrin.h":"d905b09b29cb36b015d25405cfbf8e5a","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlvnniintrin.h":"64180305ff9c6bfad63ee41cbd66093d","/usr/local/ob-clang11/lib/clang/11.1.0/include/pmmintrin.h":"3157414820008b3ad90647450dcf904b","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlcdintrin.h":"6f8f18f6874f9c1a5f19b1c55e3c0cb5","/usr/include/c++/10/stdexcept":"ignore_header_sys","/usr/include/c++/10/bits/exception_ptr.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/__wmmintrin_pclmul.h":"7cbd2793e783b90f193cebfa3675e55a","/usr/include/c++/10/random":"ignore_header_sys","/usr/include/c++/10/stdlib.h":"ignore_header_sys","/usr/include/bits/stdint-uintn.h":"ignore_header_sys","/usr/include/bits/types/struct_sched_param.h":"ignore_header_sys","/usr/include/c++/10/bits/range_cmp.h":"ignore_header_sys","/usr/include/gnu/stubs.h":"ignore_header_sys","/usr/include/c++/10/cerrno":"ignore_header_sys","/usr/include/bits/mathcalls-helper-functions.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/clflushoptintrin.h":"2a269418efbdd932851586bbfa8726a3","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlbwintrin.h":"449273cd1de2c72197e012c804a8c056","/usr/local/ob-clang11/lib/clang/11.1.0/include/tsxldtrkintrin.h":"317e5aa78e58a9618f04d7532a36a253","/usr/include/c++/10/exception":"ignore_header_sys","/usr/include/c++/10/bits/stl_function.h":"ignore_header_sys","/usr/include/bits/locale.h":"ignore_header_sys","/usr/include/c++/10/initializer_list":"ignore_header_sys","/usr/include/bits/wchar.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/error_constants.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vp2intersectintrin.h":"7f431ec4ddce958af8a75cc7a71b3a57","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlbitalgintrin.h":"50b7714a556eb5e52999b7dd18de7d4e","/usr/include/c++/10/cctype":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlbf16intrin.h":"da6bea340165f020a9142ab63fc1aecf","/usr/include/c++/10/bits/std_abs.h":"ignore_header_sys","/usr/include/bits/math-vector.h":"ignore_header_sys","/usr/include/bits/stdint-intn.h":"ignore_header_sys","/usr/include/bits/libm-simd-decl-stubs.h":"ignore_header_sys","/usr/include/c++/10/cmath":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlvbmi2intrin.h":"d09f75ea16d8f1302331016743dca38c","/usr/include/bits/types/struct_tm.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_uninitialized.h":"ignore_header_sys","/usr/include/c++/10/debug/debug.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/opt_random.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/cldemoteintrin.h":"6c282c2bb0cc618292bd47b69fc27641","/usr/include/c++/10/streambuf":"ignore_header_sys","/usr/include/c++/10/bits/exception_defines.h":"ignore_header_sys","/usr/include/bits/types/struct_timespec.h":"ignore_header_sys","/usr/include/bits/thread-shared-types.h":"ignore_header_sys","/usr/include/c++/10/bits/locale_facets.tcc":"ignore_header_sys","/usr/include/locale.h":"ignore_header_sys","/usr/include/bits/types/struct_timeval.h":"ignore_header_sys","/usr/include/c++/10/system_error":"ignore_header_sys","/usr/include/bits/typesizes.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/adxintrin.h":"6828d907a1be13a942ad62e7b4db6870","/usr/include/c++/10/bits/streambuf_iterator.h":"ignore_header_sys","/usr/include/bits/long-double.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512ifmavlintrin.h":"c3576813a57918c2734a8acf08e69b33","/usr/include/c++/10/bits/ios_base.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/bmi2intrin.h":"5421c86f7749d5b931a602c4c605aa59","/usr/include/c++/10/iostream":"ignore_header_sys","/usr/include/c++/10/bits/stl_iterator_base_types.h":"ignore_header_sys","/usr/include/c++/10/bits/hash_bytes.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlvp2intersectintrin.h":"e127597621c37f450875cdc70e9df509","/usr/include/bits/types/time_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/clwbintrin.h":"bc581022bcc5037ab8b06c9c95e15663","/usr/include/c++/10/cstdio":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vldqintrin.h":"8229c4851f85c40c1f62097dc173e420","/usr/local/ob-clang11/lib/clang/11.1.0/include/pkuintrin.h":"750db2cf252eb52d8e60ad6fffb80c8a","/usr/include/bits/stdio_lim.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/wbnoinvdintrin.h":"8d0e049f9ce4bbcc291c21fe7bc7a508","/usr/include/c++/10/bits/ptr_traits.h":"ignore_header_sys","/usr/include/sys/select.h":"ignore_header_sys","/usr/include/bits/floatn.h":"ignore_header_sys","/usr/include/alloca.h":"ignore_header_sys","/usr/include/bits/struct_mutex.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/movdirintrin.h":"4566737781d765bba033913dedfcaa83","/usr/include/c++/10/bits/localefwd.h":"ignore_header_sys","/usr/include/errno.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/pconfigintrin.h":"9da09fbffb9a78b478ac0ce6d43271d7","/usr/include/c++/10/bits/postypes.h":"ignore_header_sys","[GIT_TOP_DIR]/src/impl/matrix_rotator.h":"201b9e418b243731f34df19414d16ccb","/usr/include/stdlib.h":"ignore_header_sys","/usr/include/bits/types/FILE.h":"ignore_header_sys","/usr/include/bits/stdlib-float.h":"ignore_header_sys"},"includes":[],"skipped_ranges":[],"usr2func":[{"usr":185873693486239686,"detailed_name":"static inline __m64 _mm_unpacklo_pi8(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":16,"spell":"285:1-285:17|284:1-288:2|2|-1","hover":"","comments":"Unpacks the lower 32 bits from two 64-bit integer vectors of [8 x i8]\n   and interleaves them into a 64-bit integer vector of [8 x i8].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PUNPCKLBW </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [8 x i8].\n   Bits [7:0] are written to bits [7:0] of the result. \\n\n   Bits [15:8] are written to bits [23:16] of the result. \\n\n   Bits [23:16] are written to bits [39:32] of the result. \\n\n   Bits [31:24] are written to bits [55:48] of the result.\n\\param __m2\n   A 64-bit integer vector of [8 x i8].\n   Bits [7:0] are written to bits [15:8] of the result. \\n\n   Bits [15:8] are written to bits [31:24] of the result. \\n\n   Bits [23:16] are written to bits [47:40] of the result. \\n\n   Bits [31:24] are written to bits [63:56] of the result.\n\\returns A 64-bit integer vector of [8 x i8] containing the interleaved\n   values.","bases":[],"vars":[8142405934569392073,12851876900550388021],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":647510386076790956,"detailed_name":"static inline __m64 _mm_sub_pi8(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":11,"spell":"502:1-502:12|501:1-505:2|2|-1","hover":"","comments":"Subtracts each 8-bit integer element of the second 64-bit integer\n   vector of [8 x i8] from the corresponding 8-bit integer element of the\n   first 64-bit integer vector of [8 x i8]. The lower 8 bits of the results\n   are packed into a 64-bit integer vector of [8 x i8].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PSUBB </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [8 x i8] containing the minuends.\n\\param __m2\n   A 64-bit integer vector of [8 x i8] containing the subtrahends.\n\\returns A 64-bit integer vector of [8 x i8] containing the differences of\n   both parameters.","bases":[],"vars":[10803881937850520679,14899691116163578942],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":968193208216754794,"detailed_name":"static inline __m64 _mm_setr_pi16(short __w0, short __w1, short __w2, short __w3)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"1459:1-1459:14|1458:1-1462:2|2|-1","hover":"","comments":"Constructs a 64-bit integer vector, initialized in reverse order with\n   the specified 16-bit integer values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __w0\n   A 16-bit integer value used to initialize bits [15:0] of the result.\n\\param __w1\n   A 16-bit integer value used to initialize bits [31:16] of the result.\n\\param __w2\n   A 16-bit integer value used to initialize bits [47:32] of the result.\n\\param __w3\n   A 16-bit integer value used to initialize bits [63:48] of the result.\n\\returns An initialized 64-bit integer vector.","bases":[],"vars":[4682034867645853618,16961521761812821514,2576506460800589557,15545825086818611297],"callees":["1461:12-1461:24|15562921966604122828|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2226970861338570597,"detailed_name":"static inline __m64 _mm_xor_si64(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"1137:1-1137:13|1136:1-1140:2|2|-1","hover":"","comments":"Performs a bitwise exclusive OR of two 64-bit integer vectors.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PXOR </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector.\n\\param __m2\n   A 64-bit integer vector.\n\\returns A 64-bit integer vector containing the bitwise exclusive OR of both\n   parameters.","bases":[],"vars":[15221063988834975821,17742881091664255555],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2544156969387334090,"detailed_name":"static inline __m64 _mm_sll_si64(__m64 __m, __m64 __count)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"817:1-817:13|816:1-820:2|2|-1","hover":"","comments":"Left-shifts the first 64-bit integer parameter by the number of bits\n   specified by the second 64-bit integer parameter. The lower 64 bits of\n   result are returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PSLLQ </c> instruction.\n\n\\param __m\n   A 64-bit integer vector interpreted as a single 64-bit integer.\n\\param __count\n   A 64-bit integer vector interpreted as a single 64-bit integer.\n\\returns A 64-bit integer vector containing the left-shifted value. If\n    \\a __count is greater or equal to 64, the result is set to 0.","bases":[],"vars":[18410919378090522973,4227589291245822936],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2699546215969057924,"detailed_name":"static inline __m64 _mm_cvtsi32_si64(int __i)","qual_name_offset":20,"short_name_offset":20,"short_name_size":16,"spell":"48:1-48:17|47:1-51:2|2|-1","hover":"","comments":"Constructs a 64-bit integer vector, setting the lower 32 bits to the\n   value of the 32-bit integer parameter and setting the upper 32 bits to 0.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> MOVD </c> instruction.\n\n\\param __i\n   A 32-bit integer value.\n\\returns A 64-bit integer vector. The lower 32 bits contain the value of the\n   parameter. The upper 32 bits are set to 0.","bases":[],"vars":[13631027381771966608],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3039153341897192156,"detailed_name":"static inline __m64 _mm_sub_pi32(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"544:1-544:13|543:1-547:2|2|-1","hover":"","comments":"Subtracts each 32-bit integer element of the second 64-bit integer\n   vector of [2 x i32] from the corresponding 32-bit integer element of the\n   first 64-bit integer vector of [2 x i32]. The lower 32 bits of the\n   results are packed into a 64-bit integer vector of [2 x i32].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PSUBD </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [2 x i32] containing the minuends.\n\\param __m2\n   A 64-bit integer vector of [2 x i32] containing the subtrahends.\n\\returns A 64-bit integer vector of [2 x i32] containing the differences of\n   both parameters.","bases":[],"vars":[18432221264572008469,2075246622588306559],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3251148996883806431,"detailed_name":"static inline long long _mm_cvtm64_si64(__m64 __m)","qual_name_offset":24,"short_name_offset":24,"short_name_size":15,"spell":"97:1-97:16|96:1-100:2|2|-1","hover":"","comments":"Casts a 64-bit integer vector into a 64-bit signed integer value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> MOVQ </c> instruction.\n\n\\param __m\n   A 64-bit integer vector.\n\\returns A 64-bit signed integer containing the same bitwise pattern as the\n   parameter.","bases":[],"vars":[8608759305898300153],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3444969521165072732,"detailed_name":"static inline __m64 _mm_sub_pi16(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"523:1-523:13|522:1-526:2|2|-1","hover":"","comments":"Subtracts each 16-bit integer element of the second 64-bit integer\n   vector of [4 x i16] from the corresponding 16-bit integer element of the\n   first 64-bit integer vector of [4 x i16]. The lower 16 bits of the\n   results are packed into a 64-bit integer vector of [4 x i16].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PSUBW </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [4 x i16] containing the minuends.\n\\param __m2\n   A 64-bit integer vector of [4 x i16] containing the subtrahends.\n\\returns A 64-bit integer vector of [4 x i16] containing the differences of\n   both parameters.","bases":[],"vars":[17615150078163146318,3325715498478575144],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3907199731996902070,"detailed_name":"static inline __m64 _mm_cmpgt_pi16(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":14,"spell":"1247:1-1247:15|1246:1-1250:2|2|-1","hover":"","comments":"Compares the 16-bit integer elements of two 64-bit integer vectors of\n   [4 x i16] to determine if the element of the first vector is greater than\n   the corresponding element of the second vector.\n\n   The comparison yields 0 for false, 0xFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PCMPGTW </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [4 x i16].\n\\param __m2\n   A 64-bit integer vector of [4 x i16].\n\\returns A 64-bit integer vector of [4 x i16] containing the comparison\n   results.","bases":[],"vars":[7024750893490893004,3535436590948874039],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4398171262110234397,"detailed_name":"static inline __m64 _mm_add_pi8(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":11,"spell":"350:1-350:12|349:1-353:2|2|-1","hover":"","comments":"Adds each 8-bit integer element of the first 64-bit integer vector\n   of [8 x i8] to the corresponding 8-bit integer element of the second\n   64-bit integer vector of [8 x i8]. The lower 8 bits of the results are\n   packed into a 64-bit integer vector of [8 x i8].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PADDB </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [8 x i8].\n\\param __m2\n   A 64-bit integer vector of [8 x i8].\n\\returns A 64-bit integer vector of [8 x i8] containing the sums of both\n   parameters.","bases":[],"vars":[4331231869934765163,699372558437663438],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4629210678895356549,"detailed_name":"static inline __m64 _mm_setr_pi32(int __i0, int __i1)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"1436:1-1436:14|1435:1-1439:2|2|-1","hover":"","comments":"Constructs a 64-bit integer vector, initialized in reverse order with\n   the specified 32-bit integer values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __i0\n   A 32-bit integer value used to initialize the lower 32 bits of the\n   result.\n\\param __i1\n   A 32-bit integer value used to initialize the upper 32 bits of the\n   result.\n\\returns An initialized 64-bit integer vector.","bases":[],"vars":[1729627177780877298,10362089610205765233],"callees":["1438:12-1438:24|6880960286055941072|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4846207621560417240,"detailed_name":"static inline int _mm_cvtsi64_si32(__m64 __m)","qual_name_offset":18,"short_name_offset":18,"short_name_size":16,"spell":"65:1-65:17|64:1-68:2|2|-1","hover":"","comments":"Returns the lower 32 bits of a 64-bit integer vector as a 32-bit\n   signed integer.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> MOVD </c> instruction.\n\n\\param __m\n   A 64-bit integer vector.\n\\returns A 32-bit signed integer value containing the lower 32 bits of the\n   parameter.","bases":[],"vars":[8687711397172331019],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4937410582354549524,"detailed_name":"static inline __m64 _mm_or_si64(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":11,"spell":"1119:1-1119:12|1118:1-1122:2|2|-1","hover":"","comments":"Performs a bitwise OR of two 64-bit integer vectors.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> POR </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector.\n\\param __m2\n   A 64-bit integer vector.\n\\returns A 64-bit integer vector containing the bitwise OR of both\n   parameters.","bases":[],"vars":[9285804629421087077,658978465218240479],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4988454494270813409,"detailed_name":"static inline __m64 _mm_srl_pi32(__m64 __m, __m64 __count)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"999:1-999:13|998:1-1002:2|2|-1","hover":"","comments":"Right-shifts each 32-bit integer element of the first parameter,\n   which is a 64-bit integer vector of [2 x i32], by the number of bits\n   specified by the second parameter, which is a 64-bit integer.\n\n   High-order bits are cleared. The 32-bit results are packed into a 64-bit\n   integer vector of [2 x i32].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PSRLD </c> instruction.\n\n\\param __m\n   A 64-bit integer vector of [2 x i32].\n\\param __count\n   A 64-bit integer vector interpreted as a single 64-bit integer.\n\\returns A 64-bit integer vector of [2 x i32] containing the right-shifted\n   values.","bases":[],"vars":[5262088012356964540,6882512910399949061],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5005877674626128416,"detailed_name":"static inline __m64 _mm_sll_pi16(__m64 __m, __m64 __count)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"730:1-730:13|729:1-733:2|2|-1","hover":"","comments":"Left-shifts each 16-bit signed integer element of the first\n   parameter, which is a 64-bit integer vector of [4 x i16], by the number\n   of bits specified by the second parameter, which is a 64-bit integer. The\n   lower 16 bits of the results are packed into a 64-bit integer vector of\n   [4 x i16].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PSLLW </c> instruction.\n\n\\param __m\n   A 64-bit integer vector of [4 x i16].\n\\param __count\n   A 64-bit integer vector interpreted as a single 64-bit integer.\n\\returns A 64-bit integer vector of [4 x i16] containing the left-shifted\n   values. If \\a __count is greater or equal to 16, the result is set to all\n   0.","bases":[],"vars":[16551356871312482415,13218799409765836765],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5186638468766219472,"detailed_name":"static inline __m64 _mm_srli_pi32(__m64 __m, int __count)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"1021:1-1021:14|1020:1-1024:2|2|-1","hover":"","comments":"Right-shifts each 32-bit integer element of a 64-bit integer vector\n   of [2 x i32] by the number of bits specified by a 32-bit integer.\n\n   High-order bits are cleared. The 32-bit results are packed into a 64-bit\n   integer vector of [2 x i32].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PSRLD </c> instruction.\n\n\\param __m\n   A 64-bit integer vector of [2 x i32].\n\\param __count\n   A 32-bit integer value.\n\\returns A 64-bit integer vector of [2 x i32] containing the right-shifted\n   values.","bases":[],"vars":[14728371180683150825,4416561914027246056],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5641900611694457481,"detailed_name":"static inline __m64 _mm_setzero_si64()","qual_name_offset":20,"short_name_offset":20,"short_name_size":16,"spell":"1282:1-1282:17|1281:1-1285:2|2|-1","hover":"","comments":"Constructs a 64-bit integer vector initialized to zero.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PXOR </c> instruction.\n\n\\returns An initialized 64-bit integer vector with all elements set to zero.","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5823799980578706794,"detailed_name":"static inline __m64 _mm_add_pi32(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"392:1-392:13|391:1-395:2|2|-1","hover":"","comments":"Adds each 32-bit integer element of the first 64-bit integer vector\n   of [2 x i32] to the corresponding 32-bit integer element of the second\n   64-bit integer vector of [2 x i32]. The lower 32 bits of the results are\n   packed into a 64-bit integer vector of [2 x i32].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PADDD </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [2 x i32].\n\\param __m2\n   A 64-bit integer vector of [2 x i32].\n\\returns A 64-bit integer vector of [2 x i32] containing the sums of both\n   parameters.","bases":[],"vars":[8354154913624583372,5632626530541731954],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6178148961563538612,"detailed_name":"static inline __m64 _mm_srl_pi16(__m64 __m, __m64 __count)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"954:1-954:13|953:1-957:2|2|-1","hover":"","comments":"Right-shifts each 16-bit integer element of the first parameter,\n   which is a 64-bit integer vector of [4 x i16], by the number of bits\n   specified by the second parameter, which is a 64-bit integer.\n\n   High-order bits are cleared. The 16-bit results are packed into a 64-bit\n   integer vector of [4 x i16].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PSRLW </c> instruction.\n\n\\param __m\n   A 64-bit integer vector of [4 x i16].\n\\param __count\n   A 64-bit integer vector interpreted as a single 64-bit integer.\n\\returns A 64-bit integer vector of [4 x i16] containing the right-shifted\n   values.","bases":[],"vars":[15966979176516811640,1799783883190642095],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6880960286055941072,"detailed_name":"static inline __m64 _mm_set_pi32(int __i1, int __i0)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"1303:1-1303:13|1302:1-1306:2|2|-1","hover":"","comments":"Constructs a 64-bit integer vector initialized with the specified\n   32-bit integer values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __i1\n   A 32-bit integer value used to initialize the upper 32 bits of the\n   result.\n\\param __i0\n   A 32-bit integer value used to initialize the lower 32 bits of the\n   result.\n\\returns An initialized 64-bit integer vector.","bases":[],"vars":[17866836965951997202,9676701262095608424],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["1380:12-1380:24|16420|-1","1438:12-1438:24|16420|-1"]},{"usr":6956560581811969279,"detailed_name":"static inline __m64 _mm_subs_pi16(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"590:1-590:14|589:1-593:2|2|-1","hover":"","comments":"Subtracts each 16-bit signed integer element of the second 64-bit\n   integer vector of [4 x i16] from the corresponding 16-bit signed integer\n   element of the first 64-bit integer vector of [4 x i16]. Positive results\n   greater than 0x7FFF are saturated to 0x7FFF. Negative results less than\n   0x8000 are saturated to 0x8000. The results are packed into a 64-bit\n   integer vector of [4 x i16].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PSUBSW </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [4 x i16] containing the minuends.\n\\param __m2\n   A 64-bit integer vector of [4 x i16] containing the subtrahends.\n\\returns A 64-bit integer vector of [4 x i16] containing the saturated\n   differences of both parameters.","bases":[],"vars":[5808654256640910260,15845215522232220226],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7044236210734878728,"detailed_name":"static inline __m64 _mm_srai_pi32(__m64 __m, int __count)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"931:1-931:14|930:1-934:2|2|-1","hover":"","comments":"Right-shifts each 32-bit integer element of a 64-bit integer vector\n   of [2 x i32] by the number of bits specified by a 32-bit integer.\n\n   High-order bits are filled with the sign bit of the initial value of each\n   32-bit element. The 32-bit results are packed into a 64-bit integer\n   vector of [2 x i32].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PSRAD </c> instruction.\n\n\\param __m\n   A 64-bit integer vector of [2 x i32].\n\\param __count\n   A 32-bit integer value.\n\\returns A 64-bit integer vector of [2 x i32] containing the right-shifted\n   values.","bases":[],"vars":[2295259344366992721,15077887317569930405],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7424496633311983864,"detailed_name":"static inline __m64 _mm_subs_pi8(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"567:1-567:13|566:1-570:2|2|-1","hover":"","comments":"Subtracts each 8-bit signed integer element of the second 64-bit\n   integer vector of [8 x i8] from the corresponding 8-bit signed integer\n   element of the first 64-bit integer vector of [8 x i8]. Positive results\n   greater than 0x7F are saturated to 0x7F. Negative results less than 0x80\n   are saturated to 0x80. The results are packed into a 64-bit integer\n   vector of [8 x i8].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PSUBSB </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [8 x i8] containing the minuends.\n\\param __m2\n   A 64-bit integer vector of [8 x i8] containing the subtrahends.\n\\returns A 64-bit integer vector of [8 x i8] containing the saturated\n   differences of both parameters.","bases":[],"vars":[1503526311342538735,7473978367439634630],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7515085707121620600,"detailed_name":"static inline __m64 _mm_set1_pi32(int __i)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"1378:1-1378:14|1377:1-1381:2|2|-1","hover":"","comments":"Constructs a 64-bit integer vector of [2 x i32], with each of the\n   32-bit integer vector elements set to the specified 32-bit integer\n   value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __i\n   A 32-bit integer value used to initialize each vector element of the\n   result.\n\\returns An initialized 64-bit integer vector of [2 x i32].","bases":[],"vars":[15407375375975449393],"callees":["1380:12-1380:24|6880960286055941072|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7852209015890041911,"detailed_name":"static inline __m64 _mm_and_si64(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"1080:1-1080:13|1079:1-1083:2|2|-1","hover":"","comments":"Performs a bitwise AND of two 64-bit integer vectors.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PAND </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector.\n\\param __m2\n   A 64-bit integer vector.\n\\returns A 64-bit integer vector containing the bitwise AND of both\n   parameters.","bases":[],"vars":[10175554510661675227,2446207888720347897],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8609833331672981072,"detailed_name":"static inline __m64 _mm_packs_pu16(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":14,"spell":"187:1-187:15|186:1-190:2|2|-1","hover":"","comments":"Converts 16-bit signed integers from both 64-bit integer vector\n   parameters of [4 x i16] into 8-bit unsigned integer values, and\n   constructs a 64-bit integer vector of [8 x i8] as the result. Values\n   greater than 0xFF are saturated to 0xFF. Values less than 0 are saturated\n   to 0.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PACKUSWB </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [4 x i16]. Each 16-bit element is treated as a\n   16-bit signed integer and is converted to an 8-bit unsigned integer with\n   saturation. Values greater than 0xFF are saturated to 0xFF. Values less\n   than 0 are saturated to 0. The converted [4 x i8] values are written to\n   the lower 32 bits of the result.\n\\param __m2\n   A 64-bit integer vector of [4 x i16]. Each 16-bit element is treated as a\n   16-bit signed integer and is converted to an 8-bit unsigned integer with\n   saturation. Values greater than 0xFF are saturated to 0xFF. Values less\n   than 0 are saturated to 0. The converted [4 x i8] values are written to\n   the upper 32 bits of the result.\n\\returns A 64-bit integer vector of [8 x i8] containing the converted\n   values.","bases":[],"vars":[13249953740950788561,3296726466344672880],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9012073013088129844,"detailed_name":"static inline __m64 _mm_subs_pu16(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"638:1-638:14|637:1-641:2|2|-1","hover":"","comments":"Subtracts each 16-bit unsigned integer element of the second 64-bit\n   integer vector of [4 x i16] from the corresponding 16-bit unsigned\n   integer element of the first 64-bit integer vector of [4 x i16].\n\n   If an element of the first vector is less than the corresponding element\n   of the second vector, the result is saturated to 0. The results are\n   packed into a 64-bit integer vector of [4 x i16].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PSUBUSW </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [4 x i16] containing the minuends.\n\\param __m2\n   A 64-bit integer vector of [4 x i16] containing the subtrahends.\n\\returns A 64-bit integer vector of [4 x i16] containing the saturated\n   differences of both parameters.","bases":[],"vars":[17303891337868865034,2644293374848422960],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9142469575164937285,"detailed_name":"static inline __m64 _mm_packs_pi16(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":14,"spell":"127:1-127:15|126:1-130:2|2|-1","hover":"","comments":"Converts 16-bit signed integers from both 64-bit integer vector\n   parameters of [4 x i16] into 8-bit signed integer values, and constructs\n   a 64-bit integer vector of [8 x i8] as the result. Positive values\n   greater than 0x7F are saturated to 0x7F. Negative values less than 0x80\n   are saturated to 0x80.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PACKSSWB </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [4 x i16]. Each 16-bit element is treated as a\n   16-bit signed integer and is converted to an 8-bit signed integer with\n   saturation. Positive values greater than 0x7F are saturated to 0x7F.\n   Negative values less than 0x80 are saturated to 0x80. The converted\n   [4 x i8] values are written to the lower 32 bits of the result.\n\\param __m2\n   A 64-bit integer vector of [4 x i16]. Each 16-bit element is treated as a\n   16-bit signed integer and is converted to an 8-bit signed integer with\n   saturation. Positive values greater than 0x7F are saturated to 0x7F.\n   Negative values less than 0x80 are saturated to 0x80. The converted\n   [4 x i8] values are written to the upper 32 bits of the result.\n\\returns A 64-bit integer vector of [8 x i8] containing the converted\n   values.","bases":[],"vars":[16297032408985161135,3474740136443405510],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9235587841370172812,"detailed_name":"static inline __m64 _mm_unpacklo_pi16(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":17,"spell":"308:1-308:18|307:1-311:2|2|-1","hover":"","comments":"Unpacks the lower 32 bits from two 64-bit integer vectors of\n   [4 x i16] and interleaves them into a 64-bit integer vector of [4 x i16].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PUNPCKLWD </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [4 x i16].\n   Bits [15:0] are written to bits [15:0] of the result. \\n\n   Bits [31:16] are written to bits [47:32] of the result.\n\\param __m2\n   A 64-bit integer vector of [4 x i16].\n   Bits [15:0] are written to bits [31:16] of the result. \\n\n   Bits [31:16] are written to bits [63:48] of the result.\n\\returns A 64-bit integer vector of [4 x i16] containing the interleaved\n   values.","bases":[],"vars":[8194109700904532513,7598609101655950904],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9255434186279700346,"detailed_name":"static inline __m64 _mm_cvtsi64_m64(long long __i)","qual_name_offset":20,"short_name_offset":20,"short_name_size":15,"spell":"81:1-81:16|80:1-84:2|2|-1","hover":"","comments":"Casts a 64-bit signed integer value into a 64-bit integer vector.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> MOVQ </c> instruction.\n\n\\param __i\n   A 64-bit signed integer.\n\\returns A 64-bit integer vector containing the same bitwise pattern as the\n   parameter.","bases":[],"vars":[7314013017857391302],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9874857298574419425,"detailed_name":"static inline __m64 _mm_set_pi8(char __b7, char __b6, char __b5, char __b4, char __b3, char __b2, char __b1, char __b0)","qual_name_offset":20,"short_name_offset":20,"short_name_size":11,"spell":"1357:1-1357:12|1356:1-1362:2|2|-1","hover":"","comments":"Constructs a 64-bit integer vector initialized with the specified\n   8-bit integer values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __b7\n   An 8-bit integer value used to initialize bits [63:56] of the result.\n\\param __b6\n   An 8-bit integer value used to initialize bits [55:48] of the result.\n\\param __b5\n   An 8-bit integer value used to initialize bits [47:40] of the result.\n\\param __b4\n   An 8-bit integer value used to initialize bits [39:32] of the result.\n\\param __b3\n   An 8-bit integer value used to initialize bits [31:24] of the result.\n\\param __b2\n   An 8-bit integer value used to initialize bits [23:16] of the result.\n\\param __b1\n   An 8-bit integer value used to initialize bits [15:8] of the result.\n\\param __b0\n   An 8-bit integer value used to initialize bits [7:0] of the result.\n\\returns An initialized 64-bit integer vector.","bases":[],"vars":[1439118394908915636,4375887877347723931,6315037459737236900,2363802278903726112,12169687806581214359,13959268500824690410,10102294259793067187,14106723373478074850],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["1417:12-1417:23|16420|-1","1493:12-1493:23|16420|-1"]},{"usr":10059099911770246489,"detailed_name":"static inline __m64 _mm_packs_pi32(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":14,"spell":"157:1-157:15|156:1-160:2|2|-1","hover":"","comments":"Converts 32-bit signed integers from both 64-bit integer vector\n   parameters of [2 x i32] into 16-bit signed integer values, and constructs\n   a 64-bit integer vector of [4 x i16] as the result. Positive values\n   greater than 0x7FFF are saturated to 0x7FFF. Negative values less than\n   0x8000 are saturated to 0x8000.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PACKSSDW </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [2 x i32]. Each 32-bit element is treated as a\n   32-bit signed integer and is converted to a 16-bit signed integer with\n   saturation. Positive values greater than 0x7FFF are saturated to 0x7FFF.\n   Negative values less than 0x8000 are saturated to 0x8000. The converted\n   [2 x i16] values are written to the lower 32 bits of the result.\n\\param __m2\n   A 64-bit integer vector of [2 x i32]. Each 32-bit element is treated as a\n   32-bit signed integer and is converted to a 16-bit signed integer with\n   saturation. Positive values greater than 0x7FFF are saturated to 0x7FFF.\n   Negative values less than 0x8000 are saturated to 0x8000. The converted\n   [2 x i16] values are written to the upper 32 bits of the result.\n\\returns A 64-bit integer vector of [4 x i16] containing the converted\n   values.","bases":[],"vars":[16068277333651398563,3161105149416149700],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10452268115244658069,"detailed_name":"static inline __m64 _mm_setr_pi8(char __b0, char __b1, char __b2, char __b3, char __b4, char __b5, char __b6, char __b7)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"1490:1-1490:13|1489:1-1494:2|2|-1","hover":"","comments":"Constructs a 64-bit integer vector, initialized in reverse order with\n   the specified 8-bit integer values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __b0\n   An 8-bit integer value used to initialize bits [7:0] of the result.\n\\param __b1\n   An 8-bit integer value used to initialize bits [15:8] of the result.\n\\param __b2\n   An 8-bit integer value used to initialize bits [23:16] of the result.\n\\param __b3\n   An 8-bit integer value used to initialize bits [31:24] of the result.\n\\param __b4\n   An 8-bit integer value used to initialize bits [39:32] of the result.\n\\param __b5\n   An 8-bit integer value used to initialize bits [47:40] of the result.\n\\param __b6\n   An 8-bit integer value used to initialize bits [55:48] of the result.\n\\param __b7\n   An 8-bit integer value used to initialize bits [63:56] of the result.\n\\returns An initialized 64-bit integer vector.","bases":[],"vars":[1138381173365837707,4916075596080648835,17315687922646816874,14859502757208758085,2348400778279560331,10558188786657538027,11436980415977087044,9978033908055022448],"callees":["1493:12-1493:23|9874857298574419425|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10495274572643510822,"detailed_name":"static inline __m64 _mm_adds_pu16(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"481:1-481:14|480:1-484:2|2|-1","hover":"","comments":"Adds each 16-bit unsigned integer element of the first 64-bit integer\n   vector of [4 x i16] to the corresponding 16-bit unsigned integer element\n   of the second 64-bit integer vector of [4 x i16]. Sums greater than\n   0xFFFF are saturated to 0xFFFF. The results are packed into a 64-bit\n   integer vector of [4 x i16].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PADDUSW </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [4 x i16].\n\\param __m2\n   A 64-bit integer vector of [4 x i16].\n\\returns A 64-bit integer vector of [4 x i16] containing the saturated\n   unsigned sums of both parameters.","bases":[],"vars":[7406941284841433703,2221962991675183538],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10911929593521044614,"detailed_name":"static inline __m64 _mm_unpackhi_pi16(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":17,"spell":"237:1-237:18|236:1-240:2|2|-1","hover":"","comments":"Unpacks the upper 32 bits from two 64-bit integer vectors of\n   [4 x i16] and interleaves them into a 64-bit integer vector of [4 x i16].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PUNPCKHWD </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [4 x i16].\n   Bits [47:32] are written to bits [15:0] of the result. \\n\n   Bits [63:48] are written to bits [47:32] of the result.\n\\param __m2\n   A 64-bit integer vector of [4 x i16].\n   Bits [47:32] are written to bits [31:16] of the result. \\n\n   Bits [63:48] are written to bits [63:48] of the result.\n\\returns A 64-bit integer vector of [4 x i16] containing the interleaved\n   values.","bases":[],"vars":[6921927801889347519,17956516449849087056],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":11444291523329246634,"detailed_name":"static inline __m64 _mm_set1_pi16(short __w)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"1397:1-1397:14|1396:1-1400:2|2|-1","hover":"","comments":"Constructs a 64-bit integer vector of [4 x i16], with each of the\n   16-bit integer vector elements set to the specified 16-bit integer\n   value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __w\n   A 16-bit integer value used to initialize each vector element of the\n   result.\n\\returns An initialized 64-bit integer vector of [4 x i16].","bases":[],"vars":[12383539496796576428],"callees":["1399:12-1399:24|15562921966604122828|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":11495996669051430254,"detailed_name":"static inline void _mm_empty()","qual_name_offset":19,"short_name_offset":19,"short_name_size":9,"spell":"31:1-31:10|30:1-34:2|2|-1","hover":"","comments":"Clears the MMX state by setting the state of the x87 stack registers\n   to empty.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> EMMS </c> instruction.","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12695478205535218249,"detailed_name":"static inline __m64 _mm_slli_pi32(__m64 __m, int __count)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"797:1-797:14|796:1-800:2|2|-1","hover":"","comments":"Left-shifts each 32-bit signed integer element of a 64-bit integer\n   vector of [2 x i32] by the number of bits specified by a 32-bit integer.\n   The lower 32 bits of the results are packed into a 64-bit integer vector\n   of [2 x i32].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PSLLD </c> instruction.\n\n\\param __m\n   A 64-bit integer vector of [2 x i32].\n\\param __count\n   A 32-bit integer value.\n\\returns A 64-bit integer vector of [2 x i32] containing the left-shifted\n   values. If \\a __count is greater or equal to 32, the result is set to all\n   0.","bases":[],"vars":[4930244653947877201,4742620327850320439],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12830719745701513475,"detailed_name":"static inline __m64 _mm_add_pi16(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"371:1-371:13|370:1-374:2|2|-1","hover":"","comments":"Adds each 16-bit integer element of the first 64-bit integer vector\n   of [4 x i16] to the corresponding 16-bit integer element of the second\n   64-bit integer vector of [4 x i16]. The lower 16 bits of the results are\n   packed into a 64-bit integer vector of [4 x i16].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PADDW </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [4 x i16].\n\\param __m2\n   A 64-bit integer vector of [4 x i16].\n\\returns A 64-bit integer vector of [4 x i16] containing the sums of both\n   parameters.","bases":[],"vars":[4796831609891731781,15890792541174311418],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13283237115482952618,"detailed_name":"static inline __m64 _mm_slli_pi16(__m64 __m, int __count)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"752:1-752:14|751:1-755:2|2|-1","hover":"","comments":"Left-shifts each 16-bit signed integer element of a 64-bit integer\n   vector of [4 x i16] by the number of bits specified by a 32-bit integer.\n   The lower 16 bits of the results are packed into a 64-bit integer vector\n   of [4 x i16].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PSLLW </c> instruction.\n\n\\param __m\n   A 64-bit integer vector of [4 x i16].\n\\param __count\n   A 32-bit integer value.\n\\returns A 64-bit integer vector of [4 x i16] containing the left-shifted\n   values. If \\a __count is greater or equal to 16, the result is set to all\n   0.","bases":[],"vars":[1086833838241232924,9406160884860036061],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13536700124552586778,"detailed_name":"static inline __m64 _mm_srli_si64(__m64 __m, int __count)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"1062:1-1062:14|1061:1-1065:2|2|-1","hover":"","comments":"Right-shifts the first parameter, which is a 64-bit integer, by the\n   number of bits specified by the second parameter, which is a 32-bit\n   integer.\n\n   High-order bits are cleared.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PSRLQ </c> instruction.\n\n\\param __m\n   A 64-bit integer vector interpreted as a single 64-bit integer.\n\\param __count\n   A 32-bit integer value.\n\\returns A 64-bit integer vector containing the right-shifted value.","bases":[],"vars":[2479523652681779611,4161051242034683484],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13913432530391351865,"detailed_name":"static inline __m64 _mm_cmpgt_pi8(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"1225:1-1225:14|1224:1-1228:2|2|-1","hover":"","comments":"Compares the 8-bit integer elements of two 64-bit integer vectors of\n   [8 x i8] to determine if the element of the first vector is greater than\n   the corresponding element of the second vector.\n\n   The comparison yields 0 for false, 0xFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PCMPGTB </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [8 x i8].\n\\param __m2\n   A 64-bit integer vector of [8 x i8].\n\\returns A 64-bit integer vector of [8 x i8] containing the comparison\n   results.","bases":[],"vars":[6202015747108009500,11893145650898416914],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14118265084029758118,"detailed_name":"static inline __m64 _mm_sll_pi32(__m64 __m, __m64 __count)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"775:1-775:13|774:1-778:2|2|-1","hover":"","comments":"Left-shifts each 32-bit signed integer element of the first\n   parameter, which is a 64-bit integer vector of [2 x i32], by the number\n   of bits specified by the second parameter, which is a 64-bit integer. The\n   lower 32 bits of the results are packed into a 64-bit integer vector of\n   [2 x i32].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PSLLD </c> instruction.\n\n\\param __m\n   A 64-bit integer vector of [2 x i32].\n\\param __count\n   A 64-bit integer vector interpreted as a single 64-bit integer.\n\\returns A 64-bit integer vector of [2 x i32] containing the left-shifted\n   values. If \\a __count is greater or equal to 32, the result is set to all\n   0.","bases":[],"vars":[9375230043389356768,15447126335752502299],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14149518040227727153,"detailed_name":"static inline __m64 _mm_unpacklo_pi32(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":17,"spell":"329:1-329:18|328:1-332:2|2|-1","hover":"","comments":"Unpacks the lower 32 bits from two 64-bit integer vectors of\n   [2 x i32] and interleaves them into a 64-bit integer vector of [2 x i32].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PUNPCKLDQ </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [2 x i32]. The lower 32 bits are written to\n   the lower 32 bits of the result.\n\\param __m2\n   A 64-bit integer vector of [2 x i32]. The lower 32 bits are written to\n   the upper 32 bits of the result.\n\\returns A 64-bit integer vector of [2 x i32] containing the interleaved\n   values.","bases":[],"vars":[2690486839867975101,12875008812528151479],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14251692788828226334,"detailed_name":"static inline __m64 _mm_madd_pi16(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"665:1-665:14|664:1-668:2|2|-1","hover":"","comments":"Multiplies each 16-bit signed integer element of the first 64-bit\n   integer vector of [4 x i16] by the corresponding 16-bit signed integer\n   element of the second 64-bit integer vector of [4 x i16] and get four\n   32-bit products. Adds adjacent pairs of products to get two 32-bit sums.\n   The lower 32 bits of these two sums are packed into a 64-bit integer\n   vector of [2 x i32].\n\n   For example, bits [15:0] of both parameters are multiplied, bits [31:16]\n   of both parameters are multiplied, and the sum of both results is written\n   to bits [31:0] of the result.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PMADDWD </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [4 x i16].\n\\param __m2\n   A 64-bit integer vector of [4 x i16].\n\\returns A 64-bit integer vector of [2 x i32] containing the sums of\n   products of both parameters.","bases":[],"vars":[2967504737731903456,17044227423096155678],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14471970811923086250,"detailed_name":"static inline __m64 _mm_mulhi_pi16(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":14,"spell":"686:1-686:15|685:1-689:2|2|-1","hover":"","comments":"Multiplies each 16-bit signed integer element of the first 64-bit\n   integer vector of [4 x i16] by the corresponding 16-bit signed integer\n   element of the second 64-bit integer vector of [4 x i16]. Packs the upper\n   16 bits of the 32-bit products into a 64-bit integer vector of [4 x i16].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PMULHW </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [4 x i16].\n\\param __m2\n   A 64-bit integer vector of [4 x i16].\n\\returns A 64-bit integer vector of [4 x i16] containing the upper 16 bits\n   of the products of both parameters.","bases":[],"vars":[7739821291870710416,13316554676850520961],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14521933552639950146,"detailed_name":"static inline __m64 _mm_andnot_si64(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":15,"spell":"1101:1-1101:16|1100:1-1104:2|2|-1","hover":"","comments":"Performs a bitwise NOT of the first 64-bit integer vector, and then\n   performs a bitwise AND of the intermediate result and the second 64-bit\n   integer vector.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PANDN </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector. The one's complement of this parameter is used\n   in the bitwise AND.\n\\param __m2\n   A 64-bit integer vector.\n\\returns A 64-bit integer vector containing the bitwise AND of the second\n   parameter and the one's complement of the first parameter.","bases":[],"vars":[17682376110226582379,3645704400727558272],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14979842015311476869,"detailed_name":"static inline __m64 _mm_srl_si64(__m64 __m, __m64 __count)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"1041:1-1041:13|1040:1-1044:2|2|-1","hover":"","comments":"Right-shifts the first 64-bit integer parameter by the number of bits\n   specified by the second 64-bit integer parameter.\n\n   High-order bits are cleared.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PSRLQ </c> instruction.\n\n\\param __m\n   A 64-bit integer vector interpreted as a single 64-bit integer.\n\\param __count\n   A 64-bit integer vector interpreted as a single 64-bit integer.\n\\returns A 64-bit integer vector containing the right-shifted value.","bases":[],"vars":[12877352716179003506,9034202850074411725],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15562921966604122828,"detailed_name":"static inline __m64 _mm_set_pi16(short __s3, short __s2, short __s1, short __s0)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"1326:1-1326:13|1325:1-1329:2|2|-1","hover":"","comments":"Constructs a 64-bit integer vector initialized with the specified\n   16-bit integer values.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __s3\n   A 16-bit integer value used to initialize bits [63:48] of the result.\n\\param __s2\n   A 16-bit integer value used to initialize bits [47:32] of the result.\n\\param __s1\n   A 16-bit integer value used to initialize bits [31:16] of the result.\n\\param __s0\n   A 16-bit integer value used to initialize bits [15:0] of the result.\n\\returns An initialized 64-bit integer vector.","bases":[],"vars":[1681167312833345168,5898170423119174525,14638018008248370863,7811701590650017143],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":["1399:12-1399:24|16420|-1","1461:12-1461:24|16420|-1"]},{"usr":15677125340507785347,"detailed_name":"static inline __m64 _mm_unpackhi_pi32(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":17,"spell":"258:1-258:18|257:1-261:2|2|-1","hover":"","comments":"Unpacks the upper 32 bits from two 64-bit integer vectors of\n   [2 x i32] and interleaves them into a 64-bit integer vector of [2 x i32].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PUNPCKHDQ </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [2 x i32]. The upper 32 bits are written to\n   the lower 32 bits of the result.\n\\param __m2\n   A 64-bit integer vector of [2 x i32]. The upper 32 bits are written to\n   the upper 32 bits of the result.\n\\returns A 64-bit integer vector of [2 x i32] containing the interleaved\n   values.","bases":[],"vars":[5837501505890340112,5967841163385842698],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15720564430035218773,"detailed_name":"static inline __m64 _mm_adds_pi16(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"437:1-437:14|436:1-440:2|2|-1","hover":"","comments":"Adds each 16-bit signed integer element of the first 64-bit integer\n   vector of [4 x i16] to the corresponding 16-bit signed integer element of\n   the second 64-bit integer vector of [4 x i16]. Positive sums greater than\n   0x7FFF are saturated to 0x7FFF. Negative sums less than 0x8000 are\n   saturated to 0x8000. The results are packed into a 64-bit integer vector\n   of [4 x i16].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PADDSW </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [4 x i16].\n\\param __m2\n   A 64-bit integer vector of [4 x i16].\n\\returns A 64-bit integer vector of [4 x i16] containing the saturated sums\n   of both parameters.","bases":[],"vars":[5475421054267380520,8693513426731640514],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15794924931282136915,"detailed_name":"static inline __m64 _mm_cmpeq_pi8(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"1159:1-1159:14|1158:1-1162:2|2|-1","hover":"","comments":"Compares the 8-bit integer elements of two 64-bit integer vectors of\n   [8 x i8] to determine if the element of the first vector is equal to the\n   corresponding element of the second vector.\n\n   The comparison yields 0 for false, 0xFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PCMPEQB </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [8 x i8].\n\\param __m2\n   A 64-bit integer vector of [8 x i8].\n\\returns A 64-bit integer vector of [8 x i8] containing the comparison\n   results.","bases":[],"vars":[13327068067921881098,11226575972237765432],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15879358274095157006,"detailed_name":"static inline __m64 _mm_srai_pi16(__m64 __m, int __count)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"884:1-884:14|883:1-887:2|2|-1","hover":"","comments":"Right-shifts each 16-bit integer element of a 64-bit integer vector\n   of [4 x i16] by the number of bits specified by a 32-bit integer.\n\n   High-order bits are filled with the sign bit of the initial value of each\n   16-bit element. The 16-bit results are packed into a 64-bit integer\n   vector of [4 x i16].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PSRAW </c> instruction.\n\n\\param __m\n   A 64-bit integer vector of [4 x i16].\n\\param __count\n   A 32-bit integer value.\n\\returns A 64-bit integer vector of [4 x i16] containing the right-shifted\n   values.","bases":[],"vars":[14599271308080535708,17100476879356529972],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15977734464112570350,"detailed_name":"static inline __m64 _mm_cmpeq_pi32(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":14,"spell":"1203:1-1203:15|1202:1-1206:2|2|-1","hover":"","comments":"Compares the 32-bit integer elements of two 64-bit integer vectors of\n   [2 x i32] to determine if the element of the first vector is equal to the\n   corresponding element of the second vector.\n\n   The comparison yields 0 for false, 0xFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PCMPEQD </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [2 x i32].\n\\param __m2\n   A 64-bit integer vector of [2 x i32].\n\\returns A 64-bit integer vector of [2 x i32] containing the comparison\n   results.","bases":[],"vars":[14974546813324844620,6105543745244602162],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16107607615097712025,"detailed_name":"static inline __m64 _mm_cmpgt_pi32(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":14,"spell":"1269:1-1269:15|1268:1-1272:2|2|-1","hover":"","comments":"Compares the 32-bit integer elements of two 64-bit integer vectors of\n   [2 x i32] to determine if the element of the first vector is greater than\n   the corresponding element of the second vector.\n\n   The comparison yields 0 for false, 0xFFFFFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PCMPGTD </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [2 x i32].\n\\param __m2\n   A 64-bit integer vector of [2 x i32].\n\\returns A 64-bit integer vector of [2 x i32] containing the comparison\n   results.","bases":[],"vars":[17608997182419857153,10831004384612515227],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16272164741579589147,"detailed_name":"static inline __m64 _mm_set1_pi8(char __b)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"1415:1-1415:13|1414:1-1418:2|2|-1","hover":"","comments":"Constructs a 64-bit integer vector of [8 x i8], with each of the\n   8-bit integer vector elements set to the specified 8-bit integer value.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic is a utility function and does not correspond to a specific\n   instruction.\n\n\\param __b\n   An 8-bit integer value used to initialize each vector element of the\n   result.\n\\returns An initialized 64-bit integer vector of [8 x i8].","bases":[],"vars":[3816264092007376658],"callees":["1417:12-1417:23|9874857298574419425|3|16420"],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16680938651029667415,"detailed_name":"static inline __m64 _mm_adds_pi8(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"414:1-414:13|413:1-417:2|2|-1","hover":"","comments":"Adds each 8-bit signed integer element of the first 64-bit integer\n   vector of [8 x i8] to the corresponding 8-bit signed integer element of\n   the second 64-bit integer vector of [8 x i8]. Positive sums greater than\n   0x7F are saturated to 0x7F. Negative sums less than 0x80 are saturated to\n   0x80. The results are packed into a 64-bit integer vector of [8 x i8].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PADDSB </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [8 x i8].\n\\param __m2\n   A 64-bit integer vector of [8 x i8].\n\\returns A 64-bit integer vector of [8 x i8] containing the saturated sums\n   of both parameters.","bases":[],"vars":[16840241932338388567,3462298471841442033],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16807284295351134903,"detailed_name":"static inline __m64 _mm_adds_pu8(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"459:1-459:13|458:1-462:2|2|-1","hover":"","comments":"Adds each 8-bit unsigned integer element of the first 64-bit integer\n   vector of [8 x i8] to the corresponding 8-bit unsigned integer element of\n   the second 64-bit integer vector of [8 x i8]. Sums greater than 0xFF are\n   saturated to 0xFF. The results are packed into a 64-bit integer vector of\n   [8 x i8].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PADDUSB </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [8 x i8].\n\\param __m2\n   A 64-bit integer vector of [8 x i8].\n\\returns A 64-bit integer vector of [8 x i8] containing the saturated\n   unsigned sums of both parameters.","bases":[],"vars":[9676696089768511520,5643297571951472050],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16882219184789815957,"detailed_name":"static inline __m64 _mm_subs_pu8(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"614:1-614:13|613:1-617:2|2|-1","hover":"","comments":"Subtracts each 8-bit unsigned integer element of the second 64-bit\n   integer vector of [8 x i8] from the corresponding 8-bit unsigned integer\n   element of the first 64-bit integer vector of [8 x i8].\n\n   If an element of the first vector is less than the corresponding element\n   of the second vector, the result is saturated to 0. The results are\n   packed into a 64-bit integer vector of [8 x i8].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PSUBUSB </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [8 x i8] containing the minuends.\n\\param __m2\n   A 64-bit integer vector of [8 x i8] containing the subtrahends.\n\\returns A 64-bit integer vector of [8 x i8] containing the saturated\n   differences of both parameters.","bases":[],"vars":[12928843681810744940,5340562485536601960],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16944636914868188170,"detailed_name":"static inline __m64 _mm_sra_pi16(__m64 __m, __m64 __count)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"861:1-861:13|860:1-864:2|2|-1","hover":"","comments":"Right-shifts each 16-bit integer element of the first parameter,\n   which is a 64-bit integer vector of [4 x i16], by the number of bits\n   specified by the second parameter, which is a 64-bit integer.\n\n   High-order bits are filled with the sign bit of the initial value of each\n   16-bit element. The 16-bit results are packed into a 64-bit integer\n   vector of [4 x i16].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PSRAW </c> instruction.\n\n\\param __m\n   A 64-bit integer vector of [4 x i16].\n\\param __count\n   A 64-bit integer vector interpreted as a single 64-bit integer.\n\\returns A 64-bit integer vector of [4 x i16] containing the right-shifted\n   values.","bases":[],"vars":[3158133787634271716,3801234435676635694],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16999907123637948174,"detailed_name":"static inline __m64 _mm_sra_pi32(__m64 __m, __m64 __count)","qual_name_offset":20,"short_name_offset":20,"short_name_size":12,"spell":"908:1-908:13|907:1-911:2|2|-1","hover":"","comments":"Right-shifts each 32-bit integer element of the first parameter,\n   which is a 64-bit integer vector of [2 x i32], by the number of bits\n   specified by the second parameter, which is a 64-bit integer.\n\n   High-order bits are filled with the sign bit of the initial value of each\n   32-bit element. The 32-bit results are packed into a 64-bit integer\n   vector of [2 x i32].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PSRAD </c> instruction.\n\n\\param __m\n   A 64-bit integer vector of [2 x i32].\n\\param __count\n   A 64-bit integer vector interpreted as a single 64-bit integer.\n\\returns A 64-bit integer vector of [2 x i32] containing the right-shifted\n   values.","bases":[],"vars":[12408773071322851338,13339870890974674903],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17270242881464463492,"detailed_name":"static inline __m64 _mm_srli_pi16(__m64 __m, int __count)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"976:1-976:14|975:1-979:2|2|-1","hover":"","comments":"Right-shifts each 16-bit integer element of a 64-bit integer vector\n   of [4 x i16] by the number of bits specified by a 32-bit integer.\n\n   High-order bits are cleared. The 16-bit results are packed into a 64-bit\n   integer vector of [4 x i16].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PSRLW </c> instruction.\n\n\\param __m\n   A 64-bit integer vector of [4 x i16].\n\\param __count\n   A 32-bit integer value.\n\\returns A 64-bit integer vector of [4 x i16] containing the right-shifted\n   values.","bases":[],"vars":[8314720054267433417,11398738111879251664],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17370781440218288009,"detailed_name":"static inline __m64 _mm_mullo_pi16(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":14,"spell":"707:1-707:15|706:1-710:2|2|-1","hover":"","comments":"Multiplies each 16-bit signed integer element of the first 64-bit\n   integer vector of [4 x i16] by the corresponding 16-bit signed integer\n   element of the second 64-bit integer vector of [4 x i16]. Packs the lower\n   16 bits of the 32-bit products into a 64-bit integer vector of [4 x i16].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PMULLW </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [4 x i16].\n\\param __m2\n   A 64-bit integer vector of [4 x i16].\n\\returns A 64-bit integer vector of [4 x i16] containing the lower 16 bits\n   of the products of both parameters.","bases":[],"vars":[15484572858521869162,12585605761286833292],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17413944879498595447,"detailed_name":"static inline __m64 _mm_unpackhi_pi8(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":16,"spell":"214:1-214:17|213:1-217:2|2|-1","hover":"","comments":"Unpacks the upper 32 bits from two 64-bit integer vectors of [8 x i8]\n   and interleaves them into a 64-bit integer vector of [8 x i8].\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PUNPCKHBW </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [8 x i8]. \\n\n   Bits [39:32] are written to bits [7:0] of the result. \\n\n   Bits [47:40] are written to bits [23:16] of the result. \\n\n   Bits [55:48] are written to bits [39:32] of the result. \\n\n   Bits [63:56] are written to bits [55:48] of the result.\n\\param __m2\n   A 64-bit integer vector of [8 x i8].\n   Bits [39:32] are written to bits [15:8] of the result. \\n\n   Bits [47:40] are written to bits [31:24] of the result. \\n\n   Bits [55:48] are written to bits [47:40] of the result. \\n\n   Bits [63:56] are written to bits [63:56] of the result.\n\\returns A 64-bit integer vector of [8 x i8] containing the interleaved\n   values.","bases":[],"vars":[15535515564065751513,17236623928742025734],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":18247771076637499173,"detailed_name":"static inline __m64 _mm_slli_si64(__m64 __m, int __count)","qual_name_offset":20,"short_name_offset":20,"short_name_size":13,"spell":"837:1-837:14|836:1-840:2|2|-1","hover":"","comments":"Left-shifts the first parameter, which is a 64-bit integer, by the\n   number of bits specified by the second parameter, which is a 32-bit\n   integer. The lower 64 bits of result are returned.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PSLLQ </c> instruction.\n\n\\param __m\n   A 64-bit integer vector interpreted as a single 64-bit integer.\n\\param __count\n   A 32-bit integer value.\n\\returns A 64-bit integer vector containing the left-shifted value. If\n    \\a __count is greater or equal to 64, the result is set to 0.","bases":[],"vars":[9755218876877996702,3299071128256930601],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":18278976756716773013,"detailed_name":"static inline __m64 _mm_cmpeq_pi16(__m64 __m1, __m64 __m2)","qual_name_offset":20,"short_name_offset":20,"short_name_size":14,"spell":"1181:1-1181:15|1180:1-1184:2|2|-1","hover":"","comments":"Compares the 16-bit integer elements of two 64-bit integer vectors of\n   [4 x i16] to determine if the element of the first vector is equal to the\n   corresponding element of the second vector.\n\n   The comparison yields 0 for false, 0xFFFF for true.\n\n\\headerfile <x86intrin.h>\n\nThis intrinsic corresponds to the <c> PCMPEQW </c> instruction.\n\n\\param __m1\n   A 64-bit integer vector of [4 x i16].\n\\param __m2\n   A 64-bit integer vector of [4 x i16].\n\\returns A 64-bit integer vector of [4 x i16] containing the comparison\n   results.","bases":[],"vars":[17627300910135581193,8597704364424779502],"callees":[],"kind":12,"parent_kind":1,"storage":0,"declarations":[],"derived":[],"uses":[]}],"usr2type":[{"usr":110,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[1439118394908915636,4375887877347723931,6315037459737236900,2363802278903726112,12169687806581214359,13959268500824690410,10102294259793067187,14106723373478074850,3816264092007376658,1138381173365837707,4916075596080648835,17315687922646816874,14859502757208758085,2348400778279560331,10558188786657538027,11436980415977087044,9978033908055022448],"uses":[]},{"usr":113,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[1681167312833345168,5898170423119174525,14638018008248370863,7811701590650017143,12383539496796576428,4682034867645853618,16961521761812821514,2576506460800589557,15545825086818611297],"uses":[]},{"usr":114,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[13631027381771966608,9406160884860036061,4742620327850320439,3299071128256930601,17100476879356529972,15077887317569930405,11398738111879251664,4416561914027246056,4161051242034683484,17866836965951997202,9676701262095608424,15407375375975449393,1729627177780877298,10362089610205765233],"uses":[]},{"usr":116,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[7314013017857391302],"uses":[]},{"usr":8534292580219847256,"detailed_name":"typedef __attribute__((__vector_size__(8 * sizeof(char)))) char __v8qi","qual_name_offset":64,"short_name_offset":64,"short_name_size":6,"hover":"","comments":"","spell":"18:14-18:20|18:1-18:20|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[],"uses":["216:45-216:51|4|-1","216:59-216:65|4|-1","287:45-287:51|4|-1","287:59-287:65|4|-1","352:41-352:47|4|-1","352:55-352:61|4|-1","416:42-416:48|4|-1","416:56-416:62|4|-1","461:43-461:49|4|-1","461:57-461:63|4|-1","504:41-504:47|4|-1","504:55-504:61|4|-1","569:42-569:48|4|-1","569:56-569:62|4|-1","616:43-616:49|4|-1","616:57-616:63|4|-1","1161:43-1161:49|4|-1","1161:57-1161:63|4|-1","1227:43-1227:49|4|-1","1227:57-1227:63|4|-1"]},{"usr":8788115492869736674,"detailed_name":"typedef __attribute__((__vector_size__(1 * sizeof(long long)))) long long __m64","qual_name_offset":74,"short_name_offset":74,"short_name_size":5,"hover":"","comments":"","spell":"13:19-13:24|13:1-13:24|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[8687711397172331019,8608759305898300153,16297032408985161135,3474740136443405510,16068277333651398563,3161105149416149700,13249953740950788561,3296726466344672880,15535515564065751513,17236623928742025734,6921927801889347519,17956516449849087056,5837501505890340112,5967841163385842698,8142405934569392073,12851876900550388021,8194109700904532513,7598609101655950904,2690486839867975101,12875008812528151479,4331231869934765163,699372558437663438,4796831609891731781,15890792541174311418,8354154913624583372,5632626530541731954,16840241932338388567,3462298471841442033,5475421054267380520,8693513426731640514,9676696089768511520,5643297571951472050,7406941284841433703,2221962991675183538,10803881937850520679,14899691116163578942,17615150078163146318,3325715498478575144,18432221264572008469,2075246622588306559,1503526311342538735,7473978367439634630,5808654256640910260,15845215522232220226,12928843681810744940,5340562485536601960,17303891337868865034,2644293374848422960,2967504737731903456,17044227423096155678,7739821291870710416,13316554676850520961,15484572858521869162,12585605761286833292,16551356871312482415,13218799409765836765,1086833838241232924,9375230043389356768,15447126335752502299,4930244653947877201,18410919378090522973,4227589291245822936,9755218876877996702,3158133787634271716,3801234435676635694,14599271308080535708,12408773071322851338,13339870890974674903,2295259344366992721,15966979176516811640,1799783883190642095,8314720054267433417,5262088012356964540,6882512910399949061,14728371180683150825,12877352716179003506,9034202850074411725,2479523652681779611,10175554510661675227,2446207888720347897,17682376110226582379,3645704400727558272,9285804629421087077,658978465218240479,15221063988834975821,17742881091664255555,13327068067921881098,11226575972237765432,17627300910135581193,8597704364424779502,14974546813324844620,6105543745244602162,6202015747108009500,11893145650898416914,7024750893490893004,3535436590948874039,17608997182419857153,10831004384612515227],"uses":["47:19-47:24|4|-1","50:13-50:18|4|-1","65:18-65:23|4|-1","80:19-80:24|4|-1","83:13-83:18|4|-1","97:17-97:22|4|-1","126:19-126:24|4|-1","127:16-127:21|4|-1","127:28-127:33|4|-1","129:13-129:18|4|-1","156:19-156:24|4|-1","157:16-157:21|4|-1","157:28-157:33|4|-1","159:13-159:18|4|-1","186:19-186:24|4|-1","187:16-187:21|4|-1","187:28-187:33|4|-1","189:13-189:18|4|-1","213:19-213:24|4|-1","214:18-214:23|4|-1","214:30-214:35|4|-1","216:13-216:18|4|-1","236:19-236:24|4|-1","237:19-237:24|4|-1","237:31-237:36|4|-1","239:13-239:18|4|-1","257:19-257:24|4|-1","258:19-258:24|4|-1","258:31-258:36|4|-1","260:13-260:18|4|-1","284:19-284:24|4|-1","285:18-285:23|4|-1","285:30-285:35|4|-1","287:13-287:18|4|-1","307:19-307:24|4|-1","308:19-308:24|4|-1","308:31-308:36|4|-1","310:13-310:18|4|-1","328:19-328:24|4|-1","329:19-329:24|4|-1","329:31-329:36|4|-1","331:13-331:18|4|-1","349:19-349:24|4|-1","350:13-350:18|4|-1","350:25-350:30|4|-1","352:13-352:18|4|-1","370:19-370:24|4|-1","371:14-371:19|4|-1","371:26-371:31|4|-1","373:13-373:18|4|-1","391:19-391:24|4|-1","392:14-392:19|4|-1","392:26-392:31|4|-1","394:13-394:18|4|-1","413:19-413:24|4|-1","414:14-414:19|4|-1","414:26-414:31|4|-1","416:13-416:18|4|-1","436:19-436:24|4|-1","437:15-437:20|4|-1","437:27-437:32|4|-1","439:13-439:18|4|-1","458:19-458:24|4|-1","459:14-459:19|4|-1","459:26-459:31|4|-1","461:13-461:18|4|-1","480:19-480:24|4|-1","481:15-481:20|4|-1","481:27-481:32|4|-1","483:13-483:18|4|-1","501:19-501:24|4|-1","502:13-502:18|4|-1","502:25-502:30|4|-1","504:13-504:18|4|-1","522:19-522:24|4|-1","523:14-523:19|4|-1","523:26-523:31|4|-1","525:13-525:18|4|-1","543:19-543:24|4|-1","544:14-544:19|4|-1","544:26-544:31|4|-1","546:13-546:18|4|-1","566:19-566:24|4|-1","567:14-567:19|4|-1","567:26-567:31|4|-1","569:13-569:18|4|-1","589:19-589:24|4|-1","590:15-590:20|4|-1","590:27-590:32|4|-1","592:13-592:18|4|-1","613:19-613:24|4|-1","614:14-614:19|4|-1","614:26-614:31|4|-1","616:13-616:18|4|-1","637:19-637:24|4|-1","638:15-638:20|4|-1","638:27-638:32|4|-1","640:13-640:18|4|-1","664:19-664:24|4|-1","665:15-665:20|4|-1","665:27-665:32|4|-1","667:13-667:18|4|-1","685:19-685:24|4|-1","686:16-686:21|4|-1","686:28-686:33|4|-1","688:13-688:18|4|-1","706:19-706:24|4|-1","707:16-707:21|4|-1","707:28-707:33|4|-1","709:13-709:18|4|-1","729:19-729:24|4|-1","730:14-730:19|4|-1","730:25-730:30|4|-1","732:13-732:18|4|-1","751:19-751:24|4|-1","752:15-752:20|4|-1","754:13-754:18|4|-1","774:19-774:24|4|-1","775:14-775:19|4|-1","775:25-775:30|4|-1","777:13-777:18|4|-1","796:19-796:24|4|-1","797:15-797:20|4|-1","799:13-799:18|4|-1","816:19-816:24|4|-1","817:14-817:19|4|-1","817:25-817:30|4|-1","819:13-819:18|4|-1","836:19-836:24|4|-1","837:15-837:20|4|-1","839:13-839:18|4|-1","860:19-860:24|4|-1","861:14-861:19|4|-1","861:25-861:30|4|-1","863:13-863:18|4|-1","883:19-883:24|4|-1","884:15-884:20|4|-1","886:13-886:18|4|-1","907:19-907:24|4|-1","908:14-908:19|4|-1","908:25-908:30|4|-1","910:13-910:18|4|-1","930:19-930:24|4|-1","931:15-931:20|4|-1","933:13-933:18|4|-1","953:19-953:24|4|-1","954:14-954:19|4|-1","954:25-954:30|4|-1","956:13-956:18|4|-1","975:19-975:24|4|-1","976:15-976:20|4|-1","978:13-978:18|4|-1","998:19-998:24|4|-1","999:14-999:19|4|-1","999:25-999:30|4|-1","1001:13-1001:18|4|-1","1020:19-1020:24|4|-1","1021:15-1021:20|4|-1","1023:13-1023:18|4|-1","1040:19-1040:24|4|-1","1041:14-1041:19|4|-1","1041:25-1041:30|4|-1","1043:13-1043:18|4|-1","1061:19-1061:24|4|-1","1062:15-1062:20|4|-1","1064:13-1064:18|4|-1","1079:19-1079:24|4|-1","1080:14-1080:19|4|-1","1080:26-1080:31|4|-1","1100:19-1100:24|4|-1","1101:17-1101:22|4|-1","1101:29-1101:34|4|-1","1118:19-1118:24|4|-1","1119:13-1119:18|4|-1","1119:25-1119:30|4|-1","1136:19-1136:24|4|-1","1137:14-1137:19|4|-1","1137:26-1137:31|4|-1","1158:19-1158:24|4|-1","1159:15-1159:20|4|-1","1159:27-1159:32|4|-1","1161:13-1161:18|4|-1","1180:19-1180:24|4|-1","1181:16-1181:21|4|-1","1181:28-1181:33|4|-1","1183:13-1183:18|4|-1","1202:19-1202:24|4|-1","1203:16-1203:21|4|-1","1203:28-1203:33|4|-1","1205:13-1205:18|4|-1","1224:19-1224:24|4|-1","1225:15-1225:20|4|-1","1225:27-1225:32|4|-1","1227:13-1227:18|4|-1","1246:19-1246:24|4|-1","1247:16-1247:21|4|-1","1247:28-1247:33|4|-1","1249:13-1249:18|4|-1","1268:19-1268:24|4|-1","1269:16-1269:21|4|-1","1269:28-1269:33|4|-1","1271:13-1271:18|4|-1","1281:19-1281:24|4|-1","1284:27-1284:32|4|-1","1302:19-1302:24|4|-1","1305:13-1305:18|4|-1","1325:19-1325:24|4|-1","1328:13-1328:18|4|-1","1356:19-1356:24|4|-1","1360:13-1360:18|4|-1","1377:19-1377:24|4|-1","1396:19-1396:24|4|-1","1414:19-1414:24|4|-1","1435:19-1435:24|4|-1","1458:19-1458:24|4|-1","1489:19-1489:24|4|-1"]},{"usr":8975352893736947550,"detailed_name":"typedef __attribute__((__vector_size__(4 * sizeof(short)))) short __v4hi","qual_name_offset":66,"short_name_offset":66,"short_name_size":6,"hover":"","comments":"","spell":"17:15-17:21|17:1-17:21|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[],"uses":["129:44-129:50|4|-1","129:58-129:64|4|-1","189:44-189:50|4|-1","189:58-189:64|4|-1","239:45-239:51|4|-1","239:59-239:65|4|-1","310:45-310:51|4|-1","310:59-310:65|4|-1","373:41-373:47|4|-1","373:55-373:61|4|-1","439:42-439:48|4|-1","439:56-439:62|4|-1","483:43-483:49|4|-1","483:57-483:63|4|-1","525:41-525:47|4|-1","525:55-525:61|4|-1","592:42-592:48|4|-1","592:56-592:62|4|-1","640:43-640:49|4|-1","640:57-640:63|4|-1","667:43-667:49|4|-1","667:57-667:63|4|-1","688:42-688:48|4|-1","688:56-688:62|4|-1","709:42-709:48|4|-1","709:56-709:62|4|-1","732:41-732:47|4|-1","754:42-754:48|4|-1","863:41-863:47|4|-1","886:42-886:48|4|-1","956:41-956:47|4|-1","978:42-978:48|4|-1","1183:43-1183:49|4|-1","1183:57-1183:63|4|-1","1249:43-1249:49|4|-1","1249:57-1249:63|4|-1"]},{"usr":9787341394710254332,"detailed_name":"typedef __attribute__((__vector_size__(2 * sizeof(int)))) int __v2si","qual_name_offset":62,"short_name_offset":62,"short_name_size":6,"hover":"","comments":"","spell":"16:13-16:19|16:1-16:19|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[],"uses":["67:41-67:47|4|-1","159:44-159:50|4|-1","159:58-159:64|4|-1","260:45-260:51|4|-1","260:59-260:65|4|-1","331:45-331:51|4|-1","331:59-331:65|4|-1","394:41-394:47|4|-1","394:55-394:61|4|-1","546:41-546:47|4|-1","546:55-546:61|4|-1","777:41-777:47|4|-1","799:42-799:48|4|-1","910:41-910:47|4|-1","933:42-933:48|4|-1","1001:41-1001:47|4|-1","1023:42-1023:48|4|-1","1205:43-1205:49|4|-1","1205:57-1205:63|4|-1","1271:43-1271:49|4|-1","1271:57-1271:63|4|-1"]},{"usr":12921169845601936899,"detailed_name":"typedef __attribute__((__vector_size__(1 * sizeof(long long)))) long long __v1di","qual_name_offset":74,"short_name_offset":74,"short_name_size":6,"hover":"","comments":"","spell":"15:19-15:25|15:1-15:25|2|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":1,"declarations":[],"derived":[],"instances":[],"uses":["819:41-819:47|4|-1","839:42-839:48|4|-1","1043:41-1043:47|4|-1","1064:42-1064:48|4|-1","1082:33-1082:39|4|-1","1082:47-1082:53|4|-1","1103:34-1103:40|4|-1","1103:48-1103:54|4|-1","1121:32-1121:38|4|-1","1121:46-1121:52|4|-1","1139:33-1139:39|4|-1","1139:47-1139:53|4|-1"]}],"usr2var":[{"usr":249586968131304459,"detailed_name":"_m_pcmpeqw","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _m_pcmpeqw _mm_cmpeq_pi16","comments":"","spell":"1551:9-1551:19|1551:9-1551:34|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":658978465218240479,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1119:31-1119:35|1119:25-1119:35|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1121:53-1121:57|12|-1"]},{"usr":699372558437663438,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"350:31-350:35|350:25-350:35|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["352:62-352:66|12|-1"]},{"usr":761504137554484024,"detailed_name":"_m_psrlwi","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _m_psrlwi _mm_srli_pi16","comments":"","spell":"1541:9-1541:18|1541:9-1541:32|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":1086833838241232924,"detailed_name":"__m64 __m","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"752:21-752:24|752:15-752:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["754:49-754:52|12|-1"]},{"usr":1138381173365837707,"detailed_name":"char __b0","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"1490:19-1490:23|1490:14-1490:23|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1493:66-1493:70|12|-1"]},{"usr":1330835169500702226,"detailed_name":"_m_from_int","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _m_from_int _mm_cvtsi32_si64","comments":"","spell":"1500:9-1500:20|1500:9-1500:37|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":1439118394908915636,"detailed_name":"char __b7","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"1357:18-1357:22|1357:13-1357:22|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1361:66-1361:70|12|-1"]},{"usr":1503526311342538735,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"567:20-567:24|567:14-567:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["569:49-569:53|12|-1"]},{"usr":1629484117918037276,"detailed_name":"_m_pandn","qual_name_offset":0,"short_name_offset":0,"short_name_size":8,"hover":"#define _m_pandn _mm_andnot_si64","comments":"","spell":"1547:9-1547:17|1547:9-1547:33|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":1681167312833345168,"detailed_name":"short __s3","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1326:20-1326:24|1326:14-1326:24|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1328:66-1328:70|12|-1"]},{"usr":1729627177780877298,"detailed_name":"int __i0","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"1436:19-1436:23|1436:15-1436:23|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1438:31-1438:35|12|-1"]},{"usr":1787211177752758859,"detailed_name":"_m_psrld","qual_name_offset":0,"short_name_offset":0,"short_name_size":8,"hover":"#define _m_psrld _mm_srl_pi32","comments":"","spell":"1542:9-1542:17|1542:9-1542:30|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":1799783883190642095,"detailed_name":"__m64 __count","qual_name_offset":6,"short_name_offset":6,"short_name_size":7,"hover":"","comments":"","spell":"954:31-954:38|954:25-954:38|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["956:53-956:60|12|-1"]},{"usr":1991744895271206220,"detailed_name":"_m_psrad","qual_name_offset":0,"short_name_offset":0,"short_name_size":8,"hover":"#define _m_psrad _mm_sra_pi32","comments":"","spell":"1538:9-1538:17|1538:9-1538:30|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":2075246622588306559,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"544:32-544:36|544:26-544:36|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["546:62-546:66|12|-1"]},{"usr":2216833598763122622,"detailed_name":"_m_psrlq","qual_name_offset":0,"short_name_offset":0,"short_name_size":8,"hover":"#define _m_psrlq _mm_srl_si64","comments":"","spell":"1544:9-1544:17|1544:9-1544:30|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":2221962991675183538,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"481:33-481:37|481:27-481:37|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["483:64-483:68|12|-1"]},{"usr":2295259344366992721,"detailed_name":"__m64 __m","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"931:21-931:24|931:15-931:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["933:49-933:52|12|-1"]},{"usr":2302328268330380041,"detailed_name":"_m_psubusb","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _m_psubusb _mm_subs_pu8","comments":"","spell":"1525:9-1525:19|1525:9-1525:32|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":2348400778279560331,"detailed_name":"char __b4","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"1490:63-1490:67|1490:58-1490:67|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1493:42-1493:46|12|-1"]},{"usr":2363802278903726112,"detailed_name":"char __b4","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"1357:51-1357:55|1357:46-1357:55|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1361:48-1361:52|12|-1"]},{"usr":2376525476111670874,"detailed_name":"_m_psubw","qual_name_offset":0,"short_name_offset":0,"short_name_size":8,"hover":"#define _m_psubw _mm_sub_pi16","comments":"","spell":"1521:9-1521:17|1521:9-1521:30|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":2446207888720347897,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1080:32-1080:36|1080:26-1080:36|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1082:54-1082:58|12|-1"]},{"usr":2450055601639693622,"detailed_name":"_m_pcmpeqb","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _m_pcmpeqb _mm_cmpeq_pi8","comments":"","spell":"1550:9-1550:19|1550:9-1550:33|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":2479523652681779611,"detailed_name":"__m64 __m","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"1062:21-1062:24|1062:15-1062:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1064:49-1064:52|12|-1"]},{"usr":2576506460800589557,"detailed_name":"short __w2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1459:45-1459:49|1459:39-1459:49|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1461:31-1461:35|12|-1"]},{"usr":2644293374848422960,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"638:33-638:37|638:27-638:37|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["640:64-640:68|12|-1"]},{"usr":2690486839867975101,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"329:25-329:29|329:19-329:29|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["331:52-331:56|12|-1"]},{"usr":2967504737731903456,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"665:21-665:25|665:15-665:25|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["667:50-667:54|12|-1"]},{"usr":3142164365402149373,"detailed_name":"_m_pcmpeqd","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _m_pcmpeqd _mm_cmpeq_pi32","comments":"","spell":"1552:9-1552:19|1552:9-1552:34|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":3158133787634271716,"detailed_name":"__m64 __m","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"861:20-861:23|861:14-861:23|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["863:48-863:51|12|-1"]},{"usr":3161105149416149700,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"157:34-157:38|157:28-157:38|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["159:65-159:69|12|-1"]},{"usr":3296726466344672880,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"187:34-187:38|187:28-187:38|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["189:65-189:69|12|-1"]},{"usr":3299071128256930601,"detailed_name":"int __count","qual_name_offset":4,"short_name_offset":4,"short_name_size":7,"hover":"","comments":"","spell":"837:30-837:37|837:26-837:37|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["839:54-839:61|12|-1"]},{"usr":3325715498478575144,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"523:32-523:36|523:26-523:36|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["525:62-525:66|12|-1"]},{"usr":3462298471841442033,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"414:32-414:36|414:26-414:36|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["416:63-416:67|12|-1"]},{"usr":3474740136443405510,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"127:34-127:38|127:28-127:38|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["129:65-129:69|12|-1"]},{"usr":3535436590948874039,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1247:34-1247:38|1247:28-1247:38|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1249:64-1249:68|12|-1"]},{"usr":3645704400727558272,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1101:35-1101:39|1101:29-1101:39|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1103:55-1103:59|12|-1"]},{"usr":3801234435676635694,"detailed_name":"__m64 __count","qual_name_offset":6,"short_name_offset":6,"short_name_size":7,"hover":"","comments":"","spell":"861:31-861:38|861:25-861:38|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["863:53-863:60|12|-1"]},{"usr":3816264092007376658,"detailed_name":"char __b","qual_name_offset":5,"short_name_offset":5,"short_name_size":3,"hover":"","comments":"","spell":"1415:19-1415:22|1415:14-1415:22|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1417:24-1417:27|12|-1","1417:29-1417:32|12|-1","1417:34-1417:37|12|-1","1417:39-1417:42|12|-1","1417:44-1417:47|12|-1","1417:49-1417:52|12|-1","1417:54-1417:57|12|-1","1417:59-1417:62|12|-1"]},{"usr":3960215906737339071,"detailed_name":"_m_psllq","qual_name_offset":0,"short_name_offset":0,"short_name_size":8,"hover":"#define _m_psllq _mm_sll_si64","comments":"","spell":"1534:9-1534:17|1534:9-1534:30|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":4161051242034683484,"detailed_name":"int __count","qual_name_offset":4,"short_name_offset":4,"short_name_size":7,"hover":"","comments":"","spell":"1062:30-1062:37|1062:26-1062:37|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1064:54-1064:61|12|-1"]},{"usr":4227589291245822936,"detailed_name":"__m64 __count","qual_name_offset":6,"short_name_offset":6,"short_name_size":7,"hover":"","comments":"","spell":"817:31-817:38|817:25-817:38|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["819:53-819:60|12|-1"]},{"usr":4288335739389768844,"detailed_name":"_m_psubd","qual_name_offset":0,"short_name_offset":0,"short_name_size":8,"hover":"#define _m_psubd _mm_sub_pi32","comments":"","spell":"1522:9-1522:17|1522:9-1522:30|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":4331231869934765163,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"350:19-350:23|350:13-350:23|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["352:48-352:52|12|-1"]},{"usr":4356696441664688003,"detailed_name":"_m_punpckhdq","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _m_punpckhdq _mm_unpackhi_pi32","comments":"","spell":"1509:9-1509:21|1509:9-1509:39|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":4375887877347723931,"detailed_name":"char __b6","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"1357:29-1357:33|1357:24-1357:33|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1361:60-1361:64|12|-1"]},{"usr":4416561914027246056,"detailed_name":"int __count","qual_name_offset":4,"short_name_offset":4,"short_name_size":7,"hover":"","comments":"","spell":"1021:30-1021:37|1021:26-1021:37|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1023:54-1023:61|12|-1"]},{"usr":4682034867645853618,"detailed_name":"short __w0","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1459:21-1459:25|1459:15-1459:25|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1461:43-1461:47|12|-1"]},{"usr":4742620327850320439,"detailed_name":"int __count","qual_name_offset":4,"short_name_offset":4,"short_name_size":7,"hover":"","comments":"","spell":"797:30-797:37|797:26-797:37|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["799:54-799:61|12|-1"]},{"usr":4796831609891731781,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"371:20-371:24|371:14-371:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["373:48-373:52|12|-1"]},{"usr":4916075596080648835,"detailed_name":"char __b1","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"1490:30-1490:34|1490:25-1490:34|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1493:60-1493:64|12|-1"]},{"usr":4930244653947877201,"detailed_name":"__m64 __m","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"797:21-797:24|797:15-797:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["799:49-799:52|12|-1"]},{"usr":5262088012356964540,"detailed_name":"__m64 __m","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"999:20-999:23|999:14-999:23|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1001:48-1001:51|12|-1"]},{"usr":5340562485536601960,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"614:32-614:36|614:26-614:36|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["616:64-616:68|12|-1"]},{"usr":5444926620110560943,"detailed_name":"__MMINTRIN_H","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define __MMINTRIN_H","comments":"","spell":"11:9-11:21|11:9-11:21|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":5475421054267380520,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"437:21-437:25|437:15-437:25|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["439:49-439:53|12|-1"]},{"usr":5514269388948319644,"detailed_name":"_m_psraw","qual_name_offset":0,"short_name_offset":0,"short_name_size":8,"hover":"#define _m_psraw _mm_sra_pi16","comments":"","spell":"1536:9-1536:17|1536:9-1536:30|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":5632626530541731954,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"392:32-392:36|392:26-392:36|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["394:62-394:66|12|-1"]},{"usr":5643297571951472050,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"459:32-459:36|459:26-459:36|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["461:64-461:68|12|-1"]},{"usr":5808654256640910260,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"590:21-590:25|590:15-590:25|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["592:49-592:53|12|-1"]},{"usr":5837501505890340112,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"258:25-258:29|258:19-258:29|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["260:52-260:56|12|-1"]},{"usr":5898170423119174525,"detailed_name":"short __s2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1326:32-1326:36|1326:26-1326:36|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1328:60-1328:64|12|-1"]},{"usr":5967841163385842698,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"258:37-258:41|258:31-258:41|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["260:66-260:70|12|-1"]},{"usr":6105543745244602162,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1203:34-1203:38|1203:28-1203:38|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1205:64-1205:68|12|-1"]},{"usr":6202015747108009500,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1225:21-1225:25|1225:15-1225:25|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1227:50-1227:54|12|-1"]},{"usr":6315037459737236900,"detailed_name":"char __b5","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"1357:40-1357:44|1357:35-1357:44|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1361:54-1361:58|12|-1"]},{"usr":6882512910399949061,"detailed_name":"__m64 __count","qual_name_offset":6,"short_name_offset":6,"short_name_size":7,"hover":"","comments":"","spell":"999:31-999:38|999:25-999:38|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1001:53-1001:60|12|-1"]},{"usr":6921927801889347519,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"237:25-237:29|237:19-237:29|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["239:52-239:56|12|-1"]},{"usr":7024750893490893004,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1247:22-1247:26|1247:16-1247:26|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1249:50-1249:54|12|-1"]},{"usr":7314013017857391302,"detailed_name":"long long __i","qual_name_offset":10,"short_name_offset":10,"short_name_size":3,"hover":"","comments":"","spell":"81:27-81:30|81:17-81:30|1026|-1","type":116,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["83:19-83:22|12|-1"]},{"usr":7335332904551013224,"detailed_name":"_m_pcmpgtd","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _m_pcmpgtd _mm_cmpgt_pi32","comments":"","spell":"1555:9-1555:19|1555:9-1555:34|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":7342930943482369174,"detailed_name":"_m_psllw","qual_name_offset":0,"short_name_offset":0,"short_name_size":8,"hover":"#define _m_psllw _mm_sll_pi16","comments":"","spell":"1530:9-1530:17|1530:9-1530:30|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":7406941284841433703,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"481:21-481:25|481:15-481:25|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["483:50-483:54|12|-1"]},{"usr":7473978367439634630,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"567:32-567:36|567:26-567:36|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["569:63-569:67|12|-1"]},{"usr":7545463025858675733,"detailed_name":"_m_paddd","qual_name_offset":0,"short_name_offset":0,"short_name_size":8,"hover":"#define _m_paddd _mm_add_pi32","comments":"","spell":"1515:9-1515:17|1515:9-1515:30|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":7576785206548396550,"detailed_name":"_m_psllwi","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _m_psllwi _mm_slli_pi16","comments":"","spell":"1531:9-1531:18|1531:9-1531:32|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":7578622545529371844,"detailed_name":"_m_psubb","qual_name_offset":0,"short_name_offset":0,"short_name_size":8,"hover":"#define _m_psubb _mm_sub_pi8","comments":"","spell":"1520:9-1520:17|1520:9-1520:29|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":7598609101655950904,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"308:37-308:41|308:31-308:41|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["310:66-310:70|12|-1"]},{"usr":7674455233457822840,"detailed_name":"_m_pcmpgtw","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _m_pcmpgtw _mm_cmpgt_pi16","comments":"","spell":"1554:9-1554:19|1554:9-1554:34|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":7739821291870710416,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"686:22-686:26|686:16-686:26|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["688:49-688:53|12|-1"]},{"usr":7811701590650017143,"detailed_name":"short __s0","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1326:56-1326:60|1326:50-1326:60|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1328:48-1328:52|12|-1"]},{"usr":7962663302223482788,"detailed_name":"_m_from_int64","qual_name_offset":0,"short_name_offset":0,"short_name_size":13,"hover":"#define _m_from_int64 _mm_cvtsi64_m64","comments":"","spell":"1501:9-1501:22|1501:9-1501:38|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":8128386069657010576,"detailed_name":"_m_paddb","qual_name_offset":0,"short_name_offset":0,"short_name_size":8,"hover":"#define _m_paddb _mm_add_pi8","comments":"","spell":"1513:9-1513:17|1513:9-1513:29|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":8142405934569392073,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"285:24-285:28|285:18-285:28|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["287:52-287:56|12|-1"]},{"usr":8194109700904532513,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"308:25-308:29|308:19-308:29|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["310:52-310:56|12|-1"]},{"usr":8314720054267433417,"detailed_name":"__m64 __m","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"976:21-976:24|976:15-976:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["978:49-978:52|12|-1"]},{"usr":8324521850644594021,"detailed_name":"_m_pmullw","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _m_pmullw _mm_mullo_pi16","comments":"","spell":"1529:9-1529:18|1529:9-1529:33|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":8354154913624583372,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"392:20-392:24|392:14-392:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["394:48-394:52|12|-1"]},{"usr":8571441462436716156,"detailed_name":"_m_pmulhw","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _m_pmulhw _mm_mulhi_pi16","comments":"","spell":"1528:9-1528:18|1528:9-1528:33|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":8597704364424779502,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1181:34-1181:38|1181:28-1181:38|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1183:64-1183:68|12|-1"]},{"usr":8608759305898300153,"detailed_name":"__m64 __m","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"97:23-97:26|97:17-97:26|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["99:23-99:26|12|-1"]},{"usr":8687711397172331019,"detailed_name":"__m64 __m","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"65:24-65:27|65:18-65:27|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["67:48-67:51|12|-1"]},{"usr":8693513426731640514,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"437:33-437:37|437:27-437:37|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["439:63-439:67|12|-1"]},{"usr":9034202850074411725,"detailed_name":"__m64 __count","qual_name_offset":6,"short_name_offset":6,"short_name_size":7,"hover":"","comments":"","spell":"1041:31-1041:38|1041:25-1041:38|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1043:53-1043:60|12|-1"]},{"usr":9285804629421087077,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1119:19-1119:23|1119:13-1119:23|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1121:39-1121:43|12|-1"]},{"usr":9375230043389356768,"detailed_name":"__m64 __m","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"775:20-775:23|775:14-775:23|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["777:48-777:51|12|-1"]},{"usr":9406160884860036061,"detailed_name":"int __count","qual_name_offset":4,"short_name_offset":4,"short_name_size":7,"hover":"","comments":"","spell":"752:30-752:37|752:26-752:37|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["754:54-754:61|12|-1"]},{"usr":9575657778504522171,"detailed_name":"_m_punpcklbw","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _m_punpcklbw _mm_unpacklo_pi8","comments":"","spell":"1510:9-1510:21|1510:9-1510:38|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":9676696089768511520,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"459:20-459:24|459:14-459:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["461:50-461:54|12|-1"]},{"usr":9676701262095608424,"detailed_name":"int __i0","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"1303:28-1303:32|1303:24-1303:32|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1305:48-1305:52|12|-1"]},{"usr":9691870898644269120,"detailed_name":"_m_packuswb","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _m_packuswb _mm_packs_pu16","comments":"","spell":"1506:9-1506:20|1506:9-1506:35|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":9732884789648101679,"detailed_name":"_m_pxor","qual_name_offset":0,"short_name_offset":0,"short_name_size":7,"hover":"#define _m_pxor _mm_xor_si64","comments":"","spell":"1549:9-1549:16|1549:9-1549:29|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":9755218876877996702,"detailed_name":"__m64 __m","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"837:21-837:24|837:15-837:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["839:49-839:52|12|-1"]},{"usr":9797581900305480079,"detailed_name":"_m_por","qual_name_offset":0,"short_name_offset":0,"short_name_size":6,"hover":"#define _m_por _mm_or_si64","comments":"","spell":"1548:9-1548:15|1548:9-1548:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":9978033908055022448,"detailed_name":"char __b7","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"1491:30-1491:34|1491:25-1491:34|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1493:24-1493:28|12|-1"]},{"usr":10041041869264281636,"detailed_name":"_m_psrldi","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _m_psrldi _mm_srli_pi32","comments":"","spell":"1543:9-1543:18|1543:9-1543:32|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":10095590950312667255,"detailed_name":"_m_empty","qual_name_offset":0,"short_name_offset":0,"short_name_size":8,"hover":"#define _m_empty _mm_empty","comments":"","spell":"1499:9-1499:17|1499:9-1499:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":10102294259793067187,"detailed_name":"char __b1","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"1358:18-1358:22|1358:13-1358:22|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1360:54-1360:58|12|-1"]},{"usr":10175554510661675227,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1080:20-1080:24|1080:14-1080:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1082:40-1082:44|12|-1"]},{"usr":10362089610205765233,"detailed_name":"int __i1","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"1436:29-1436:33|1436:25-1436:33|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1438:25-1438:29|12|-1"]},{"usr":10558188786657538027,"detailed_name":"char __b5","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"1490:74-1490:78|1490:69-1490:78|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1493:36-1493:40|12|-1"]},{"usr":10790822704784627748,"detailed_name":"_m_psubsw","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _m_psubsw _mm_subs_pi16","comments":"","spell":"1524:9-1524:18|1524:9-1524:32|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":10803881937850520679,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"502:19-502:23|502:13-502:23|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["504:48-504:52|12|-1"]},{"usr":10831004384612515227,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1269:34-1269:38|1269:28-1269:38|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1271:64-1271:68|12|-1"]},{"usr":10870481264097843842,"detailed_name":"_m_paddusb","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _m_paddusb _mm_adds_pu8","comments":"","spell":"1518:9-1518:19|1518:9-1518:32|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":10947494117086504112,"detailed_name":"_m_psubusw","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _m_psubusw _mm_subs_pu16","comments":"","spell":"1526:9-1526:19|1526:9-1526:33|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":11107552462852651514,"detailed_name":"_m_packssdw","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _m_packssdw _mm_packs_pi32","comments":"","spell":"1505:9-1505:20|1505:9-1505:35|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":11124452541683127608,"detailed_name":"_m_paddsb","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _m_paddsb _mm_adds_pi8","comments":"","spell":"1516:9-1516:18|1516:9-1516:31|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":11226575972237765432,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1159:33-1159:37|1159:27-1159:37|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1161:64-1161:68|12|-1"]},{"usr":11398738111879251664,"detailed_name":"int __count","qual_name_offset":4,"short_name_offset":4,"short_name_size":7,"hover":"","comments":"","spell":"976:30-976:37|976:26-976:37|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["978:54-978:61|12|-1"]},{"usr":11436980415977087044,"detailed_name":"char __b6","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"1491:19-1491:23|1491:14-1491:23|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1493:30-1493:34|12|-1"]},{"usr":11454499268018706199,"detailed_name":"_m_psrawi","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _m_psrawi _mm_srai_pi16","comments":"","spell":"1537:9-1537:18|1537:9-1537:32|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":11735208069172845789,"detailed_name":"_m_to_int","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _m_to_int _mm_cvtsi64_si32","comments":"","spell":"1502:9-1502:18|1502:9-1502:35|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":11893145650898416914,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1225:33-1225:37|1225:27-1225:37|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1227:64-1227:68|12|-1"]},{"usr":12140277634088827908,"detailed_name":"__DEFAULT_FN_ATTRS","qual_name_offset":0,"short_name_offset":0,"short_name_size":18,"hover":"#define __DEFAULT_FN_ATTRS __attribute__((__always_inline__, __nodebug__, __target__(\"mmx\"), __min_vector_width__(64)))","comments":"","spell":"21:9-21:27|21:9-21:120|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":["47:25-47:43|64|-1","64:23-64:41|64|-1","80:25-80:43|64|-1","96:29-96:47|64|-1","126:25-126:43|64|-1","156:25-156:43|64|-1","186:25-186:43|64|-1","213:25-213:43|64|-1","236:25-236:43|64|-1","257:25-257:43|64|-1","284:25-284:43|64|-1","307:25-307:43|64|-1","328:25-328:43|64|-1","349:25-349:43|64|-1","370:25-370:43|64|-1","391:25-391:43|64|-1","413:25-413:43|64|-1","436:25-436:43|64|-1","458:25-458:43|64|-1","480:25-480:43|64|-1","501:25-501:43|64|-1","522:25-522:43|64|-1","543:25-543:43|64|-1","566:25-566:43|64|-1","589:25-589:43|64|-1","613:25-613:43|64|-1","637:25-637:43|64|-1","664:25-664:43|64|-1","685:25-685:43|64|-1","706:25-706:43|64|-1","729:25-729:43|64|-1","751:25-751:43|64|-1","774:25-774:43|64|-1","796:25-796:43|64|-1","816:25-816:43|64|-1","836:25-836:43|64|-1","860:25-860:43|64|-1","883:25-883:43|64|-1","907:25-907:43|64|-1","930:25-930:43|64|-1","953:25-953:43|64|-1","975:25-975:43|64|-1","998:25-998:43|64|-1","1020:25-1020:43|64|-1","1040:25-1040:43|64|-1","1061:25-1061:43|64|-1","1079:25-1079:43|64|-1","1100:25-1100:43|64|-1","1118:25-1118:43|64|-1","1136:25-1136:43|64|-1","1158:25-1158:43|64|-1","1180:25-1180:43|64|-1","1202:25-1202:43|64|-1","1224:25-1224:43|64|-1","1246:25-1246:43|64|-1","1268:25-1268:43|64|-1","1281:25-1281:43|64|-1","1302:25-1302:43|64|-1","1325:25-1325:43|64|-1","1356:25-1356:43|64|-1","1377:25-1377:43|64|-1","1396:25-1396:43|64|-1","1414:25-1414:43|64|-1","1435:25-1435:43|64|-1","1458:25-1458:43|64|-1","1489:25-1489:43|64|-1","1496:8-1496:26|64|-1"]},{"usr":12169687806581214359,"detailed_name":"char __b3","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"1357:62-1357:66|1357:57-1357:66|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1360:66-1360:70|12|-1"]},{"usr":12201980107734539073,"detailed_name":"_m_paddsw","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _m_paddsw _mm_adds_pi16","comments":"","spell":"1517:9-1517:18|1517:9-1517:32|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":12380353926617098711,"detailed_name":"_m_packsswb","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _m_packsswb _mm_packs_pi16","comments":"","spell":"1504:9-1504:20|1504:9-1504:35|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":12383539496796576428,"detailed_name":"short __w","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"1397:21-1397:24|1397:15-1397:24|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1399:25-1399:28|12|-1","1399:30-1399:33|12|-1","1399:35-1399:38|12|-1","1399:40-1399:43|12|-1"]},{"usr":12408773071322851338,"detailed_name":"__m64 __m","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"908:20-908:23|908:14-908:23|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["910:48-910:51|12|-1"]},{"usr":12585605761286833292,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"707:34-707:38|707:28-707:38|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["709:63-709:67|12|-1"]},{"usr":12827102801452867817,"detailed_name":"_m_punpckhbw","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _m_punpckhbw _mm_unpackhi_pi8","comments":"","spell":"1507:9-1507:21|1507:9-1507:38|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":12832488488931056931,"detailed_name":"_m_psubsb","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _m_psubsb _mm_subs_pi8","comments":"","spell":"1523:9-1523:18|1523:9-1523:31|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":12851876900550388021,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"285:36-285:40|285:30-285:40|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["287:66-287:70|12|-1"]},{"usr":12875008812528151479,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"329:37-329:41|329:31-329:41|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["331:66-331:70|12|-1"]},{"usr":12877352716179003506,"detailed_name":"__m64 __m","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"1041:20-1041:23|1041:14-1041:23|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1043:48-1043:51|12|-1"]},{"usr":12908340292275975639,"detailed_name":"_m_pslld","qual_name_offset":0,"short_name_offset":0,"short_name_size":8,"hover":"#define _m_pslld _mm_sll_pi32","comments":"","spell":"1532:9-1532:17|1532:9-1532:30|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":12928843681810744940,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"614:20-614:24|614:14-614:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["616:50-616:54|12|-1"]},{"usr":13218799409765836765,"detailed_name":"__m64 __count","qual_name_offset":6,"short_name_offset":6,"short_name_size":7,"hover":"","comments":"","spell":"730:31-730:38|730:25-730:38|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["732:53-732:60|12|-1"]},{"usr":13249953740950788561,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"187:22-187:26|187:16-187:26|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["189:51-189:55|12|-1"]},{"usr":13316554676850520961,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"686:34-686:38|686:28-686:38|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["688:63-688:67|12|-1"]},{"usr":13327068067921881098,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1159:21-1159:25|1159:15-1159:25|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1161:50-1161:54|12|-1"]},{"usr":13339870890974674903,"detailed_name":"__m64 __count","qual_name_offset":6,"short_name_offset":6,"short_name_size":7,"hover":"","comments":"","spell":"908:31-908:38|908:25-908:38|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["910:53-910:60|12|-1"]},{"usr":13500589341945943294,"detailed_name":"_m_pmaddwd","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _m_pmaddwd _mm_madd_pi16","comments":"","spell":"1527:9-1527:19|1527:9-1527:33|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":13631027381771966608,"detailed_name":"int __i","qual_name_offset":4,"short_name_offset":4,"short_name_size":3,"hover":"","comments":"","spell":"48:22-48:25|48:18-48:25|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["50:48-50:51|12|-1"]},{"usr":13959268500824690410,"detailed_name":"char __b2","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"1357:73-1357:77|1357:68-1357:77|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1360:60-1360:64|12|-1"]},{"usr":14106723373478074850,"detailed_name":"char __b0","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"1358:29-1358:33|1358:24-1358:33|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1360:48-1360:52|12|-1"]},{"usr":14288092864649701942,"detailed_name":"_m_punpckldq","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _m_punpckldq _mm_unpacklo_pi32","comments":"","spell":"1512:9-1512:21|1512:9-1512:39|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":14486332385278488873,"detailed_name":"_m_paddusw","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _m_paddusw _mm_adds_pu16","comments":"","spell":"1519:9-1519:19|1519:9-1519:33|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":14599271308080535708,"detailed_name":"__m64 __m","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"884:21-884:24|884:15-884:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["886:49-886:52|12|-1"]},{"usr":14638018008248370863,"detailed_name":"short __s1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1326:44-1326:48|1326:38-1326:48|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1328:54-1328:58|12|-1"]},{"usr":14681436605685921732,"detailed_name":"_m_punpckhwd","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _m_punpckhwd _mm_unpackhi_pi16","comments":"","spell":"1508:9-1508:21|1508:9-1508:39|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":14728371180683150825,"detailed_name":"__m64 __m","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"1021:21-1021:24|1021:15-1021:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1023:49-1023:52|12|-1"]},{"usr":14859502757208758085,"detailed_name":"char __b3","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"1490:52-1490:56|1490:47-1490:56|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1493:48-1493:52|12|-1"]},{"usr":14899691116163578942,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"502:31-502:35|502:25-502:35|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["504:62-504:66|12|-1"]},{"usr":14974546813324844620,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1203:22-1203:26|1203:16-1203:26|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1205:50-1205:54|12|-1"]},{"usr":15077887317569930405,"detailed_name":"int __count","qual_name_offset":4,"short_name_offset":4,"short_name_size":7,"hover":"","comments":"","spell":"931:30-931:37|931:26-931:37|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["933:54-933:61|12|-1"]},{"usr":15221063988834975821,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1137:20-1137:24|1137:14-1137:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1139:40-1139:44|12|-1"]},{"usr":15407375375975449393,"detailed_name":"int __i","qual_name_offset":4,"short_name_offset":4,"short_name_size":3,"hover":"","comments":"","spell":"1378:19-1378:22|1378:15-1378:22|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1380:25-1380:28|12|-1","1380:30-1380:33|12|-1"]},{"usr":15409568867066265858,"detailed_name":"_m_paddw","qual_name_offset":0,"short_name_offset":0,"short_name_size":8,"hover":"#define _m_paddw _mm_add_pi16","comments":"","spell":"1514:9-1514:17|1514:9-1514:30|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":15447126335752502299,"detailed_name":"__m64 __count","qual_name_offset":6,"short_name_offset":6,"short_name_size":7,"hover":"","comments":"","spell":"775:31-775:38|775:25-775:38|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["777:53-777:60|12|-1"]},{"usr":15469043765838989051,"detailed_name":"_m_punpcklwd","qual_name_offset":0,"short_name_offset":0,"short_name_size":12,"hover":"#define _m_punpcklwd _mm_unpacklo_pi16","comments":"","spell":"1511:9-1511:21|1511:9-1511:39|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":15484572858521869162,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"707:22-707:26|707:16-707:26|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["709:49-709:53|12|-1"]},{"usr":15535515564065751513,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"214:24-214:28|214:18-214:28|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["216:52-216:56|12|-1"]},{"usr":15545825086818611297,"detailed_name":"short __w3","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1459:57-1459:61|1459:51-1459:61|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1461:25-1461:29|12|-1"]},{"usr":15845215522232220226,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"590:33-590:37|590:27-590:37|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["592:63-592:67|12|-1"]},{"usr":15890792541174311418,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"371:32-371:36|371:26-371:36|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["373:62-373:66|12|-1"]},{"usr":15966979176516811640,"detailed_name":"__m64 __m","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"954:20-954:23|954:14-954:23|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["956:48-956:51|12|-1"]},{"usr":16068277333651398563,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"157:22-157:26|157:16-157:26|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["159:51-159:55|12|-1"]},{"usr":16168162031227403025,"detailed_name":"_m_psradi","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _m_psradi _mm_srai_pi32","comments":"","spell":"1539:9-1539:18|1539:9-1539:32|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":16297032408985161135,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"127:22-127:26|127:16-127:26|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["129:51-129:55|12|-1"]},{"usr":16551356871312482415,"detailed_name":"__m64 __m","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"730:20-730:23|730:14-730:23|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["732:48-732:51|12|-1"]},{"usr":16720764466921184917,"detailed_name":"_m_psrlw","qual_name_offset":0,"short_name_offset":0,"short_name_size":8,"hover":"#define _m_psrlw _mm_srl_pi16","comments":"","spell":"1540:9-1540:17|1540:9-1540:30|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":16832027006193110352,"detailed_name":"_m_psllqi","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _m_psllqi _mm_slli_si64","comments":"","spell":"1535:9-1535:18|1535:9-1535:32|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":16840241932338388567,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"414:20-414:24|414:14-414:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["416:49-416:53|12|-1"]},{"usr":16961521761812821514,"detailed_name":"short __w1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1459:33-1459:37|1459:27-1459:37|1026|-1","type":113,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1461:37-1461:41|12|-1"]},{"usr":17044227423096155678,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"665:33-665:37|665:27-665:37|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["667:64-667:68|12|-1"]},{"usr":17100476879356529972,"detailed_name":"int __count","qual_name_offset":4,"short_name_offset":4,"short_name_size":7,"hover":"","comments":"","spell":"884:30-884:37|884:26-884:37|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["886:54-886:61|12|-1"]},{"usr":17236623928742025734,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"214:36-214:40|214:30-214:40|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["216:66-216:70|12|-1"]},{"usr":17303891337868865034,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"638:21-638:25|638:15-638:25|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["640:50-640:54|12|-1"]},{"usr":17315687922646816874,"detailed_name":"char __b2","qual_name_offset":5,"short_name_offset":5,"short_name_size":4,"hover":"","comments":"","spell":"1490:41-1490:45|1490:36-1490:45|1026|-1","type":110,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1493:54-1493:58|12|-1"]},{"usr":17608997182419857153,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1269:22-1269:26|1269:16-1269:26|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1271:50-1271:54|12|-1"]},{"usr":17612423784831485190,"detailed_name":"_m_pand","qual_name_offset":0,"short_name_offset":0,"short_name_size":7,"hover":"#define _m_pand _mm_and_si64","comments":"","spell":"1546:9-1546:16|1546:9-1546:29|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":17615150078163146318,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"523:20-523:24|523:14-523:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["525:48-525:52|12|-1"]},{"usr":17620223084054066522,"detailed_name":"_m_pcmpgtb","qual_name_offset":0,"short_name_offset":0,"short_name_size":10,"hover":"#define _m_pcmpgtb _mm_cmpgt_pi8","comments":"","spell":"1553:9-1553:19|1553:9-1553:33|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":17627300910135581193,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1181:22-1181:26|1181:16-1181:26|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1183:50-1183:54|12|-1"]},{"usr":17682376110226582379,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1101:23-1101:27|1101:17-1101:27|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1103:41-1103:45|12|-1"]},{"usr":17742881091664255555,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1137:32-1137:36|1137:26-1137:36|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1139:54-1139:58|12|-1"]},{"usr":17786506631125220531,"detailed_name":"_m_pslldi","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _m_pslldi _mm_slli_pi32","comments":"","spell":"1533:9-1533:18|1533:9-1533:32|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":17866836965951997202,"detailed_name":"int __i1","qual_name_offset":4,"short_name_offset":4,"short_name_size":4,"hover":"","comments":"","spell":"1303:18-1303:22|1303:14-1303:22|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["1305:54-1305:58|12|-1"]},{"usr":17956516449849087056,"detailed_name":"__m64 __m2","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"237:37-237:41|237:31-237:41|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["239:66-239:70|12|-1"]},{"usr":18293338769692121507,"detailed_name":"_m_psrlqi","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"#define _m_psrlqi _mm_srli_si64","comments":"","spell":"1545:9-1545:18|1545:9-1545:32|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":18391267846391948402,"detailed_name":"_m_to_int64","qual_name_offset":0,"short_name_offset":0,"short_name_size":11,"hover":"#define _m_to_int64 _mm_cvtm64_si64","comments":"","spell":"1503:9-1503:20|1503:9-1503:36|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":18410919378090522973,"detailed_name":"__m64 __m","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"817:20-817:23|817:14-817:23|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["819:48-819:51|12|-1"]},{"usr":18432221264572008469,"detailed_name":"__m64 __m1","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"544:20-544:24|544:14-544:24|1026|-1","type":8788115492869736674,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["546:48-546:52|12|-1"]}]}