21
{"md5":"ignore_header_sys","language":1,"no_linkage":true,"lid2path":[{"L":0,"R":"/usr/include/c++/10/x86_64-redhat-linux/bits/c++config.h"}],"import_file":"[GIT_TOP_DIR]/src/impl/FhtKacRotator.cpp","args":["clang","[GIT_TOP_DIR]/src/impl/FhtKacRotator.cpp","-working-directory=[GIT_TOP_DIR]/"],"dependencies":{"/usr/include/c++/10/bits/stl_numeric.h":"ignore_header_sys","/usr/include/ctype.h":"ignore_header_sys","/usr/include/bits/types/__mbstate_t.h":"ignore_header_sys","/usr/include/features.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/immintrin.h":"774d8f5fec0961c7f69eaa3c69870fd7","/usr/include/math.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_algobase.h":"ignore_header_sys","/usr/include/bits/byteswap.h":"ignore_header_sys","/usr/include/c++/10/vector":"ignore_header_sys","/usr/include/c++/10/bits/iterator_concepts.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avxintrin.h":"772d5fd2b95bf581b4338458db989424","/usr/include/string.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlintrin.h":"cd26383f2f06392556848bfb374034c1","/usr/local/ob-clang11/lib/clang/11.1.0/include/vaesintrin.h":"230da0a10bfb803dd07d1d4859b589b9","/usr/include/bits/types/struct_FILE.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vbmivlintrin.h":"7a23233bba4c34e5185e02ea4208670c","/usr/include/bits/types/cookie_io_functions_t.h":"ignore_header_sys","/usr/include/bits/fp-logb.h":"ignore_header_sys","/usr/include/sys/cdefs.h":"ignore_header_sys","/usr/include/bits/types/__fpos_t.h":"ignore_header_sys","/usr/include/bits/types/timer_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512bf16intrin.h":"4f5ef6213a91abea3f5d53232215497c","/usr/include/c++/10/bits/locale_classes.h":"ignore_header_sys","/usr/include/c++/10/bits/streambuf.tcc":"ignore_header_sys","/usr/include/c++/10/bits/basic_ios.tcc":"ignore_header_sys","/usr/include/bits/types/mbstate_t.h":"ignore_header_sys","/usr/include/bits/sched.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/xmmintrin.h":"04b4174745d9f46d48080aefb7d04c2c","/usr/include/bits/types/wint_t.h":"ignore_header_sys","/usr/include/c++/10/bits/charconv.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_pair.h":"ignore_header_sys","/usr/include/c++/10/bits/char_traits.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/vpclmulqdqintrin.h":"a0ef53b1374f1ff070c815a7572221fa","/usr/include/time.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/wmmintrin.h":"420e06fc7b100109fe408d8cf15dfbbc","/usr/include/c++/10/bits/stl_bvector.h":"ignore_header_sys","/usr/include/c++/10/istream":"ignore_header_sys","/usr/include/bits/types/__sigset_t.h":"ignore_header_sys","/usr/include/c++/10/bits/allocator.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/emmintrin.h":"15ee96a71ec1a4288c0b5ffdad114450","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsavesintrin.h":"dfeb07884315d36739e4aa9dfd1d72ed","/usr/local/ob-clang11/lib/clang/11.1.0/include/smmintrin.h":"dde1073b90fcdddf514ff14bf7b0a39b","/usr/include/sys/types.h":"ignore_header_sys","/usr/include/c++/10/ios":"ignore_header_sys","/usr/include/c++/10/bits/uniform_int_dist.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/lzcntintrin.h":"070db0e5ecc75a113daa65f1a9a569a5","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vpopcntdqintrin.h":"748799b7fb86515d202460f78d94a3c3","/usr/include/bits/time64.h":"ignore_header_sys","/usr/include/bits/uintn-identity.h":"ignore_header_sys","/usr/include/c++/10/bits/cpp_type_traits.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vbmi2intrin.h":"d2eaacea81a5a13e0f771f69d62529ec","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512erintrin.h":"d8a0db1358f0c4f5db208e20fece727d","/usr/include/c++/10/bits/move.h":"ignore_header_sys","/usr/include/c++/10/cstdint":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/c++config.h":"ignore_header_sys","/usr/include/bits/endian.h":"ignore_header_sys","/usr/include/bits/types/__locale_t.h":"ignore_header_sys","/usr/include/bits/fp-fast.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512bitalgintrin.h":"065b5f6c02ddf57ee43a304b33d301c4","/usr/include/bits/wordsize.h":"ignore_header_sys","/usr/include/stdio.h":"ignore_header_sys","/usr/include/c++/10/bits/istream.tcc":"ignore_header_sys","/usr/include/bits/setjmp.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512fintrin.h":"4ce3a9eff70ef9558590a27aa986fc0e","/usr/include/gnu/stubs-64.h":"ignore_header_sys","/usr/include/asm/errno.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/enqcmdintrin.h":"6d8136c8969e9c723c195c33da2bb768","/usr/include/c++/10/ext/type_traits.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512bwintrin.h":"64c1b4a5d84a0126158179cc8904e8bd","/usr/include/bits/types.h":"ignore_header_sys","/usr/include/c++/10/string":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vnniintrin.h":"7cd1a414c4acf95129406d966bc736b5","/usr/include/c++/10/x86_64-redhat-linux/bits/os_defines.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/__wmmintrin_aes.h":"b7829f7e5a4221574897b8e365715ced","/usr/include/c++/10/numeric":"ignore_header_sys","/usr/include/c++/10/type_traits":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/stdint.h":"d6abd57f44fe5f48dbfb05fd9adc130a","/usr/include/c++/10/x86_64-redhat-linux/bits/ctype_inline.h":"ignore_header_sys","/usr/include/c++/10/new":"ignore_header_sys","/usr/include/bits/iscanonical.h":"ignore_header_sys","/usr/include/c++/10/bits/memoryfwd.h":"ignore_header_sys","/usr/include/asm-generic/errno-base.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/__stddef_max_align_t.h":"48e8e2456f77e6cda35d245130fa7259","/usr/local/ob-clang11/lib/clang/11.1.0/include/gfniintrin.h":"e0e20e8bab44c33118878b2889b2f2c8","/usr/include/c++/10/ext/new_allocator.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512ifmaintrin.h":"f52649bdc1dc467b7eadc3e1a810a0e2","/usr/include/c++/10/bits/functexcept.h":"ignore_header_sys","/usr/include/c++/10/bits/functional_hash.h":"ignore_header_sys","/usr/include/bits/endianness.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/popcntintrin.h":"7c3573a43b1c0704aac4cb098811cbb1","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512cdintrin.h":"650ead4d3b72acc353b9327d5ae2a07e","/usr/include/c++/10/bits/random.tcc":"ignore_header_sys","/usr/include/c++/10/debug/assertions.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_iterator_base_funcs.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsavecintrin.h":"8d492bf7b081416e797300c239dba796","/usr/include/c++/10/bits/stl_vector.h":"ignore_header_sys","/usr/include/c++/10/bits/basic_string.tcc":"ignore_header_sys","/usr/include/stdint.h":"ignore_header_sys","/usr/include/bits/types/__fpos64_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/rtmintrin.h":"591e544f8d70825a4bbf807dd287584a","/usr/include/c++/10/iosfwd":"ignore_header_sys","/usr/include/c++/10/cstdlib":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vpopcntdqvlintrin.h":"6af0e4f4c55f44ba40bac27558c51b3c","/usr/include/c++/10/cstring":"ignore_header_sys","/usr/include/bits/struct_rwlock.h":"ignore_header_sys","/usr/include/c++/10/bits/range_access.h":"ignore_header_sys","/usr/include/bits/libc-header-start.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/c++locale.h":"ignore_header_sys","/usr/include/c++/10/bits/vector.tcc":"ignore_header_sys","/usr/include/bits/cpu-set.h":"ignore_header_sys","/usr/include/bits/pthreadtypes-arch.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/ctype_base.h":"ignore_header_sys","/usr/include/c++/10/bits/cxxabi_init_exception.h":"ignore_header_sys","/usr/include/c++/10/bits/concept_check.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/gthr.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_iterator.h":"ignore_header_sys","/usr/include/bits/timex.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/waitpkgintrin.h":"2d1c4c5484fb9ec3a2f974b84ccead3c","/usr/include/bits/errno.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/shaintrin.h":"dd1634de945b1ffc8c6b7f39fa8a60c8","/usr/include/bits/select.h":"ignore_header_sys","/usr/include/wctype.h":"ignore_header_sys","/usr/include/bits/mathcalls.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vbmiintrin.h":"54a67d8ab20b9961e36a3fe16b875d4b","[GIT_TOP_DIR]/src/impl/FhtKacRotator.h":"f2f44cb0ba5dc218fc37736f2bab2192","/usr/local/ob-clang11/lib/clang/11.1.0/include/cetintrin.h":"30568779db4d995828cfd0dc8ab749f3","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx2intrin.h":"b787b869cf3250697b509a53b8f84261","/usr/local/ob-clang11/lib/clang/11.1.0/include/rdseedintrin.h":"d5c4d6f9ca83aa6d76891aa467a9c442","/usr/include/bits/waitflags.h":"ignore_header_sys","/usr/include/stdc-predef.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_construct.h":"ignore_header_sys","/usr/include/bits/waitstatus.h":"ignore_header_sys","/usr/include/c++/10/bits/ostream_insert.h":"ignore_header_sys","/usr/include/c++/10/bits/exception.h":"ignore_header_sys","/usr/include/linux/errno.h":"ignore_header_sys","/usr/include/bits/flt-eval-method.h":"ignore_header_sys","/usr/include/c++/10/bits/basic_string.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/amxintrin.h":"df04c665cb8533b77392c57a15d0c13e","/usr/local/ob-clang11/lib/clang/11.1.0/include/stddef.h":"2499dd2361b915724b073282bea3a7bc","/usr/local/ob-clang11/lib/clang/11.1.0/include/xtestintrin.h":"ddbb320bafef81c16f4db301b5d692b4","/usr/include/c++/10/ext/alloc_traits.h":"ignore_header_sys","/usr/include/sched.h":"ignore_header_sys","/usr/include/bits/pthreadtypes.h":"ignore_header_sys","/usr/include/c++/10/bits/random.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512pfintrin.h":"4f558d52a120f2dbc17724370f698f70","/usr/local/ob-clang11/lib/clang/11.1.0/include/sgxintrin.h":"1d380dfee68686a7fa21e5c5888eaf05","/usr/local/ob-clang11/lib/clang/11.1.0/include/fxsrintrin.h":"2288062b986bd0a526c32df2bd2e2c7b","/usr/local/ob-clang11/lib/clang/11.1.0/include/mm_malloc.h":"ed68cf68a5b4db09df709fc93a5e9b12","/usr/local/ob-clang11/lib/clang/11.1.0/include/fmaintrin.h":"e5555b944d57763068cff3823905dcda","/usr/include/bits/mathcalls-narrow.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/bmiintrin.h":"30db6d08581335daa785b893e982ec21","/usr/include/bits/floatn-common.h":"ignore_header_sys","/usr/include/asm-generic/errno.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/gthr-default.h":"ignore_header_sys","/usr/include/c++/10/concepts":"ignore_header_sys","/usr/include/bits/wctype-wchar.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512dqintrin.h":"0a5f59d3a1b4c24596a35fc4d831362d","/usr/include/bits/timesize.h":"ignore_header_sys","/usr/include/bits/types/clock_t.h":"ignore_header_sys","/usr/include/bits/types/locale_t.h":"ignore_header_sys","/usr/include/strings.h":"ignore_header_sys","/usr/include/bits/types/__FILE.h":"ignore_header_sys","/usr/include/c++/10/bits/int_limits.h":"ignore_header_sys","/usr/include/bits/types/struct_itimerspec.h":"ignore_header_sys","/usr/include/c++/10/backward/binders.h":"ignore_header_sys","/usr/include/c++/10/typeinfo":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/c++allocator.h":"ignore_header_sys","/usr/include/c++/10/bits/predefined_ops.h":"ignore_header_sys","/usr/include/bits/time.h":"ignore_header_sys","/usr/include/bits/types/error_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/ptwriteintrin.h":"d07b5c84c015bb93867eab402d31ebca","/usr/include/c++/10/bits/stringfwd.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/cpu_defines.h":"ignore_header_sys","/usr/include/c++/10/bits/alloc_traits.h":"ignore_header_sys","/usr/include/c++/10/ext/string_conversions.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/serializeintrin.h":"9c34b27612aea430b36983691b4efe29","[GIT_TOP_DIR]/src/logger.h":"bc3e03e770b051e6cadc16e5f96c170f","/usr/include/c++/10/bits/ostream.tcc":"ignore_header_sys","/usr/include/c++/10/limits":"ignore_header_sys","/usr/include/c++/10/bits/cxxabi_forced.h":"ignore_header_sys","/usr/include/c++/10/ext/atomicity.h":"ignore_header_sys","/usr/include/wchar.h":"ignore_header_sys","/usr/include/c++/10/ext/numeric_traits.h":"ignore_header_sys","/usr/include/c++/10/ostream":"ignore_header_sys","/usr/include/endian.h":"ignore_header_sys","/usr/include/bits/types/sigset_t.h":"ignore_header_sys","/usr/include/c++/10/clocale":"ignore_header_sys","/usr/include/c++/10/bits/nested_exception.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsaveoptintrin.h":"30a5b7413ecc5157d3c788a4fc5f30f7","/usr/local/ob-clang11/lib/clang/11.1.0/include/invpcidintrin.h":"ff85318ef7dbac300480b3249673816b","/usr/include/c++/10/cwchar":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/atomic_word.h":"ignore_header_sys","/usr/include/pthread.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/stdarg.h":"4de3cbd931b589d291e5c39387aecf82","/usr/local/ob-clang11/lib/clang/11.1.0/include/xsaveintrin.h":"bf0d37fbd9112292164e41d157229261","/usr/local/ob-clang11/lib/clang/11.1.0/include/f16cintrin.h":"e1d777f3170634f5a307f86472b0fb57","/usr/include/c++/10/cwctype":"ignore_header_sys","/usr/include/bits/types/clockid_t.h":"ignore_header_sys","/usr/include/c++/10/bits/basic_ios.h":"ignore_header_sys","/usr/include/c++/10/bits/locale_classes.tcc":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/tmmintrin.h":"d905b09b29cb36b015d25405cfbf8e5a","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlvnniintrin.h":"64180305ff9c6bfad63ee41cbd66093d","/usr/local/ob-clang11/lib/clang/11.1.0/include/pmmintrin.h":"3157414820008b3ad90647450dcf904b","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlcdintrin.h":"6f8f18f6874f9c1a5f19b1c55e3c0cb5","/usr/include/c++/10/stdexcept":"ignore_header_sys","/usr/include/c++/10/bits/exception_ptr.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/__wmmintrin_pclmul.h":"7cbd2793e783b90f193cebfa3675e55a","/usr/include/c++/10/random":"ignore_header_sys","/usr/include/c++/10/stdlib.h":"ignore_header_sys","/usr/include/bits/stdint-uintn.h":"ignore_header_sys","/usr/include/bits/types/struct_sched_param.h":"ignore_header_sys","/usr/include/c++/10/bits/range_cmp.h":"ignore_header_sys","/usr/include/gnu/stubs.h":"ignore_header_sys","/usr/include/c++/10/cerrno":"ignore_header_sys","/usr/include/bits/mathcalls-helper-functions.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/clflushoptintrin.h":"2a269418efbdd932851586bbfa8726a3","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlbwintrin.h":"449273cd1de2c72197e012c804a8c056","/usr/local/ob-clang11/lib/clang/11.1.0/include/tsxldtrkintrin.h":"317e5aa78e58a9618f04d7532a36a253","/usr/include/c++/10/exception":"ignore_header_sys","/usr/include/c++/10/bits/stl_function.h":"ignore_header_sys","/usr/include/bits/locale.h":"ignore_header_sys","/usr/include/c++/10/initializer_list":"ignore_header_sys","/usr/include/bits/wchar.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/error_constants.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vp2intersectintrin.h":"7f431ec4ddce958af8a75cc7a71b3a57","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlbitalgintrin.h":"50b7714a556eb5e52999b7dd18de7d4e","/usr/include/c++/10/cctype":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlbf16intrin.h":"da6bea340165f020a9142ab63fc1aecf","/usr/include/c++/10/bits/std_abs.h":"ignore_header_sys","/usr/include/bits/math-vector.h":"ignore_header_sys","/usr/include/bits/stdint-intn.h":"ignore_header_sys","/usr/include/bits/libm-simd-decl-stubs.h":"ignore_header_sys","/usr/include/c++/10/cmath":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlvbmi2intrin.h":"d09f75ea16d8f1302331016743dca38c","/usr/include/bits/types/struct_tm.h":"ignore_header_sys","/usr/include/c++/10/bits/stl_uninitialized.h":"ignore_header_sys","/usr/include/c++/10/debug/debug.h":"ignore_header_sys","/usr/include/c++/10/x86_64-redhat-linux/bits/opt_random.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/cldemoteintrin.h":"6c282c2bb0cc618292bd47b69fc27641","/usr/include/c++/10/streambuf":"ignore_header_sys","/usr/include/c++/10/bits/exception_defines.h":"ignore_header_sys","/usr/include/bits/types/struct_timespec.h":"ignore_header_sys","/usr/include/bits/thread-shared-types.h":"ignore_header_sys","/usr/include/c++/10/bits/locale_facets.tcc":"ignore_header_sys","/usr/include/locale.h":"ignore_header_sys","/usr/include/bits/types/struct_timeval.h":"ignore_header_sys","/usr/include/c++/10/system_error":"ignore_header_sys","/usr/include/bits/typesizes.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/adxintrin.h":"6828d907a1be13a942ad62e7b4db6870","/usr/include/c++/10/bits/streambuf_iterator.h":"ignore_header_sys","/usr/include/bits/long-double.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512ifmavlintrin.h":"c3576813a57918c2734a8acf08e69b33","/usr/include/c++/10/bits/ios_base.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/bmi2intrin.h":"5421c86f7749d5b931a602c4c605aa59","/usr/include/c++/10/iostream":"ignore_header_sys","/usr/include/c++/10/bits/stl_iterator_base_types.h":"ignore_header_sys","/usr/include/c++/10/bits/hash_bytes.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vlvp2intersectintrin.h":"e127597621c37f450875cdc70e9df509","/usr/include/bits/types/time_t.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/clwbintrin.h":"bc581022bcc5037ab8b06c9c95e15663","/usr/local/ob-clang11/lib/clang/11.1.0/include/mmintrin.h":"1de54663046d007c7b16e4f603262ad8","/usr/local/ob-clang11/lib/clang/11.1.0/include/avx512vldqintrin.h":"8229c4851f85c40c1f62097dc173e420","/usr/local/ob-clang11/lib/clang/11.1.0/include/pkuintrin.h":"750db2cf252eb52d8e60ad6fffb80c8a","/usr/include/bits/stdio_lim.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/wbnoinvdintrin.h":"8d0e049f9ce4bbcc291c21fe7bc7a508","/usr/include/c++/10/bits/ptr_traits.h":"ignore_header_sys","/usr/include/sys/select.h":"ignore_header_sys","/usr/include/bits/floatn.h":"ignore_header_sys","/usr/include/c++/10/cstdio":"ignore_header_sys","/usr/include/alloca.h":"ignore_header_sys","/usr/include/bits/struct_mutex.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/movdirintrin.h":"4566737781d765bba033913dedfcaa83","/usr/include/c++/10/bits/localefwd.h":"ignore_header_sys","/usr/include/errno.h":"ignore_header_sys","/usr/local/ob-clang11/lib/clang/11.1.0/include/pconfigintrin.h":"9da09fbffb9a78b478ac0ce6d43271d7","/usr/include/c++/10/bits/postypes.h":"ignore_header_sys","[GIT_TOP_DIR]/src/impl/matrix_rotator.h":"201b9e418b243731f34df19414d16ccb","/usr/include/stdlib.h":"ignore_header_sys","/usr/include/bits/types/FILE.h":"ignore_header_sys","/usr/include/bits/stdlib-float.h":"ignore_header_sys"},"includes":[{"line":38,"resolved_path":"/usr/include/c++/10/cwctype"},{"line":39,"resolved_path":"/usr/include/c++/10/cctype"},{"line":40,"resolved_path":"/usr/include/c++/10/x86_64-redhat-linux/bits/ctype_base.h"},{"line":41,"resolved_path":"/usr/include/c++/10/iosfwd"},{"line":42,"resolved_path":"/usr/include/c++/10/bits/ios_base.h"},{"line":43,"resolved_path":"/usr/include/c++/10/streambuf"},{"line":44,"resolved_path":"/usr/include/c++/10/bits/cpp_type_traits.h"},{"line":45,"resolved_path":"/usr/include/c++/10/ext/type_traits.h"},{"line":46,"resolved_path":"/usr/include/c++/10/ext/numeric_traits.h"},{"line":47,"resolved_path":"/usr/include/c++/10/bits/streambuf_iterator.h"},{"line":1537,"resolved_path":"/usr/include/c++/10/x86_64-redhat-linux/bits/ctype_inline.h"},{"line":2654,"resolved_path":"/usr/include/c++/10/bits/locale_facets.tcc"}],"skipped_ranges":["58:1-61:7","62:1-64:6","2254:1-2258:6","2268:1-2272:7","2537:1-2540:6","2549:1-2552:7"],"usr2func":[{"usr":76282816665038690,"detailed_name":"virtual std::ctype<wchar_t>::~ctype<wchar_t>()","qual_name_offset":8,"short_name_offset":29,"short_name_size":6,"hover":"","comments":"Destructor","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1238:7-1238:8|1237:7-1238:15|1089|-1"],"derived":[],"uses":[]},{"usr":194736935191070577,"detailed_name":"virtual bool std::ctype::do_is(std::ctype::mask __m, std::ctype::char_type __c) const","qual_name_offset":13,"short_name_offset":25,"short_name_size":5,"hover":"","comments":"","bases":[],"vars":[2217226982243471813,8430600878971789053],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["630:7-630:12|629:7-630:43|1089|-1"],"derived":[],"uses":[]},{"usr":281873986222994385,"detailed_name":"virtual std::num_get::iter_type std::num_get::do_get(std::num_get::iter_type __beg, std::num_get::iter_type __end, std::ios_base &__io, ios_base::iostate &__err, unsigned short &__v) const","qual_name_offset":32,"short_name_offset":46,"short_name_size":6,"spell":"2220:7-2220:13|2219:7-2222:65|1090|-1","hover":"","comments":"","bases":[],"vars":[12073266343361121682,14782147755752069451,10988795943466635300,13350333618462709780,4736458205211827183],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":431616786416211458,"detailed_name":"virtual std::num_put::iter_type std::num_put::do_put(std::num_put::iter_type, std::ios_base &, std::num_put::char_type, double) const","qual_name_offset":32,"short_name_offset":46,"short_name_size":6,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["2534:7-2534:13|2533:7-2534:60|1089|-1"],"derived":[],"uses":[]},{"usr":513534952573608403,"detailed_name":"virtual char std::__ctype_abstract_base::do_narrow(std::__ctype_abstract_base::char_type __c, char __dfault) const = 0","qual_name_offset":13,"short_name_offset":41,"short_name_size":9,"hover":"","comments":" @brief  Narrow char_type to char\n\n This virtual function converts the argument to char using the\n simplest reasonable transformation.  If the conversion fails, dfault\n is returned instead.\n\n do_narrow() is a hook for a derived facet to change the behavior of\n narrowing.  do_narrow() must always return the same result for the\n same input.\n\n Note: this is not what you want for codepage conversions.  See\n codecvt for that.\n\n @param __c  The char_type to convert.\n @param __dfault  Char to return if conversion fails.\n @return  The converted char.","bases":[],"vars":[8927363903109329314,7747389661017681150],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["564:7-564:16|563:7-564:56|1089|-1"],"derived":[],"uses":[]},{"usr":613644409191671497,"detailed_name":"void std::__numpunct_cache::_M_cache(const std::locale &__loc)","qual_name_offset":5,"short_name_offset":28,"short_name_size":8,"hover":"","comments":"","bases":[],"vars":[13357291896581573196],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1632:7-1632:15|1631:7-1632:36|1025|-1"],"derived":[],"uses":[]},{"usr":711342213768352198,"detailed_name":"void std::ctype<char>::_M_narrow_init() const","qual_name_offset":5,"short_name_offset":23,"short_name_size":14,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1169:12-1169:26|1169:7-1169:34|1025|-1"],"derived":[],"uses":["974:4-974:18|16420|-1"]},{"usr":713730288128712427,"detailed_name":"std::__numpunct_cache::__numpunct_cache<_CharT>(std::size_t __refs)","qual_name_offset":0,"short_name_offset":23,"short_name_size":24,"spell":"1621:7-1621:23|1621:7-1627:5|1026|-1","hover":"","comments":"","bases":[],"vars":[3585702102568738012],"callees":[],"kind":9,"parent_kind":23,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":723678290654773215,"detailed_name":"std::__ctype_abstract_base::char_type std::__ctype_abstract_base::toupper(std::__ctype_abstract_base::char_type __c) const","qual_name_offset":38,"short_name_offset":66,"short_name_size":7,"spell":"232:7-232:14|231:7-233:40|1026|-1","hover":"","comments":" @brief  Convert to uppercase.\n\n This function converts the argument to uppercase if possible.\n If not possible (for example, '2'), returns the argument.  It does\n so by returning ctype<char_type>::do_toupper().\n\n @param __c  The char_type to convert.\n @return  The uppercase char_type if convertible, else @a __c.","bases":[],"vars":[10737902627561813998],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":833762881606581157,"detailed_name":"virtual std::__ctype_abstract_base::char_type std::__ctype_abstract_base::do_toupper(std::__ctype_abstract_base::char_type __c) const = 0","qual_name_offset":46,"short_name_offset":74,"short_name_size":10,"hover":"","comments":" @brief  Convert to uppercase.\n\n This virtual function converts the char_type argument to uppercase\n if possible.  If not possible (for example, '2'), returns the\n argument.\n\n do_toupper() is a hook for a derived facet to change the behavior of\n uppercasing.  do_toupper() must always return the same result for\n the same input.\n\n @param __c  The char_type to convert.\n @return  The uppercase char_type if convertible, else @a __c.","bases":[],"vars":[15785319904509949619],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["453:7-453:17|452:7-453:42|1089|-1"],"derived":[],"uses":[]},{"usr":888721210917616770,"detailed_name":"virtual std::ctype::char_type std::ctype::do_widen(char __c) const","qual_name_offset":30,"short_name_offset":42,"short_name_size":8,"hover":"","comments":"","bases":[],"vars":[11616132608290134848],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["655:7-655:15|654:7-655:31|1089|-1"],"derived":[],"uses":[]},{"usr":1107936118968436420,"detailed_name":"explicit std::num_put::num_put<_CharT, _OutIter>(std::size_t __refs)","qual_name_offset":9,"short_name_offset":23,"short_name_size":25,"spell":"2314:7-2314:14|2313:7-2314:53|1026|-1","hover":"","comments":" @brief  Constructor performs initialization.\n\n This is the constructor provided by the standard.\n\n @param __refs  Passed to the base facet class.","bases":[],"vars":[16074214744841602339],"callees":[],"kind":9,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1226013310175436133,"detailed_name":"std::num_put::iter_type std::num_put::put(std::num_put::iter_type __s, std::ios_base &__io, std::num_put::char_type __fill, unsigned long __v) const","qual_name_offset":24,"short_name_offset":38,"short_name_size":3,"spell":"2378:7-2378:10|2377:7-2380:55|1026|-1","hover":"","comments":"","bases":[],"vars":[7627701503418294264,14963469859150497179,3353060029802484849,12562602456416352206],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1236684367859086202,"detailed_name":"inline const char *std::ctype<char>::is(const char *__lo, const char *__hi, std::ctype_base::mask *__vec) const","qual_name_offset":19,"short_name_offset":37,"short_name_size":2,"hover":"","comments":" @brief  Return a mask array.\n\n This function finds the mask for each char in the range [lo, hi) and\n successively writes it to vec.  vec must have as many elements as\n the char array.\n\n @param __lo  Pointer to start of range.\n @param __hi  Pointer to end of range.\n @param __vec  Pointer to an array of mask storage.\n @return  @a __hi.","bases":[],"vars":[12651950838408886392,12966560415995987769,18295932085585125807],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["759:7-759:9|758:7-759:64|1025|-1"],"derived":[],"uses":[]},{"usr":1243596890682237385,"detailed_name":"virtual std::__cxx11::numpunct::string_type std::__cxx11::numpunct::do_falsename() const","qual_name_offset":44,"short_name_offset":68,"short_name_size":12,"spell":"1874:7-1874:19|1873:7-1875:40|1090|-1","hover":"","comments":" @brief  Return string representation of bool false.\n\n Returns a string_type containing the text representation for false\n bool variables.  This function is a hook for derived classes to\n change the value returned.\n\n @return  string_type representing printed form of false.","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1273651680420159209,"detailed_name":"bool std::isspace(_CharT, const std::locale &)","qual_name_offset":5,"short_name_offset":10,"short_name_size":7,"spell":"2569:5-2569:12|2568:5-2570:76|1026|-1","hover":"","comments":"Convenience interface to ctype.is(ctype_base::space, __c).","bases":[],"vars":[750562450257755987,8046977102101463602],"callees":[],"kind":12,"parent_kind":3,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1347434862337051857,"detailed_name":"virtual std::ctype::~ctype<_CharT>()","qual_name_offset":8,"short_name_offset":20,"short_name_size":14,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["627:7-627:8|626:7-627:15|1089|-1"],"derived":[],"uses":[]},{"usr":1438831758607307687,"detailed_name":"std::__cxx11::numpunct::string_type std::__cxx11::numpunct::truename() const","qual_name_offset":36,"short_name_offset":60,"short_name_size":8,"spell":"1793:7-1793:15|1792:7-1794:38|1026|-1","hover":"","comments":" @brief  Return string representation of bool true.\n\n This function returns a string_type containing the text\n representation for true bool variables.  It does so by calling\n numpunct<char_type>::do_truename().\n\n @return  string_type representing printed form of true.","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1638837663609333091,"detailed_name":"virtual const std::ctype::char_type *std::ctype::do_scan_is(std::ctype::mask __m, const std::ctype::char_type *__lo, const std::ctype::char_type *__hi) const","qual_name_offset":37,"short_name_offset":49,"short_name_size":10,"hover":"","comments":"","bases":[],"vars":[1271188363000755878,11281590148149097445,1312246699287162396],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["636:7-636:17|635:7-636:79|1089|-1"],"derived":[],"uses":[]},{"usr":1640212316315204526,"detailed_name":"std::__cxx11::numpunct::string_type std::__cxx11::numpunct::falsename() const","qual_name_offset":36,"short_name_offset":60,"short_name_size":9,"spell":"1806:7-1806:16|1805:7-1807:39|1026|-1","hover":"","comments":" @brief  Return string representation of bool false.\n\n This function returns a string_type containing the text\n representation for false bool variables.  It does so by calling\n numpunct<char_type>::do_falsename().\n\n @return  string_type representing printed form of false.","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1819184569292560743,"detailed_name":"std::num_get::iter_type std::num_get::get(std::num_get::iter_type __in, std::num_get::iter_type __end, std::ios_base &__io, ios_base::iostate &__err, bool &__v) const","qual_name_offset":24,"short_name_offset":38,"short_name_size":3,"spell":"1999:7-1999:10|1998:7-2001:62|1026|-1","hover":"","comments":" @brief  Numeric parsing.\n\n Parses the input stream into the bool @a v.  It does so by calling\n num_get::do_get().\n\n If ios_base::boolalpha is set, attempts to read\n ctype<CharT>::truename() or ctype<CharT>::falsename().  Sets\n @a v to true or false if successful.  Sets err to\n ios_base::failbit if reading the string fails.  Sets err to\n ios_base::eofbit if the stream is emptied.\n\n If ios_base::boolalpha is not set, proceeds as with reading a long,\n except if the value is 1, sets @a v to true, if the value is 0, sets\n @a v to false, and otherwise set err to ios_base::failbit.\n\n @param  __in  Start of input stream.\n @param  __end  End of input stream.\n @param  __io  Source of locale and flags.\n @param  __err  Error flags to set.\n @param  __v  Value to format and insert.\n @return  Iterator after reading.","bases":[],"vars":[4832799490718442148,18114032915574366475,1796003549327337952,11899403611487706932,6251880847200755215],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1820862952364102243,"detailed_name":"virtual const std::__ctype_abstract_base::char_type *std::__ctype_abstract_base::do_scan_not(std::ctype_base::mask __m, const std::__ctype_abstract_base::char_type *__lo, const std::__ctype_abstract_base::char_type *__hi) const = 0","qual_name_offset":53,"short_name_offset":81,"short_name_size":11,"hover":"","comments":" @brief  Find char_type not matching mask\n\n This function searches for and returns a pointer to the first\n char_type c of [lo,hi) for which is(m,c) is false.\n\n do_scan_is() is a hook for a derived facet to change the behavior of\n match searching.  do_is() must always return the same result for the\n same input.\n\n @param __m  The mask to compare against.\n @param __lo  Pointer to start of range.\n @param __hi  Pointer to end of range.\n @return  Pointer to a non-matching char_type if found, else @a __hi.","bases":[],"vars":[14229547951310424013,12661619166227132573,2486741979033787722],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["435:7-435:18|434:7-436:37|1089|-1"],"derived":[],"uses":[]},{"usr":1868334761417153584,"detailed_name":"std::num_get::iter_type std::num_get::get(std::num_get::iter_type __in, std::num_get::iter_type __end, std::ios_base &__io, ios_base::iostate &__err, long long &__v) const","qual_name_offset":24,"short_name_offset":38,"short_name_size":3,"spell":"2057:7-2057:10|2056:7-2059:62|1026|-1","hover":"","comments":"","bases":[],"vars":[5156297212367350360,17767340107024136908,17142767138455637844,10220243806813576736,349428853654293437],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1894316813127060643,"detailed_name":"std::num_put::iter_type std::num_put::put(std::num_put::iter_type __s, std::ios_base &__io, std::num_put::char_type __fill, long __v) const","qual_name_offset":24,"short_name_offset":38,"short_name_size":3,"spell":"2374:7-2374:10|2373:7-2375:55|1026|-1","hover":"","comments":"@{\n*\n @brief  Numeric formatting.\n\n Formats the integral value @a v and inserts it into a\n stream.  It does so by calling num_put::do_put().\n\n Formatting is affected by the flag settings in @a io.\n\n The basic format is affected by the value of io.flags() &\n ios_base::basefield.  If equal to ios_base::oct, formats like the\n printf %o specifier.  Else if equal to ios_base::hex, formats like\n %x or %X with ios_base::uppercase unset or set respectively.\n Otherwise, formats like %d, %ld, %lld for signed and %u, %lu, %llu\n for unsigned values.  Note that if both oct and hex are set, neither\n will take effect.\n\n If ios_base::showpos is set, '+' is output before positive values.\n If ios_base::showbase is set, '0' precedes octal values (except 0)\n and '0[xX]' precedes hex values.\n\n The decimal point character used is numpunct::decimal_point().\n Thousands separators are inserted according to\n numpunct::grouping() and numpunct::thousands_sep().\n\n If io.width() is non-zero, enough @a fill characters are inserted to\n make the result at least that wide.  If\n (io.flags() & ios_base::adjustfield) == ios_base::left, result is\n padded at the end.  If ios_base::internal, then padding occurs\n immediately after either a '+' or '-' or after '0x' or '0X'.\n Otherwise, padding occurs at the beginning.\n\n @param  __s  Stream to write to.\n @param  __io  Source of locale and flags.\n @param  __fill  Char_type to use for filling.\n @param  __v  Value to format and insert.\n @return  Iterator after writing.","bases":[],"vars":[11900712588806683473,2146968964984647905,9575226163305996288,13253451954387188547],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":1924174204601048670,"detailed_name":"const std::__ctype_abstract_base::char_type *std::__ctype_abstract_base::toupper(std::__ctype_abstract_base::char_type *__lo, const std::__ctype_abstract_base::char_type *__hi) const","qual_name_offset":45,"short_name_offset":73,"short_name_size":7,"spell":"247:7-247:14|246:7-248:47|1026|-1","hover":"","comments":" @brief  Convert array to uppercase.\n\n This function converts each char_type in the range [lo,hi) to\n uppercase if possible.  Other elements remain untouched.  It does so\n by returning ctype<char_type>:: do_toupper(lo, hi).\n\n @param __lo  Pointer to start of range.\n @param __hi  Pointer to end of range.\n @return  @a __hi.","bases":[],"vars":[3650380495935822874,4854595208829106637],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2599380165552901606,"detailed_name":"explicit std::__cxx11::numpunct::numpunct<_CharT>(std::size_t __refs)","qual_name_offset":9,"short_name_offset":33,"short_name_size":16,"spell":"1694:7-1694:15|1693:7-1696:36|1026|-1","hover":"","comments":" @brief  Numpunct constructor.\n\n @param  __refs  Refcount to pass to the base class.","bases":[],"vars":[18060420165224904657],"callees":["1696:9-1696:31|6707432908016400876|3|16420"],"kind":9,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":2603765727904734376,"detailed_name":"virtual std::ctype<char>::~ctype<char>() noexcept","qual_name_offset":8,"short_name_offset":26,"short_name_size":6,"hover":"","comments":" @brief  Destructor.\n\n This function deletes table() if @a del was true in the\n constructor.","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["998:7-998:8|997:7-998:15|5185|-1"],"derived":[],"uses":[]},{"usr":2800030596981431293,"detailed_name":"virtual std::num_get::iter_type std::num_get::do_get(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, float &) const","qual_name_offset":32,"short_name_offset":46,"short_name_size":6,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["2247:7-2247:13|2246:7-2247:80|1089|-1"],"derived":[],"uses":[]},{"usr":3020154441903900095,"detailed_name":"_CharT std::toupper(_CharT, const std::locale &)","qual_name_offset":7,"short_name_offset":12,"short_name_size":7,"spell":"2643:5-2643:12|2642:5-2644:62|1026|-1","hover":"","comments":"Convenience interface to ctype.toupper(__c).","bases":[],"vars":[9322206737724757747,9272462294707724447],"callees":[],"kind":12,"parent_kind":3,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3262927770340408128,"detailed_name":"char std::__ctype_abstract_base::narrow(std::__ctype_abstract_base::char_type __c, char __dfault) const","qual_name_offset":5,"short_name_offset":33,"short_name_size":6,"spell":"331:7-331:13|330:7-332:49|1026|-1","hover":"","comments":" @brief  Narrow char_type to char\n\n This function converts the char_type to char using the simplest\n reasonable transformation.  If the conversion fails, dfault is\n returned instead.  It does so by returning\n ctype<char_type>::do_narrow(__c).\n\n Note: this is not what you want for codepage conversions.  See\n codecvt for that.\n\n @param __c  The char_type to convert.\n @param __dfault  Char to return if conversion fails.\n @return  The converted char.","bases":[],"vars":[13674343242582197690,5270361464044836279],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3271663007924926746,"detailed_name":"explicit std::ctype<wchar_t>::ctype(std::size_t __refs)","qual_name_offset":9,"short_name_offset":30,"short_name_size":5,"hover":"","comments":" @brief  Constructor performs initialization.\n\n This is the constructor provided by the standard.\n\n @param __refs  Passed to the base facet class.","bases":[],"vars":[17914329236071238310],"callees":[],"kind":9,"parent_kind":0,"storage":0,"declarations":["1219:7-1219:12|1218:7-1219:31|1025|-1"],"derived":[],"uses":[]},{"usr":3399323306267845964,"detailed_name":"virtual char std::ctype::do_narrow(std::ctype::char_type, char __dfault) const","qual_name_offset":13,"short_name_offset":25,"short_name_size":9,"hover":"","comments":"","bases":[],"vars":[15627526360733008724],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["661:7-661:16|660:7-661:48|1089|-1"],"derived":[],"uses":[]},{"usr":3404199121318428721,"detailed_name":"std::__ctype_abstract_base::char_type std::__ctype_abstract_base::tolower(std::__ctype_abstract_base::char_type __c) const","qual_name_offset":38,"short_name_offset":66,"short_name_size":7,"spell":"261:7-261:14|260:7-262:40|1026|-1","hover":"","comments":" @brief  Convert to lowercase.\n\n This function converts the argument to lowercase if possible.  If\n not possible (for example, '2'), returns the argument.  It does so\n by returning ctype<char_type>::do_tolower(c).\n\n @param __c  The char_type to convert.\n @return  The lowercase char_type if convertible, else @a __c.","bases":[],"vars":[9867449840196084146],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3458810660459739536,"detailed_name":"virtual std::num_get::iter_type std::num_get::do_get(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, long double &) const","qual_name_offset":32,"short_name_offset":46,"short_name_size":6,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["2260:7-2260:13|2259:7-2261:26|1089|-1"],"derived":[],"uses":[]},{"usr":3460634635296415455,"detailed_name":"virtual std::__ctype_abstract_base::~__ctype_abstract_base<_CharT>()","qual_name_offset":8,"short_name_offset":36,"short_name_size":30,"spell":"362:7-362:29|361:7-362:35|5186|-1","hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3485701707769556321,"detailed_name":"void std::num_put::_M_group_int(const char *__grouping, std::size_t __grouping_size, std::num_put::char_type __sep, std::ios_base &__io, std::num_put::char_type *__new, std::num_put::char_type *__cs, int &__len) const","qual_name_offset":5,"short_name_offset":19,"short_name_size":12,"hover":"","comments":"","bases":[],"vars":[5713058350698160665,13641031814664665773,10076485872576190403,16453129504817795174,14340129327804025790,7950458029445537101,13799096206288258533],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["2483:7-2483:19|2482:7-2485:40|1025|-1"],"derived":[],"uses":[]},{"usr":3488880696456796994,"detailed_name":"std::num_get::iter_type std::num_get::_M_extract_int(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, _ValueT &) const","qual_name_offset":24,"short_name_offset":38,"short_name_size":14,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["2155:2-2155:16|2153:2-2156:25|1025|-1"],"derived":[],"uses":[]},{"usr":3880254099074532099,"detailed_name":"explicit std::__ctype_abstract_base::__ctype_abstract_base<_CharT>(std::size_t __refs)","qual_name_offset":9,"short_name_offset":37,"short_name_size":29,"spell":"359:7-359:28|358:7-359:66|1026|-1","hover":"","comments":"","bases":[],"vars":[13925097804034755609],"callees":[],"kind":9,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3899183584474798670,"detailed_name":"virtual std::string std::__cxx11::numpunct::do_grouping() const","qual_name_offset":20,"short_name_offset":44,"short_name_size":11,"spell":"1848:7-1848:18|1847:7-1849:39|1090|-1","hover":"","comments":" @brief  Return grouping specification.\n\n Returns a string representing groupings for the integer part of a\n number.  This function is a hook for derived classes to change the\n value returned.  @see grouping() for details.\n\n @return  String representing grouping specification.","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":3918457579661016135,"detailed_name":"std::ctype<wchar_t>::__wmask_type std::ctype<wchar_t>::_M_convert_to_wmask(const int __m) const throw()","qual_name_offset":34,"short_name_offset":55,"short_name_size":19,"hover":"","comments":"","bases":[],"vars":[9590619509200087215],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1234:7-1234:26|1233:7-1234:56|1025|-1"],"derived":[],"uses":[]},{"usr":3927881060906362152,"detailed_name":"__numpunct_cache<_CharT> &std::__numpunct_cache::operator=(const __numpunct_cache<_CharT> &)","qual_name_offset":26,"short_name_offset":49,"short_name_size":9,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1636:7-1636:15|1635:7-1636:41|1025|-1"],"derived":[],"uses":[]},{"usr":4176599894613216590,"detailed_name":"virtual std::num_put::iter_type std::num_put::do_put(std::num_put::iter_type __s, std::ios_base &__io, std::num_put::char_type __fill, unsigned long long __v) const","qual_name_offset":32,"short_name_offset":46,"short_name_size":6,"spell":"2528:7-2528:13|2527:7-2530:56|1090|-1","hover":"","comments":"","bases":[],"vars":[11372936247879305797,11263306465336552878,6467782596759521390,7401326259251277722],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4343168386382031865,"detailed_name":"virtual std::ctype_byname<wchar_t>::~ctype_byname<wchar_t>()","qual_name_offset":8,"short_name_offset":36,"short_name_size":13,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1530:7-1530:8|1529:7-1530:22|5185|-1"],"derived":[],"uses":[]},{"usr":4404489365245111417,"detailed_name":"explicit std::__cxx11::numpunct_byname::numpunct_byname<_CharT>(const std::string &__s, std::size_t __refs)","qual_name_offset":9,"short_name_offset":40,"short_name_size":23,"spell":"1925:7-1925:22|1924:7-1926:49|1026|-1","hover":"","comments":"","bases":[],"vars":[9623542607197804486,11392124707144827634],"callees":[],"kind":9,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4441307738507381194,"detailed_name":"explicit std::ctype_byname<char>::ctype_byname(const std::string &__s, std::size_t __refs)","qual_name_offset":9,"short_name_offset":34,"short_name_size":12,"hover":"","comments":"","bases":[],"vars":[14124893918061333427,10875149396507022054],"callees":[],"kind":9,"parent_kind":0,"storage":0,"declarations":["1507:7-1507:19|1506:7-1507:57|1025|-1"],"derived":[],"uses":[]},{"usr":4487137414997945334,"detailed_name":"std::__cxx11::numpunct::char_type std::__cxx11::numpunct::thousands_sep() const","qual_name_offset":34,"short_name_offset":58,"short_name_size":13,"spell":"1749:7-1749:20|1748:7-1750:43|1026|-1","hover":"","comments":" @brief  Return thousands separator character.\n\n This function returns a char_type to use as a thousands\n separator.  It does so by returning returning\n numpunct<char_type>::do_thousands_sep().\n\n @return  char_type representing a thousands separator.","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4507963737112343166,"detailed_name":"virtual const std::ctype<wchar_t>::char_type *std::ctype<wchar_t>::do_narrow(const std::ctype<wchar_t>::char_type *__lo, const std::ctype<wchar_t>::char_type *__hi, char __dfault, char *__to) const","qual_name_offset":46,"short_name_offset":67,"short_name_size":9,"hover":"","comments":" @brief  Narrow wchar_t array to char array\n\n This virtual function converts each wchar_t in the range [lo,hi) to\n char using the simplest reasonable transformation and writes the\n results to the destination array.  For any wchar_t in the input that\n cannot be converted, @a dfault is used instead.  For an underived\n ctype<wchar_t> facet, the argument will be copied, casting each\n element to char.\n\n do_narrow() is a hook for a derived facet to change the behavior of\n narrowing.  do_narrow() must always return the same result for the\n same input.\n\n Note: this is not what you want for codepage conversions.  See\n codecvt for that.\n\n @param __lo  Pointer to start of range.\n @param __hi  Pointer to end of range.\n @param __dfault  Char to use if conversion fails.\n @param __to  Pointer to the destination array.\n @return  @a __hi.","bases":[],"vars":[15402856002689398827,3318406615906317495,6613537333750016548,5001224215377034831],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1467:7-1467:16|1466:7-1468:35|1089|-1"],"derived":[],"uses":[]},{"usr":4509323107631865109,"detailed_name":"explicit std::ctype_byname::ctype_byname<_CharT>(const char *__s, std::size_t __refs)","qual_name_offset":9,"short_name_offset":28,"short_name_size":20,"hover":"","comments":"","bases":[],"vars":[443278761618986125,13283397823887970175],"callees":[],"kind":9,"parent_kind":0,"storage":0,"declarations":["1484:7-1484:19|1483:7-1484:55|1025|-1"],"derived":[],"uses":[]},{"usr":4585526041187115525,"detailed_name":"explicit std::__cxx11::numpunct::numpunct<_CharT>(std::__c_locale __cloc, std::size_t __refs)","qual_name_offset":9,"short_name_offset":33,"short_name_size":16,"spell":"1722:7-1722:15|1721:7-1724:42|1026|-1","hover":"","comments":" @brief  Internal constructor.  Not for general use.\n\n This is a constructor for use by the library itself to set up new\n locales.\n\n @param  __cloc  The C locale.\n @param  __refs  Refcount to pass to the base class.","bases":[],"vars":[13126850758434311011,6677847543209040525],"callees":["1724:9-1724:31|6707432908016400876|3|16420"],"kind":9,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4633006014344780493,"detailed_name":"virtual const std::ctype<wchar_t>::char_type *std::ctype<wchar_t>::do_tolower(std::ctype<wchar_t>::char_type *__lo, const std::ctype<wchar_t>::char_type *__hi) const","qual_name_offset":46,"short_name_offset":67,"short_name_size":10,"hover":"","comments":" @brief  Convert array to lowercase.\n\n This virtual function converts each wchar_t in the range [lo,hi) to\n lowercase if possible.  Other elements remain untouched.\n\n do_tolower() is a hook for a derived facet to change the behavior of\n lowercasing.  do_tolower() must always return the same result for\n the same input.\n\n @param __lo  Pointer to start of range.\n @param __hi  Pointer to end of range.\n @return  @a __hi.","bases":[],"vars":[395195559349235175,9944073178305342254],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1376:7-1376:17|1375:7-1376:63|1089|-1"],"derived":[],"uses":[]},{"usr":4637238581739446972,"detailed_name":"typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value, int>::__type std::num_get::_M_find(const _CharT2 *__zero, std::size_t __len, _CharT2 __c) const","qual_name_offset":75,"short_name_offset":89,"short_name_size":7,"spell":"2183:2-2183:9|2181:7-2194:3|1026|-1","hover":"","comments":"","bases":[],"vars":[5658437682343140316,17244570239110070238,4347981667971745708,10956542746536256325,11702601022215098023],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":4673531484130008568,"detailed_name":"virtual std::__ctype_abstract_base::char_type std::__ctype_abstract_base::do_widen(char __c) const = 0","qual_name_offset":46,"short_name_offset":74,"short_name_size":8,"hover":"","comments":" @brief  Widen char\n\n This virtual function converts the char to char_type using the\n simplest reasonable transformation.\n\n do_widen() is a hook for a derived facet to change the behavior of\n widening.  do_widen() must always return the same result for the\n same input.\n\n Note: this is not what you want for codepage conversions.  See\n codecvt for that.\n\n @param __c  The char to convert.\n @return  The converted char_type","bases":[],"vars":[336720444780452590],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["522:7-522:15|521:7-522:35|1089|-1"],"derived":[],"uses":[]},{"usr":4813973832593164375,"detailed_name":"virtual std::num_put::iter_type std::num_put::do_put(std::num_put::iter_type __s, std::ios_base &__io, std::num_put::char_type __fill, bool __v) const","qual_name_offset":32,"short_name_offset":46,"short_name_size":6,"hover":"","comments":"@{\n*\n @brief  Numeric formatting.\n\n These functions do the work of formatting numeric values and\n inserting them into a stream. This function is a hook for derived\n classes to change the value returned.\n\n @param  __s  Stream to write to.\n @param  __io  Source of locale and flags.\n @param  __fill  Char_type to use for filling.\n @param  __v  Value to format and insert.\n @return  Iterator after writing.","bases":[],"vars":[615240010530585427,11507936265047579827,15150707423382507627,1313310501484004556],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["2510:7-2510:13|2509:7-2510:78|1089|-1"],"derived":[],"uses":[]},{"usr":4921911442517553236,"detailed_name":"std::num_get::iter_type std::num_get::get(std::num_get::iter_type __in, std::num_get::iter_type __end, std::ios_base &__io, ios_base::iostate &__err, long &__v) const","qual_name_offset":24,"short_name_offset":38,"short_name_size":3,"spell":"2036:7-2036:10|2035:7-2038:62|1026|-1","hover":"","comments":"@{\n*\n @brief  Numeric parsing.\n\n Parses the input stream into the integral variable @a v.  It does so\n by calling num_get::do_get().\n\n Parsing is affected by the flag settings in @a io.\n\n The basic parse is affected by the value of io.flags() &\n ios_base::basefield.  If equal to ios_base::oct, parses like the\n scanf %o specifier.  Else if equal to ios_base::hex, parses like %X\n specifier.  Else if basefield equal to 0, parses like the %i\n specifier.  Otherwise, parses like %d for signed and %u for unsigned\n types.  The matching type length modifier is also used.\n\n Digit grouping is interpreted according to\n numpunct::grouping() and numpunct::thousands_sep().  If the\n pattern of digit groups isn't consistent, sets err to\n ios_base::failbit.\n\n If parsing the string yields a valid value for @a v, @a v is set.\n Otherwise, sets err to ios_base::failbit and leaves @a v unaltered.\n Sets err to ios_base::eofbit if the stream is emptied.\n\n @param  __in  Start of input stream.\n @param  __end  End of input stream.\n @param  __io  Source of locale and flags.\n @param  __err  Error flags to set.\n @param  __v  Value to format and insert.\n @return  Iterator after reading.","bases":[],"vars":[8993883199505369765,13349305170953528609,14525756011508281509,10382638110836620330,6002163974365108117],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5172260386916788695,"detailed_name":"explicit std::ctype_byname<wchar_t>::ctype_byname(const char *__s, std::size_t __refs)","qual_name_offset":9,"short_name_offset":37,"short_name_size":12,"hover":"","comments":"","bases":[],"vars":[6560612998942892613,16981968638845282144],"callees":[],"kind":9,"parent_kind":0,"storage":0,"declarations":["1521:7-1521:19|1520:7-1521:55|1025|-1"],"derived":[],"uses":[]},{"usr":5289506249443957130,"detailed_name":"inline _OutIter std::__write(_OutIter __s, const _CharT *__ws, int __len)","qual_name_offset":16,"short_name_offset":21,"short_name_size":7,"spell":"129:5-129:12|127:5-134:6|1026|-1","hover":"","comments":"This is the unspecialized form of the template.","bases":[],"vars":[11709715187799896373,12810618897075962507,152091264193663280,15599727783004694209],"callees":[],"kind":12,"parent_kind":3,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5290539493057119432,"detailed_name":"virtual std::num_get::iter_type std::num_get::do_get(std::num_get::iter_type __beg, std::num_get::iter_type __end, std::ios_base &__io, ios_base::iostate &__err, long long &__v) const","qual_name_offset":32,"short_name_offset":46,"short_name_size":6,"spell":"2236:7-2236:13|2235:7-2238:65|1090|-1","hover":"","comments":"","bases":[],"vars":[12082082429473871873,17588921434708558108,6569450363059334646,17218677171744663398,3988589090488944954],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5433435335591085872,"detailed_name":"virtual const std::__ctype_abstract_base::char_type *std::__ctype_abstract_base::do_toupper(std::__ctype_abstract_base::char_type *__lo, const std::__ctype_abstract_base::char_type *__hi) const = 0","qual_name_offset":53,"short_name_offset":81,"short_name_size":10,"hover":"","comments":" @brief  Convert array to uppercase.\n\n This virtual function converts each char_type in the range [__lo,__hi)\n to uppercase if possible.  Other elements remain untouched.\n\n do_toupper() is a hook for a derived facet to change the behavior of\n uppercasing.  do_toupper() must always return the same result for\n the same input.\n\n @param __lo  Pointer to start of range.\n @param __hi  Pointer to end of range.\n @return  @a __hi.","bases":[],"vars":[2496735545085350586,18444634223243932019],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["470:7-470:17|469:7-470:67|1089|-1"],"derived":[],"uses":[]},{"usr":5460268008921343462,"detailed_name":"const std::__ctype_abstract_base::char_type *std::__ctype_abstract_base::tolower(std::__ctype_abstract_base::char_type *__lo, const std::__ctype_abstract_base::char_type *__hi) const","qual_name_offset":45,"short_name_offset":73,"short_name_size":7,"spell":"276:7-276:14|275:7-277:47|1026|-1","hover":"","comments":" @brief  Convert array to lowercase.\n\n This function converts each char_type in the range [__lo,__hi) to\n lowercase if possible.  Other elements remain untouched.  It does so\n by returning ctype<char_type>:: do_tolower(__lo, __hi).\n\n @param __lo  Pointer to start of range.\n @param __hi  Pointer to end of range.\n @return  @a __hi.","bases":[],"vars":[8884267710544531838,5743928307534422492],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5665319943304913922,"detailed_name":"const std::ctype<char>::char_type *std::ctype<char>::narrow(const std::ctype<char>::char_type *__lo, const std::ctype<char>::char_type *__hi, char __dfault, char *__to) const","qual_name_offset":35,"short_name_offset":53,"short_name_size":6,"spell":"964:7-964:13|963:7-976:8|1026|-1","hover":"","comments":" @brief  Narrow char array\n\n This function converts each char in the input to char using the\n simplest reasonable transformation and writes the results to the\n destination array.  For any char in the input that cannot be\n converted, @a dfault is used instead.  For an underived ctype<char>\n facet, the argument will be copied unchanged.\n\n This function works as if it returns ctype<char>::do_narrow(lo, hi,\n dfault, to).  do_narrow() must always return the same result for the\n same input.\n\n Note: this is not what you want for codepage conversions.  See\n codecvt for that.\n\n @param __lo  Pointer to start of range.\n @param __hi  Pointer to end of range.\n @param __dfault  Char to use if conversion fails.\n @param __to  Pointer to the destination array.\n @return  @a __hi.","bases":[],"vars":[10737852565477696367,12720096324826273908,9138593118977091855,4086496863718173267],"callees":["974:4-974:18|711342213768352198|3|16420","975:15-975:24|5929447099935477181|3|24676"],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5727206790930708022,"detailed_name":"typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type std::num_get::_M_find(const _CharT2 *, std::size_t __len, _CharT2 __c) const","qual_name_offset":74,"short_name_offset":88,"short_name_size":7,"spell":"2160:2-2160:9|2159:7-2178:3|1026|-1","hover":"","comments":"","bases":[],"vars":[6185494546980619006,12143845735739924443,2200814033583944148],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5850727255535620952,"detailed_name":"bool std::islower(_CharT, const std::locale &)","qual_name_offset":5,"short_name_offset":10,"short_name_size":7,"spell":"2593:5-2593:12|2592:5-2594:76|1026|-1","hover":"","comments":"Convenience interface to ctype.is(ctype_base::lower, __c).","bases":[],"vars":[16109088441368679320,9184063328501079310],"callees":[],"kind":12,"parent_kind":3,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":5929447099935477181,"detailed_name":"virtual const std::ctype<char>::char_type *std::ctype<char>::do_narrow(const std::ctype<char>::char_type *__lo, const std::ctype<char>::char_type *__hi, char __dfault, char *__to) const","qual_name_offset":43,"short_name_offset":61,"short_name_size":9,"spell":"1160:7-1160:16|1159:7-1166:8|1090|-1","hover":"","comments":" @brief  Narrow char array to char array\n\n This virtual function converts each char in the range [lo,hi) to\n char using the simplest reasonable transformation and writes the\n results to the destination array.  For any char in the input that\n cannot be converted, @a dfault is used instead.  For an underived\n ctype<char> facet, the argument will be copied unchanged.\n\n do_narrow() is a hook for a derived facet to change the behavior of\n narrowing.  do_narrow() must always return the same result for the\n same input.\n\n Note: this is not what you want for codepage conversions.  See\n codecvt for that.\n\n @param __lo  Pointer to start of range.\n @param __hi  Pointer to end of range.\n @param __dfault  Char to use if conversion fails.\n @param __to  Pointer to the destination array.\n @return  @a __hi.","bases":[],"vars":[11328836237310727952,15928216406559866162,10186961462915689554,1277808715633627966],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":["975:15-975:24|24676|-1"]},{"usr":6098388870106492421,"detailed_name":"std::num_put::iter_type std::num_put::put(std::num_put::iter_type __s, std::ios_base &__io, std::num_put::char_type __fill, long double __v) const","qual_name_offset":24,"short_name_offset":38,"short_name_size":3,"spell":"2441:7-2441:10|2440:7-2443:55|1026|-1","hover":"","comments":"","bases":[],"vars":[11152576743136099844,13242440903662151334,11508026753460104001,6221904498979693381],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6119958990373353015,"detailed_name":"std::__numpunct_cache::~__numpunct_cache<_CharT>()","qual_name_offset":0,"short_name_offset":23,"short_name_size":25,"spell":"1643:31-1643:48|1642:3-1651:6|5186|-1","hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":23,"storage":0,"declarations":["1629:7-1629:8|1629:7-1629:26|5185|-1"],"derived":[],"uses":[]},{"usr":6141809219553791138,"detailed_name":"virtual const std::ctype<char>::char_type *std::ctype<char>::do_tolower(std::ctype<char>::char_type *__lo, const std::ctype<char>::char_type *__hi) const","qual_name_offset":43,"short_name_offset":61,"short_name_size":10,"hover":"","comments":" @brief  Convert array to lowercase.\n\n This virtual function converts each char in the range [lo,hi) to\n lowercase if possible.  Other chars remain untouched.\n\n do_tolower() is a hook for a derived facet to change the behavior of\n lowercasing.  do_tolower() must always return the same result for\n the same input.\n\n @param __lo  Pointer to first char in range.\n @param __hi  Pointer to end of range.\n @return  @a __hi.","bases":[],"vars":[7268553489912133742,13772592513953030279],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1064:7-1064:17|1063:7-1064:63|1089|-1"],"derived":[],"uses":["853:22-853:32|24676|-1"]},{"usr":6173189498627907175,"detailed_name":"explicit std::ctype<wchar_t>::ctype(std::__c_locale __cloc, std::size_t __refs)","qual_name_offset":9,"short_name_offset":30,"short_name_size":5,"hover":"","comments":" @brief  Constructor performs static initialization.\n\n This constructor is used to construct the initial C locale facet.\n\n @param __cloc  Handle to C locale data.\n @param __refs  Passed to the base facet class.","bases":[],"vars":[16854565201862893864,16194747091621534944],"callees":[],"kind":9,"parent_kind":0,"storage":0,"declarations":["1230:7-1230:12|1229:7-1230:50|1025|-1"],"derived":[],"uses":[]},{"usr":6372689635514573066,"detailed_name":"const char *std::ctype<char>::widen(const char *__lo, const char *__hi, std::ctype<char>::char_type *__to) const","qual_name_offset":12,"short_name_offset":30,"short_name_size":5,"spell":"899:7-899:12|898:7-910:8|1026|-1","hover":"","comments":" @brief  Widen char array\n\n This function converts each char in the input to char using the\n simplest reasonable transformation.  For an underived ctype<char>\n facet, the argument will be copied unchanged.\n\n This function works as if it returns ctype<char>::do_widen(c).\n do_widen() must always return the same result for the same input.\n\n Note: this is not what you want for codepage conversions.  See\n codecvt for that.\n\n @param __lo  Pointer to first char in range.\n @param __hi  Pointer to end of range.\n @param __to  Pointer to the destination array.\n @return  @a __hi.","bases":[],"vars":[12261560240024460586,18085604822106609874,4775694019330734052],"callees":["908:4-908:17|11300559627633851147|3|16420","909:15-909:23|17312257814999493861|3|24676"],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6400694891439692743,"detailed_name":"virtual const std::__ctype_abstract_base::char_type *std::__ctype_abstract_base::do_is(const std::__ctype_abstract_base::char_type *__lo, const std::__ctype_abstract_base::char_type *__hi, std::ctype_base::mask *__vec) const = 0","qual_name_offset":53,"short_name_offset":81,"short_name_size":5,"hover":"","comments":" @brief  Return a mask array.\n\n This function finds the mask for each char_type in the range [lo,hi)\n and successively writes it to vec.  vec must have as many elements\n as the input.\n\n do_is() is a hook for a derived facet to change the behavior of\n classifying.  do_is() must always return the same result for the\n same input.\n\n @param __lo  Pointer to start of range.\n @param __hi  Pointer to end of range.\n @param __vec  Pointer to an array of mask storage.\n @return  @a __hi.","bases":[],"vars":[12671812491138581898,14232114661927631346,2807934521983662814],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["397:7-397:12|396:7-398:28|1089|-1"],"derived":[],"uses":[]},{"usr":6495972003079735750,"detailed_name":"virtual const std::ctype::char_type *std::ctype::do_narrow(const std::ctype::char_type *__lo, const std::ctype::char_type *__hi, char __dfault, char *__to) const","qual_name_offset":37,"short_name_offset":49,"short_name_size":9,"hover":"","comments":"","bases":[],"vars":[7393207723580392118,924072047892296264,4371517928047820079,12708830565495861908],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["664:7-664:16|663:7-665:35|1089|-1"],"derived":[],"uses":[]},{"usr":6600408372756635059,"detailed_name":"std::num_put::iter_type std::num_put::put(std::num_put::iter_type __s, std::ios_base &__io, std::num_put::char_type __fill, long long __v) const","qual_name_offset":24,"short_name_offset":38,"short_name_size":3,"spell":"2384:7-2384:10|2383:7-2385:55|1026|-1","hover":"","comments":"","bases":[],"vars":[11425896928247963790,16572819180283445091,13306965718745825910,18378753395691494509],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":6707432908016400876,"detailed_name":"void std::__cxx11::numpunct::_M_initialize_numpunct(std::__c_locale __cloc)","qual_name_offset":5,"short_name_offset":29,"short_name_size":22,"hover":"","comments":"For use at construction time only.","bases":[],"vars":[5534060272384858871],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1879:7-1879:29|1878:7-1879:52|1025|-1"],"derived":[],"uses":["1696:9-1696:31|16420|-1","1710:9-1710:31|16420|-1","1724:9-1724:31|16420|-1"]},{"usr":6767844025133266201,"detailed_name":"virtual const std::__ctype_abstract_base::char_type *std::__ctype_abstract_base::do_tolower(std::__ctype_abstract_base::char_type *__lo, const std::__ctype_abstract_base::char_type *__hi) const = 0","qual_name_offset":53,"short_name_offset":81,"short_name_size":10,"hover":"","comments":" @brief  Convert array to lowercase.\n\n This virtual function converts each char_type in the range [__lo,__hi)\n to lowercase if possible.  Other elements remain untouched.\n\n do_tolower() is a hook for a derived facet to change the behavior of\n lowercasing.  do_tolower() must always return the same result for\n the same input.\n\n @param __lo  Pointer to start of range.\n @param __hi  Pointer to end of range.\n @return  @a __hi.","bases":[],"vars":[6008708831893644851,612568734742363106],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["503:7-503:17|502:7-503:67|1089|-1"],"derived":[],"uses":[]},{"usr":6892380574101206492,"detailed_name":"virtual const std::__ctype_abstract_base::char_type *std::__ctype_abstract_base::do_scan_is(std::ctype_base::mask __m, const std::__ctype_abstract_base::char_type *__lo, const std::__ctype_abstract_base::char_type *__hi) const = 0","qual_name_offset":53,"short_name_offset":81,"short_name_size":10,"hover":"","comments":" @brief  Find char_type matching mask\n\n This function searches for and returns the first char_type c in\n [__lo,__hi) for which is(__m,c) is true.\n\n do_scan_is() is a hook for a derived facet to change the behavior of\n match searching.  do_is() must always return the same result for the\n same input.\n\n @param __m  The mask to compare against.\n @param __lo  Pointer to start of range.\n @param __hi  Pointer to end of range.\n @return  Pointer to a matching char_type if found, else @a __hi.","bases":[],"vars":[5588788830209033634,4983874329168025487,15229646516558115422],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["416:7-416:17|415:7-417:36|1089|-1"],"derived":[],"uses":[]},{"usr":6957217307924102160,"detailed_name":"inline int std::__write(int __s, const _CharT *__ws, int __len)","qual_name_offset":11,"short_name_offset":16,"short_name_size":7,"spell":"119:5-119:12|117:5-123:6|1026|-1","hover":"","comments":"This template permits specializing facet output code for\nostreambuf_iterator.  For ostreambuf_iterator, sputn is\nsignificantly more efficient than incrementing iterators.","bases":[],"vars":[2382917168043123437,18147610730741396988,14994775562859562978],"callees":[],"kind":12,"parent_kind":3,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7133621689797333637,"detailed_name":"virtual const char *std::ctype<wchar_t>::do_widen(const char *__lo, const char *__hi, std::ctype<wchar_t>::char_type *__to) const","qual_name_offset":20,"short_name_offset":41,"short_name_size":8,"hover":"","comments":" @brief  Widen char array to wchar_t array\n\n This function converts each char in the input to wchar_t using the\n simplest reasonable transformation.  For an underived ctype<wchar_t>\n facet, the argument will be copied, casting each element to wchar_t.\n\n do_widen() is a hook for a derived facet to change the behavior of\n widening.  do_widen() must always return the same result for the\n same input.\n\n Note: this is not what you want for codepage conversions.  See\n codecvt for that.\n\n @param __lo  Pointer to start range.\n @param __hi  Pointer to end of range.\n @param __to  Pointer to the destination array.\n @return  @a __hi.","bases":[],"vars":[5936477810023521604,5368422753934092143,11246506959003795607],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1418:7-1418:15|1417:7-1418:74|1089|-1"],"derived":[],"uses":[]},{"usr":7172211958921984258,"detailed_name":"virtual std::ctype<wchar_t>::char_type std::ctype<wchar_t>::do_widen(char __c) const","qual_name_offset":39,"short_name_offset":60,"short_name_size":8,"hover":"","comments":" @brief  Widen char to wchar_t\n\n This virtual function converts the char to wchar_t using the\n simplest reasonable transformation.  For an underived ctype<wchar_t>\n facet, the argument will be cast to wchar_t.\n\n do_widen() is a hook for a derived facet to change the behavior of\n widening.  do_widen() must always return the same result for the\n same input.\n\n Note: this is not what you want for codepage conversions.  See\n codecvt for that.\n\n @param __c  The char to convert.\n @return  The converted wchar_t.","bases":[],"vars":[8214594355050968254],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1396:7-1396:15|1395:7-1396:31|1089|-1"],"derived":[],"uses":[]},{"usr":7175254353626299960,"detailed_name":"explicit std::ctype_byname::ctype_byname<_CharT>(const std::string &__s, std::size_t __refs)","qual_name_offset":9,"short_name_offset":28,"short_name_size":20,"spell":"1488:7-1488:19|1487:7-1489:46|1026|-1","hover":"","comments":"","bases":[],"vars":[8078893050581192665,1851162546725616061],"callees":[],"kind":9,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7354199556608318676,"detailed_name":"explicit std::ctype<char>::ctype(const std::ctype_base::mask *__table, bool __del, std::size_t __refs)","qual_name_offset":9,"short_name_offset":27,"short_name_size":5,"hover":"","comments":" @brief  Constructor performs initialization.\n\n This is the constructor provided by the standard.\n\n @param __table If non-zero, table is used as the per-char mask.\n              Else classic_table() is used.\n @param __del   If true, passes ownership of table to this facet.\n @param __refs  Passed to the base facet class.","bases":[],"vars":[13067310252781701721,6223961250160338186,14091333883377843272],"callees":[],"kind":9,"parent_kind":0,"storage":0,"declarations":["718:7-718:12|717:7-718:76|1025|-1"],"derived":[],"uses":[]},{"usr":7394088038611416549,"detailed_name":"inline bool std::ctype<char>::is(std::ctype_base::mask __m, char __c) const","qual_name_offset":12,"short_name_offset":30,"short_name_size":2,"hover":"","comments":" @brief  Test char classification.\n\n This function compares the mask table[c] to @a __m.\n\n @param __c  The char to compare the mask of.\n @param __m  The mask to compare against.\n @return  True if __m & table[__c] is true, false otherwise.","bases":[],"vars":[17909520220262075339,17452249573812094414],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["744:7-744:9|743:7-744:35|1025|-1"],"derived":[],"uses":[]},{"usr":7399848463584473417,"detailed_name":"virtual std::num_get::iter_type std::num_get::do_get(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, double &) const","qual_name_offset":32,"short_name_offset":46,"short_name_size":6,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["2250:7-2250:13|2249:7-2251:21|1089|-1"],"derived":[],"uses":[]},{"usr":7527926941162061742,"detailed_name":"bool std::isalnum(_CharT, const std::locale &)","qual_name_offset":5,"short_name_offset":10,"short_name_size":7,"spell":"2623:5-2623:12|2622:5-2624:76|1026|-1","hover":"","comments":"Convenience interface to ctype.is(ctype_base::alnum, __c).","bases":[],"vars":[16509004432586361522,17343408572677266924],"callees":[],"kind":12,"parent_kind":3,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7557766048208207686,"detailed_name":"std::ctype<char>::char_type std::ctype<char>::toupper(std::ctype<char>::char_type __c) const","qual_name_offset":28,"short_name_offset":46,"short_name_size":7,"spell":"802:7-802:14|801:7-803:40|1026|-1","hover":"","comments":" @brief  Convert to uppercase.\n\n This function converts the char argument to uppercase if possible.\n If not possible (for example, '2'), returns the argument.\n\n toupper() acts as if it returns ctype<char>::do_toupper(c).\n do_toupper() must always return the same result for the same input.\n\n @param __c  The char to convert.\n @return  The uppercase char if convertible, else @a __c.","bases":[],"vars":[11225629202751246829],"callees":["803:22-803:32|13371766477209219637|3|24676"],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7644183811615954457,"detailed_name":"virtual std::__cxx11::numpunct::string_type std::__cxx11::numpunct::do_truename() const","qual_name_offset":44,"short_name_offset":68,"short_name_size":11,"spell":"1861:7-1861:18|1860:7-1862:39|1090|-1","hover":"","comments":" @brief  Return string representation of bool true.\n\n Returns a string_type containing the text representation for true\n bool variables.  This function is a hook for derived classes to\n change the value returned.\n\n @return  string_type representing printed form of true.","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":7835590309597677188,"detailed_name":"std::ctype<char>::char_type std::ctype<char>::tolower(std::ctype<char>::char_type __c) const","qual_name_offset":28,"short_name_offset":46,"short_name_size":7,"spell":"835:7-835:14|834:7-836:40|1026|-1","hover":"","comments":" @brief  Convert to lowercase.\n\n This function converts the char argument to lowercase if possible.\n If not possible (for example, '2'), returns the argument.\n\n tolower() acts as if it returns ctype<char>::do_tolower(__c).\n do_tolower() must always return the same result for the same input.\n\n @param __c  The char to convert.\n @return  The lowercase char if convertible, else @a __c.","bases":[],"vars":[9325388749134370313],"callees":["836:22-836:32|14538193476001537306|3|24676"],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8106686865586456900,"detailed_name":"virtual const std::ctype<wchar_t>::char_type *std::ctype<wchar_t>::do_scan_is(int __m, const std::ctype<wchar_t>::char_type *__lo, const std::ctype<wchar_t>::char_type *__hi) const","qual_name_offset":46,"short_name_offset":67,"short_name_size":10,"hover":"","comments":" @brief  Find wchar_t matching mask\n\n This function searches for and returns the first wchar_t c in\n [__lo,__hi) for which is(__m,c) is true.\n\n do_scan_is() is a hook for a derived facet to change the behavior of\n match searching.  do_is() must always return the same result for the\n same input.\n\n @param __m  The mask to compare against.\n @param __lo  Pointer to start of range.\n @param __hi  Pointer to end of range.\n @return  Pointer to a matching wchar_t if found, else @a __hi.","bases":[],"vars":[10048428430047109672,17142283208439030719,14576120695286053089],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1291:7-1291:17|1290:7-1291:79|1089|-1"],"derived":[],"uses":[]},{"usr":8222460855529112069,"detailed_name":"const std::ctype<char>::char_type *std::ctype<char>::tolower(std::ctype<char>::char_type *__lo, const std::ctype<char>::char_type *__hi) const","qual_name_offset":35,"short_name_offset":53,"short_name_size":7,"spell":"852:7-852:14|851:7-853:47|1026|-1","hover":"","comments":" @brief  Convert array to lowercase.\n\n This function converts each char in the range [lo,hi) to lowercase\n if possible.  Other chars remain untouched.\n\n tolower() acts as if it returns ctype<char>:: do_tolower(__lo, __hi).\n do_tolower() must always return the same result for the same input.\n\n @param __lo  Pointer to first char in range.\n @param __hi  Pointer to end of range.\n @return  @a __hi.","bases":[],"vars":[10585377049236246399,1573813191948791414],"callees":["853:22-853:32|6141809219553791138|3|24676"],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8405725736309022847,"detailed_name":"bool std::isupper(_CharT, const std::locale &)","qual_name_offset":5,"short_name_offset":10,"short_name_size":7,"spell":"2587:5-2587:12|2586:5-2588:76|1026|-1","hover":"","comments":"Convenience interface to ctype.is(ctype_base::upper, __c).","bases":[],"vars":[16680044437381557939,10762150730812457512],"callees":[],"kind":12,"parent_kind":3,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8423362052868069796,"detailed_name":"template <> void std::__convert_to_v(const char *, long double &, ios_base::iostate &, const std::__c_locale &) throw()","qual_name_offset":17,"short_name_offset":22,"short_name_size":14,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":["89:5-89:19|87:3-90:32|1025|-1"],"derived":[],"uses":[]},{"usr":8435180093913234158,"detailed_name":"virtual std::__ctype_abstract_base::char_type std::__ctype_abstract_base::do_tolower(std::__ctype_abstract_base::char_type __c) const = 0","qual_name_offset":46,"short_name_offset":74,"short_name_size":10,"hover":"","comments":" @brief  Convert to lowercase.\n\n This virtual function converts the argument to lowercase if\n possible.  If not possible (for example, '2'), returns the argument.\n\n do_tolower() is a hook for a derived facet to change the behavior of\n lowercasing.  do_tolower() must always return the same result for\n the same input.\n\n @param __c  The char_type to convert.\n @return  The lowercase char_type if convertible, else @a __c.","bases":[],"vars":[5751782586947661919],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["486:7-486:17|485:7-486:42|1089|-1"],"derived":[],"uses":[]},{"usr":8493863686524868308,"detailed_name":"std::num_put::iter_type std::num_put::_M_insert_float(std::num_put::iter_type, std::ios_base &__io, std::num_put::char_type __fill, char __mod, _ValueT __v) const","qual_name_offset":24,"short_name_offset":38,"short_name_size":15,"hover":"","comments":"","bases":[],"vars":[16381347621455820859,2300377235921037004,3933132807422180491,14795595978069915682],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["2469:2-2469:17|2468:2-2470:34|1025|-1"],"derived":[],"uses":[]},{"usr":8588882361616492796,"detailed_name":"virtual std::__cxx11::numpunct::char_type std::__cxx11::numpunct::do_thousands_sep() const","qual_name_offset":42,"short_name_offset":66,"short_name_size":16,"spell":"1835:7-1835:23|1834:7-1836:44|1090|-1","hover":"","comments":" @brief  Return thousands separator character.\n\n Returns a char_type to use as a thousands separator.  This function\n is a hook for derived classes to change the value returned.\n\n @return  @a char_type representing a thousands separator.","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8657609572820130059,"detailed_name":"bool std::iscntrl(_CharT, const std::locale &)","qual_name_offset":5,"short_name_offset":10,"short_name_size":7,"spell":"2581:5-2581:12|2580:5-2582:76|1026|-1","hover":"","comments":"Convenience interface to ctype.is(ctype_base::cntrl, __c).","bases":[],"vars":[5717576992180752527,1209405619365307489],"callees":[],"kind":12,"parent_kind":3,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8687795519663770050,"detailed_name":"template <> void std::__convert_to_v(const char *, double &, ios_base::iostate &, const std::__c_locale &) throw()","qual_name_offset":17,"short_name_offset":22,"short_name_size":14,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":["84:5-84:19|82:3-85:32|1025|-1"],"derived":[],"uses":[]},{"usr":8690962149841458562,"detailed_name":"virtual const std::ctype::char_type *std::ctype::do_scan_not(std::ctype::mask __m, const std::ctype::char_type *__lo, const std::ctype::char_type *__hi) const","qual_name_offset":37,"short_name_offset":49,"short_name_size":11,"hover":"","comments":"","bases":[],"vars":[15948098045652486180,16290579758490173211,2536682936717778199],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["639:7-639:18|638:7-640:33|1089|-1"],"derived":[],"uses":[]},{"usr":8728381388377996296,"detailed_name":"std::num_get::iter_type std::num_get::get(std::num_get::iter_type __in, std::num_get::iter_type __end, std::ios_base &__io, ios_base::iostate &__err, unsigned long &__v) const","qual_name_offset":24,"short_name_offset":38,"short_name_size":3,"spell":"2051:7-2051:10|2050:7-2053:62|1026|-1","hover":"","comments":"","bases":[],"vars":[14090179677327305299,2643664357475771359,5467566163275638201,6294333407967711432,11721097644128018158],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8733325962829551978,"detailed_name":"std::num_put::iter_type std::num_put::put(std::num_put::iter_type __s, std::ios_base &__io, std::num_put::char_type __fill, unsigned long long __v) const","qual_name_offset":24,"short_name_offset":38,"short_name_size":3,"spell":"2388:7-2388:10|2387:7-2390:55|1026|-1","hover":"","comments":"","bases":[],"vars":[15201975492155069100,2646277830853969668,11143492693806725561,13043402101775413309],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":8780862596512225099,"detailed_name":"virtual std::num_get::iter_type std::num_get::do_get(std::num_get::iter_type __beg, std::num_get::iter_type __end, std::ios_base &__io, ios_base::iostate &__err, unsigned int &__v) const","qual_name_offset":32,"short_name_offset":46,"short_name_size":6,"spell":"2225:7-2225:13|2224:7-2227:65|1090|-1","hover":"","comments":"","bases":[],"vars":[7501222582826488995,3261341569341945001,11757214796361360964,9122154680684014290,11194562196001097024],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9002809115943697934,"detailed_name":"virtual std::num_get::iter_type std::num_get::do_get(std::num_get::iter_type __beg, std::num_get::iter_type __end, std::ios_base &__io, ios_base::iostate &__err, unsigned long long &__v) const","qual_name_offset":32,"short_name_offset":46,"short_name_size":6,"spell":"2241:7-2241:13|2240:7-2243:65|1090|-1","hover":"","comments":"","bases":[],"vars":[542013831196983715,16645497319810189584,541479463276811735,12242779868760936593,752167359723478730],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9128645795594471735,"detailed_name":"explicit std::__cxx11::numpunct_byname::numpunct_byname<_CharT>(const char *__s, std::size_t __refs)","qual_name_offset":9,"short_name_offset":40,"short_name_size":23,"spell":"1910:7-1910:22|1909:7-1921:8|1026|-1","hover":"","comments":"","bases":[],"vars":[12438062033184945207,706715351429634906,10001110855633366529],"callees":[],"kind":9,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9180289180820275881,"detailed_name":"explicit std::num_get::num_get<_CharT, _InIter>(std::size_t __refs)","qual_name_offset":9,"short_name_offset":23,"short_name_size":24,"spell":"1973:7-1973:14|1972:7-1973:53|1026|-1","hover":"","comments":" @brief  Constructor performs initialization.\n\n This is the constructor provided by the standard.\n\n @param __refs  Passed to the base facet class.","bases":[],"vars":[351009474807798697],"callees":[],"kind":9,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9294554883856773880,"detailed_name":"void std::__convert_to_v(const char *, _Tp &, ios_base::iostate &, const std::__c_locale &) throw()","qual_name_offset":5,"short_name_offset":10,"short_name_size":14,"hover":"","comments":"Convert string to numeric value of type _Tp and store results.\nNB: This is specialized for all required types, there is no\ngeneric definition.","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":["73:5-73:19|72:5-74:32|1025|-1"],"derived":[],"uses":[]},{"usr":9336852620505031984,"detailed_name":"bool std::__ctype_abstract_base::is(std::ctype_base::mask __m, std::__ctype_abstract_base::char_type __c) const","qual_name_offset":5,"short_name_offset":33,"short_name_size":2,"spell":"169:7-169:9|168:7-170:40|1026|-1","hover":"","comments":" @brief  Test char_type classification.\n\n This function finds a mask M for @a __c and compares it to\n mask @a __m.  It does so by returning the value of\n ctype<char_type>::do_is().\n\n @param __c  The char_type to compare the mask of.\n @param __m  The mask to compare against.\n @return  (M & __m) != 0.","bases":[],"vars":[5740199999309572441,11006071037473366967],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9554517452945448162,"detailed_name":"virtual const char *std::__ctype_abstract_base::do_widen(const char *__lo, const char *__hi, std::__ctype_abstract_base::char_type *__to) const = 0","qual_name_offset":20,"short_name_offset":48,"short_name_size":8,"hover":"","comments":" @brief  Widen char array\n\n This function converts each char in the input to char_type using the\n simplest reasonable transformation.\n\n do_widen() is a hook for a derived facet to change the behavior of\n widening.  do_widen() must always return the same result for the\n same input.\n\n Note: this is not what you want for codepage conversions.  See\n codecvt for that.\n\n @param __lo  Pointer to start range.\n @param __hi  Pointer to end of range.\n @param __to  Pointer to the destination array.\n @return  @a __hi.","bases":[],"vars":[3457865465505528787,1284883162389719583,904742861682523446],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["543:7-543:15|542:7-543:78|1089|-1"],"derived":[],"uses":[]},{"usr":9594536584060009057,"detailed_name":"std::num_get::iter_type std::num_get::get(std::num_get::iter_type __in, std::num_get::iter_type __end, std::ios_base &__io, ios_base::iostate &__err, unsigned short &__v) const","qual_name_offset":24,"short_name_offset":38,"short_name_size":3,"spell":"2041:7-2041:10|2040:7-2043:62|1026|-1","hover":"","comments":"","bases":[],"vars":[10347866103299081001,10295847893734745278,5541757119013870315,12296147626865426811,8934036019340018964],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9782348988439897018,"detailed_name":"virtual std::ctype_byname::~ctype_byname<_CharT>()","qual_name_offset":8,"short_name_offset":27,"short_name_size":21,"spell":"1494:7-1494:20|1493:7-1494:26|1090|-1","hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9962841565354395111,"detailed_name":"std::num_get::iter_type std::num_get::get(std::num_get::iter_type __in, std::num_get::iter_type __end, std::ios_base &__io, ios_base::iostate &__err, void *&__v) const","qual_name_offset":24,"short_name_offset":38,"short_name_size":3,"spell":"2139:7-2139:10|2138:7-2141:62|1026|-1","hover":"","comments":" @brief  Numeric parsing.\n\n Parses the input stream into the pointer variable @a v.  It does so\n by calling num_get::do_get().\n\n The input characters are parsed like the scanf %p specifier.\n\n Digit grouping is interpreted according to\n numpunct::grouping() and numpunct::thousands_sep().  If the\n pattern of digit groups isn't consistent, sets err to\n ios_base::failbit.\n\n Note that the digit grouping effect for pointers is a bit ambiguous\n in the standard and shouldn't be relied on.  See DR 344.\n\n If parsing the string yields a valid value for @a v, @a v is set.\n Otherwise, sets err to ios_base::failbit and leaves @a v unaltered.\n Sets err to ios_base::eofbit if the stream is emptied.\n\n @param  __in  Start of input stream.\n @param  __end  End of input stream.\n @param  __io  Source of locale and flags.\n @param  __err  Error flags to set.\n @param  __v  Value to format and insert.\n @return  Iterator after reading.","bases":[],"vars":[10469937654430108441,18199774586768746083,2352515848605700955,10156251295682887050,3866837155704917971],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":9987922040439650878,"detailed_name":"char std::ctype<char>::narrow(std::ctype<char>::char_type __c, char __dfault) const","qual_name_offset":5,"short_name_offset":23,"short_name_size":6,"spell":"931:7-931:13|930:7-939:8|1026|-1","hover":"","comments":" @brief  Narrow char\n\n This function converts the char to char using the simplest\n reasonable transformation.  If the conversion fails, dfault is\n returned instead.  For an underived ctype<char> facet, @a c\n will be returned unchanged.\n\n This function works as if it returns ctype<char>::do_narrow(c).\n do_narrow() must always return the same result for the same input.\n\n Note: this is not what you want for codepage conversions.  See\n codecvt for that.\n\n @param __c  The char to convert.\n @param __dfault  Char to return if conversion fails.\n @return  The converted character.","bases":[],"vars":[9388354896318761297,7057407949192927141,15308520365828049522],"callees":["935:19-935:28|13852923609361869083|3|24676","935:19-935:28|13852923609361869083|3|24676"],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10210288876509654255,"detailed_name":"std::num_put::iter_type std::num_put::put(std::num_put::iter_type __s, std::ios_base &__io, std::num_put::char_type __fill, double __v) const","qual_name_offset":24,"short_name_offset":38,"short_name_size":3,"spell":"2437:7-2437:10|2436:7-2438:55|1026|-1","hover":"","comments":"@{\n*\n @brief  Numeric formatting.\n\n Formats the floating point value @a v and inserts it into a stream.\n It does so by calling num_put::do_put().\n\n Formatting is affected by the flag settings in @a io.\n\n The basic format is affected by the value of io.flags() &\n ios_base::floatfield.  If equal to ios_base::fixed, formats like the\n printf %f specifier.  Else if equal to ios_base::scientific, formats\n like %e or %E with ios_base::uppercase unset or set respectively.\n Otherwise, formats like %g or %G depending on uppercase.  Note that\n if both fixed and scientific are set, the effect will also be like\n %g or %G.\n\n The output precision is given by io.precision().  This precision is\n capped at numeric_limits::digits10 + 2 (different for double and\n long double).  The default precision is 6.\n\n If ios_base::showpos is set, '+' is output before positive values.\n If ios_base::showpoint is set, a decimal point will always be\n output.\n\n The decimal point character used is numpunct::decimal_point().\n Thousands separators are inserted according to\n numpunct::grouping() and numpunct::thousands_sep().\n\n If io.width() is non-zero, enough @a fill characters are inserted to\n make the result at least that wide.  If\n (io.flags() & ios_base::adjustfield) == ios_base::left, result is\n padded at the end.  If ios_base::internal, then padding occurs\n immediately after either a '+' or '-' or after '0x' or '0X'.\n Otherwise, padding occurs at the beginning.\n\n @param  __s  Stream to write to.\n @param  __io  Source of locale and flags.\n @param  __fill  Char_type to use for filling.\n @param  __v  Value to format and insert.\n @return  Iterator after writing.","bases":[],"vars":[11358193028621213453,5690163379994490832,8806959524917914869,17124005174388669353],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10278921105750692160,"detailed_name":"std::__cxx11::numpunct::char_type std::__cxx11::numpunct::decimal_point() const","qual_name_offset":34,"short_name_offset":58,"short_name_size":13,"spell":"1736:7-1736:20|1735:7-1737:43|1026|-1","hover":"","comments":" @brief  Return decimal point character.\n\n This function returns a char_type to use as a decimal point.  It\n does so by returning returning\n numpunct<char_type>::do_decimal_point().\n\n @return  @a char_type representing a decimal point.","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10317016825261099548,"detailed_name":"virtual std::num_put::iter_type std::num_put::do_put(std::num_put::iter_type __s, std::ios_base &__io, std::num_put::char_type __fill, long __v) const","qual_name_offset":32,"short_name_offset":46,"short_name_size":6,"spell":"2513:7-2513:13|2512:7-2514:56|1090|-1","hover":"","comments":"","bases":[],"vars":[17528073274528587492,228151557781516816,15936134403698777909,13705239459640197219],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10323059018821674468,"detailed_name":"explicit std::__numpunct_cache::__numpunct_cache<_CharT>(const __numpunct_cache<_CharT> &)","qual_name_offset":9,"short_name_offset":32,"short_name_size":24,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":9,"parent_kind":0,"storage":0,"declarations":["1639:7-1639:23|1638:7-1639:48|1025|-1"],"derived":[],"uses":[]},{"usr":10521325359634391494,"detailed_name":"virtual std::ctype::char_type std::ctype::do_toupper(std::ctype::char_type __c) const","qual_name_offset":30,"short_name_offset":42,"short_name_size":10,"hover":"","comments":"","bases":[],"vars":[278667297110953774],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["643:7-643:17|642:7-643:38|1089|-1"],"derived":[],"uses":[]},{"usr":10637806522315892752,"detailed_name":"inline const char *std::ctype<char>::scan_is(std::ctype_base::mask __m, const char *__lo, const char *__hi) const","qual_name_offset":19,"short_name_offset":37,"short_name_size":7,"hover":"","comments":" @brief  Find char matching a mask\n\n This function searches for and returns the first char in [lo,hi) for\n which is(m,char) is true.\n\n @param __m  The mask to compare against.\n @param __lo  Pointer to start of range.\n @param __hi  Pointer to end of range.\n @return  Pointer to a matching char if found, else @a __hi.","bases":[],"vars":[6352699783899431700,9130095752982269795,15423923713827085216],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["773:7-773:14|772:7-773:66|1025|-1"],"derived":[],"uses":[]},{"usr":10670023513378231826,"detailed_name":"virtual const std::__ctype_abstract_base::char_type *std::__ctype_abstract_base::do_narrow(const std::__ctype_abstract_base::char_type *__lo, const std::__ctype_abstract_base::char_type *__hi, char __dfault, char *__to) const = 0","qual_name_offset":53,"short_name_offset":81,"short_name_size":9,"hover":"","comments":" @brief  Narrow char_type array to char\n\n This virtual function converts each char_type in the range\n [__lo,__hi) to char using the simplest reasonable\n transformation and writes the results to the destination\n array.  For any element in the input that cannot be\n converted, @a __dfault is used instead.\n\n do_narrow() is a hook for a derived facet to change the behavior of\n narrowing.  do_narrow() must always return the same result for the\n same input.\n\n Note: this is not what you want for codepage conversions.  See\n codecvt for that.\n\n @param __lo  Pointer to start of range.\n @param __hi  Pointer to end of range.\n @param __dfault  Char to use if conversion fails.\n @param __to  Pointer to the destination array.\n @return  @a __hi.","bases":[],"vars":[2028195670754370125,7002064101980804692,14998910250863627444,12612465627228032980],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["589:7-589:16|588:7-590:39|1089|-1"],"derived":[],"uses":[]},{"usr":10718878043126165087,"detailed_name":"const std::ctype<char>::char_type *std::ctype<char>::toupper(std::ctype<char>::char_type *__lo, const std::ctype<char>::char_type *__hi) const","qual_name_offset":35,"short_name_offset":53,"short_name_size":7,"spell":"819:7-819:14|818:7-820:47|1026|-1","hover":"","comments":" @brief  Convert array to uppercase.\n\n This function converts each char in the range [__lo,__hi) to uppercase\n if possible.  Other chars remain untouched.\n\n toupper() acts as if it returns ctype<char>:: do_toupper(__lo, __hi).\n do_toupper() must always return the same result for the same input.\n\n @param __lo  Pointer to first char in range.\n @param __hi  Pointer to end of range.\n @return  @a __hi.","bases":[],"vars":[14199400607678456384,11077377551371497338],"callees":["820:22-820:32|12792204242312571781|3|24676"],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10941908293936572473,"detailed_name":"const char *std::__ctype_abstract_base::widen(const char *__lo, const char *__hi, std::__ctype_abstract_base::char_type *__to) const","qual_name_offset":12,"short_name_offset":40,"short_name_size":5,"spell":"312:7-312:12|311:7-313:51|1026|-1","hover":"","comments":" @brief  Widen array to char_type\n\n This function converts each char in the input to char_type using the\n simplest reasonable transformation.  It does so by returning\n ctype<char_type>::do_widen(c).\n\n Note: this is not what you want for codepage conversions.  See\n codecvt for that.\n\n @param __lo  Pointer to start of range.\n @param __hi  Pointer to end of range.\n @param __to  Pointer to the destination array.\n @return  @a __hi.","bases":[],"vars":[6480380167969252660,15947596048237006375,15467794114308468081],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":10971856994524572174,"detailed_name":"bool std::ispunct(_CharT, const std::locale &)","qual_name_offset":5,"short_name_offset":10,"short_name_size":7,"spell":"2611:5-2611:12|2610:5-2612:76|1026|-1","hover":"","comments":"Convenience interface to ctype.is(ctype_base::punct, __c).","bases":[],"vars":[17524922077213171856,6511843690790826059],"callees":[],"kind":12,"parent_kind":3,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":11209543997335487267,"detailed_name":"virtual const std::ctype<wchar_t>::char_type *std::ctype<wchar_t>::do_is(const std::ctype<wchar_t>::char_type *__lo, const std::ctype<wchar_t>::char_type *__hi, int *__vec) const","qual_name_offset":46,"short_name_offset":67,"short_name_size":5,"hover":"","comments":" @brief  Return a mask array.\n\n This function finds the mask for each wchar_t in the range [lo,hi)\n and successively writes it to vec.  vec must have as many elements\n as the input.\n\n do_is() is a hook for a derived facet to change the behavior of\n classifying.  do_is() must always return the same result for the\n same input.\n\n @param __lo  Pointer to start of range.\n @param __hi  Pointer to end of range.\n @param __vec  Pointer to an array of mask storage.\n @return  @a __hi.","bases":[],"vars":[7806242515961868423,8882333327564454091,14064066985211152197],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1273:7-1273:12|1272:7-1273:77|1089|-1"],"derived":[],"uses":[]},{"usr":11300559627633851147,"detailed_name":"void std::ctype<char>::_M_widen_init() const","qual_name_offset":5,"short_name_offset":23,"short_name_size":13,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1170:12-1170:25|1170:7-1170:33|1025|-1"],"derived":[],"uses":["876:8-876:21|16420|-1","908:4-908:17|16420|-1"]},{"usr":11594275767091691075,"detailed_name":"void std::num_put::_M_group_float(const char *__grouping, std::size_t __grouping_size, std::num_put::char_type __sep, const std::num_put::char_type *__p, std::num_put::char_type *__new, std::num_put::char_type *__cs, int &__len) const","qual_name_offset":5,"short_name_offset":19,"short_name_size":14,"hover":"","comments":"","bases":[],"vars":[7258385488146663961,1826228237240752349,10676967130900290721,7582803756466104169,443902151427542937,5986239516187724467,6109823504395452955],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["2473:7-2473:21|2472:7-2475:42|1025|-1"],"derived":[],"uses":[]},{"usr":12085371567288812040,"detailed_name":"virtual std::num_get::iter_type std::num_get::do_get(std::num_get::iter_type __beg, std::num_get::iter_type __end, std::ios_base &__io, ios_base::iostate &__err, unsigned long &__v) const","qual_name_offset":32,"short_name_offset":46,"short_name_size":6,"spell":"2230:7-2230:13|2229:7-2232:65|1090|-1","hover":"","comments":"","bases":[],"vars":[9866591459020429049,17132171962538319066,17559752671365823352,18061070210526052643,16747295942375365648],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12177322432617667235,"detailed_name":"bool std::isdigit(_CharT, const std::locale &)","qual_name_offset":5,"short_name_offset":10,"short_name_size":7,"spell":"2605:5-2605:12|2604:5-2606:76|1026|-1","hover":"","comments":"Convenience interface to ctype.is(ctype_base::digit, __c).","bases":[],"vars":[1283394662567264310,4574333252061652505],"callees":[],"kind":12,"parent_kind":3,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12281923053738812903,"detailed_name":"std::num_get::iter_type std::num_get::get(std::num_get::iter_type __in, std::num_get::iter_type __end, std::ios_base &__io, ios_base::iostate &__err, float &__v) const","qual_name_offset":24,"short_name_offset":38,"short_name_size":3,"spell":"2096:7-2096:10|2095:7-2098:62|1026|-1","hover":"","comments":"@{\n*\n @brief  Numeric parsing.\n\n Parses the input stream into the integral variable @a v.  It does so\n by calling num_get::do_get().\n\n The input characters are parsed like the scanf %g specifier.  The\n matching type length modifier is also used.\n\n The decimal point character used is numpunct::decimal_point().\n Digit grouping is interpreted according to\n numpunct::grouping() and numpunct::thousands_sep().  If the\n pattern of digit groups isn't consistent, sets err to\n ios_base::failbit.\n\n If parsing the string yields a valid value for @a v, @a v is set.\n Otherwise, sets err to ios_base::failbit and leaves @a v unaltered.\n Sets err to ios_base::eofbit if the stream is emptied.\n\n @param  __in  Start of input stream.\n @param  __end  End of input stream.\n @param  __io  Source of locale and flags.\n @param  __err  Error flags to set.\n @param  __v  Value to format and insert.\n @return  Iterator after reading.","bases":[],"vars":[8486100008457897315,14616187977878541119,17977408919502726566,14367896638233015679,6436833767748063564],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12402869404383392055,"detailed_name":"virtual std::num_get::iter_type std::num_get::do_get(std::num_get::iter_type __beg, std::num_get::iter_type __end, std::ios_base &__io, ios_base::iostate &__err, long &__v) const","qual_name_offset":32,"short_name_offset":46,"short_name_size":6,"spell":"2215:7-2215:13|2214:7-2217:65|1090|-1","hover":"","comments":"","bases":[],"vars":[5855869789817794258,7400466302497417739,4988385557807759790,4355473358714518742,11040957329443915776],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12413054058527482872,"detailed_name":"bool std::isxdigit(_CharT, const std::locale &)","qual_name_offset":5,"short_name_offset":10,"short_name_size":8,"spell":"2617:5-2617:13|2616:5-2618:77|1026|-1","hover":"","comments":"Convenience interface to ctype.is(ctype_base::xdigit, __c).","bases":[],"vars":[17680659788905582530,7518811152776487468],"callees":[],"kind":12,"parent_kind":3,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12657330924441197315,"detailed_name":"bool std::isblank(_CharT, const std::locale &)","qual_name_offset":5,"short_name_offset":10,"short_name_size":7,"spell":"2636:5-2636:12|2635:5-2637:76|1026|-1","hover":"","comments":"Convenience interface to ctype.is(ctype_base::blank, __c).","bases":[],"vars":[15452495147428508422,13095496124359632115],"callees":[],"kind":12,"parent_kind":3,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12666889123200505945,"detailed_name":"explicit std::ctype_byname<char>::ctype_byname(const char *__s, std::size_t __refs)","qual_name_offset":9,"short_name_offset":34,"short_name_size":12,"hover":"","comments":"","bases":[],"vars":[181446517626479863,9330695798730943687],"callees":[],"kind":9,"parent_kind":0,"storage":0,"declarations":["1503:7-1503:19|1502:7-1503:55|1025|-1"],"derived":[],"uses":[]},{"usr":12689155254897166929,"detailed_name":"explicit std::ctype_byname<wchar_t>::ctype_byname(const std::string &__s, std::size_t __refs)","qual_name_offset":9,"short_name_offset":37,"short_name_size":12,"hover":"","comments":"","bases":[],"vars":[18208584990290248789,4984714927455917474],"callees":[],"kind":9,"parent_kind":0,"storage":0,"declarations":["1525:7-1525:19|1524:7-1525:57|1025|-1"],"derived":[],"uses":[]},{"usr":12786994299174727450,"detailed_name":"static const std::ctype_base::mask *std::ctype<char>::classic_table() throw()","qual_name_offset":36,"short_name_offset":54,"short_name_size":13,"hover":"","comments":"Returns a pointer to the C locale mask table.","bases":[],"vars":[],"callees":[],"kind":254,"parent_kind":0,"storage":0,"declarations":["988:7-988:20|987:7-988:30|1025|-1"],"derived":[],"uses":[]},{"usr":12792204242312571781,"detailed_name":"virtual const std::ctype<char>::char_type *std::ctype<char>::do_toupper(std::ctype<char>::char_type *__lo, const std::ctype<char>::char_type *__hi) const","qual_name_offset":43,"short_name_offset":61,"short_name_size":10,"hover":"","comments":" @brief  Convert array to uppercase.\n\n This virtual function converts each char in the range [lo,hi) to\n uppercase if possible.  Other chars remain untouched.\n\n do_toupper() is a hook for a derived facet to change the behavior of\n uppercasing.  do_toupper() must always return the same result for\n the same input.\n\n @param __lo  Pointer to start of range.\n @param __hi  Pointer to end of range.\n @return  @a __hi.","bases":[],"vars":[17925221069550467387,1289598719572575104],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1031:7-1031:17|1030:7-1031:63|1089|-1"],"derived":[],"uses":["820:22-820:32|24676|-1"]},{"usr":12836392474035314455,"detailed_name":"const std::ctype_base::mask *std::ctype<char>::table() const throw()","qual_name_offset":29,"short_name_offset":47,"short_name_size":5,"spell":"983:7-983:12|982:7-984:27|1026|-1","hover":"","comments":"_GLIBCXX_RESOLVE_LIB_DEFECTS\nDR 695. ctype<char>::classic_table() not accessible.\n Returns a pointer to the mask table provided to the constructor, or\n the default from classic_table() if none was provided.","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12893628909658198364,"detailed_name":"std::__ctype_abstract_base::char_type std::__ctype_abstract_base::widen(char __c) const","qual_name_offset":38,"short_name_offset":66,"short_name_size":5,"spell":"293:7-293:12|292:7-294:38|1026|-1","hover":"","comments":" @brief  Widen char to char_type\n\n This function converts the char argument to char_type using the\n simplest reasonable transformation.  It does so by returning\n ctype<char_type>::do_widen(c).\n\n Note: this is not what you want for codepage conversions.  See\n codecvt for that.\n\n @param __c  The char to convert.\n @return  The converted char_type.","bases":[],"vars":[6721077712765280979],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":12996445735596152895,"detailed_name":"const std::__ctype_abstract_base::char_type *std::__ctype_abstract_base::scan_not(std::ctype_base::mask __m, const std::__ctype_abstract_base::char_type *__lo, const std::__ctype_abstract_base::char_type *__hi) const","qual_name_offset":45,"short_name_offset":73,"short_name_size":8,"spell":"218:7-218:15|217:7-219:53|1026|-1","hover":"","comments":" @brief  Find char_type not matching a mask\n\n This function searches for and returns the first char_type c in\n [lo,hi) for which is(m,c) is false.  It does so by returning\n ctype<char_type>::do_scan_not().\n\n @param __m  The mask to compare against.\n @param __lo  Pointer to first char in range.\n @param __hi  Pointer to end of range.\n @return  Pointer to non-matching char if found, else @a __hi.","bases":[],"vars":[12422246231075698755,8454581280100493722,621026023110792310],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13162534198123522900,"detailed_name":"virtual const std::ctype<wchar_t>::char_type *std::ctype<wchar_t>::do_scan_not(int __m, const std::ctype<wchar_t>::char_type *__lo, const std::ctype<wchar_t>::char_type *__hi) const","qual_name_offset":46,"short_name_offset":67,"short_name_size":11,"hover":"","comments":" @brief  Find wchar_t not matching mask\n\n This function searches for and returns a pointer to the first\n wchar_t c of [__lo,__hi) for which is(__m,c) is false.\n\n do_scan_is() is a hook for a derived facet to change the behavior of\n match searching.  do_is() must always return the same result for the\n same input.\n\n @param __m  The mask to compare against.\n @param __lo  Pointer to start of range.\n @param __hi  Pointer to end of range.\n @return  Pointer to a non-matching wchar_t if found, else @a __hi.","bases":[],"vars":[7677273496774786455,17784750746299066912,6992302690926682734],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1309:7-1309:18|1308:7-1310:33|1089|-1"],"derived":[],"uses":[]},{"usr":13258118511494719346,"detailed_name":"virtual std::__cxx11::numpunct::char_type std::__cxx11::numpunct::do_decimal_point() const","qual_name_offset":42,"short_name_offset":66,"short_name_size":16,"spell":"1823:7-1823:23|1822:7-1824:44|1090|-1","hover":"","comments":" @brief  Return decimal point character.\n\n Returns a char_type to use as a decimal point.  This function is a\n hook for derived classes to change the value returned.\n\n @return  @a char_type representing a decimal point.","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13278719337224070095,"detailed_name":"virtual std::ctype<wchar_t>::char_type std::ctype<wchar_t>::do_tolower(std::ctype<wchar_t>::char_type __c) const","qual_name_offset":39,"short_name_offset":60,"short_name_size":10,"hover":"","comments":" @brief  Convert to lowercase.\n\n This virtual function converts the argument to lowercase if\n possible.  If not possible (for example, '2'), returns the argument.\n\n do_tolower() is a hook for a derived facet to change the behavior of\n lowercasing.  do_tolower() must always return the same result for\n the same input.\n\n @param __c  The wchar_t to convert.\n @return  The lowercase wchar_t if convertible, else @a __c.","bases":[],"vars":[16156812752229410887],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1359:7-1359:17|1358:7-1359:38|1089|-1"],"derived":[],"uses":[]},{"usr":13371766477209219637,"detailed_name":"virtual std::ctype<char>::char_type std::ctype<char>::do_toupper(std::ctype<char>::char_type __c) const","qual_name_offset":36,"short_name_offset":54,"short_name_size":10,"hover":"","comments":" @brief  Convert to uppercase.\n\n This virtual function converts the char argument to uppercase if\n possible.  If not possible (for example, '2'), returns the argument.\n\n do_toupper() is a hook for a derived facet to change the behavior of\n uppercasing.  do_toupper() must always return the same result for\n the same input.\n\n @param __c  The char to convert.\n @return  The uppercase char if convertible, else @a __c.","bases":[],"vars":[11657938273876568463],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1014:7-1014:17|1013:7-1014:38|1089|-1"],"derived":[],"uses":["803:22-803:32|24676|-1"]},{"usr":13388198345282418002,"detailed_name":"explicit std::ctype::ctype<_CharT>(std::size_t __refs)","qual_name_offset":9,"short_name_offset":21,"short_name_size":13,"spell":"623:7-623:12|622:7-623:75|1026|-1","hover":"","comments":"","bases":[],"vars":[12487802903129854962],"callees":[],"kind":9,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13438069482374804230,"detailed_name":"bool std::isgraph(_CharT, const std::locale &)","qual_name_offset":5,"short_name_offset":10,"short_name_size":7,"spell":"2629:5-2629:12|2628:5-2630:76|1026|-1","hover":"","comments":"Convenience interface to ctype.is(ctype_base::graph, __c).","bases":[],"vars":[9044589875311823112,12684116186441779989],"callees":[],"kind":12,"parent_kind":3,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":13502412385840313028,"detailed_name":"virtual const std::ctype<wchar_t>::char_type *std::ctype<wchar_t>::do_toupper(std::ctype<wchar_t>::char_type *__lo, const std::ctype<wchar_t>::char_type *__hi) const","qual_name_offset":46,"short_name_offset":67,"short_name_size":10,"hover":"","comments":" @brief  Convert array to uppercase.\n\n This virtual function converts each wchar_t in the range [lo,hi) to\n uppercase if possible.  Other elements remain untouched.\n\n do_toupper() is a hook for a derived facet to change the behavior of\n uppercasing.  do_toupper() must always return the same result for\n the same input.\n\n @param __lo  Pointer to start of range.\n @param __hi  Pointer to end of range.\n @return  @a __hi.","bases":[],"vars":[12258030642153329786,6806464518263136484],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1343:7-1343:17|1342:7-1343:63|1089|-1"],"derived":[],"uses":[]},{"usr":13768782312157175239,"detailed_name":"virtual const char *std::ctype::do_widen(const char *__lo, const char *__hi, std::ctype::char_type *__dest) const","qual_name_offset":20,"short_name_offset":32,"short_name_size":8,"hover":"","comments":"","bases":[],"vars":[12459480052940934495,12748376759315454027,6886551179205802933],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["658:7-658:15|657:7-658:76|1089|-1"],"derived":[],"uses":[]},{"usr":13852923609361869083,"detailed_name":"virtual char std::ctype<char>::do_narrow(std::ctype<char>::char_type __c, char __dfault) const","qual_name_offset":13,"short_name_offset":31,"short_name_size":9,"spell":"1134:7-1134:16|1133:7-1135:22|1090|-1","hover":"","comments":" @brief  Narrow char\n\n This virtual function converts the char to char using the simplest\n reasonable transformation.  If the conversion fails, dfault is\n returned instead.  For an underived ctype<char> facet, @a c will be\n returned unchanged.\n\n do_narrow() is a hook for a derived facet to change the behavior of\n narrowing.  do_narrow() must always return the same result for the\n same input.\n\n Note: this is not what you want for codepage conversions.  See\n codecvt for that.\n\n @param __c  The char to convert.\n @param __dfault  Char to return if conversion fails.\n @return  The converted char.","bases":[],"vars":[9700905794709205273,9686664867834126932],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":["935:19-935:28|24676|-1"]},{"usr":13888777292369135142,"detailed_name":"virtual std::num_get::iter_type std::num_get::do_get(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, void *&) const","qual_name_offset":32,"short_name_offset":46,"short_name_size":6,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["2265:7-2265:13|2264:7-2265:80|1089|-1"],"derived":[],"uses":[]},{"usr":14063159842901383617,"detailed_name":"std::ctype<char>::char_type std::ctype<char>::widen(char __c) const","qual_name_offset":28,"short_name_offset":46,"short_name_size":5,"spell":"872:7-872:12|871:7-878:8|1026|-1","hover":"","comments":" @brief  Widen char\n\n This function converts the char to char_type using the simplest\n reasonable transformation.  For an underived ctype<char> facet, the\n argument will be returned unchanged.\n\n This function works as if it returns ctype<char>::do_widen(c).\n do_widen() must always return the same result for the same input.\n\n Note: this is not what you want for codepage conversions.  See\n codecvt for that.\n\n @param __c  The char to convert.\n @return  The converted character.","bases":[],"vars":[11277078696199195066],"callees":["876:8-876:21|11300559627633851147|3|16420","877:15-877:23|14528820721913469009|3|24676"],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14528820721913469009,"detailed_name":"virtual std::ctype<char>::char_type std::ctype<char>::do_widen(char __c) const","qual_name_offset":36,"short_name_offset":54,"short_name_size":8,"spell":"1084:7-1084:15|1083:7-1085:22|1090|-1","hover":"","comments":" @brief  Widen char\n\n This virtual function converts the char to char using the simplest\n reasonable transformation.  For an underived ctype<char> facet, the\n argument will be returned unchanged.\n\n do_widen() is a hook for a derived facet to change the behavior of\n widening.  do_widen() must always return the same result for the\n same input.\n\n Note: this is not what you want for codepage conversions.  See\n codecvt for that.\n\n @param __c  The char to convert.\n @return  The converted character.","bases":[],"vars":[10259620691928663319],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":["877:15-877:23|24676|-1"]},{"usr":14538193476001537306,"detailed_name":"virtual std::ctype<char>::char_type std::ctype<char>::do_tolower(std::ctype<char>::char_type __c) const","qual_name_offset":36,"short_name_offset":54,"short_name_size":10,"hover":"","comments":" @brief  Convert to lowercase.\n\n This virtual function converts the char argument to lowercase if\n possible.  If not possible (for example, '2'), returns the argument.\n\n do_tolower() is a hook for a derived facet to change the behavior of\n lowercasing.  do_tolower() must always return the same result for\n the same input.\n\n @param __c  The char to convert.\n @return  The lowercase char if convertible, else @a __c.","bases":[],"vars":[7404908578900274550],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1047:7-1047:17|1046:7-1047:38|1089|-1"],"derived":[],"uses":["836:22-836:32|24676|-1"]},{"usr":14539771766399510863,"detailed_name":"std::num_get::iter_type std::num_get::get(std::num_get::iter_type __in, std::num_get::iter_type __end, std::ios_base &__io, ios_base::iostate &__err, unsigned long long &__v) const","qual_name_offset":24,"short_name_offset":38,"short_name_size":3,"spell":"2062:7-2062:10|2061:7-2064:62|1026|-1","hover":"","comments":"","bases":[],"vars":[15032249158881355516,9417536204660097212,6022931721873719510,4777658385300861264,3664157432466147869],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14599280242275749025,"detailed_name":"virtual const std::ctype::char_type *std::ctype::do_is(const std::ctype::char_type *__lo, const std::ctype::char_type *__hi, std::ctype::mask *__vec) const","qual_name_offset":37,"short_name_offset":49,"short_name_size":5,"hover":"","comments":"","bases":[],"vars":[5160985973662615108,3139344591368878723,754123167929482786],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["633:7-633:12|632:7-633:77|1089|-1"],"derived":[],"uses":[]},{"usr":14647075448720886777,"detailed_name":"std::num_put::iter_type std::num_put::_M_insert_int(std::num_put::iter_type, std::ios_base &__io, std::num_put::char_type __fill, _ValueT __v) const","qual_name_offset":24,"short_name_offset":38,"short_name_size":13,"hover":"","comments":"","bases":[],"vars":[12521999698056926907,18155881437971381414,8506717472900863416],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["2479:2-2479:15|2478:2-2480:27|1025|-1"],"derived":[],"uses":[]},{"usr":14730393599643493990,"detailed_name":"inline const char *std::ctype<char>::scan_not(std::ctype_base::mask __m, const char *__lo, const char *__hi) const","qual_name_offset":19,"short_name_offset":37,"short_name_size":8,"hover":"","comments":" @brief  Find char not matching a mask\n\n This function searches for and returns a pointer to the first char\n in [__lo,__hi) for which is(m,char) is false.\n\n @param __m  The mask to compare against.\n @param __lo  Pointer to start of range.\n @param __hi  Pointer to end of range.\n @return  Pointer to a non-matching char if found, else @a __hi.","bases":[],"vars":[16474317231704303812,6898814986709156768,13530208667745972078],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["787:7-787:15|786:7-787:67|1025|-1"],"derived":[],"uses":[]},{"usr":14751780291799859037,"detailed_name":"void std::ctype<wchar_t>::_M_initialize_ctype() throw()","qual_name_offset":5,"short_name_offset":26,"short_name_size":19,"hover":"","comments":"For use at construction time only.","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1472:7-1472:26|1471:7-1472:36|1025|-1"],"derived":[],"uses":[]},{"usr":14856884017144226879,"detailed_name":"std::num_get::iter_type std::num_get::get(std::num_get::iter_type __in, std::num_get::iter_type __end, std::ios_base &__io, ios_base::iostate &__err, unsigned int &__v) const","qual_name_offset":24,"short_name_offset":38,"short_name_size":3,"spell":"2046:7-2046:10|2045:7-2048:62|1026|-1","hover":"","comments":"","bases":[],"vars":[17988747231754060972,6613674628121391175,9506192309511797001,7617214938861009027,16256266404090314811],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14876220301455072562,"detailed_name":"explicit std::__cxx11::numpunct::numpunct<_CharT>(std::__cxx11::numpunct::__cache_type *__cache, std::size_t __refs)","qual_name_offset":9,"short_name_offset":33,"short_name_size":16,"spell":"1708:7-1708:15|1707:7-1710:36|1026|-1","hover":"","comments":" @brief  Internal constructor.  Not for general use.\n\n This is a constructor for use by the library itself to set up the\n predefined locale facets.\n\n @param  __cache  __numpunct_cache object.\n @param  __refs  Refcount to pass to the base class.","bases":[],"vars":[16875197621505479055,1126762807194241784],"callees":["1710:9-1710:31|6707432908016400876|3|16420"],"kind":9,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":14914263511775010222,"detailed_name":"template <> void std::__convert_to_v(const char *, float &, ios_base::iostate &, const std::__c_locale &) throw()","qual_name_offset":17,"short_name_offset":22,"short_name_size":14,"hover":"","comments":"Explicit specializations for required types.","bases":[],"vars":[],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":["79:5-79:19|77:3-80:32|1025|-1"],"derived":[],"uses":[]},{"usr":15154715262487151209,"detailed_name":"_CharT *std::__add_grouping(_CharT *__s, _CharT __sep, const char *__gbeg, std::size_t __gsize, const _CharT *__first, const _CharT *__last)","qual_name_offset":8,"short_name_offset":13,"short_name_size":14,"hover":"","comments":"Used by both numeric and monetary facets.\nInserts \"group separator\" characters into an array of characters.\nIt's recursive, one iteration per group.  It moves the characters\nin the buffer this way: \"xxxx12345\" -> \"12,345xxx\".  Call this\nonly with __gsize != 0.","bases":[],"vars":[14665190449433908613,5615263205155538908,12449237587904174755,16671222507944853704,2671970871706763024,5971857024333281062],"callees":[],"kind":12,"parent_kind":0,"storage":0,"declarations":["109:5-109:19|108:5-111:50|1025|-1"],"derived":[],"uses":[]},{"usr":15175485060114864416,"detailed_name":"virtual std::__cxx11::numpunct::~numpunct<_CharT>()","qual_name_offset":8,"short_name_offset":32,"short_name_size":17,"hover":"","comments":"Destructor.","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1812:7-1812:8|1811:7-1812:18|5185|-1"],"derived":[],"uses":[]},{"usr":15285576141303467374,"detailed_name":"std::string std::__cxx11::numpunct::grouping() const","qual_name_offset":12,"short_name_offset":36,"short_name_size":8,"spell":"1780:7-1780:15|1779:7-1781:38|1026|-1","hover":"","comments":" @brief  Return grouping specification.\n\n This function returns a string representing groupings for the\n integer part of a number.  Groupings indicate where thousands\n separators should be inserted in the integer part of a number.\n\n Each char in the return string is interpret as an integer\n rather than a character.  These numbers represent the number\n of digits in a group.  The first char in the string\n represents the number of digits in the least significant\n group.  If a char is negative, it indicates an unlimited\n number of digits for the group.  If more chars from the\n string are required to group a number, the last char is used\n repeatedly.\n\n For example, if the grouping() returns \"\\003\\002\" and is\n applied to the number 123456789, this corresponds to\n 12,34,56,789.  Note that if the string was \"32\", this would\n put more than 50 digits into the least significant group if\n the character set is ASCII.\n\n The string is returned by calling\n numpunct<char_type>::do_grouping().\n\n @return  string representing grouping specification.","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15290263439208312582,"detailed_name":"virtual std::num_get::iter_type std::num_get::do_get(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, bool &) const","qual_name_offset":32,"short_name_offset":46,"short_name_size":6,"hover":"","comments":"@{\n*\n @brief  Numeric parsing.\n\n Parses the input stream into the variable @a v.  This function is a\n hook for derived classes to change the value returned.  @see get()\n for more details.\n\n @param  __beg  Start of input stream.\n @param  __end  End of input stream.\n @param  __io  Source of locale and flags.\n @param  __err  Error flags to set.\n @param  __v  Value to format and insert.\n @return  Iterator after reading.","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["2212:7-2212:13|2211:7-2212:79|1089|-1"],"derived":[],"uses":[]},{"usr":15369819930757507483,"detailed_name":"_CharT std::tolower(_CharT, const std::locale &)","qual_name_offset":7,"short_name_offset":12,"short_name_size":7,"spell":"2649:5-2649:12|2648:5-2650:62|1026|-1","hover":"","comments":"Convenience interface to ctype.tolower(__c).","bases":[],"vars":[985221387501797147,773948018308672842],"callees":[],"kind":12,"parent_kind":3,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15595851805254137704,"detailed_name":"static void std::__pad::_S_pad(std::ios_base &__io, _CharT __fill, _CharT *__news, const _CharT *__olds, std::streamsize __newlen, std::streamsize __oldlen)","qual_name_offset":12,"short_name_offset":24,"short_name_size":6,"hover":"","comments":"","bases":[],"vars":[3518633734519793037,3238881814187245505,7295331079316347541,5223310353516582365,2814625647162185740,8507193225375562582],"callees":[],"kind":254,"parent_kind":0,"storage":0,"declarations":["98:7-98:13|97:7-99:70|1025|-1"],"derived":[],"uses":[]},{"usr":15667685889475491103,"detailed_name":"virtual std::num_put::~num_put<_CharT, _OutIter>()","qual_name_offset":8,"short_name_offset":22,"short_name_size":26,"spell":"2493:7-2493:15|2492:7-2493:21|5186|-1","hover":"","comments":"Destructor.","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":15771284771491384593,"detailed_name":"virtual std::num_put::iter_type std::num_put::do_put(std::num_put::iter_type, std::ios_base &, std::num_put::char_type, long double) const","qual_name_offset":32,"short_name_offset":46,"short_name_size":6,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["2542:7-2542:13|2541:7-2542:65|1089|-1"],"derived":[],"uses":[]},{"usr":15809623153167664725,"detailed_name":"explicit std::ctype<char>::ctype(std::__c_locale __cloc, const std::ctype_base::mask *__table, bool __del, std::size_t __refs)","qual_name_offset":9,"short_name_offset":27,"short_name_size":5,"hover":"","comments":" @brief  Constructor performs static initialization.\n\n This constructor is used to construct the initial C locale facet.\n\n @param __cloc  Handle to C locale data.\n @param __table If non-zero, table is used as the per-char mask.\n @param __del   If true, passes ownership of table to this facet.\n @param __refs  Passed to the base facet class.","bases":[],"vars":[4459066730978302481,11419590692274003228,2123304468136201353,7362498555238865462],"callees":[],"kind":9,"parent_kind":0,"storage":0,"declarations":["731:7-731:12|730:7-732:24|1025|-1"],"derived":[],"uses":[]},{"usr":15925199949188735280,"detailed_name":"std::num_get::iter_type std::num_get::_M_extract_float(std::num_get::iter_type, std::num_get::iter_type, std::ios_base &, ios_base::iostate &, std::string &) const","qual_name_offset":24,"short_name_offset":38,"short_name_size":16,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["2149:7-2149:23|2147:7-2150:24|1025|-1"],"derived":[],"uses":[]},{"usr":15951799129774646962,"detailed_name":"virtual bool std::ctype<wchar_t>::do_is(int __m, std::ctype<wchar_t>::char_type __c) const","qual_name_offset":13,"short_name_offset":34,"short_name_size":5,"hover":"","comments":" @brief  Test wchar_t classification.\n\n This function finds a mask M for @a c and compares it to mask @a m.\n\n do_is() is a hook for a derived facet to change the behavior of\n classifying.  do_is() must always return the same result for the\n same input.\n\n @param __c  The wchar_t to find the mask of.\n @param __m  The mask to compare against.\n @return  (M & __m) != 0.","bases":[],"vars":[777809569544265806,2825082461653912652],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1254:7-1254:12|1253:7-1254:43|1089|-1"],"derived":[],"uses":[]},{"usr":15990945547911086874,"detailed_name":"const std::__ctype_abstract_base::char_type *std::__ctype_abstract_base::scan_is(std::ctype_base::mask __m, const std::__ctype_abstract_base::char_type *__lo, const std::__ctype_abstract_base::char_type *__hi) const","qual_name_offset":45,"short_name_offset":73,"short_name_size":7,"spell":"202:7-202:14|201:7-203:52|1026|-1","hover":"","comments":" @brief  Find char_type matching a mask\n\n This function searches for and returns the first char_type c in\n [lo,hi) for which is(m,c) is true.  It does so by returning\n ctype<char_type>::do_scan_is().\n\n @param __m  The mask to compare against.\n @param __lo  Pointer to start of range.\n @param __hi  Pointer to end of range.\n @return  Pointer to matching char_type if found, else @a __hi.","bases":[],"vars":[8669548456862807185,7243004124573416401,1473930908068732709],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16008815786430735148,"detailed_name":"virtual std::num_put::iter_type std::num_put::do_put(std::num_put::iter_type __s, std::ios_base &__io, std::num_put::char_type __fill, unsigned long __v) const","qual_name_offset":32,"short_name_offset":46,"short_name_size":6,"spell":"2517:7-2517:13|2516:7-2519:56|1090|-1","hover":"","comments":"","bases":[],"vars":[4065234606701248373,4744074001102392485,9564619426786055341,16987640377740913860],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16072995952639513415,"detailed_name":"virtual const std::ctype::char_type *std::ctype::do_tolower(std::ctype::char_type *__lo, const std::ctype::char_type *__hi) const","qual_name_offset":37,"short_name_offset":49,"short_name_size":10,"hover":"","comments":"","bases":[],"vars":[12394457319338098401,2046087308395404539],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["652:7-652:17|651:7-652:63|1089|-1"],"derived":[],"uses":[]},{"usr":16090310977309981147,"detailed_name":"virtual char std::ctype<wchar_t>::do_narrow(std::ctype<wchar_t>::char_type __c, char __dfault) const","qual_name_offset":13,"short_name_offset":34,"short_name_size":9,"hover":"","comments":" @brief  Narrow wchar_t to char\n\n This virtual function converts the argument to char using\n the simplest reasonable transformation.  If the conversion\n fails, dfault is returned instead.  For an underived\n ctype<wchar_t> facet, @a c will be cast to char and\n returned.\n\n do_narrow() is a hook for a derived facet to change the\n behavior of narrowing.  do_narrow() must always return the\n same result for the same input.\n\n Note: this is not what you want for codepage conversions.  See\n codecvt for that.\n\n @param __c  The wchar_t to convert.\n @param __dfault  Char to return if conversion fails.\n @return  The converted char.","bases":[],"vars":[7455340079495145092,7661809896932727243],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1441:7-1441:16|1440:7-1441:52|1089|-1"],"derived":[],"uses":[]},{"usr":16382764082187821318,"detailed_name":"virtual std::num_put::iter_type std::num_put::do_put(std::num_put::iter_type __s, std::ios_base &__io, std::num_put::char_type __fill, long long __v) const","qual_name_offset":32,"short_name_offset":46,"short_name_size":6,"spell":"2523:7-2523:13|2522:7-2525:56|1090|-1","hover":"","comments":"","bases":[],"vars":[1589066372149969490,6532769459820567118,2805007077060053405,11817378192250406685],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16387656634634430090,"detailed_name":"virtual std::ctype_byname<char>::~ctype_byname<char>() noexcept","qual_name_offset":8,"short_name_offset":33,"short_name_size":13,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1512:7-1512:8|1511:7-1512:22|5185|-1"],"derived":[],"uses":[]},{"usr":16446614389164827127,"detailed_name":"virtual std::__cxx11::numpunct_byname::~numpunct_byname<_CharT>()","qual_name_offset":8,"short_name_offset":39,"short_name_size":24,"spell":"1931:7-1931:23|1930:7-1931:29|1090|-1","hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16500547960724130775,"detailed_name":"std::num_put::iter_type std::num_put::put(std::num_put::iter_type __s, std::ios_base &__io, std::num_put::char_type __fill, const void *__v) const","qual_name_offset":24,"short_name_offset":38,"short_name_size":3,"spell":"2462:7-2462:10|2461:7-2464:55|1026|-1","hover":"","comments":" @brief  Numeric formatting.\n\n Formats the pointer value @a v and inserts it into a stream.  It\n does so by calling num_put::do_put().\n\n This function formats @a v as an unsigned long with ios_base::hex\n and ios_base::showbase set.\n\n @param  __s  Stream to write to.\n @param  __io  Source of locale and flags.\n @param  __fill  Char_type to use for filling.\n @param  __v  Value to format and insert.\n @return  Iterator after writing.","bases":[],"vars":[17522353891574941263,3895434824968413489,8931202103927165946,5346761864174131980],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16737465798472078495,"detailed_name":"static void std::__num_base::_S_format_float(const std::ios_base &__io, char *__fptr, char __mod) throw()","qual_name_offset":12,"short_name_offset":29,"short_name_size":15,"hover":"","comments":"num_put\nConstruct and return valid scanf format for floating point types.","bases":[],"vars":[6820837520326248082,7843187863662269941,1968890942540779061],"callees":[],"kind":254,"parent_kind":0,"storage":0,"declarations":["1591:5-1591:20|1590:5-1591:76|1025|-1"],"derived":[],"uses":[]},{"usr":16771083881986895618,"detailed_name":"virtual const std::ctype::char_type *std::ctype::do_toupper(std::ctype::char_type *__lo, const std::ctype::char_type *__hi) const","qual_name_offset":37,"short_name_offset":49,"short_name_size":10,"hover":"","comments":"","bases":[],"vars":[9783761536600616486,10060511052660409022],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["646:7-646:17|645:7-646:63|1089|-1"],"derived":[],"uses":[]},{"usr":16838665237384384600,"detailed_name":"std::num_get::iter_type std::num_get::get(std::num_get::iter_type __in, std::num_get::iter_type __end, std::ios_base &__io, ios_base::iostate &__err, long double &__v) const","qual_name_offset":24,"short_name_offset":38,"short_name_size":3,"spell":"2106:7-2106:10|2105:7-2108:62|1026|-1","hover":"","comments":"","bases":[],"vars":[838365940260965669,9952139653772385520,15288820751023274559,14447494294073188782,7619808841743892646],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":16944330347339888428,"detailed_name":"virtual std::ctype<wchar_t>::char_type std::ctype<wchar_t>::do_toupper(std::ctype<wchar_t>::char_type __c) const","qual_name_offset":39,"short_name_offset":60,"short_name_size":10,"hover":"","comments":" @brief  Convert to uppercase.\n\n This virtual function converts the wchar_t argument to uppercase if\n possible.  If not possible (for example, '2'), returns the argument.\n\n do_toupper() is a hook for a derived facet to change the behavior of\n uppercasing.  do_toupper() must always return the same result for\n the same input.\n\n @param __c  The wchar_t to convert.\n @return  The uppercase wchar_t if convertible, else @a __c.","bases":[],"vars":[1146055107406297898],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["1326:7-1326:17|1325:7-1326:38|1089|-1"],"derived":[],"uses":[]},{"usr":16987270010805935314,"detailed_name":"std::locale::id::id()","qual_name_offset":0,"short_name_offset":17,"short_name_size":2,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":9,"parent_kind":0,"storage":0,"declarations":[],"derived":[],"uses":["669:31-669:33|292|-1","1883:34-1883:36|292|-1","2277:42-2277:44|292|-1","2557:43-2557:45|292|-1"]},{"usr":17074966499012720615,"detailed_name":"virtual std::ctype::char_type std::ctype::do_tolower(std::ctype::char_type __c) const","qual_name_offset":30,"short_name_offset":42,"short_name_size":10,"hover":"","comments":"","bases":[],"vars":[8047294701859082143],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["649:7-649:17|648:7-649:38|1089|-1"],"derived":[],"uses":[]},{"usr":17185289557351688080,"detailed_name":"const std::__ctype_abstract_base::char_type *std::__ctype_abstract_base::is(const std::__ctype_abstract_base::char_type *__lo, const std::__ctype_abstract_base::char_type *__hi, std::ctype_base::mask *__vec) const","qual_name_offset":45,"short_name_offset":73,"short_name_size":2,"spell":"186:7-186:9|185:7-187:49|1026|-1","hover":"","comments":" @brief  Return a mask array.\n\n This function finds the mask for each char_type in the range [lo,hi)\n and successively writes it to vec.  vec must have as many elements\n as the char array.  It does so by returning the value of\n ctype<char_type>::do_is().\n\n @param __lo  Pointer to start of range.\n @param __hi  Pointer to end of range.\n @param __vec  Pointer to an array of mask storage.\n @return  @a __hi.","bases":[],"vars":[14315526035835545096,16916898913437186482,12613044412151380953],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17312257814999493861,"detailed_name":"virtual const char *std::ctype<char>::do_widen(const char *__lo, const char *__hi, std::ctype<char>::char_type *__to) const","qual_name_offset":20,"short_name_offset":38,"short_name_size":8,"spell":"1107:7-1107:15|1106:7-1112:8|1090|-1","hover":"","comments":" @brief  Widen char array\n\n This function converts each char in the range [lo,hi) to char using\n the simplest reasonable transformation.  For an underived\n ctype<char> facet, the argument will be copied unchanged.\n\n do_widen() is a hook for a derived facet to change the behavior of\n widening.  do_widen() must always return the same result for the\n same input.\n\n Note: this is not what you want for codepage conversions.  See\n codecvt for that.\n\n @param __lo  Pointer to start of range.\n @param __hi  Pointer to end of range.\n @param __to  Pointer to the destination array.\n @return  @a __hi.","bases":[],"vars":[9388890967857035715,14329398082545804745,4920744125574418096],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":["909:15-909:23|24676|-1"]},{"usr":17425457595645710450,"detailed_name":"std::num_get::iter_type std::num_get::get(std::num_get::iter_type __in, std::num_get::iter_type __end, std::ios_base &__io, ios_base::iostate &__err, double &__v) const","qual_name_offset":24,"short_name_offset":38,"short_name_size":3,"spell":"2101:7-2101:10|2100:7-2103:62|1026|-1","hover":"","comments":"","bases":[],"vars":[7192068418149748312,2714259739179403991,3989087402944464694,6415683383722445261,16549906201987845222],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17466850405078889232,"detailed_name":"virtual std::num_put::iter_type std::num_put::do_put(std::num_put::iter_type, std::ios_base &, std::num_put::char_type, const void *) const","qual_name_offset":32,"short_name_offset":46,"short_name_size":6,"hover":"","comments":"","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["2546:7-2546:13|2545:7-2546:65|1089|-1"],"derived":[],"uses":[]},{"usr":17617650054277923612,"detailed_name":"const std::__ctype_abstract_base::char_type *std::__ctype_abstract_base::narrow(const std::__ctype_abstract_base::char_type *__lo, const std::__ctype_abstract_base::char_type *__hi, char __dfault, char *__to) const","qual_name_offset":45,"short_name_offset":73,"short_name_size":6,"spell":"353:7-353:13|352:7-355:62|1026|-1","hover":"","comments":" @brief  Narrow array to char array\n\n This function converts each char_type in the input to char using the\n simplest reasonable transformation and writes the results to the\n destination array.  For any char_type in the input that cannot be\n converted, @a dfault is used instead.  It does so by returning\n ctype<char_type>::do_narrow(__lo, __hi, __dfault, __to).\n\n Note: this is not what you want for codepage conversions.  See\n codecvt for that.\n\n @param __lo  Pointer to start of range.\n @param __hi  Pointer to end of range.\n @param __dfault  Char to use if conversion fails.\n @param __to  Pointer to the destination array.\n @return  @a __hi.","bases":[],"vars":[11311898511379222225,767019709164909069,16102378876027325314,13286923092846320362],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17650122957575905930,"detailed_name":"virtual std::num_get::~num_get<_CharT, _InIter>()","qual_name_offset":8,"short_name_offset":22,"short_name_size":25,"spell":"2145:15-2145:23|2145:7-2145:29|5186|-1","hover":"","comments":"Destructor.","bases":[],"vars":[],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17770536622248022014,"detailed_name":"virtual bool std::__ctype_abstract_base::do_is(std::ctype_base::mask __m, std::__ctype_abstract_base::char_type __c) const = 0","qual_name_offset":13,"short_name_offset":41,"short_name_size":5,"hover":"","comments":" @brief  Test char_type classification.\n\n This function finds a mask M for @a c and compares it to mask @a m.\n\n do_is() is a hook for a derived facet to change the behavior of\n classifying.  do_is() must always return the same result for the\n same input.\n\n @param __c  The char_type to find the mask of.\n @param __m  The mask to compare against.\n @return  (M & __m) != 0.","bases":[],"vars":[15697522111765798774,2382560669291292876],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["378:7-378:12|377:7-378:47|1089|-1"],"derived":[],"uses":[]},{"usr":17785197117363014310,"detailed_name":"bool std::isalpha(_CharT, const std::locale &)","qual_name_offset":5,"short_name_offset":10,"short_name_size":7,"spell":"2599:5-2599:12|2598:5-2600:76|1026|-1","hover":"","comments":"Convenience interface to ctype.is(ctype_base::alpha, __c).","bases":[],"vars":[11650370299836274964,584848196815496651],"callees":[],"kind":12,"parent_kind":3,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":17980803756359080814,"detailed_name":"void std::num_put::_M_pad(std::num_put::char_type __fill, std::streamsize __w, std::ios_base &__io, std::num_put::char_type *__new, const std::num_put::char_type *__cs, int &__len) const","qual_name_offset":5,"short_name_offset":19,"short_name_size":6,"hover":"","comments":"","bases":[],"vars":[16260488501567279891,7499925934651115140,16800758051599239067,921626909504178028,4966663278766048860,17653631415281903941],"callees":[],"kind":6,"parent_kind":0,"storage":0,"declarations":["2488:7-2488:13|2487:7-2489:65|1025|-1"],"derived":[],"uses":[]},{"usr":18042706191280441208,"detailed_name":"bool std::isprint(_CharT, const std::locale &)","qual_name_offset":5,"short_name_offset":10,"short_name_size":7,"spell":"2575:5-2575:12|2574:5-2576:76|1026|-1","hover":"","comments":"Convenience interface to ctype.is(ctype_base::print, __c).","bases":[],"vars":[809183605873594447,10682816027433802759],"callees":[],"kind":12,"parent_kind":3,"storage":0,"declarations":[],"derived":[],"uses":[]},{"usr":18052812732037784573,"detailed_name":"std::num_put::iter_type std::num_put::put(std::num_put::iter_type __s, std::ios_base &__io, std::num_put::char_type __fill, bool __v) const","qual_name_offset":24,"short_name_offset":38,"short_name_size":3,"spell":"2332:7-2332:10|2331:7-2333:55|1026|-1","hover":"","comments":" @brief  Numeric formatting.\n\n Formats the boolean @a v and inserts it into a stream.  It does so\n by calling num_put::do_put().\n\n If ios_base::boolalpha is set, writes ctype<CharT>::truename() or\n ctype<CharT>::falsename().  Otherwise formats @a v as an int.\n\n @param  __s  Stream to write to.\n @param  __io  Source of locale and flags.\n @param  __fill  Char_type to use for filling.\n @param  __v  Value to format and insert.\n @return  Iterator after writing.","bases":[],"vars":[18401773769219029171,6585426806066768877,6169670098411972098,13928302088726245908],"callees":[],"kind":6,"parent_kind":5,"storage":0,"declarations":[],"derived":[],"uses":[]}],"usr2type":[{"usr":98,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[13074542164159631014,6223961250160338186,2123304468136201353,10348964861567074327,258079242107502863,1783767679850426021,13928302088726245908,1313310501484004556],"uses":[]},{"usr":105,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[5740199999309572441,8669548456862807185,12422246231075698755,15697522111765798774,5588788830209033634,14229547951310424013,17909520220262075339,6352699783899431700,16474317231704303812],"uses":[]},{"usr":107,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[16671222507944853704,13925097804034755609,12487802903129854962,16472268641991819487,14091333883377843272,7362498555238865462,17914329236071238310,16194747091621534944,13283397823887970175,1851162546725616061,9330695798730943687,10875149396507022054,16981968638845282144,4984714927455917474,5184444726064554957,13203365778527952842,13197374515639655469,3585702102568738012,18060420165224904657,1126762807194241784,6677847543209040525,706715351429634906,11392124707144827634,351009474807798697,6185494546980619006,17244570239110070238,16074214744841602339,12562602456416352206,1826228237240752349,13641031814664665773,16987640377740913860],"uses":[]},{"usr":108,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[13043402101775413309,7401326259251277722],"uses":[]},{"usr":110,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[6721077712765280979,5270361464044836279,16102378876027325314,336720444780452590,7747389661017681150,14998910250863627444,11616132608290134848,15627526360733008724,4371517928047820079,6061310647850667723,9643377458360276381,17452249573812094414,11225629202751246829,9325388749134370313,11277078696199195066,9388354896318761297,7057407949192927141,15308520365828049522,9138593118977091855,11657938273876568463,7404908578900274550,10259620691928663319,9700905794709205273,9686664867834126932,10186961462915689554,8214594355050968254,7661809896932727243,6613537333750016548,1968890942540779061,3933132807422180491],"uses":[]},{"usr":112,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[2825082461653912652,1146055107406297898,16156812752229410887,7455340079495145092],"uses":[]},{"usr":114,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[2382917168043123437,14994775562859562978,152091264193663280,15599727783004694209,9590619509200087215,777809569544265806,10048428430047109672,7677273496774786455,2200814033583944148,10956542746536256325],"uses":[]},{"usr":115,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[2814625647162185740,8507193225375562582,13253451954387188547,7499925934651115140,13705239459640197219],"uses":[]},{"usr":116,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[18378753395691494509,11817378192250406685],"uses":[]},{"usr":144,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[17124005174388669353],"uses":[]},{"usr":145,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[6221904498979693381],"uses":[]},{"usr":219473249778472785,"detailed_name":"template <typename _Tp> struct std::__is_char {}","qual_name_offset":31,"short_name_offset":36,"short_name_size":9,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":23,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["2159:39-2159:48|4|-1","2181:40-2181:49|4|-1"]},{"usr":340036287509349296,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[9044589875311823112],"uses":["2629:13-2629:19|4|-1","2630:30-2630:36|4|-1"]},{"usr":355172415112980416,"detailed_name":"class std::__num_base {}","qual_name_offset":6,"short_name_offset":11,"short_name_size":10,"hover":"","comments":"22.2.2  The numeric category.","spell":"1545:9-1545:19|1545:3-1592:4|1026|-1","bases":[],"funcs":[16737465798472078495],"types":[6941766153757428009,8118321725494135046],"vars":[],"alias_of":0,"kind":5,"parent_kind":3,"declarations":[],"derived":[],"instances":[],"uses":["1611:30-1611:40|4|-1","1617:29-1617:39|4|-1"]},{"usr":357042636306737484,"detailed_name":"struct std::__numpunct_cache : public locale::facet {}","qual_name_offset":7,"short_name_offset":12,"short_name_size":16,"hover":"","comments":"","spell":"1595:12-1595:28|1595:5-1640:6|1026|-1","bases":[7014747529083609554],"funcs":[713730288128712427,6119958990373353015,613644409191671497,3927881060906362152,10323059018821674468],"types":[2793105535086544185],"vars":[{"L":17492071016828621043,"R":-1},{"L":5184444726064554957,"R":-1},{"L":258079242107502863,"R":-1},{"L":5963316310647590337,"R":-1},{"L":13203365778527952842,"R":-1},{"L":16015997538270791939,"R":-1},{"L":13197374515639655469,"R":-1},{"L":6214031977144805890,"R":-1},{"L":12233924169647494137,"R":-1},{"L":6812847077228563690,"R":-1},{"L":13521874402138769569,"R":-1},{"L":1783767679850426021,"R":-1}],"alias_of":0,"kind":23,"parent_kind":3,"declarations":[],"derived":[],"instances":[],"uses":["1621:7-1621:23|4|-1","1629:8-1629:24|4|-1","1635:7-1635:23|4|-1","1636:23-1636:39|4|-1","1639:30-1639:46|4|-1","1639:7-1639:23|4|-1","1643:5-1643:21|4|-1","1643:32-1643:48|4|-1","1679:15-1679:31|4|-1"]},{"usr":451741390921933099,"detailed_name":"template<> class std::ctype<wchar_t> {}","qual_name_offset":17,"short_name_offset":22,"short_name_size":5,"hover":"","comments":" @brief  The ctype<wchar_t> specialization.\n @ingroup locales\n\n This class defines classification and conversion functions for the\n wchar_t type.  It gets used by wchar_t streams for many I/O operations.\n The wchar_t specialization provides a number of optimizations as well.\n\n ctype<wchar_t> inherits its public methods from\n __ctype_abstract_base<wchar_t>.","spell":"1186:11-1186:16|1185:3-1473:6|1026|-1","bases":[3701905422918659613],"funcs":[3271663007924926746,6173189498627907175,3918457579661016135,76282816665038690,15951799129774646962,11209543997335487267,8106686865586456900,13162534198123522900,16944330347339888428,13502412385840313028,13278719337224070095,4633006014344780493,7172211958921984258,7133621689797333637,16090310977309981147,4507963737112343166,14751780291799859037],"types":[3021622049330364817,9601658843973835534],"vars":[{"L":6608545119805269745,"R":-1},{"L":10348964861567074327,"R":-1},{"L":7656195007118979823,"R":-1},{"L":1692029967116471310,"R":-1},{"L":7657097865002547582,"R":-1},{"L":18366788933111164535,"R":-1}],"alias_of":0,"kind":5,"parent_kind":3,"declarations":[],"derived":[],"instances":[],"uses":["1219:7-1219:12|4|-1","1230:7-1230:12|4|-1","1238:8-1238:13|4|-1","1186:11-1186:16|4|-1","1517:42-1517:47|2052|-1"]},{"usr":467123584354733484,"detailed_name":"_InIter","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["1959:15-1959:22|4|-1"]},{"usr":702300912587928919,"detailed_name":"class std::locale::id {}","qual_name_offset":6,"short_name_offset":19,"short_name_size":2,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":5,"parent_kind":0,"declarations":[],"derived":[],"instances":[17955552664606397910,17955552664606397910,4490604731206545563,8957128892040479044,17371460778622729353,17371460778622729353,10120071710305279532,10120071710305279532,16947762201490980038,16947762201490980038],"uses":["620:22-620:24|4|-1","669:13-669:15|4|-1","703:22-703:24|4|-1","1209:22-1209:24|4|-1","1686:22-1686:24|4|-1","1883:13-1883:15|4|-1","1963:22-1963:24|4|-1","2277:13-2277:15|4|-1","2304:22-2304:24|4|-1","2557:13-2557:15|4|-1"]},{"usr":783152717115624891,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[9322206737724757747],"uses":["2642:12-2642:18|4|-1","2643:13-2643:19|4|-1","2644:30-2644:36|4|-1"]},{"usr":970000478376232385,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["669:22-669:28|4|-1"]},{"usr":1199727829537445520,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["2277:24-2277:30|4|-1"]},{"usr":1639491032900410303,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[15452495147428508422],"uses":["2636:13-2636:19|4|-1","2637:30-2637:36|4|-1"]},{"usr":1647786010800057422,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":[]},{"usr":1937583197752425301,"detailed_name":"typedef unsigned int wint_t","qual_name_offset":21,"short_name_offset":21,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[1692029967116471310],"uses":["1200:7-1200:13|4|-1"]},{"usr":2029653507280428489,"detailed_name":"typedef _CharT std::ctype::char_type","qual_name_offset":15,"short_name_offset":27,"short_name_size":9,"hover":"","comments":"Types:","spell":"616:24-616:33|616:7-616:33|1026|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":7278285200103797790,"kind":252,"parent_kind":5,"declarations":[],"derived":[],"instances":[8430600878971789053,5160985973662615108,3139344591368878723,11281590148149097445,1312246699287162396,16290579758490173211,2536682936717778199,278667297110953774,9783761536600616486,10060511052660409022,8047294701859082143,12394457319338098401,2046087308395404539,6886551179205802933,7393207723580392118,924072047892296264],"uses":["630:23-630:32|4|-1","632:21-632:30|4|-1","633:19-633:28|4|-1","633:42-633:51|4|-1","635:21-635:30|4|-1","636:34-636:43|4|-1","636:57-636:66|4|-1","638:21-638:30|4|-1","639:35-639:44|4|-1","640:11-640:20|4|-1","642:15-642:24|4|-1","643:18-643:27|4|-1","645:21-645:30|4|-1","646:18-646:27|4|-1","646:41-646:50|4|-1","648:15-648:24|4|-1","649:18-649:27|4|-1","651:21-651:30|4|-1","652:18-652:27|4|-1","652:41-652:50|4|-1","654:15-654:24|4|-1","658:52-658:61|4|-1","661:17-661:26|4|-1","663:21-663:30|4|-1","664:23-664:32|4|-1","664:46-664:55|4|-1"]},{"usr":2172247495730861769,"detailed_name":"typedef unsigned long wctype_t","qual_name_offset":22,"short_name_offset":22,"short_name_size":8,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["1192:15-1192:23|4|-1"]},{"usr":2189293000828278783,"detailed_name":"class std::ctype_byname : public ctype<_CharT> {}","qual_name_offset":6,"short_name_offset":11,"short_name_size":12,"hover":"","comments":"class ctype_byname [22.2.1.2].","spell":"1478:11-1478:23|1478:5-1495:6|1026|-1","bases":[3701905422918659613],"funcs":[4509323107631865109,7175254353626299960,9782348988439897018],"types":[3908186903176880215],"vars":[],"alias_of":0,"kind":5,"parent_kind":3,"declarations":[],"derived":[6057640725446079666,7954379714296223088],"instances":[],"uses":["1484:7-1484:19|4|-1","1488:7-1488:19|4|-1","1489:9-1489:21|4|-1","1494:8-1494:20|4|-1"]},{"usr":2384306050392151733,"detailed_name":"class std::__ctype_abstract_base : public locale::facet, public std::ctype_base {}","qual_name_offset":6,"short_name_offset":11,"short_name_size":21,"hover":"","comments":" @brief  Common base for ctype facet\n\n This template class provides implementations of the public functions\n that forward to the protected virtual functions.\n\n This template also provides abstract stubs for the protected virtual\n functions.","spell":"150:11-150:32|150:5-591:6|1026|-1","bases":[7014747529083609554,15996533929851941723],"funcs":[9336852620505031984,17185289557351688080,15990945547911086874,12996445735596152895,723678290654773215,1924174204601048670,3404199121318428721,5460268008921343462,12893628909658198364,10941908293936572473,3262927770340408128,17617650054277923612,3880254099074532099,3460634635296415455,17770536622248022014,6400694891439692743,6892380574101206492,1820862952364102243,833762881606581157,5433435335591085872,8435180093913234158,6767844025133266201,4673531484130008568,9554517452945448162,513534952573608403,10670023513378231826],"types":[9788798014451740255,6868622468513517582],"vars":[],"alias_of":0,"kind":5,"parent_kind":3,"declarations":[],"derived":[3701905422918659613],"instances":[],"uses":["359:7-359:28|4|-1","362:8-362:29|4|-1","612:26-612:47|2052|-1","617:24-617:45|4|-1","623:34-623:55|4|-1"]},{"usr":2712928445144601234,"detailed_name":"typedef std::_Ios_Iostate std::ios_base::iostate","qual_name_offset":26,"short_name_offset":41,"short_name_size":7,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":1647786010800057422,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[11899403611487706932,10382638110836620330,12296147626865426811,7617214938861009027,6294333407967711432,10220243806813576736,4777658385300861264,14367896638233015679,6415683383722445261,14447494294073188782,10156251295682887050,4355473358714518742,13350333618462709780,9122154680684014290,18061070210526052643,17218677171744663398,12242779868760936593],"uses":["73:49-73:56|4|-1","79:51-79:58|4|-1","84:52-84:59|4|-1","89:57-89:64|4|-1","2000:14-2000:21|4|-1","2037:14-2037:21|4|-1","2042:14-2042:21|4|-1","2047:14-2047:21|4|-1","2052:14-2052:21|4|-1","2058:14-2058:21|4|-1","2063:14-2063:21|4|-1","2097:14-2097:21|4|-1","2102:14-2102:21|4|-1","2107:14-2107:21|4|-1","2140:14-2140:21|4|-1","2149:67-2149:74|4|-1","2155:60-2155:67|4|-1","2212:57-2212:64|4|-1","2216:17-2216:24|4|-1","2221:17-2221:24|4|-1","2226:17-2226:24|4|-1","2231:17-2231:24|4|-1","2237:17-2237:24|4|-1","2242:17-2242:24|4|-1","2247:57-2247:64|4|-1","2250:57-2250:64|4|-1","2260:57-2260:64|4|-1","2265:57-2265:64|4|-1"]},{"usr":2769040230183736412,"detailed_name":"typedef unsigned long std::size_t","qual_name_offset":22,"short_name_offset":27,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["110:26-110:32|4|-1","359:29-359:35|4|-1","623:13-623:19|4|-1","705:20-705:26|4|-1","718:58-718:64|4|-1","732:6-732:12|4|-1","1219:13-1219:19|4|-1","1230:32-1230:38|4|-1","1484:37-1484:43|4|-1","1488:39-1488:45|4|-1","1503:37-1503:43|4|-1","1507:39-1507:45|4|-1","1521:37-1521:43|4|-1","1525:39-1525:45|4|-1","1598:7-1598:13|4|-1","1601:7-1601:13|4|-1","1603:7-1603:13|4|-1","1621:24-1621:30|4|-1","1694:16-1694:22|4|-1","1708:39-1708:45|4|-1","1722:35-1722:41|4|-1","1910:40-1910:46|4|-1","1925:42-1925:48|4|-1","1973:15-1973:21|4|-1","2160:26-2160:32|4|-1","2183:33-2183:39|4|-1","2314:15-2314:21|4|-1","2473:46-2473:52|4|-1","2483:44-2483:50|4|-1"]},{"usr":2793105535086544185,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["1594:21-1594:27|1594:12-1594:27|1025|-1"],"derived":[],"instances":[5963316310647590337,16015997538270791939,6214031977144805890,12233924169647494137,6812847077228563690,13521874402138769569],"uses":["1600:13-1600:19|4|-1","1602:13-1602:19|4|-1","1604:7-1604:13|4|-1","1605:7-1605:13|4|-1","1611:7-1611:13|4|-1","1617:7-1617:13|4|-1","1625:41-1625:47|4|-1","1626:19-1626:25|4|-1"]},{"usr":2851098347063733566,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["94:21-94:27|94:12-94:27|1025|-1"],"derived":[],"instances":[3238881814187245505,7295331079316347541,5223310353516582365],"uses":["98:30-98:36|4|-1","98:45-98:51|4|-1","99:13-99:19|4|-1"]},{"usr":3021622049330364817,"detailed_name":"typedef wchar_t std::ctype<wchar_t>::char_type","qual_name_offset":16,"short_name_offset":37,"short_name_size":9,"hover":"","comments":"Types:\n Typedef for the template parameter wchar_t.","spell":"1191:24-1191:33|1191:7-1191:33|1026|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":5,"declarations":[],"derived":[],"instances":[7806242515961868423,8882333327564454091,17142283208439030719,14576120695286053089,17784750746299066912,6992302690926682734,12258030642153329786,6806464518263136484,395195559349235175,9944073178305342254,11246506959003795607,15402856002689398827,3318406615906317495],"uses":["1254:23-1254:32|4|-1","1272:21-1272:30|4|-1","1273:19-1273:28|4|-1","1273:42-1273:51|4|-1","1290:21-1290:30|4|-1","1291:34-1291:43|4|-1","1291:57-1291:66|4|-1","1308:21-1308:30|4|-1","1309:35-1309:44|4|-1","1310:11-1310:20|4|-1","1325:15-1325:24|4|-1","1326:18-1326:27|4|-1","1342:21-1342:30|4|-1","1343:18-1343:27|4|-1","1343:41-1343:50|4|-1","1358:15-1358:24|4|-1","1359:18-1359:27|4|-1","1375:21-1375:30|4|-1","1376:18-1376:27|4|-1","1376:41-1376:50|4|-1","1395:15-1395:24|4|-1","1418:52-1418:61|4|-1","1441:17-1441:26|4|-1","1466:21-1466:30|4|-1","1467:23-1467:32|4|-1","1467:46-1467:55|4|-1"]},{"usr":3359311104876669135,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[809183605873594447],"uses":["2575:13-2575:19|4|-1","2576:30-2576:36|4|-1"]},{"usr":3701905422918659613,"detailed_name":"class std::ctype : public __ctype_abstract_base<_CharT> {}","qual_name_offset":6,"short_name_offset":11,"short_name_size":5,"hover":"","comments":" @brief  Primary class template ctype facet.\n @ingroup locales\n\n This template class defines classification and conversion functions for\n character sets.  It wraps cctype functionality.  Ctype gets used by\n streams for many I/O operations.\n\n This template provides the protected virtual functions the developer\n will have to replace in a derived class or specialization to make a\n working facet.  The public functions that access them are defined in\n __ctype_abstract_base, to allow for implementation flexibility.  See\n ctype<wchar_t> for an example.  The functions are documented in\n __ctype_abstract_base.\n\n Note: implementations are provided for all the protected virtual\n functions, but will likely not be useful.","spell":"612:11-612:16|612:5-666:6|1026|-1","bases":[2384306050392151733],"funcs":[13388198345282418002,1347434862337051857,194736935191070577,14599280242275749025,1638837663609333091,8690962149841458562,10521325359634391494,16771083881986895618,17074966499012720615,16072995952639513415,888721210917616770,13768782312157175239,3399323306267845964,6495972003079735750],"types":[2029653507280428489,15612257525702208121],"vars":[],"alias_of":0,"kind":5,"parent_kind":3,"declarations":[],"derived":[9735805869547232212,451741390921933099,2189293000828278783],"instances":[],"uses":["623:7-623:12|4|-1","627:8-627:13|4|-1","669:16-669:21|4|-1","1478:33-1478:38|2052|-1","1481:24-1481:29|4|-1","2570:24-2570:29|4|-1","2576:24-2576:29|4|-1","2582:24-2582:29|4|-1","2588:24-2588:29|4|-1","2594:24-2594:29|4|-1","2600:24-2600:29|4|-1","2606:24-2606:29|4|-1","2612:24-2612:29|4|-1","2618:24-2618:29|4|-1","2624:24-2624:29|4|-1","2630:24-2630:29|4|-1","2637:24-2637:29|4|-1","2644:24-2644:29|4|-1","2650:24-2650:29|4|-1"]},{"usr":3824268869453751388,"detailed_name":"class std::num_get : public locale::facet {}","qual_name_offset":6,"short_name_offset":11,"short_name_size":7,"hover":"","comments":" @brief  Primary class template num_get.\n @ingroup locales\n\n This facet encapsulates the code to parse and return a number\n from a string.  It is used by the istream numeric extraction\n operators.\n\n The num_get template uses protected virtual functions to provide the\n actual results.  The public accessors forward the call to the virtual\n functions.  These virtual functions are hooks for developers to\n implement the behavior they require from the num_get facet.","spell":"1952:11-1952:18|1952:5-2274:6|1026|-1","bases":[7014747529083609554],"funcs":[9180289180820275881,1819184569292560743,4921911442517553236,9594536584060009057,14856884017144226879,8728381388377996296,1868334761417153584,14539771766399510863,12281923053738812903,17425457595645710450,16838665237384384600,9962841565354395111,17650122957575905930,15925199949188735280,3488880696456796994,5727206790930708022,4637238581739446972,15290263439208312582,12402869404383392055,281873986222994385,8780862596512225099,12085371567288812040,5290539493057119432,9002809115943697934,2800030596981431293,7399848463584473417,3458810660459739536,13888777292369135142],"types":[9948867150301655399,14718921033193416797],"vars":[],"alias_of":0,"kind":5,"parent_kind":3,"declarations":[],"derived":[],"instances":[],"uses":["1973:7-1973:14|4|-1","2145:16-2145:23|4|-1","2277:16-2277:23|4|-1"]},{"usr":3908186903176880215,"detailed_name":"typedef typename ctype<_CharT>::mask mask","qual_name_offset":30,"short_name_offset":32,"short_name_size":4,"hover":"","comments":"","spell":"1481:45-1481:49|1481:7-1481:49|1026|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":5,"declarations":[],"derived":[],"instances":[],"uses":[]},{"usr":4285092148718509875,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":[]},{"usr":4430832183032181938,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[11650370299836274964],"uses":["2599:13-2599:19|4|-1","2600:30-2600:36|4|-1"]},{"usr":4488806322037410780,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["126:21-126:27|126:12-126:27|1|-1"],"derived":[],"instances":[12810618897075962507],"uses":["129:33-129:39|4|-1"]},{"usr":4980346820909537411,"detailed_name":"namespace __gnu_cxx {}","qual_name_offset":10,"short_name_offset":10,"short_name_size":9,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":3,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["2159:16-2159:25|4|-1","2181:16-2181:25|4|-1"]},{"usr":5016465227836504302,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[17680659788905582530],"uses":["2617:14-2617:20|4|-1","2618:30-2618:36|4|-1"]},{"usr":5180330286487157231,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[16680044437381557939],"uses":["2587:13-2587:19|4|-1","2588:30-2588:36|4|-1"]},{"usr":5189592546935130575,"detailed_name":"struct std::__pad {}","qual_name_offset":7,"short_name_offset":12,"short_name_size":5,"hover":"","comments":"NB: __pad is a struct, rather than a function, so it can be\npartially-specialized.","spell":"95:12-95:17|95:5-100:6|1026|-1","bases":[],"funcs":[15595851805254137704],"types":[2851098347063733566,6268619187657282158],"vars":[],"alias_of":0,"kind":23,"parent_kind":3,"declarations":[],"derived":[],"instances":[],"uses":[]},{"usr":5401847601697785946,"detailed_name":"namespace std {}","qual_name_offset":10,"short_name_offset":10,"short_name_size":3,"hover":"","comments":"This file provides the C++17 functions std::destroy_at, std::destroy, and\nstd::destroy_n, and the C++20 function std::construct_at.\nIt also provides std::_Construct, std::_Destroy,and std::_Destroy_n functions\nwhich are defined in all standard modes and so can be used in C++98-14 code.\nThe _Destroy functions will dispatch to destroy_at during constant\nevaluation, because calls to that function are intercepted by the compiler\nto allow use in constant expressions.","bases":[],"funcs":[9294554883856773880,14914263511775010222,8687795519663770050,8423362052868069796,15154715262487151209,6957217307924102160,5289506249443957130,1273651680420159209,18042706191280441208,8657609572820130059,8405725736309022847,5850727255535620952,17785197117363014310,12177322432617667235,10971856994524572174,12413054058527482872,7527926941162061742,13438069482374804230,12657330924441197315,3020154441903900095,15369819930757507483],"types":[5189592546935130575,2384306050392151733,3701905422918659613,9735805869547232212,451741390921933099,2189293000828278783,6057640725446079666,7954379714296223088,355172415112980416,357042636306737484,15296580614825111795,3824268869453751388,14359472333815196554],"vars":[],"alias_of":0,"kind":3,"parent_kind":0,"declarations":["50:11-50:14|50:1-1535:2|1|-1","1540:11-1540:14|1540:1-2653:2|1|-1"],"derived":[15296580614825111795],"instances":[],"uses":[]},{"usr":6034161313681073064,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["1958:15-1958:21|4|-1"]},{"usr":6057640725446079666,"detailed_name":"template<> class std::ctype_byname<char> : public ctype<char> {}","qual_name_offset":17,"short_name_offset":22,"short_name_size":12,"hover":"","comments":"22.2.1.4  Class ctype_byname specializations.","spell":"1499:11-1499:23|1498:3-1513:6|1026|-1","bases":[2189293000828278783],"funcs":[12666889123200505945,4441307738507381194,16387656634634430090],"types":[],"vars":[],"alias_of":0,"kind":5,"parent_kind":3,"declarations":[],"derived":[],"instances":[],"uses":["1503:7-1503:19|4|-1","1507:7-1507:19|4|-1","1512:8-1512:20|4|-1","1499:11-1499:23|4|-1"]},{"usr":6268619187657282158,"detailed_name":"_Traits","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["94:38-94:45|94:29-94:45|1025|-1"],"derived":[],"instances":[],"uses":[]},{"usr":6417047549323921912,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[750562450257755987],"uses":["2569:13-2569:19|4|-1","2570:30-2570:36|4|-1"]},{"usr":6427860522347394925,"detailed_name":"typedef int std::__cxx11::numpunct_byname::string_type","qual_name_offset":12,"short_name_offset":43,"short_name_size":11,"hover":"","comments":"","spell":"1907:36-1907:47|1907:7-1907:47|1026|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":5,"declarations":[],"derived":[],"instances":[],"uses":[]},{"usr":6601165318175214004,"detailed_name":"_OutIter","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["126:38-126:46|126:29-126:46|1|-1"],"derived":[],"instances":[11709715187799896373],"uses":["128:5-128:13|4|-1","129:13-129:21|4|-1"]},{"usr":6868622468513517582,"detailed_name":"typedef _CharT std::__ctype_abstract_base::char_type","qual_name_offset":15,"short_name_offset":43,"short_name_size":9,"hover":"","comments":"Types:\n Typedef for the template parameter","spell":"155:22-155:31|155:7-155:31|1026|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":9788798014451740255,"kind":252,"parent_kind":5,"declarations":[],"derived":[],"instances":[11006071037473366967,14315526035835545096,16916898913437186482,7243004124573416401,1473930908068732709,8454581280100493722,621026023110792310,10737902627561813998,3650380495935822874,4854595208829106637,9867449840196084146,8884267710544531838,5743928307534422492,15467794114308468081,13674343242582197690,11311898511379222225,767019709164909069,2382560669291292876,12671812491138581898,14232114661927631346,4983874329168025487,15229646516558115422,12661619166227132573,2486741979033787722,15785319904509949619,2496735545085350586,18444634223243932019,5751782586947661919,6008708831893644851,612568734742363106,904742861682523446,8927363903109329314,2028195670754370125,7002064101980804692],"uses":["169:20-169:29|4|-1","185:13-185:22|4|-1","186:16-186:25|4|-1","186:39-186:48|4|-1","201:13-201:22|4|-1","202:31-202:40|4|-1","202:54-202:63|4|-1","217:13-217:22|4|-1","218:32-218:41|4|-1","218:55-218:64|4|-1","231:7-231:16|4|-1","232:15-232:24|4|-1","246:13-246:22|4|-1","247:15-247:24|4|-1","247:38-247:47|4|-1","260:7-260:16|4|-1","261:15-261:24|4|-1","275:13-275:22|4|-1","276:15-276:24|4|-1","276:38-276:47|4|-1","292:7-292:16|4|-1","312:49-312:58|4|-1","331:14-331:23|4|-1","352:13-352:22|4|-1","353:20-353:29|4|-1","353:43-353:52|4|-1","378:23-378:32|4|-1","396:21-396:30|4|-1","397:19-397:28|4|-1","397:42-397:51|4|-1","415:21-415:30|4|-1","416:34-416:43|4|-1","417:10-417:19|4|-1","434:21-434:30|4|-1","435:35-435:44|4|-1","436:11-436:20|4|-1","452:15-452:24|4|-1","453:18-453:27|4|-1","469:21-469:30|4|-1","470:18-470:27|4|-1","470:41-470:50|4|-1","485:15-485:24|4|-1","486:18-486:27|4|-1","502:21-502:30|4|-1","503:18-503:27|4|-1","503:41-503:50|4|-1","521:15-521:24|4|-1","543:52-543:61|4|-1","564:17-564:26|4|-1","588:21-588:30|4|-1","589:23-589:32|4|-1","589:46-589:55|4|-1"]},{"usr":6875089324386397551,"detailed_name":"typedef const int *std::ctype_base::__to_type","qual_name_offset":19,"short_name_offset":36,"short_name_size":9,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[14212856712201165624,16374677854423399575],"uses":["692:7-692:16|4|-1","693:7-693:16|4|-1"]},{"usr":6941766153757428009,"detailed_name":"anon enum","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"","comments":"NB: Code depends on the order of _S_atoms_out elements.\nBelow are the indices into _S_atoms_out.","spell":"1550:5-1550:9|1550:5-1563:8|1026|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":10,"parent_kind":5,"declarations":[],"derived":[],"instances":[],"uses":[]},{"usr":7014747529083609554,"detailed_name":"class std::locale::facet {}","qual_name_offset":6,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":5,"parent_kind":0,"declarations":[],"derived":[2384306050392151733,357042636306737484,17839115581444713317,3824268869453751388,14359472333815196554],"instances":[],"uses":["150:50-150:55|2052|-1","359:49-359:54|4|-1","681:40-681:45|2052|-1","1595:46-1595:51|2052|-1","1622:9-1622:14|4|-1","1670:37-1670:42|2052|-1","1695:9-1695:14|4|-1","1709:9-1709:14|4|-1","1723:9-1723:14|4|-1","1952:36-1952:41|2052|-1","1973:36-1973:41|4|-1","2293:36-2293:41|2052|-1","2314:36-2314:41|4|-1"]},{"usr":7278285200103797790,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["612:48-612:54|4|-1","616:15-616:21|4|-1","617:46-617:52|4|-1","623:56-623:62|4|-1"]},{"usr":7506746510476428612,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[16109088441368679320],"uses":["2593:13-2593:19|4|-1","2594:30-2594:36|4|-1"]},{"usr":7511066761073908067,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[985221387501797147],"uses":["2648:12-2648:18|4|-1","2649:13-2649:19|4|-1","2650:30-2650:36|4|-1"]},{"usr":7950292370140408641,"detailed_name":"_ValueT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["2152:25-2152:32|2152:16-2152:32|1|-1"],"derived":[],"instances":[],"uses":["2156:10-2156:17|4|-1"]},{"usr":7954379714296223088,"detailed_name":"template<> class std::ctype_byname<wchar_t> : public ctype<wchar_t> {}","qual_name_offset":17,"short_name_offset":22,"short_name_size":12,"hover":"","comments":"","spell":"1517:11-1517:23|1516:3-1531:6|1026|-1","bases":[2189293000828278783],"funcs":[5172260386916788695,12689155254897166929,4343168386382031865],"types":[],"vars":[],"alias_of":0,"kind":5,"parent_kind":3,"declarations":[],"derived":[],"instances":[],"uses":["1521:7-1521:19|4|-1","1525:7-1525:19|4|-1","1530:8-1530:20|4|-1","1517:11-1517:23|4|-1"]},{"usr":8068542706636576959,"detailed_name":"typedef _CharT std::__cxx11::numpunct::char_type","qual_name_offset":15,"short_name_offset":39,"short_name_size":9,"hover":"","comments":"Types:\n@{\n Public typedefs","spell":"1676:24-1676:33|1676:7-1676:33|1026|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":11719568047243794038,"kind":252,"parent_kind":5,"declarations":[],"derived":[],"instances":[],"uses":["1735:7-1735:16|4|-1","1748:7-1748:16|4|-1","1822:15-1822:24|4|-1","1834:15-1834:24|4|-1"]},{"usr":8118321725494135046,"detailed_name":"anon enum","qual_name_offset":0,"short_name_offset":0,"short_name_size":9,"hover":"","comments":"","spell":"1576:5-1576:9|1576:5-1586:6|1026|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":10,"parent_kind":5,"declarations":[],"derived":[],"instances":[],"uses":[]},{"usr":8229205388775873106,"detailed_name":"_InIter","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["2277:32-2277:39|4|-1"]},{"usr":8488794364946773685,"detailed_name":"template <class _CharT> struct std::char_traits : public __gnu_cxx::char_traits<_CharT> {}","qual_name_offset":31,"short_name_offset":36,"short_name_size":11,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":23,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["2186:27-2186:38|4|-1"]},{"usr":8572076179052890054,"detailed_name":"class std::__cxx11::numpunct_byname : public numpunct<_CharT> {}","qual_name_offset":6,"short_name_offset":20,"short_name_size":15,"hover":"","comments":"class numpunct_byname [22.2.3.2].","spell":"1903:11-1903:26|1903:5-1932:6|1026|-1","bases":[17839115581444713317],"funcs":[9128645795594471735,4404489365245111417,16446614389164827127],"types":[15257807739496020156,6427860522347394925],"vars":[],"alias_of":0,"kind":5,"parent_kind":3,"declarations":[],"derived":[],"instances":[],"uses":["1910:7-1910:22|4|-1","1925:7-1925:22|4|-1","1926:9-1926:24|4|-1","1931:8-1931:23|4|-1"]},{"usr":8629436626488484038,"detailed_name":"typedef int std::__cxx11::numpunct::string_type","qual_name_offset":12,"short_name_offset":36,"short_name_size":11,"hover":"","comments":"","spell":"1677:36-1677:47|1677:7-1677:47|1026|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":5,"declarations":[],"derived":[],"instances":[],"uses":["1792:7-1792:18|4|-1","1805:7-1805:18|4|-1","1860:15-1860:26|4|-1","1873:15-1873:26|4|-1"]},{"usr":9005062082704949542,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["1883:25-1883:31|4|-1"]},{"usr":9601658843973835534,"detailed_name":"typedef wctype_t std::ctype<wchar_t>::__wmask_type","qual_name_offset":17,"short_name_offset":38,"short_name_size":12,"hover":"","comments":"","spell":"1192:25-1192:37|1192:7-1192:37|1026|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":2172247495730861769,"kind":252,"parent_kind":5,"declarations":[],"derived":[],"instances":[18366788933111164535],"uses":["1204:7-1204:19|4|-1","1233:7-1233:19|4|-1"]},{"usr":9714744024952045946,"detailed_name":"typedef _OutIter std::num_put::iter_type","qual_name_offset":17,"short_name_offset":31,"short_name_size":9,"hover":"","comments":"","spell":"2300:25-2300:34|2300:7-2300:34|1026|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":10772011744623549705,"kind":252,"parent_kind":5,"declarations":[],"derived":[],"instances":[18401773769219029171,11900712588806683473,7627701503418294264,11425896928247963790,15201975492155069100,11358193028621213453,11152576743136099844,17522353891574941263,615240010530585427,17528073274528587492,4065234606701248373,1589066372149969490,11372936247879305797],"uses":["2331:7-2331:16|4|-1","2332:11-2332:20|4|-1","2373:7-2373:16|4|-1","2374:11-2374:20|4|-1","2377:7-2377:16|4|-1","2378:11-2378:20|4|-1","2383:7-2383:16|4|-1","2384:11-2384:20|4|-1","2387:7-2387:16|4|-1","2388:11-2388:20|4|-1","2436:7-2436:16|4|-1","2437:11-2437:20|4|-1","2440:7-2440:16|4|-1","2441:11-2441:20|4|-1","2461:7-2461:16|4|-1","2462:11-2462:20|4|-1","2468:2-2468:11|4|-1","2469:18-2469:27|4|-1","2478:2-2478:11|4|-1","2479:16-2479:25|4|-1","2509:15-2509:24|4|-1","2510:14-2510:23|4|-1","2512:15-2512:24|4|-1","2513:14-2513:23|4|-1","2516:15-2516:24|4|-1","2517:14-2517:23|4|-1","2522:15-2522:24|4|-1","2523:14-2523:23|4|-1","2527:15-2527:24|4|-1","2528:14-2528:23|4|-1","2533:15-2533:24|4|-1","2534:14-2534:23|4|-1","2541:15-2541:24|4|-1","2542:14-2542:23|4|-1","2545:15-2545:24|4|-1","2546:14-2546:23|4|-1"]},{"usr":9717920339719404876,"detailed_name":"_ValueT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["2467:25-2467:32|2467:16-2467:32|1|-1"],"derived":[],"instances":[14795595978069915682],"uses":["2470:16-2470:23|4|-1"]},{"usr":9735805869547232212,"detailed_name":"template<> class std::ctype<char> : public locale::facet, public std::ctype_base {}","qual_name_offset":17,"short_name_offset":22,"short_name_size":5,"hover":"","comments":" @brief  The ctype<char> specialization.\n @ingroup locales\n\n This class defines classification and conversion functions for\n the char type.  It gets used by char streams for many I/O\n operations.  The char specialization provides a number of\n optimizations as well.","spell":"681:11-681:16|680:3-1171:6|1026|-1","bases":[3701905422918659613],"funcs":[7354199556608318676,15809623153167664725,7394088038611416549,1236684367859086202,10637806522315892752,14730393599643493990,7557766048208207686,10718878043126165087,7835590309597677188,8222460855529112069,14063159842901383617,6372689635514573066,9987922040439650878,5665319943304913922,12836392474035314455,12786994299174727450,2603765727904734376,13371766477209219637,12792204242312571781,14538193476001537306,6141809219553791138,14528820721913469009,17312257814999493861,13852923609361869083,5929447099935477181,711342213768352198,11300559627633851147],"types":[14753062342232613330],"vars":[{"L":11549250603111446269,"R":128},{"L":13074542164159631014,"R":192},{"L":14212856712201165624,"R":256},{"L":16374677854423399575,"R":320},{"L":8151825516583917660,"R":384},{"L":6061310647850667723,"R":448},{"L":2781821069402960151,"R":456},{"L":6114826376852056370,"R":2504},{"L":9643377458360276381,"R":4552}],"alias_of":0,"kind":5,"parent_kind":3,"declarations":[],"derived":[],"instances":[],"uses":["718:7-718:12|4|-1","731:7-731:12|4|-1","998:8-998:13|4|-1","681:11-681:16|4|-1","1499:39-1499:44|2052|-1"]},{"usr":9788798014451740255,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["149:21-149:27|149:12-149:27|1025|-1"],"derived":[],"instances":[],"uses":["155:15-155:21|4|-1"]},{"usr":9825384940092480788,"detailed_name":"typedef std::ptrdiff_t std::streamsize","qual_name_offset":23,"short_name_offset":28,"short_name_size":10,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":16813906027770061405,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["99:29-99:39|4|-1","99:50-99:60|4|-1","2488:32-2488:42|4|-1"]},{"usr":9948867150301655399,"detailed_name":"typedef _CharT std::num_get::char_type","qual_name_offset":15,"short_name_offset":29,"short_name_size":9,"hover":"","comments":"Types:\n@{\n Public typedefs","spell":"1958:24-1958:33|1958:7-1958:33|1026|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":6034161313681073064,"kind":252,"parent_kind":5,"declarations":[],"derived":[],"instances":[11702601022215098023],"uses":["2186:10-2186:19|4|-1"]},{"usr":10042642843407977652,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["107:21-107:27|107:12-107:27|1|-1"],"derived":[],"instances":[14665190449433908613,5615263205155538908,2671970871706763024,5971857024333281062],"uses":["108:5-108:11|4|-1","109:20-109:26|4|-1","109:33-109:39|4|-1","111:12-111:18|4|-1","111:35-111:41|4|-1"]},{"usr":10772011744623549705,"detailed_name":"_OutIter","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["2300:15-2300:23|4|-1"]},{"usr":10807881050017906786,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[17524922077213171856],"uses":["2611:13-2611:19|4|-1","2612:30-2612:36|4|-1"]},{"usr":10922748494482251071,"detailed_name":"typedef __numpunct_cache<_CharT> std::__cxx11::numpunct::__cache_type","qual_name_offset":33,"short_name_offset":57,"short_name_size":12,"hover":"","comments":"@}","spell":"1679:41-1679:53|1679:7-1679:53|1026|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":357042636306737484,"kind":252,"parent_kind":5,"declarations":[],"derived":[],"instances":[17676814198806553192,16875197621505479055],"uses":["1682:7-1682:19|4|-1","1708:16-1708:28|4|-1"]},{"usr":11065020397382771306,"detailed_name":"_Tp","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["71:21-71:24|71:12-71:24|1|-1"],"derived":[],"instances":[],"uses":["73:33-73:36|4|-1"]},{"usr":11345864896923813661,"detailed_name":"typedef unsigned short std::ctype_base::mask","qual_name_offset":23,"short_name_offset":40,"short_name_size":4,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[12613044412151380953,2807934521983662814,8151825516583917660,13067310252781701721,11419590692274003228,18295932085585125807],"uses":["169:10-169:14|4|-1","186:56-186:60|4|-1","202:15-202:19|4|-1","218:16-218:20|4|-1","378:13-378:17|4|-1","398:6-398:10|4|-1","416:18-416:22|4|-1","435:19-435:23|4|-1","617:55-617:59|4|-1","694:13-694:17|4|-1","718:19-718:23|4|-1","731:38-731:42|4|-1","744:10-744:14|4|-1","759:46-759:50|4|-1","773:15-773:19|4|-1","787:16-787:20|4|-1","982:13-982:17|4|-1","987:20-987:24|4|-1"]},{"usr":11651058887886591791,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["2557:24-2557:30|4|-1"]},{"usr":11719568047243794038,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["1676:15-1676:21|4|-1","1679:32-1679:38|4|-1"]},{"usr":12676136746247562793,"detailed_name":"template <bool, typename> struct __gnu_cxx::__enable_if {}","qual_name_offset":33,"short_name_offset":44,"short_name_size":11,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":23,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["2159:27-2159:38|4|-1","2181:27-2181:38|4|-1"]},{"usr":12910155154557861287,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[16509004432586361522],"uses":["2623:13-2623:19|4|-1","2624:30-2624:36|4|-1"]},{"usr":13192352081852411164,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["1478:39-1478:45|4|-1","1481:30-1481:36|4|-1"]},{"usr":13318296160719507044,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["1903:45-1903:51|4|-1","1906:15-1906:21|4|-1","1911:18-1911:24|4|-1"]},{"usr":14151982074805896770,"detailed_name":"typedef int std::string","qual_name_offset":12,"short_name_offset":17,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[8078893050581192665,14124893918061333427,18208584990290248789,9623542607197804486],"uses":["1488:26-1488:32|4|-1","1507:26-1507:32|4|-1","1525:26-1525:32|4|-1","1779:7-1779:13|4|-1","1847:15-1847:21|4|-1","1925:29-1925:35|4|-1","2150:10-2150:16|4|-1"]},{"usr":14249981498136291665,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["116:21-116:27|116:12-116:27|1|-1"],"derived":[],"instances":[18147610730741396988],"uses":[]},{"usr":14359472333815196554,"detailed_name":"class std::num_put : public locale::facet {}","qual_name_offset":6,"short_name_offset":11,"short_name_size":7,"hover":"","comments":" @brief  Primary class template num_put.\n @ingroup locales\n\n This facet encapsulates the code to convert a number to a string.  It is\n used by the ostream numeric insertion operators.\n\n The num_put template uses protected virtual functions to provide the\n actual results.  The public accessors forward the call to the virtual\n functions.  These virtual functions are hooks for developers to\n implement the behavior they require from the num_put facet.","spell":"2293:11-2293:18|2293:5-2554:6|1026|-1","bases":[7014747529083609554],"funcs":[1107936118968436420,18052812732037784573,1894316813127060643,1226013310175436133,6600408372756635059,8733325962829551978,10210288876509654255,6098388870106492421,16500547960724130775,8493863686524868308,11594275767091691075,14647075448720886777,3485701707769556321,17980803756359080814,15667685889475491103,4813973832593164375,10317016825261099548,16008815786430735148,16382764082187821318,4176599894613216590,431616786416211458,15771284771491384593,17466850405078889232],"types":[18263523835391732858,9714744024952045946],"vars":[],"alias_of":0,"kind":5,"parent_kind":3,"declarations":[],"derived":[],"instances":[],"uses":["2314:7-2314:14|4|-1","2493:8-2493:15|4|-1","2557:16-2557:23|4|-1"]},{"usr":14718921033193416797,"detailed_name":"typedef _InIter std::num_get::iter_type","qual_name_offset":16,"short_name_offset":30,"short_name_size":9,"hover":"","comments":"","spell":"1959:25-1959:34|1959:7-1959:34|1026|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":467123584354733484,"kind":252,"parent_kind":5,"declarations":[],"derived":[],"instances":[4832799490718442148,18114032915574366475,8993883199505369765,13349305170953528609,10347866103299081001,10295847893734745278,17988747231754060972,6613674628121391175,14090179677327305299,2643664357475771359,5156297212367350360,17767340107024136908,15032249158881355516,9417536204660097212,8486100008457897315,14616187977878541119,7192068418149748312,2714259739179403991,838365940260965669,9952139653772385520,10469937654430108441,18199774586768746083,5855869789817794258,7400466302497417739,12073266343361121682,14782147755752069451,7501222582826488995,3261341569341945001,9866591459020429049,17132171962538319066,12082082429473871873,17588921434708558108,542013831196983715,16645497319810189584],"uses":["1998:7-1998:16|4|-1","1999:11-1999:20|4|-1","1999:27-1999:36|4|-1","2035:7-2035:16|4|-1","2036:11-2036:20|4|-1","2036:27-2036:36|4|-1","2040:7-2040:16|4|-1","2041:11-2041:20|4|-1","2041:27-2041:36|4|-1","2045:7-2045:16|4|-1","2046:11-2046:20|4|-1","2046:27-2046:36|4|-1","2050:7-2050:16|4|-1","2051:11-2051:20|4|-1","2051:27-2051:36|4|-1","2056:7-2056:16|4|-1","2057:11-2057:20|4|-1","2057:27-2057:36|4|-1","2061:7-2061:16|4|-1","2062:11-2062:20|4|-1","2062:27-2062:36|4|-1","2095:7-2095:16|4|-1","2096:11-2096:20|4|-1","2096:27-2096:36|4|-1","2100:7-2100:16|4|-1","2101:11-2101:20|4|-1","2101:27-2101:36|4|-1","2105:7-2105:16|4|-1","2106:11-2106:20|4|-1","2106:27-2106:36|4|-1","2138:7-2138:16|4|-1","2139:11-2139:20|4|-1","2139:27-2139:36|4|-1","2148:7-2148:16|4|-1","2149:24-2149:33|4|-1","2149:35-2149:44|4|-1","2154:2-2154:11|4|-1","2155:17-2155:26|4|-1","2155:28-2155:37|4|-1","2211:15-2211:24|4|-1","2212:14-2212:23|4|-1","2212:25-2212:34|4|-1","2214:15-2214:24|4|-1","2215:14-2215:23|4|-1","2215:31-2215:40|4|-1","2219:15-2219:24|4|-1","2220:14-2220:23|4|-1","2220:31-2220:40|4|-1","2224:15-2224:24|4|-1","2225:14-2225:23|4|-1","2225:31-2225:40|4|-1","2229:15-2229:24|4|-1","2230:14-2230:23|4|-1","2230:31-2230:40|4|-1","2235:15-2235:24|4|-1","2236:14-2236:23|4|-1","2236:31-2236:40|4|-1","2240:15-2240:24|4|-1","2241:14-2241:23|4|-1","2241:31-2241:40|4|-1","2246:15-2246:24|4|-1","2247:14-2247:23|4|-1","2247:25-2247:34|4|-1","2249:15-2249:24|4|-1","2250:14-2250:23|4|-1","2250:25-2250:34|4|-1","2259:15-2259:24|4|-1","2260:14-2260:23|4|-1","2260:25-2260:34|4|-1","2264:15-2264:24|4|-1","2265:14-2265:23|4|-1","2265:25-2265:34|4|-1"]},{"usr":14753062342232613330,"detailed_name":"typedef char std::ctype<char>::char_type","qual_name_offset":13,"short_name_offset":31,"short_name_size":9,"hover":"","comments":"Types:\n Typedef for the template parameter char.","spell":"686:21-686:30|686:7-686:30|1026|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":5,"declarations":[],"derived":[],"instances":[14199400607678456384,11077377551371497338,10585377049236246399,1573813191948791414,4775694019330734052,10737852565477696367,12720096324826273908,17925221069550467387,1289598719572575104,7268553489912133742,13772592513953030279,4920744125574418096,11328836237310727952,15928216406559866162],"uses":["801:7-801:16|4|-1","802:15-802:24|4|-1","818:13-818:22|4|-1","819:15-819:24|4|-1","819:38-819:47|4|-1","834:7-834:16|4|-1","835:15-835:24|4|-1","851:13-851:22|4|-1","852:15-852:24|4|-1","852:38-852:47|4|-1","871:7-871:16|4|-1","899:49-899:58|4|-1","931:14-931:23|4|-1","963:13-963:22|4|-1","964:20-964:29|4|-1","964:43-964:52|4|-1","1013:15-1013:24|4|-1","1014:18-1014:27|4|-1","1030:21-1030:30|4|-1","1031:18-1031:27|4|-1","1031:41-1031:50|4|-1","1046:15-1046:24|4|-1","1047:18-1047:27|4|-1","1063:21-1063:30|4|-1","1064:18-1064:27|4|-1","1064:41-1064:50|4|-1","1083:15-1083:24|4|-1","1107:52-1107:61|4|-1","1134:17-1134:26|4|-1","1159:21-1159:30|4|-1","1160:23-1160:32|4|-1","1160:46-1160:55|4|-1"]},{"usr":14775529620120560523,"detailed_name":"typedef __locale_t std::__c_locale","qual_name_offset":19,"short_name_offset":24,"short_name_size":10,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":4285092148718509875,"kind":252,"parent_kind":0,"declarations":[],"derived":[],"instances":[11549250603111446269,4459066730978302481,6608545119805269745,16854565201862893864,13126850758434311011,5534060272384858871,10001110855633366529],"uses":["74:12-74:22|4|-1","80:12-80:22|4|-1","85:12-85:22|4|-1","90:12-90:22|4|-1","690:7-690:17|4|-1","731:13-731:23|4|-1","1195:7-1195:17|4|-1","1230:13-1230:23|4|-1","1722:16-1722:26|4|-1","1879:30-1879:40|4|-1","1916:6-1916:16|4|-1"]},{"usr":14911526508283337092,"detailed_name":"class std::ios_base {}","qual_name_offset":6,"short_name_offset":11,"short_name_size":8,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":5,"parent_kind":0,"declarations":[],"derived":[],"instances":[3518633734519793037,6820837520326248082,1796003549327337952,14525756011508281509,5541757119013870315,9506192309511797001,5467566163275638201,17142767138455637844,6022931721873719510,17977408919502726566,3989087402944464694,15288820751023274559,2352515848605700955,4988385557807759790,10988795943466635300,11757214796361360964,17559752671365823352,6569450363059334646,541479463276811735,6585426806066768877,2146968964984647905,14963469859150497179,16572819180283445091,2646277830853969668,5690163379994490832,13242440903662151334,3895434824968413489,16381347621455820859,12521999698056926907,16453129504817795174,16800758051599239067,11507936265047579827,228151557781516816,4744074001102392485,6532769459820567118,11263306465336552878],"uses":["73:39-73:47|4|-1","79:41-79:49|4|-1","84:42-84:50|4|-1","89:47-89:55|4|-1","98:14-98:22|4|-1","1591:27-1591:35|4|-1","1999:44-1999:52|4|-1","2000:4-2000:12|4|-1","2036:44-2036:52|4|-1","2037:4-2037:12|4|-1","2041:44-2041:52|4|-1","2042:4-2042:12|4|-1","2046:44-2046:52|4|-1","2047:4-2047:12|4|-1","2051:44-2051:52|4|-1","2052:4-2052:12|4|-1","2057:44-2057:52|4|-1","2058:4-2058:12|4|-1","2062:44-2062:52|4|-1","2063:4-2063:12|4|-1","2096:44-2096:52|4|-1","2097:4-2097:12|4|-1","2101:44-2101:52|4|-1","2102:4-2102:12|4|-1","2106:44-2106:52|4|-1","2107:4-2107:12|4|-1","2139:44-2139:52|4|-1","2140:4-2140:12|4|-1","2149:46-2149:54|4|-1","2149:57-2149:65|4|-1","2155:39-2155:47|4|-1","2155:50-2155:58|4|-1","2212:36-2212:44|4|-1","2212:47-2212:55|4|-1","2215:48-2215:56|4|-1","2216:7-2216:15|4|-1","2220:48-2220:56|4|-1","2221:7-2221:15|4|-1","2225:48-2225:56|4|-1","2226:7-2226:15|4|-1","2230:48-2230:56|4|-1","2231:7-2231:15|4|-1","2236:48-2236:56|4|-1","2237:7-2237:15|4|-1","2241:48-2241:56|4|-1","2242:7-2242:15|4|-1","2247:36-2247:44|4|-1","2247:47-2247:55|4|-1","2250:36-2250:44|4|-1","2250:47-2250:55|4|-1","2260:36-2260:44|4|-1","2260:47-2260:55|4|-1","2265:36-2265:44|4|-1","2265:47-2265:55|4|-1","2332:26-2332:34|4|-1","2374:26-2374:34|4|-1","2378:26-2378:34|4|-1","2384:26-2384:34|4|-1","2388:26-2388:34|4|-1","2437:26-2437:34|4|-1","2441:26-2441:34|4|-1","2462:26-2462:34|4|-1","2469:29-2469:37|4|-1","2479:27-2479:35|4|-1","2484:23-2484:31|4|-1","2488:48-2488:56|4|-1","2510:29-2510:37|4|-1","2513:29-2513:37|4|-1","2517:29-2517:37|4|-1","2523:29-2523:37|4|-1","2528:29-2528:37|4|-1","2534:25-2534:33|4|-1","2542:25-2542:33|4|-1","2546:25-2546:33|4|-1"]},{"usr":15239152417889576461,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[1283394662567264310],"uses":["2605:13-2605:19|4|-1","2606:30-2606:36|4|-1"]},{"usr":15257807739496020156,"detailed_name":"typedef _CharT std::__cxx11::numpunct_byname::char_type","qual_name_offset":15,"short_name_offset":46,"short_name_size":9,"hover":"","comments":"","spell":"1906:24-1906:33|1906:7-1906:33|1026|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":13318296160719507044,"kind":252,"parent_kind":5,"declarations":[],"derived":[],"instances":[],"uses":[]},{"usr":15288937763540599420,"detailed_name":"class std::locale {}","qual_name_offset":6,"short_name_offset":11,"short_name_size":6,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":5,"parent_kind":0,"declarations":[],"derived":[],"instances":[13357291896581573196,8046977102101463602,10682816027433802759,1209405619365307489,10762150730812457512,9184063328501079310,584848196815496651,4574333252061652505,6511843690790826059,7518811152776487468,17343408572677266924,12684116186441779989,13095496124359632115,9272462294707724447,773948018308672842],"uses":["150:42-150:48|4|-1","620:14-620:20|4|-1","669:5-669:11|4|-1","681:32-681:38|4|-1","703:14-703:20|4|-1","1209:14-1209:20|4|-1","1595:38-1595:44|4|-1","1632:22-1632:28|4|-1","1670:29-1670:35|4|-1","1686:14-1686:20|4|-1","1883:5-1883:11|4|-1","1952:28-1952:34|4|-1","1963:14-1963:20|4|-1","2277:5-2277:11|4|-1","2293:28-2293:34|4|-1","2304:14-2304:20|4|-1","2557:5-2557:11|4|-1","2569:31-2569:37|4|-1","2575:31-2575:37|4|-1","2581:31-2581:37|4|-1","2587:31-2587:37|4|-1","2593:31-2593:37|4|-1","2599:31-2599:37|4|-1","2605:31-2605:37|4|-1","2611:31-2611:37|4|-1","2617:32-2617:38|4|-1","2623:31-2623:37|4|-1","2629:31-2629:37|4|-1","2636:31-2636:37|4|-1","2643:31-2643:37|4|-1","2649:31-2649:37|4|-1"]},{"usr":15296580614825111795,"detailed_name":"inline namespace std::__cxx11 {}","qual_name_offset":17,"short_name_offset":22,"short_name_size":7,"hover":"","comments":"","bases":[5401847601697785946],"funcs":[],"types":[17839115581444713317,8572076179052890054],"vars":[],"alias_of":0,"kind":3,"parent_kind":0,"declarations":["1653:1-1653:31|1653:1-1934:29|1025|-1"],"derived":[],"instances":[],"uses":["293:51-293:58|64|0"]},{"usr":15565147008365205914,"detailed_name":"_CharT2","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["2158:25-2158:32|2158:16-2158:32|1|-1"],"derived":[],"instances":[12143845735739924443],"uses":["2159:49-2159:56|4|-1","2160:16-2160:23|4|-1","2160:40-2160:47|4|-1","2165:19-2165:26|4|-1","2165:41-2165:48|4|-1","2165:49-2165:56|4|-1","2166:17-2166:24|4|-1","2170:19-2170:26|4|-1","2170:42-2170:49|4|-1","2171:17-2171:24|4|-1","2172:24-2172:31|4|-1","2172:47-2172:54|4|-1","2173:23-2173:30|4|-1","2174:24-2174:31|4|-1","2174:47-2174:54|4|-1","2175:23-2175:30|4|-1"]},{"usr":15612257525702208121,"detailed_name":"typedef typename __ctype_abstract_base<_CharT>::mask mask","qual_name_offset":46,"short_name_offset":48,"short_name_size":4,"hover":"","comments":"","spell":"617:60-617:64|617:7-617:64|1026|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":252,"parent_kind":5,"declarations":[],"derived":[],"instances":[2217226982243471813,754123167929482786,1271188363000755878,15948098045652486180],"uses":["630:13-630:17|4|-1","633:59-633:63|4|-1","636:18-636:22|4|-1","639:19-639:23|4|-1","1481:39-1481:43|4|-1"]},{"usr":15677165091058076813,"detailed_name":"_OutIter","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["2557:32-2557:40|4|-1"]},{"usr":15996533929851941723,"detailed_name":"struct std::ctype_base {}","qual_name_offset":7,"short_name_offset":12,"short_name_size":10,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":5,"parent_kind":0,"declarations":[],"derived":[2384306050392151733],"instances":[],"uses":["150:64-150:74|2052|-1","681:54-681:64|2052|-1","2570:50-2570:60|4|-1","2576:50-2576:60|4|-1","2582:50-2582:60|4|-1","2588:50-2588:60|4|-1","2594:50-2594:60|4|-1","2600:50-2600:60|4|-1","2606:50-2606:60|4|-1","2612:50-2612:60|4|-1","2618:50-2618:60|4|-1","2624:50-2624:60|4|-1","2630:50-2630:60|4|-1","2637:50-2637:60|4|-1"]},{"usr":16482981680318333223,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["1643:22-1643:28|4|-1"]},{"usr":16712173755383311235,"detailed_name":"_CharT2","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["2180:25-2180:32|2180:16-2180:32|1|-1"],"derived":[],"instances":[5658437682343140316,4347981667971745708],"uses":["2181:50-2181:57|4|-1","2183:16-2183:23|4|-1","2183:47-2183:54|4|-1","2186:39-2186:46|4|-1"]},{"usr":16741579036334433047,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[5717576992180752527],"uses":["2581:13-2581:19|4|-1","2582:30-2582:36|4|-1"]},{"usr":16813906027770061405,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":0,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":[]},{"usr":17186741394483650438,"detailed_name":"_ValueT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":["2477:25-2477:32|2477:16-2477:32|1|-1"],"derived":[],"instances":[8506717472900863416],"uses":["2480:9-2480:16|4|-1"]},{"usr":17448689162212348445,"detailed_name":"_CharT","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":0,"kind":26,"parent_kind":0,"declarations":[],"derived":[],"instances":[],"uses":["2299:15-2299:21|4|-1"]},{"usr":17839115581444713317,"detailed_name":"class std::__cxx11::numpunct : public locale::facet {}","qual_name_offset":6,"short_name_offset":20,"short_name_size":8,"hover":"","comments":" @brief  Primary class template numpunct.\n @ingroup locales\n\n This facet stores several pieces of information related to printing and\n scanning numbers, such as the decimal point character.  It takes a\n template parameter specifying the char type.  The numpunct facet is\n used by streams for many I/O operations involving numbers.\n\n The numpunct template uses protected virtual functions to provide the\n actual results.  The public accessors forward the call to the virtual\n functions.  These virtual functions are hooks for developers to\n implement the behavior they require from a numpunct facet.","spell":"1670:11-1670:19|1670:5-1880:6|1026|-1","bases":[7014747529083609554],"funcs":[2599380165552901606,14876220301455072562,4585526041187115525,10278921105750692160,4487137414997945334,15285576141303467374,1438831758607307687,1640212316315204526,15175485060114864416,13258118511494719346,8588882361616492796,3899183584474798670,7644183811615954457,1243596890682237385,6707432908016400876],"types":[8068542706636576959,8629436626488484038,10922748494482251071],"vars":[{"L":17676814198806553192,"R":-1}],"alias_of":0,"kind":5,"parent_kind":3,"declarations":[],"derived":[8572076179052890054],"instances":[],"uses":["1694:7-1694:15|4|-1","1708:7-1708:15|4|-1","1722:7-1722:15|4|-1","1812:8-1812:16|4|-1","1883:16-1883:24|4|-1","1903:36-1903:44|2052|-1","1911:9-1911:17|4|-1"]},{"usr":18263523835391732858,"detailed_name":"typedef _CharT std::num_put::char_type","qual_name_offset":15,"short_name_offset":29,"short_name_size":9,"hover":"","comments":"Types:\n@{\n Public typedefs","spell":"2299:23-2299:32|2299:7-2299:32|1026|-1","bases":[],"funcs":[],"types":[],"vars":[],"alias_of":17448689162212348445,"kind":252,"parent_kind":5,"declarations":[],"derived":[],"instances":[6169670098411972098,9575226163305996288,3353060029802484849,13306965718745825910,11143492693806725561,8806959524917914869,11508026753460104001,8931202103927165946,2300377235921037004,10676967130900290721,7582803756466104169,443902151427542937,5986239516187724467,18155881437971381414,10076485872576190403,14340129327804025790,7950458029445537101,16260488501567279891,921626909504178028,4966663278766048860,15150707423382507627,15936134403698777909,9564619426786055341,2805007077060053405,6467782596759521390],"uses":["2332:42-2332:51|4|-1","2374:42-2374:51|4|-1","2378:42-2378:51|4|-1","2384:42-2384:51|4|-1","2388:42-2388:51|4|-1","2437:42-2437:51|4|-1","2441:42-2441:51|4|-1","2462:42-2462:51|4|-1","2469:45-2469:54|4|-1","2474:8-2474:17|4|-1","2474:31-2474:40|4|-1","2474:47-2474:56|4|-1","2475:8-2475:17|4|-1","2479:43-2479:52|4|-1","2484:6-2484:15|4|-1","2484:39-2484:48|4|-1","2485:6-2485:15|4|-1","2488:14-2488:23|4|-1","2489:7-2489:16|4|-1","2489:31-2489:40|4|-1","2510:45-2510:54|4|-1","2513:45-2513:54|4|-1","2517:45-2517:54|4|-1","2523:45-2523:54|4|-1","2528:45-2528:54|4|-1","2534:36-2534:45|4|-1","2542:36-2542:45|4|-1","2546:36-2546:45|4|-1"]}],"usr2var":[{"usr":152091264193663280,"detailed_name":"int __len","qual_name_offset":4,"short_name_offset":4,"short_name_size":5,"hover":"","comments":"","spell":"129:51-129:56|129:47-129:56|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["131:31-131:36|12|-1"]},{"usr":181446517626479863,"detailed_name":"const char *__s","qual_name_offset":12,"short_name_offset":12,"short_name_size":3,"hover":"","comments":"","spell":"1503:32-1503:35|1503:20-1503:35|1026|-1","type":0,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":[]},{"usr":228151557781516816,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2513:39-2513:43|2513:29-2513:43|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2514:35-2514:39|4|-1"]},{"usr":258079242107502863,"detailed_name":"bool std::__numpunct_cache::_M_use_grouping","qual_name_offset":5,"short_name_offset":28,"short_name_size":15,"hover":"","comments":"","spell":"1599:15-1599:30|1599:7-1599:30|1026|-1","type":98,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1623:2-1623:17|20|-1"]},{"usr":278667297110953774,"detailed_name":"std::ctype::char_type __c","qual_name_offset":22,"short_name_offset":22,"short_name_size":3,"hover":"","comments":"","spell":"643:28-643:31|643:18-643:31|1026|-1","type":2029653507280428489,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":336720444780452590,"detailed_name":"char __c","qual_name_offset":5,"short_name_offset":5,"short_name_size":3,"hover":"","comments":"","spell":"522:21-522:24|522:16-522:24|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":349428853654293437,"detailed_name":"long long &__v","qual_name_offset":11,"short_name_offset":11,"short_name_size":3,"hover":"","comments":"","spell":"2058:41-2058:44|2058:30-2058:44|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2059:55-2059:58|4|-1"]},{"usr":351009474807798697,"detailed_name":"std::size_t __refs","qual_name_offset":12,"short_name_offset":12,"short_name_size":6,"hover":"std::size_t __refs = 0","comments":"","spell":"1973:22-1973:28|1973:15-1973:32|1026|-1","type":107,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":["1973:42-1973:48|4|-1"]},{"usr":395195559349235175,"detailed_name":"std::ctype<wchar_t>::char_type *__lo","qual_name_offset":32,"short_name_offset":32,"short_name_size":4,"hover":"","comments":"","spell":"1376:29-1376:33|1376:18-1376:33|1026|-1","type":3021622049330364817,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":443278761618986125,"detailed_name":"const char *__s","qual_name_offset":12,"short_name_offset":12,"short_name_size":3,"hover":"","comments":"","spell":"1484:32-1484:35|1484:20-1484:35|1026|-1","type":0,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":[]},{"usr":443902151427542937,"detailed_name":"std::num_put::char_type *__new","qual_name_offset":25,"short_name_offset":25,"short_name_size":5,"hover":"","comments":"","spell":"2474:58-2474:63|2474:47-2474:63|1026|-1","type":18263523835391732858,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":541479463276811735,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2241:58-2241:62|2241:48-2241:62|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2243:45-2243:49|4|-1"]},{"usr":542013831196983715,"detailed_name":"std::num_get::iter_type __beg","qual_name_offset":24,"short_name_offset":24,"short_name_size":5,"hover":"","comments":"","spell":"2241:24-2241:29|2241:14-2241:29|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2243:31-2243:36|4|-1"]},{"usr":584848196815496651,"detailed_name":"const std::locale &__loc","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2599:39-2599:44|2599:25-2599:44|1026|-1","type":15288937763540599420,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2600:40-2600:45|4|-1"]},{"usr":612568734742363106,"detailed_name":"const std::__ctype_abstract_base::char_type *__hi","qual_name_offset":45,"short_name_offset":45,"short_name_size":4,"hover":"","comments":"","spell":"503:52-503:56|503:35-503:56|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":615240010530585427,"detailed_name":"std::num_put::iter_type __s","qual_name_offset":24,"short_name_offset":24,"short_name_size":3,"hover":"","comments":"","spell":"2510:24-2510:27|2510:14-2510:27|1026|-1","type":9714744024952045946,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":621026023110792310,"detailed_name":"const std::__ctype_abstract_base::char_type *__hi","qual_name_offset":45,"short_name_offset":45,"short_name_size":4,"hover":"","comments":"","spell":"218:66-218:70|218:49-218:70|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["219:45-219:49|4|-1"]},{"usr":706715351429634906,"detailed_name":"std::size_t __refs","qual_name_offset":12,"short_name_offset":12,"short_name_size":6,"hover":"std::size_t __refs = 0","comments":"","spell":"1910:47-1910:53|1910:40-1910:57|1026|-1","type":107,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":["1911:26-1911:32|4|-1"]},{"usr":750562450257755987,"detailed_name":"_CharT __c","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2569:20-2569:23|2569:13-2569:23|1026|-1","type":6417047549323921912,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2570:69-2570:72|4|-1"]},{"usr":752167359723478730,"detailed_name":"unsigned long long &__v","qual_name_offset":20,"short_name_offset":20,"short_name_size":3,"hover":"","comments":"","spell":"2242:53-2242:56|2242:33-2242:56|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2243:58-2243:61|4|-1"]},{"usr":754123167929482786,"detailed_name":"std::ctype::mask *__vec","qual_name_offset":18,"short_name_offset":18,"short_name_size":5,"hover":"","comments":"","spell":"633:65-633:70|633:59-633:70|1026|-1","type":15612257525702208121,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":767019709164909069,"detailed_name":"const std::__ctype_abstract_base::char_type *__hi","qual_name_offset":45,"short_name_offset":45,"short_name_size":4,"hover":"","comments":"","spell":"353:54-353:58|353:37-353:58|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["355:38-355:42|4|-1"]},{"usr":773948018308672842,"detailed_name":"const std::locale &__loc","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2649:39-2649:44|2649:25-2649:44|1026|-1","type":15288937763540599420,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2650:40-2650:45|4|-1"]},{"usr":777809569544265806,"detailed_name":"int __m","qual_name_offset":4,"short_name_offset":4,"short_name_size":3,"hover":"","comments":"","spell":"1254:18-1254:21|1254:13-1254:21|1026|-1","type":114,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":809183605873594447,"detailed_name":"_CharT __c","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2575:20-2575:23|2575:13-2575:23|1026|-1","type":3359311104876669135,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2576:69-2576:72|4|-1"]},{"usr":838365940260965669,"detailed_name":"std::num_get::iter_type __in","qual_name_offset":24,"short_name_offset":24,"short_name_size":4,"hover":"","comments":"","spell":"2106:21-2106:25|2106:11-2106:25|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2108:29-2108:33|4|-1"]},{"usr":904742861682523446,"detailed_name":"std::__ctype_abstract_base::char_type *__to","qual_name_offset":39,"short_name_offset":39,"short_name_size":4,"hover":"","comments":"","spell":"543:63-543:67|543:52-543:67|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":921626909504178028,"detailed_name":"std::num_put::char_type *__new","qual_name_offset":25,"short_name_offset":25,"short_name_size":5,"hover":"","comments":"","spell":"2489:18-2489:23|2489:7-2489:23|1026|-1","type":18263523835391732858,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":924072047892296264,"detailed_name":"const std::ctype::char_type *__hi","qual_name_offset":29,"short_name_offset":29,"short_name_size":4,"hover":"","comments":"","spell":"664:57-664:61|664:40-664:61|1026|-1","type":2029653507280428489,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":945489424301150405,"detailed_name":"std::__num_base::_S_ominus","qual_name_offset":0,"short_name_offset":17,"short_name_size":9,"hover":"std::__num_base::_S_ominus = 0","comments":"","spell":"1552:2-1552:11|1552:2-1552:11|1026|-1","type":6941766153757428009,"kind":22,"parent_kind":5,"storage":0,"declarations":[],"uses":[]},{"usr":985221387501797147,"detailed_name":"_CharT __c","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2649:20-2649:23|2649:13-2649:23|1026|-1","type":7511066761073908067,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2650:55-2650:58|4|-1"]},{"usr":1126762807194241784,"detailed_name":"std::size_t __refs","qual_name_offset":12,"short_name_offset":12,"short_name_size":6,"hover":"std::size_t __refs = 0","comments":"","spell":"1708:46-1708:52|1708:39-1708:56|1026|-1","type":107,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":["1709:15-1709:21|4|-1"]},{"usr":1146055107406297898,"detailed_name":"std::ctype<wchar_t>::char_type __c","qual_name_offset":31,"short_name_offset":31,"short_name_size":3,"hover":"","comments":"","spell":"1326:28-1326:31|1326:18-1326:31|1026|-1","type":112,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":1209405619365307489,"detailed_name":"const std::locale &__loc","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2581:39-2581:44|2581:25-2581:44|1026|-1","type":15288937763540599420,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2582:40-2582:45|4|-1"]},{"usr":1271188363000755878,"detailed_name":"std::ctype::mask __m","qual_name_offset":17,"short_name_offset":17,"short_name_size":3,"hover":"","comments":"","spell":"636:23-636:26|636:18-636:26|1026|-1","type":15612257525702208121,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":1277808715633627966,"detailed_name":"char *__to","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1161:52-1161:56|1161:46-1161:56|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["1164:21-1164:25|12|-1"]},{"usr":1283394662567264310,"detailed_name":"_CharT __c","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2605:20-2605:23|2605:13-2605:23|1026|-1","type":15239152417889576461,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2606:69-2606:72|4|-1"]},{"usr":1284883162389719583,"detailed_name":"const char *__hi","qual_name_offset":12,"short_name_offset":12,"short_name_size":4,"hover":"","comments":"","spell":"543:46-543:50|543:34-543:50|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":1289598719572575104,"detailed_name":"const std::ctype<char>::char_type *__hi","qual_name_offset":35,"short_name_offset":35,"short_name_size":4,"hover":"","comments":"","spell":"1031:52-1031:56|1031:35-1031:56|1026|-1","type":14753062342232613330,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":1312246699287162396,"detailed_name":"const std::ctype::char_type *__hi","qual_name_offset":29,"short_name_offset":29,"short_name_size":4,"hover":"","comments":"","spell":"636:68-636:72|636:51-636:72|1026|-1","type":2029653507280428489,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":1313310501484004556,"detailed_name":"bool __v","qual_name_offset":5,"short_name_offset":5,"short_name_size":3,"hover":"","comments":"","spell":"2510:68-2510:71|2510:63-2510:71|1026|-1","type":98,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":1473930908068732709,"detailed_name":"const std::__ctype_abstract_base::char_type *__hi","qual_name_offset":45,"short_name_offset":45,"short_name_size":4,"hover":"","comments":"","spell":"202:65-202:69|202:48-202:69|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["203:44-203:48|4|-1"]},{"usr":1526791579571669231,"detailed_name":"std::__num_base::_S_iplus","qual_name_offset":0,"short_name_offset":17,"short_name_size":8,"hover":"std::__num_base::_S_iplus = 1","comments":"","spell":"1579:7-1579:15|1579:7-1579:15|1026|-1","type":8118321725494135046,"kind":22,"parent_kind":5,"storage":0,"declarations":[],"uses":[]},{"usr":1573813191948791414,"detailed_name":"const std::ctype<char>::char_type *__hi","qual_name_offset":35,"short_name_offset":35,"short_name_size":4,"hover":"","comments":"","spell":"852:49-852:53|852:32-852:53|1026|-1","type":14753062342232613330,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["853:39-853:43|12|-1"]},{"usr":1589066372149969490,"detailed_name":"std::num_put::iter_type __s","qual_name_offset":24,"short_name_offset":24,"short_name_size":3,"hover":"","comments":"","spell":"2523:24-2523:27|2523:14-2523:27|1026|-1","type":9714744024952045946,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2525:30-2525:33|4|-1"]},{"usr":1692029967116471310,"detailed_name":"wint_t std::ctype<wchar_t>::_M_widen[256]","qual_name_offset":7,"short_name_offset":28,"short_name_size":8,"hover":"","comments":"","spell":"1200:33-1200:41|1200:7-1200:77|1026|-1","type":1937583197752425301,"kind":8,"parent_kind":5,"storage":0,"declarations":[],"uses":[]},{"usr":1783767679850426021,"detailed_name":"bool std::__numpunct_cache::_M_allocated","qual_name_offset":5,"short_name_offset":28,"short_name_size":12,"hover":"","comments":"","spell":"1619:15-1619:27|1619:7-1619:27|1026|-1","type":98,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1626:30-1626:42|20|-1","1645:11-1645:23|12|-1"]},{"usr":1796003549327337952,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"1999:54-1999:58|1999:44-1999:58|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2001:42-2001:46|4|-1"]},{"usr":1826228237240752349,"detailed_name":"std::size_t __grouping_size","qual_name_offset":12,"short_name_offset":12,"short_name_size":15,"hover":"","comments":"","spell":"2473:53-2473:68|2473:46-2473:68|1026|-1","type":107,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":1851162546725616061,"detailed_name":"std::size_t __refs","qual_name_offset":12,"short_name_offset":12,"short_name_size":6,"hover":"std::size_t __refs = 0","comments":"","spell":"1488:46-1488:52|1488:39-1488:56|1026|-1","type":107,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":["1489:35-1489:41|4|-1"]},{"usr":1948612308457651798,"detailed_name":"std::__num_base::_S_ox","qual_name_offset":0,"short_name_offset":17,"short_name_size":5,"hover":"std::__num_base::_S_ox = 2","comments":"","spell":"1554:2-1554:7|1554:2-1554:7|1026|-1","type":6941766153757428009,"kind":22,"parent_kind":5,"storage":0,"declarations":[],"uses":[]},{"usr":1968890942540779061,"detailed_name":"char __mod","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"1591:62-1591:67|1591:57-1591:67|1026|-1","type":110,"kind":253,"parent_kind":254,"storage":0,"declarations":[],"uses":[]},{"usr":2028195670754370125,"detailed_name":"const std::__ctype_abstract_base::char_type *__lo","qual_name_offset":45,"short_name_offset":45,"short_name_size":4,"hover":"","comments":"","spell":"589:34-589:38|589:17-589:38|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":2046087308395404539,"detailed_name":"const std::ctype::char_type *__hi","qual_name_offset":29,"short_name_offset":29,"short_name_size":4,"hover":"","comments":"","spell":"652:52-652:56|652:35-652:56|1026|-1","type":2029653507280428489,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":2123304468136201353,"detailed_name":"bool __del","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"bool __del = false","comments":"","spell":"731:62-731:67|731:57-731:75|1026|-1","type":98,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":[]},{"usr":2146968964984647905,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2374:36-2374:40|2374:26-2374:40|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2375:34-2375:38|4|-1"]},{"usr":2165004714357853599,"detailed_name":"std::__num_base::_S_oudigits_end = _S_oudigits + 16","qual_name_offset":0,"short_name_offset":17,"short_name_size":15,"hover":"","comments":"","spell":"1559:2-1559:17|1559:2-1559:36|1026|-1","type":6941766153757428009,"kind":22,"parent_kind":5,"storage":0,"declarations":[],"uses":["1562:12-1562:27|4|-1"]},{"usr":2200814033583944148,"detailed_name":"int __ret","qual_name_offset":4,"short_name_offset":4,"short_name_size":5,"hover":"int __ret = -1","comments":"","spell":"2162:8-2162:13|2162:4-2162:18|2|-1","type":114,"kind":13,"parent_kind":6,"storage":0,"declarations":[],"uses":["2166:3-2166:8|20|-1","2171:3-2171:8|20|-1","2173:3-2173:8|20|-1","2175:3-2175:8|20|-1","2177:11-2177:16|4|-1"]},{"usr":2217226982243471813,"detailed_name":"std::ctype::mask __m","qual_name_offset":17,"short_name_offset":17,"short_name_size":3,"hover":"","comments":"","spell":"630:18-630:21|630:13-630:21|1026|-1","type":15612257525702208121,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":2300377235921037004,"detailed_name":"std::num_put::char_type __fill","qual_name_offset":24,"short_name_offset":24,"short_name_size":6,"hover":"","comments":"","spell":"2469:55-2469:61|2469:45-2469:61|1026|-1","type":18263523835391732858,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":2352515848605700955,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2139:54-2139:58|2139:44-2139:58|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2141:42-2141:46|4|-1"]},{"usr":2382560669291292876,"detailed_name":"std::__ctype_abstract_base::char_type __c","qual_name_offset":38,"short_name_offset":38,"short_name_size":3,"hover":"","comments":"","spell":"378:33-378:36|378:23-378:36|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":2382917168043123437,"detailed_name":"int __s","qual_name_offset":4,"short_name_offset":4,"short_name_size":3,"hover":"","comments":"","spell":"119:41-119:44|119:13-119:44|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":[]},{"usr":2486741979033787722,"detailed_name":"const std::__ctype_abstract_base::char_type *__hi","qual_name_offset":45,"short_name_offset":45,"short_name_size":4,"hover":"","comments":"","spell":"436:22-436:26|436:5-436:26|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":2496735545085350586,"detailed_name":"std::__ctype_abstract_base::char_type *__lo","qual_name_offset":39,"short_name_offset":39,"short_name_size":4,"hover":"","comments":"","spell":"470:29-470:33|470:18-470:33|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":2536682936717778199,"detailed_name":"const std::ctype::char_type *__hi","qual_name_offset":29,"short_name_offset":29,"short_name_size":4,"hover":"","comments":"","spell":"640:22-640:26|640:5-640:26|1026|-1","type":2029653507280428489,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":2643664357475771359,"detailed_name":"std::num_get::iter_type __end","qual_name_offset":24,"short_name_offset":24,"short_name_size":5,"hover":"","comments":"","spell":"2051:37-2051:42|2051:27-2051:42|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2053:35-2053:40|4|-1"]},{"usr":2646277830853969668,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2388:36-2388:40|2388:26-2388:40|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2390:34-2390:38|4|-1"]},{"usr":2671970871706763024,"detailed_name":"const _CharT *__first","qual_name_offset":14,"short_name_offset":14,"short_name_size":7,"hover":"","comments":"","spell":"111:20-111:27|111:6-111:27|1026|-1","type":10042642843407977652,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":[]},{"usr":2714259739179403991,"detailed_name":"std::num_get::iter_type __end","qual_name_offset":24,"short_name_offset":24,"short_name_size":5,"hover":"","comments":"","spell":"2101:37-2101:42|2101:27-2101:42|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2103:35-2103:40|4|-1"]},{"usr":2781821069402960151,"detailed_name":"mutable char std::ctype<char>::_M_widen[256]","qual_name_offset":13,"short_name_offset":31,"short_name_size":8,"hover":"","comments":"","spell":"696:21-696:29|696:7-696:65|1026|-1","type":0,"kind":8,"parent_kind":5,"storage":0,"declarations":[],"uses":["875:11-875:19|4|-1"]},{"usr":2805007077060053405,"detailed_name":"std::num_put::char_type __fill","qual_name_offset":24,"short_name_offset":24,"short_name_size":6,"hover":"","comments":"","spell":"2523:55-2523:61|2523:45-2523:61|1026|-1","type":18263523835391732858,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2525:41-2525:47|4|-1"]},{"usr":2807934521983662814,"detailed_name":"std::ctype_base::mask *__vec","qual_name_offset":23,"short_name_offset":23,"short_name_size":5,"hover":"","comments":"","spell":"398:12-398:17|398:6-398:17|1026|-1","type":11345864896923813661,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":2814625647162185740,"detailed_name":"std::streamsize __newlen","qual_name_offset":16,"short_name_offset":16,"short_name_size":8,"hover":"","comments":"","spell":"99:40-99:48|99:29-99:48|1026|-1","type":115,"kind":253,"parent_kind":254,"storage":0,"declarations":[],"uses":[]},{"usr":2825082461653912652,"detailed_name":"std::ctype<wchar_t>::char_type __c","qual_name_offset":31,"short_name_offset":31,"short_name_size":3,"hover":"","comments":"","spell":"1254:33-1254:36|1254:23-1254:36|1026|-1","type":112,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":3097522887991013427,"detailed_name":"std::__num_base::_S_iE = _S_izero + 20","qual_name_offset":0,"short_name_offset":17,"short_name_size":5,"hover":"","comments":"","spell":"1584:7-1584:12|1584:7-1584:28|1026|-1","type":8118321725494135046,"kind":22,"parent_kind":5,"storage":0,"declarations":[],"uses":[]},{"usr":3139344591368878723,"detailed_name":"const std::ctype::char_type *__hi","qual_name_offset":29,"short_name_offset":29,"short_name_size":4,"hover":"","comments":"","spell":"633:53-633:57|633:36-633:57|1026|-1","type":2029653507280428489,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":3172769401457047314,"detailed_name":"std::__num_base::_S_iend = 26","qual_name_offset":0,"short_name_offset":17,"short_name_size":7,"hover":"","comments":"","spell":"1585:7-1585:14|1585:7-1585:19|1026|-1","type":8118321725494135046,"kind":22,"parent_kind":5,"storage":0,"declarations":[],"uses":["1617:41-1617:48|4|-1"]},{"usr":3238881814187245505,"detailed_name":"_CharT __fill","qual_name_offset":7,"short_name_offset":7,"short_name_size":6,"hover":"","comments":"","spell":"98:37-98:43|98:30-98:43|1026|-1","type":2851098347063733566,"kind":253,"parent_kind":254,"storage":0,"declarations":[],"uses":[]},{"usr":3261341569341945001,"detailed_name":"std::num_get::iter_type __end","qual_name_offset":24,"short_name_offset":24,"short_name_size":5,"hover":"","comments":"","spell":"2225:41-2225:46|2225:31-2225:46|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2227:38-2227:43|4|-1"]},{"usr":3318406615906317495,"detailed_name":"const std::ctype<wchar_t>::char_type *__hi","qual_name_offset":38,"short_name_offset":38,"short_name_size":4,"hover":"","comments":"","spell":"1467:57-1467:61|1467:40-1467:61|1026|-1","type":3021622049330364817,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":3337523177392381304,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","type":0,"kind":0,"parent_kind":0,"storage":0,"declarations":[],"uses":["1653:1-1653:31|64|-1"]},{"usr":3353060029802484849,"detailed_name":"std::num_put::char_type __fill","qual_name_offset":24,"short_name_offset":24,"short_name_size":6,"hover":"","comments":"","spell":"2378:52-2378:58|2378:42-2378:58|1026|-1","type":18263523835391732858,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2380:40-2380:46|4|-1"]},{"usr":3457865465505528787,"detailed_name":"const char *__lo","qual_name_offset":12,"short_name_offset":12,"short_name_size":4,"hover":"","comments":"","spell":"543:28-543:32|543:16-543:32|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":3518633734519793037,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"98:24-98:28|98:14-98:28|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":254,"storage":0,"declarations":[],"uses":[]},{"usr":3585702102568738012,"detailed_name":"std::size_t __refs","qual_name_offset":12,"short_name_offset":12,"short_name_size":6,"hover":"std::size_t __refs = 0","comments":"","spell":"1621:31-1621:37|1621:24-1621:41|1026|-1","type":107,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":["1622:15-1622:21|4|-1"]},{"usr":3650380495935822874,"detailed_name":"std::__ctype_abstract_base::char_type *__lo","qual_name_offset":39,"short_name_offset":39,"short_name_size":4,"hover":"","comments":"","spell":"247:26-247:30|247:15-247:30|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["248:33-248:37|4|-1"]},{"usr":3664157432466147869,"detailed_name":"unsigned long long &__v","qual_name_offset":20,"short_name_offset":20,"short_name_size":3,"hover":"","comments":"","spell":"2063:50-2063:53|2063:30-2063:53|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2064:55-2064:58|4|-1"]},{"usr":3790237944373647457,"detailed_name":"std::__num_base::_S_odigits","qual_name_offset":0,"short_name_offset":17,"short_name_size":10,"hover":"std::__num_base::_S_odigits = 4","comments":"","spell":"1556:2-1556:12|1556:2-1556:12|1026|-1","type":6941766153757428009,"kind":22,"parent_kind":5,"storage":0,"declarations":[],"uses":["1557:19-1557:29|4|-1","1560:10-1560:20|4|-1"]},{"usr":3866837155704917971,"detailed_name":"void *&__v","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2140:37-2140:40|2140:30-2140:40|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2141:55-2141:58|4|-1"]},{"usr":3895434824968413489,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2462:36-2462:40|2462:26-2462:40|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2464:34-2464:38|4|-1"]},{"usr":3933132807422180491,"detailed_name":"char __mod","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"2470:9-2470:14|2470:4-2470:14|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":3988589090488944954,"detailed_name":"long long &__v","qual_name_offset":11,"short_name_offset":11,"short_name_size":3,"hover":"","comments":"","spell":"2237:44-2237:47|2237:33-2237:47|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2238:58-2238:61|4|-1"]},{"usr":3989087402944464694,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2101:54-2101:58|2101:44-2101:58|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2103:42-2103:46|4|-1"]},{"usr":4065234606701248373,"detailed_name":"std::num_put::iter_type __s","qual_name_offset":24,"short_name_offset":24,"short_name_size":3,"hover":"","comments":"","spell":"2517:24-2517:27|2517:14-2517:27|1026|-1","type":9714744024952045946,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2519:30-2519:33|4|-1"]},{"usr":4086496863718173267,"detailed_name":"char *__to","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"965:28-965:32|965:22-965:32|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["970:25-970:29|12|-1","975:47-975:51|12|-1"]},{"usr":4347981667971745708,"detailed_name":"_CharT2 __c","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2183:55-2183:58|2183:47-2183:58|1026|-1","type":16712173755383311235,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2186:69-2186:72|4|-1"]},{"usr":4355473358714518742,"detailed_name":"ios_base::iostate &__err","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2216:26-2216:31|2216:7-2216:31|1026|-1","type":2712928445144601234,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2217:51-2217:56|4|-1"]},{"usr":4371517928047820079,"detailed_name":"char __dfault","qual_name_offset":5,"short_name_offset":5,"short_name_size":8,"hover":"","comments":"","spell":"665:8-665:16|665:3-665:16|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":4384152006661700970,"detailed_name":"std::__num_base::_S_oX","qual_name_offset":0,"short_name_offset":17,"short_name_size":5,"hover":"std::__num_base::_S_oX = 3","comments":"","spell":"1555:2-1555:7|1555:2-1555:7|1026|-1","type":6941766153757428009,"kind":22,"parent_kind":5,"storage":0,"declarations":[],"uses":[]},{"usr":4404858975050863374,"detailed_name":"_GLIBCXX_NUM_CXX11_FACETS","qual_name_offset":0,"short_name_offset":0,"short_name_size":25,"hover":"#define _GLIBCXX_NUM_CXX11_FACETS 16","comments":"","spell":"57:11-57:36|57:11-57:39|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":4459066730978302481,"detailed_name":"std::__c_locale __cloc","qual_name_offset":16,"short_name_offset":16,"short_name_size":6,"hover":"","comments":"","spell":"731:24-731:30|731:13-731:30|1026|-1","type":14775529620120560523,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":[]},{"usr":4490604731206545563,"detailed_name":"static locale::id id","qual_name_offset":7,"short_name_offset":15,"short_name_size":2,"hover":"","comments":"The facet id for ctype<char>","type":702300912587928919,"kind":8,"parent_kind":5,"storage":2,"declarations":["703:32-703:34|703:7-703:34|1025|-1"],"uses":[]},{"usr":4574333252061652505,"detailed_name":"const std::locale &__loc","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2605:39-2605:44|2605:25-2605:44|1026|-1","type":15288937763540599420,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2606:40-2606:45|4|-1"]},{"usr":4736458205211827183,"detailed_name":"unsigned short &__v","qual_name_offset":16,"short_name_offset":16,"short_name_size":3,"hover":"","comments":"","spell":"2221:49-2221:52|2221:33-2221:52|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2222:58-2222:61|4|-1"]},{"usr":4744074001102392485,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2517:39-2517:43|2517:29-2517:43|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2519:35-2519:39|4|-1"]},{"usr":4775694019330734052,"detailed_name":"std::ctype<char>::char_type *__to","qual_name_offset":29,"short_name_offset":29,"short_name_size":4,"hover":"","comments":"","spell":"899:60-899:64|899:49-899:64|1026|-1","type":14753062342232613330,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["904:25-904:29|12|-1","909:36-909:40|12|-1"]},{"usr":4777658385300861264,"detailed_name":"ios_base::iostate &__err","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2063:23-2063:28|2063:4-2063:28|1026|-1","type":2712928445144601234,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2064:48-2064:53|4|-1"]},{"usr":4832799490718442148,"detailed_name":"std::num_get::iter_type __in","qual_name_offset":24,"short_name_offset":24,"short_name_size":4,"hover":"","comments":"","spell":"1999:21-1999:25|1999:11-1999:25|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2001:29-2001:33|4|-1"]},{"usr":4854595208829106637,"detailed_name":"const std::__ctype_abstract_base::char_type *__hi","qual_name_offset":45,"short_name_offset":45,"short_name_size":4,"hover":"","comments":"","spell":"247:49-247:53|247:32-247:53|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["248:39-248:43|4|-1"]},{"usr":4920744125574418096,"detailed_name":"std::ctype<char>::char_type *__to","qual_name_offset":29,"short_name_offset":29,"short_name_size":4,"hover":"","comments":"","spell":"1107:63-1107:67|1107:52-1107:67|1026|-1","type":14753062342232613330,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["1110:21-1110:25|12|-1"]},{"usr":4966663278766048860,"detailed_name":"const std::num_put::char_type *__cs","qual_name_offset":31,"short_name_offset":31,"short_name_size":4,"hover":"","comments":"","spell":"2489:42-2489:46|2489:25-2489:46|1026|-1","type":18263523835391732858,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":4983874329168025487,"detailed_name":"const std::__ctype_abstract_base::char_type *__lo","qual_name_offset":45,"short_name_offset":45,"short_name_size":4,"hover":"","comments":"","spell":"416:45-416:49|416:28-416:49|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":4984714927455917474,"detailed_name":"std::size_t __refs","qual_name_offset":12,"short_name_offset":12,"short_name_size":6,"hover":"std::size_t __refs = 0","comments":"","spell":"1525:46-1525:52|1525:39-1525:56|1026|-1","type":107,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":[]},{"usr":4988385557807759790,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2215:58-2215:62|2215:48-2215:62|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2217:45-2217:49|4|-1"]},{"usr":5001224215377034831,"detailed_name":"char *__to","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"1468:24-1468:28|1468:18-1468:28|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":5156297212367350360,"detailed_name":"std::num_get::iter_type __in","qual_name_offset":24,"short_name_offset":24,"short_name_size":4,"hover":"","comments":"","spell":"2057:21-2057:25|2057:11-2057:25|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2059:29-2059:33|4|-1"]},{"usr":5160985973662615108,"detailed_name":"const std::ctype::char_type *__lo","qual_name_offset":29,"short_name_offset":29,"short_name_size":4,"hover":"","comments":"","spell":"633:30-633:34|633:13-633:34|1026|-1","type":2029653507280428489,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":5184444726064554957,"detailed_name":"std::size_t std::__numpunct_cache::_M_grouping_size","qual_name_offset":12,"short_name_offset":35,"short_name_size":16,"hover":"","comments":"","spell":"1598:41-1598:57|1598:7-1598:57|1026|-1","type":107,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1622:40-1622:56|20|-1"]},{"usr":5223310353516582365,"detailed_name":"const _CharT *__olds","qual_name_offset":14,"short_name_offset":14,"short_name_size":6,"hover":"","comments":"","spell":"99:21-99:27|99:7-99:27|1026|-1","type":2851098347063733566,"kind":253,"parent_kind":254,"storage":0,"declarations":[],"uses":[]},{"usr":5270361464044836279,"detailed_name":"char __dfault","qual_name_offset":5,"short_name_offset":5,"short_name_size":8,"hover":"","comments":"","spell":"331:34-331:42|331:29-331:42|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["332:37-332:45|4|-1"]},{"usr":5346761864174131980,"detailed_name":"const void *__v","qual_name_offset":12,"short_name_offset":12,"short_name_size":3,"hover":"","comments":"","spell":"2463:16-2463:19|2463:4-2463:19|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2464:48-2464:51|4|-1"]},{"usr":5357651829738404589,"detailed_name":"static const std::ctype_base::mask std::ctype_base::alpha","qual_name_offset":35,"short_name_offset":52,"short_name_size":5,"hover":"static const std::ctype_base::mask std::ctype_base::alpha = _ISalpha","comments":"","type":0,"kind":8,"parent_kind":0,"storage":2,"declarations":[],"uses":["2600:62-2600:67|4|-1"]},{"usr":5368422753934092143,"detailed_name":"const char *__hi","qual_name_offset":12,"short_name_offset":12,"short_name_size":4,"hover":"","comments":"","spell":"1418:46-1418:50|1418:34-1418:50|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":5467566163275638201,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2051:54-2051:58|2051:44-2051:58|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2053:42-2053:46|4|-1"]},{"usr":5534060272384858871,"detailed_name":"std::__c_locale __cloc","qual_name_offset":16,"short_name_offset":16,"short_name_size":6,"hover":"std::__c_locale __cloc = 0","comments":"","spell":"1879:41-1879:47|1879:30-1879:51|1026|-1","type":14775529620120560523,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":5541757119013870315,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2041:54-2041:58|2041:44-2041:58|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2043:42-2043:46|4|-1"]},{"usr":5588788830209033634,"detailed_name":"std::ctype_base::mask __m","qual_name_offset":22,"short_name_offset":22,"short_name_size":3,"hover":"","comments":"","spell":"416:23-416:26|416:18-416:26|1026|-1","type":105,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":5606332387391821676,"detailed_name":"_GLIBCXX_NUM_UNICODE_FACETS","qual_name_offset":0,"short_name_offset":0,"short_name_size":27,"hover":"#define _GLIBCXX_NUM_UNICODE_FACETS 2","comments":"","spell":"65:10-65:37|65:10-65:39|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":5615263205155538908,"detailed_name":"_CharT __sep","qual_name_offset":7,"short_name_offset":7,"short_name_size":5,"hover":"","comments":"","spell":"109:40-109:45|109:33-109:45|1026|-1","type":10042642843407977652,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":[]},{"usr":5658437682343140316,"detailed_name":"const _CharT2 *__zero","qual_name_offset":15,"short_name_offset":15,"short_name_size":6,"hover":"","comments":"","spell":"2183:25-2183:31|2183:10-2183:31|1026|-1","type":16712173755383311235,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2186:54-2186:60|4|-1","2189:22-2189:28|4|-1"]},{"usr":5690163379994490832,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2437:36-2437:40|2437:26-2437:40|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2438:34-2438:38|4|-1"]},{"usr":5713058350698160665,"detailed_name":"const char *__grouping","qual_name_offset":12,"short_name_offset":12,"short_name_size":10,"hover":"","comments":"","spell":"2483:32-2483:42|2483:20-2483:42|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":5717576992180752527,"detailed_name":"_CharT __c","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2581:20-2581:23|2581:13-2581:23|1026|-1","type":16741579036334433047,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2582:69-2582:72|4|-1"]},{"usr":5740199999309572441,"detailed_name":"std::ctype_base::mask __m","qual_name_offset":22,"short_name_offset":22,"short_name_size":3,"hover":"","comments":"","spell":"169:15-169:18|169:10-169:18|1026|-1","type":105,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["170:28-170:31|4|-1"]},{"usr":5743928307534422492,"detailed_name":"const std::__ctype_abstract_base::char_type *__hi","qual_name_offset":45,"short_name_offset":45,"short_name_size":4,"hover":"","comments":"","spell":"276:49-276:53|276:32-276:53|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["277:39-277:43|4|-1"]},{"usr":5751782586947661919,"detailed_name":"std::__ctype_abstract_base::char_type __c","qual_name_offset":38,"short_name_offset":38,"short_name_size":3,"hover":"","comments":"","spell":"486:28-486:31|486:18-486:31|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":5855869789817794258,"detailed_name":"std::num_get::iter_type __beg","qual_name_offset":24,"short_name_offset":24,"short_name_size":5,"hover":"","comments":"","spell":"2215:24-2215:29|2215:14-2215:29|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2217:31-2217:36|4|-1"]},{"usr":5936477810023521604,"detailed_name":"const char *__lo","qual_name_offset":12,"short_name_offset":12,"short_name_size":4,"hover":"","comments":"","spell":"1418:28-1418:32|1418:16-1418:32|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":5963316310647590337,"detailed_name":"const _CharT *std::__numpunct_cache::_M_truename","qual_name_offset":14,"short_name_offset":37,"short_name_size":11,"hover":"","comments":"","spell":"1600:23-1600:34|1600:7-1600:34|1026|-1","type":2793105535086544185,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1624:2-1624:13|20|-1","1648:14-1648:25|4|-1"]},{"usr":5971857024333281062,"detailed_name":"const _CharT *__last","qual_name_offset":14,"short_name_offset":14,"short_name_size":6,"hover":"","comments":"","spell":"111:43-111:49|111:29-111:49|1026|-1","type":10042642843407977652,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":[]},{"usr":5986239516187724467,"detailed_name":"std::num_put::char_type *__cs","qual_name_offset":25,"short_name_offset":25,"short_name_size":4,"hover":"","comments":"","spell":"2475:19-2475:23|2475:8-2475:23|1026|-1","type":18263523835391732858,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":6002163974365108117,"detailed_name":"long &__v","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2037:36-2037:39|2037:30-2037:39|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2038:55-2038:58|4|-1"]},{"usr":6008708831893644851,"detailed_name":"std::__ctype_abstract_base::char_type *__lo","qual_name_offset":39,"short_name_offset":39,"short_name_size":4,"hover":"","comments":"","spell":"503:29-503:33|503:18-503:33|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":6022931721873719510,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2062:54-2062:58|2062:44-2062:58|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2064:42-2064:46|4|-1"]},{"usr":6061310647850667723,"detailed_name":"mutable char std::ctype<char>::_M_widen_ok","qual_name_offset":13,"short_name_offset":31,"short_name_size":11,"hover":"","comments":"","spell":"695:21-695:32|695:7-695:32|1026|-1","type":110,"kind":8,"parent_kind":5,"storage":0,"declarations":[],"uses":["874:6-874:17|12|-1","901:6-901:17|12|-1","907:7-907:18|12|-1"]},{"usr":6109823504395452955,"detailed_name":"int &__len","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"2475:30-2475:35|2475:25-2475:35|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":6114826376852056370,"detailed_name":"mutable char std::ctype<char>::_M_narrow[256]","qual_name_offset":13,"short_name_offset":31,"short_name_size":9,"hover":"","comments":"","spell":"697:21-697:30|697:7-697:66|1026|-1","type":0,"kind":8,"parent_kind":5,"storage":0,"declarations":[],"uses":["933:6-933:15|4|-1","934:11-934:20|4|-1","937:4-937:13|4|-1"]},{"usr":6169670098411972098,"detailed_name":"std::num_put::char_type __fill","qual_name_offset":24,"short_name_offset":24,"short_name_size":6,"hover":"","comments":"","spell":"2332:52-2332:58|2332:42-2332:58|1026|-1","type":18263523835391732858,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2333:40-2333:46|4|-1"]},{"usr":6185494546980619006,"detailed_name":"std::size_t __len","qual_name_offset":12,"short_name_offset":12,"short_name_size":5,"hover":"","comments":"","spell":"2160:33-2160:38|2160:26-2160:38|1026|-1","type":107,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2163:8-2163:13|12|-1","2165:64-2165:69|4|-1"]},{"usr":6194690108426087317,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","type":0,"kind":0,"parent_kind":0,"storage":0,"declarations":[],"uses":["1936:1-1936:30|64|-1"]},{"usr":6214031977144805890,"detailed_name":"_CharT std::__numpunct_cache::_M_decimal_point","qual_name_offset":7,"short_name_offset":30,"short_name_size":16,"hover":"","comments":"","spell":"1604:17-1604:33|1604:7-1604:33|1026|-1","type":2793105535086544185,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1625:24-1625:40|20|-1"]},{"usr":6221904498979693381,"detailed_name":"long double __v","qual_name_offset":12,"short_name_offset":12,"short_name_size":3,"hover":"","comments":"","spell":"2442:16-2442:19|2442:4-2442:19|1026|-1","type":145,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2443:48-2443:51|4|-1"]},{"usr":6223961250160338186,"detailed_name":"bool __del","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"bool __del = false","comments":"","spell":"718:43-718:48|718:38-718:56|1026|-1","type":98,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":[]},{"usr":6251880847200755215,"detailed_name":"bool &__v","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2000:36-2000:39|2000:30-2000:39|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2001:55-2001:58|4|-1"]},{"usr":6294333407967711432,"detailed_name":"ios_base::iostate &__err","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2052:23-2052:28|2052:4-2052:28|1026|-1","type":2712928445144601234,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2053:48-2053:53|4|-1"]},{"usr":6352699783899431700,"detailed_name":"std::ctype_base::mask __m","qual_name_offset":22,"short_name_offset":22,"short_name_size":3,"hover":"","comments":"","spell":"773:20-773:23|773:15-773:23|1026|-1","type":105,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":6415683383722445261,"detailed_name":"ios_base::iostate &__err","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2102:23-2102:28|2102:4-2102:28|1026|-1","type":2712928445144601234,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2103:48-2103:53|4|-1"]},{"usr":6436833767748063564,"detailed_name":"float &__v","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2097:37-2097:40|2097:30-2097:40|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2098:55-2098:58|4|-1"]},{"usr":6467782596759521390,"detailed_name":"std::num_put::char_type __fill","qual_name_offset":24,"short_name_offset":24,"short_name_size":6,"hover":"","comments":"","spell":"2528:55-2528:61|2528:45-2528:61|1026|-1","type":18263523835391732858,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2530:41-2530:47|4|-1"]},{"usr":6480380167969252660,"detailed_name":"const char *__lo","qual_name_offset":12,"short_name_offset":12,"short_name_size":4,"hover":"","comments":"","spell":"312:25-312:29|312:13-312:29|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["313:31-313:35|4|-1"]},{"usr":6511843690790826059,"detailed_name":"const std::locale &__loc","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2611:39-2611:44|2611:25-2611:44|1026|-1","type":15288937763540599420,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2612:40-2612:45|4|-1"]},{"usr":6532769459820567118,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2523:39-2523:43|2523:29-2523:43|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2525:35-2525:39|4|-1"]},{"usr":6560612998942892613,"detailed_name":"const char *__s","qual_name_offset":12,"short_name_offset":12,"short_name_size":3,"hover":"","comments":"","spell":"1521:32-1521:35|1521:20-1521:35|1026|-1","type":0,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":[]},{"usr":6569450363059334646,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2236:58-2236:62|2236:48-2236:62|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2238:45-2238:49|4|-1"]},{"usr":6585426806066768877,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2332:36-2332:40|2332:26-2332:40|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2333:34-2333:38|4|-1"]},{"usr":6608545119805269745,"detailed_name":"std::__c_locale std::ctype<wchar_t>::_M_c_locale_ctype","qual_name_offset":16,"short_name_offset":37,"short_name_size":17,"hover":"","comments":"","spell":"1195:19-1195:36|1195:7-1195:36|1026|-1","type":14775529620120560523,"kind":8,"parent_kind":5,"storage":0,"declarations":[],"uses":[]},{"usr":6613537333750016548,"detailed_name":"char __dfault","qual_name_offset":5,"short_name_offset":5,"short_name_size":8,"hover":"","comments":"","spell":"1468:8-1468:16|1468:3-1468:16|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":6613674628121391175,"detailed_name":"std::num_get::iter_type __end","qual_name_offset":24,"short_name_offset":24,"short_name_size":5,"hover":"","comments":"","spell":"2046:37-2046:42|2046:27-2046:42|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2048:35-2048:40|4|-1"]},{"usr":6677847543209040525,"detailed_name":"std::size_t __refs","qual_name_offset":12,"short_name_offset":12,"short_name_size":6,"hover":"std::size_t __refs = 0","comments":"","spell":"1722:42-1722:48|1722:35-1722:52|1026|-1","type":107,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":["1723:15-1723:21|4|-1"]},{"usr":6721077712765280979,"detailed_name":"char __c","qual_name_offset":5,"short_name_offset":5,"short_name_size":3,"hover":"","comments":"","spell":"293:18-293:21|293:13-293:21|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["294:31-294:34|4|-1"]},{"usr":6806464518263136484,"detailed_name":"const std::ctype<wchar_t>::char_type *__hi","qual_name_offset":38,"short_name_offset":38,"short_name_size":4,"hover":"","comments":"","spell":"1343:52-1343:56|1343:35-1343:56|1026|-1","type":3021622049330364817,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":6812847077228563690,"detailed_name":"_CharT std::__numpunct_cache::_M_atoms_out[36]","qual_name_offset":7,"short_name_offset":30,"short_name_size":12,"hover":"","comments":"A list of valid numeric literals for output: in the standard\n\"C\" locale, this is \"-+xX0123456789abcdef0123456789ABCDEF\".\nThis array contains the chars after having been passed\nthrough the current locale's ctype<_CharT>.widen().","spell":"1611:17-1611:29|1611:7-1611:50|1026|-1","type":2793105535086544185,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":[]},{"usr":6820837520326248082,"detailed_name":"const std::ios_base &__io","qual_name_offset":21,"short_name_offset":21,"short_name_size":4,"hover":"","comments":"","spell":"1591:37-1591:41|1591:21-1591:41|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":254,"storage":0,"declarations":[],"uses":[]},{"usr":6886551179205802933,"detailed_name":"std::ctype::char_type *__dest","qual_name_offset":23,"short_name_offset":23,"short_name_size":6,"hover":"","comments":"","spell":"658:63-658:69|658:52-658:69|1026|-1","type":2029653507280428489,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":6898814986709156768,"detailed_name":"const char *__lo","qual_name_offset":12,"short_name_offset":12,"short_name_size":4,"hover":"","comments":"","spell":"787:38-787:42|787:26-787:42|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":6899245516622591077,"detailed_name":"static const std::ctype_base::mask std::ctype_base::lower","qual_name_offset":35,"short_name_offset":52,"short_name_size":5,"hover":"static const std::ctype_base::mask std::ctype_base::lower = _ISlower","comments":"","type":0,"kind":8,"parent_kind":0,"storage":2,"declarations":[],"uses":["2594:62-2594:67|4|-1"]},{"usr":6988805236909162798,"detailed_name":"static const char *std::__num_base::_S_atoms_out","qual_name_offset":19,"short_name_offset":36,"short_name_size":12,"hover":"","comments":"A list of valid numeric literals for output.  This array\ncontains chars that will be passed through the current locale's\nctype<_CharT>.widen() and then used to render numbers.\nFor the standard \"C\" locale, this is\n\"-+xX0123456789abcdef0123456789ABCDEF\".","type":0,"kind":8,"parent_kind":5,"storage":2,"declarations":["1570:24-1570:36|1570:5-1570:36|1025|-1"],"uses":[]},{"usr":6992302690926682734,"detailed_name":"const std::ctype<wchar_t>::char_type *__hi","qual_name_offset":38,"short_name_offset":38,"short_name_size":4,"hover":"","comments":"","spell":"1310:22-1310:26|1310:5-1310:26|1026|-1","type":3021622049330364817,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":7002064101980804692,"detailed_name":"const std::__ctype_abstract_base::char_type *__hi","qual_name_offset":45,"short_name_offset":45,"short_name_size":4,"hover":"","comments":"","spell":"589:57-589:61|589:40-589:61|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":7057407949192927141,"detailed_name":"char __dfault","qual_name_offset":5,"short_name_offset":5,"short_name_size":8,"hover":"","comments":"","spell":"931:34-931:42|931:29-931:42|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["935:34-935:42|12|-1","936:13-936:21|12|-1"]},{"usr":7192068418149748312,"detailed_name":"std::num_get::iter_type __in","qual_name_offset":24,"short_name_offset":24,"short_name_size":4,"hover":"","comments":"","spell":"2101:21-2101:25|2101:11-2101:25|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2103:29-2103:33|4|-1"]},{"usr":7243004124573416401,"detailed_name":"const std::__ctype_abstract_base::char_type *__lo","qual_name_offset":45,"short_name_offset":45,"short_name_size":4,"hover":"","comments":"","spell":"202:42-202:46|202:25-202:46|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["203:38-203:42|4|-1"]},{"usr":7258385488146663961,"detailed_name":"const char *__grouping","qual_name_offset":12,"short_name_offset":12,"short_name_size":10,"hover":"","comments":"","spell":"2473:34-2473:44|2473:22-2473:44|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":7268553489912133742,"detailed_name":"std::ctype<char>::char_type *__lo","qual_name_offset":29,"short_name_offset":29,"short_name_size":4,"hover":"","comments":"","spell":"1064:29-1064:33|1064:18-1064:33|1026|-1","type":14753062342232613330,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":7295331079316347541,"detailed_name":"_CharT *__news","qual_name_offset":8,"short_name_offset":8,"short_name_size":6,"hover":"","comments":"","spell":"98:53-98:59|98:45-98:59|1026|-1","type":2851098347063733566,"kind":253,"parent_kind":254,"storage":0,"declarations":[],"uses":[]},{"usr":7362498555238865462,"detailed_name":"std::size_t __refs","qual_name_offset":12,"short_name_offset":12,"short_name_size":6,"hover":"std::size_t __refs = 0","comments":"","spell":"732:13-732:19|732:6-732:23|1026|-1","type":107,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":[]},{"usr":7393207723580392118,"detailed_name":"const std::ctype::char_type *__lo","qual_name_offset":29,"short_name_offset":29,"short_name_size":4,"hover":"","comments":"","spell":"664:34-664:38|664:17-664:38|1026|-1","type":2029653507280428489,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":7397387709993812165,"detailed_name":"_GLIBCXX_NUM_FACETS","qual_name_offset":0,"short_name_offset":0,"short_name_size":19,"hover":"#define _GLIBCXX_NUM_FACETS 28","comments":"","spell":"56:11-56:30|56:11-56:33|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":7400466302497417739,"detailed_name":"std::num_get::iter_type __end","qual_name_offset":24,"short_name_offset":24,"short_name_size":5,"hover":"","comments":"","spell":"2215:41-2215:46|2215:31-2215:46|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2217:38-2217:43|4|-1"]},{"usr":7401326259251277722,"detailed_name":"unsigned long long __v","qual_name_offset":19,"short_name_offset":19,"short_name_size":3,"hover":"","comments":"","spell":"2529:26-2529:29|2529:7-2529:29|1026|-1","type":108,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2530:49-2530:52|4|-1"]},{"usr":7404908578900274550,"detailed_name":"std::ctype<char>::char_type __c","qual_name_offset":28,"short_name_offset":28,"short_name_size":3,"hover":"","comments":"","spell":"1047:28-1047:31|1047:18-1047:31|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":7455340079495145092,"detailed_name":"std::ctype<wchar_t>::char_type __c","qual_name_offset":31,"short_name_offset":31,"short_name_size":3,"hover":"","comments":"","spell":"1441:27-1441:30|1441:17-1441:30|1026|-1","type":112,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":7499925934651115140,"detailed_name":"std::streamsize __w","qual_name_offset":16,"short_name_offset":16,"short_name_size":3,"hover":"","comments":"","spell":"2488:43-2488:46|2488:32-2488:46|1026|-1","type":115,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":7501222582826488995,"detailed_name":"std::num_get::iter_type __beg","qual_name_offset":24,"short_name_offset":24,"short_name_size":5,"hover":"","comments":"","spell":"2225:24-2225:29|2225:14-2225:29|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2227:31-2227:36|4|-1"]},{"usr":7518811152776487468,"detailed_name":"const std::locale &__loc","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2617:40-2617:45|2617:26-2617:45|1026|-1","type":15288937763540599420,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2618:40-2618:45|4|-1"]},{"usr":7582803756466104169,"detailed_name":"const std::num_put::char_type *__p","qual_name_offset":31,"short_name_offset":31,"short_name_size":3,"hover":"","comments":"","spell":"2474:42-2474:45|2474:25-2474:45|1026|-1","type":18263523835391732858,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":7617214938861009027,"detailed_name":"ios_base::iostate &__err","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2047:23-2047:28|2047:4-2047:28|1026|-1","type":2712928445144601234,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2048:48-2048:53|4|-1"]},{"usr":7619808841743892646,"detailed_name":"long double &__v","qual_name_offset":13,"short_name_offset":13,"short_name_size":3,"hover":"","comments":"","spell":"2107:43-2107:46|2107:30-2107:46|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2108:55-2108:58|4|-1"]},{"usr":7627701503418294264,"detailed_name":"std::num_put::iter_type __s","qual_name_offset":24,"short_name_offset":24,"short_name_size":3,"hover":"","comments":"","spell":"2378:21-2378:24|2378:11-2378:24|1026|-1","type":9714744024952045946,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2380:29-2380:32|4|-1"]},{"usr":7656195007118979823,"detailed_name":"char std::ctype<wchar_t>::_M_narrow[128]","qual_name_offset":5,"short_name_offset":26,"short_name_size":9,"hover":"","comments":"","spell":"1199:33-1199:42|1199:7-1199:47|1026|-1","type":0,"kind":8,"parent_kind":5,"storage":0,"declarations":[],"uses":[]},{"usr":7657097865002547582,"detailed_name":"int std::ctype<wchar_t>::_M_bit[16]","qual_name_offset":4,"short_name_offset":25,"short_name_size":6,"hover":"","comments":"Pre-computed elements for do_is.","spell":"1203:33-1203:39|1203:7-1203:39|1026|-1","type":0,"kind":8,"parent_kind":5,"storage":0,"declarations":[],"uses":[]},{"usr":7661809896932727243,"detailed_name":"char __dfault","qual_name_offset":5,"short_name_offset":5,"short_name_size":8,"hover":"","comments":"","spell":"1441:37-1441:45|1441:32-1441:45|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":7677273496774786455,"detailed_name":"int __m","qual_name_offset":4,"short_name_offset":4,"short_name_size":3,"hover":"","comments":"","spell":"1309:24-1309:27|1309:19-1309:27|1026|-1","type":114,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":7703514651570718800,"detailed_name":"std::__is_char::__value = 0","qual_name_offset":0,"short_name_offset":16,"short_name_size":7,"hover":"","comments":"","type":0,"kind":22,"parent_kind":0,"storage":0,"declarations":[],"uses":["2159:59-2159:66|4|-1","2181:60-2181:67|4|-1"]},{"usr":7747389661017681150,"detailed_name":"char __dfault","qual_name_offset":5,"short_name_offset":5,"short_name_size":8,"hover":"","comments":"","spell":"564:37-564:45|564:32-564:45|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":7806242515961868423,"detailed_name":"const std::ctype<wchar_t>::char_type *__lo","qual_name_offset":38,"short_name_offset":38,"short_name_size":4,"hover":"","comments":"","spell":"1273:30-1273:34|1273:13-1273:34|1026|-1","type":3021622049330364817,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":7843187863662269941,"detailed_name":"char *__fptr","qual_name_offset":6,"short_name_offset":6,"short_name_size":6,"hover":"","comments":"","spell":"1591:49-1591:55|1591:43-1591:55|1026|-1","type":0,"kind":253,"parent_kind":254,"storage":0,"declarations":[],"uses":[]},{"usr":7950458029445537101,"detailed_name":"std::num_put::char_type *__cs","qual_name_offset":25,"short_name_offset":25,"short_name_size":4,"hover":"","comments":"","spell":"2485:17-2485:21|2485:6-2485:21|1026|-1","type":18263523835391732858,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":8046977102101463602,"detailed_name":"const std::locale &__loc","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2569:39-2569:44|2569:25-2569:44|1026|-1","type":15288937763540599420,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2570:40-2570:45|4|-1"]},{"usr":8047294701859082143,"detailed_name":"std::ctype::char_type __c","qual_name_offset":22,"short_name_offset":22,"short_name_size":3,"hover":"","comments":"","spell":"649:28-649:31|649:18-649:31|1026|-1","type":2029653507280428489,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":8078893050581192665,"detailed_name":"const std::string &__s","qual_name_offset":19,"short_name_offset":19,"short_name_size":3,"hover":"","comments":"","spell":"1488:34-1488:37|1488:20-1488:37|1026|-1","type":14151982074805896770,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":["1489:22-1489:25|4|-1"]},{"usr":8143447709723047557,"detailed_name":"static const std::ctype_base::mask std::ctype_base::punct","qual_name_offset":35,"short_name_offset":52,"short_name_size":5,"hover":"static const std::ctype_base::mask std::ctype_base::punct = _ISpunct","comments":"","type":0,"kind":8,"parent_kind":0,"storage":2,"declarations":[],"uses":["2612:62-2612:67|4|-1"]},{"usr":8151825516583917660,"detailed_name":"const std::ctype_base::mask *std::ctype<char>::_M_table","qual_name_offset":29,"short_name_offset":47,"short_name_size":8,"hover":"","comments":"","spell":"694:20-694:28|694:7-694:28|1026|-1","type":11345864896923813661,"kind":8,"parent_kind":5,"storage":0,"declarations":[],"uses":["984:16-984:24|12|-1"]},{"usr":8214594355050968254,"detailed_name":"char __c","qual_name_offset":5,"short_name_offset":5,"short_name_size":3,"hover":"","comments":"","spell":"1396:21-1396:24|1396:16-1396:24|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":8430600878971789053,"detailed_name":"std::ctype::char_type __c","qual_name_offset":22,"short_name_offset":22,"short_name_size":3,"hover":"","comments":"","spell":"630:33-630:36|630:23-630:36|1026|-1","type":2029653507280428489,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":8454581280100493722,"detailed_name":"const std::__ctype_abstract_base::char_type *__lo","qual_name_offset":45,"short_name_offset":45,"short_name_size":4,"hover":"","comments":"","spell":"218:43-218:47|218:26-218:47|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["219:39-219:43|4|-1"]},{"usr":8486100008457897315,"detailed_name":"std::num_get::iter_type __in","qual_name_offset":24,"short_name_offset":24,"short_name_size":4,"hover":"","comments":"","spell":"2096:21-2096:25|2096:11-2096:25|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2098:29-2098:33|4|-1"]},{"usr":8506717472900863416,"detailed_name":"_ValueT __v","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2480:17-2480:20|2480:9-2480:20|1026|-1","type":17186741394483650438,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":8507193225375562582,"detailed_name":"std::streamsize __oldlen","qual_name_offset":16,"short_name_offset":16,"short_name_size":8,"hover":"","comments":"","spell":"99:61-99:69|99:50-99:69|1026|-1","type":115,"kind":253,"parent_kind":254,"storage":0,"declarations":[],"uses":[]},{"usr":8669548456862807185,"detailed_name":"std::ctype_base::mask __m","qual_name_offset":22,"short_name_offset":22,"short_name_size":3,"hover":"","comments":"","spell":"202:20-202:23|202:15-202:23|1026|-1","type":105,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["203:33-203:36|4|-1"]},{"usr":8806959524917914869,"detailed_name":"std::num_put::char_type __fill","qual_name_offset":24,"short_name_offset":24,"short_name_size":6,"hover":"","comments":"","spell":"2437:52-2437:58|2437:42-2437:58|1026|-1","type":18263523835391732858,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2438:40-2438:46|4|-1"]},{"usr":8882333327564454091,"detailed_name":"const std::ctype<wchar_t>::char_type *__hi","qual_name_offset":38,"short_name_offset":38,"short_name_size":4,"hover":"","comments":"","spell":"1273:53-1273:57|1273:36-1273:57|1026|-1","type":3021622049330364817,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":8884267710544531838,"detailed_name":"std::__ctype_abstract_base::char_type *__lo","qual_name_offset":39,"short_name_offset":39,"short_name_size":4,"hover":"","comments":"","spell":"276:26-276:30|276:15-276:30|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["277:33-277:37|4|-1"]},{"usr":8927363903109329314,"detailed_name":"std::__ctype_abstract_base::char_type __c","qual_name_offset":38,"short_name_offset":38,"short_name_size":3,"hover":"","comments":"","spell":"564:27-564:30|564:17-564:30|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":8931202103927165946,"detailed_name":"std::num_put::char_type __fill","qual_name_offset":24,"short_name_offset":24,"short_name_size":6,"hover":"","comments":"","spell":"2462:52-2462:58|2462:42-2462:58|1026|-1","type":18263523835391732858,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2464:40-2464:46|4|-1"]},{"usr":8934036019340018964,"detailed_name":"unsigned short &__v","qual_name_offset":16,"short_name_offset":16,"short_name_size":3,"hover":"","comments":"","spell":"2042:46-2042:49|2042:30-2042:49|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2043:55-2043:58|4|-1"]},{"usr":8957128892040479044,"detailed_name":"static locale::id id","qual_name_offset":7,"short_name_offset":15,"short_name_size":2,"hover":"","comments":"Data Members:\n The facet id for ctype<wchar_t>","type":702300912587928919,"kind":8,"parent_kind":5,"storage":2,"declarations":["1209:26-1209:28|1209:7-1209:28|1025|-1"],"uses":[]},{"usr":8993883199505369765,"detailed_name":"std::num_get::iter_type __in","qual_name_offset":24,"short_name_offset":24,"short_name_size":4,"hover":"","comments":"","spell":"2036:21-2036:25|2036:11-2036:25|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2038:29-2038:33|4|-1"]},{"usr":9044589875311823112,"detailed_name":"_CharT __c","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2629:20-2629:23|2629:13-2629:23|1026|-1","type":340036287509349296,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2630:69-2630:72|4|-1"]},{"usr":9122154680684014290,"detailed_name":"ios_base::iostate &__err","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2226:26-2226:31|2226:7-2226:31|1026|-1","type":2712928445144601234,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2227:51-2227:56|4|-1"]},{"usr":9130095752982269795,"detailed_name":"const char *__lo","qual_name_offset":12,"short_name_offset":12,"short_name_size":4,"hover":"","comments":"","spell":"773:37-773:41|773:25-773:41|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":9138593118977091855,"detailed_name":"char __dfault","qual_name_offset":5,"short_name_offset":5,"short_name_size":8,"hover":"","comments":"","spell":"965:12-965:20|965:7-965:20|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["975:37-975:45|12|-1"]},{"usr":9184063328501079310,"detailed_name":"const std::locale &__loc","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2593:39-2593:44|2593:25-2593:44|1026|-1","type":15288937763540599420,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2594:40-2594:45|4|-1"]},{"usr":9272462294707724447,"detailed_name":"const std::locale &__loc","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2643:39-2643:44|2643:25-2643:44|1026|-1","type":15288937763540599420,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2644:40-2644:45|4|-1"]},{"usr":9322206737724757747,"detailed_name":"_CharT __c","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2643:20-2643:23|2643:13-2643:23|1026|-1","type":783152717115624891,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2644:55-2644:58|4|-1"]},{"usr":9325388749134370313,"detailed_name":"std::ctype<char>::char_type __c","qual_name_offset":28,"short_name_offset":28,"short_name_size":3,"hover":"","comments":"","spell":"835:25-835:28|835:15-835:28|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["836:33-836:36|12|-1"]},{"usr":9330695798730943687,"detailed_name":"std::size_t __refs","qual_name_offset":12,"short_name_offset":12,"short_name_size":6,"hover":"std::size_t __refs = 0","comments":"","spell":"1503:44-1503:50|1503:37-1503:54|1026|-1","type":107,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":[]},{"usr":9388354896318761297,"detailed_name":"std::ctype<char>::char_type __c","qual_name_offset":28,"short_name_offset":28,"short_name_size":3,"hover":"","comments":"","spell":"931:24-931:27|931:14-931:27|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["933:43-933:46|12|-1","934:48-934:51|12|-1","935:29-935:32|12|-1","937:41-937:44|12|-1"]},{"usr":9388890967857035715,"detailed_name":"const char *__lo","qual_name_offset":12,"short_name_offset":12,"short_name_size":4,"hover":"","comments":"","spell":"1107:28-1107:32|1107:16-1107:32|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["1109:31-1109:35|12|-1","1110:27-1110:31|12|-1","1110:40-1110:44|12|-1"]},{"usr":9417536204660097212,"detailed_name":"std::num_get::iter_type __end","qual_name_offset":24,"short_name_offset":24,"short_name_size":5,"hover":"","comments":"","spell":"2062:37-2062:42|2062:27-2062:42|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2064:35-2064:40|4|-1"]},{"usr":9506192309511797001,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2046:54-2046:58|2046:44-2046:58|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2048:42-2048:46|4|-1"]},{"usr":9564619426786055341,"detailed_name":"std::num_put::char_type __fill","qual_name_offset":24,"short_name_offset":24,"short_name_size":6,"hover":"","comments":"","spell":"2517:55-2517:61|2517:45-2517:61|1026|-1","type":18263523835391732858,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2519:41-2519:47|4|-1"]},{"usr":9575226163305996288,"detailed_name":"std::num_put::char_type __fill","qual_name_offset":24,"short_name_offset":24,"short_name_size":6,"hover":"","comments":"","spell":"2374:52-2374:58|2374:42-2374:58|1026|-1","type":18263523835391732858,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2375:40-2375:46|4|-1"]},{"usr":9590619509200087215,"detailed_name":"const int __m","qual_name_offset":10,"short_name_offset":10,"short_name_size":3,"hover":"","comments":"","spell":"1234:38-1234:41|1234:27-1234:41|1026|-1","type":114,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":9623542607197804486,"detailed_name":"const std::string &__s","qual_name_offset":19,"short_name_offset":19,"short_name_size":3,"hover":"","comments":"","spell":"1925:37-1925:40|1925:23-1925:40|1026|-1","type":14151982074805896770,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":["1926:25-1926:28|4|-1"]},{"usr":9643377458360276381,"detailed_name":"mutable char std::ctype<char>::_M_narrow_ok","qual_name_offset":13,"short_name_offset":31,"short_name_size":12,"hover":"","comments":"0 uninitialized, 1 init,","spell":"698:21-698:33|698:7-698:33|1026|-1","type":110,"kind":8,"parent_kind":5,"storage":0,"declarations":[],"uses":["967:23-967:35|12|-1","973:7-973:19|12|-1"]},{"usr":9686664867834126932,"detailed_name":"char __dfault","qual_name_offset":5,"short_name_offset":5,"short_name_size":8,"hover":"","comments":"","spell":"1134:37-1134:45|1134:32-1134:45|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":9700905794709205273,"detailed_name":"std::ctype<char>::char_type __c","qual_name_offset":28,"short_name_offset":28,"short_name_size":3,"hover":"","comments":"","spell":"1134:27-1134:30|1134:17-1134:30|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["1135:16-1135:19|12|-1"]},{"usr":9783761536600616486,"detailed_name":"std::ctype::char_type *__lo","qual_name_offset":23,"short_name_offset":23,"short_name_size":4,"hover":"","comments":"","spell":"646:29-646:33|646:18-646:33|1026|-1","type":2029653507280428489,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":9866591459020429049,"detailed_name":"std::num_get::iter_type __beg","qual_name_offset":24,"short_name_offset":24,"short_name_size":5,"hover":"","comments":"","spell":"2230:24-2230:29|2230:14-2230:29|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2232:31-2232:36|4|-1"]},{"usr":9867449840196084146,"detailed_name":"std::__ctype_abstract_base::char_type __c","qual_name_offset":38,"short_name_offset":38,"short_name_size":3,"hover":"","comments":"","spell":"261:25-261:28|261:15-261:28|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["262:33-262:36|4|-1"]},{"usr":9944073178305342254,"detailed_name":"const std::ctype<wchar_t>::char_type *__hi","qual_name_offset":38,"short_name_offset":38,"short_name_size":4,"hover":"","comments":"","spell":"1376:52-1376:56|1376:35-1376:56|1026|-1","type":3021622049330364817,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":9952139653772385520,"detailed_name":"std::num_get::iter_type __end","qual_name_offset":24,"short_name_offset":24,"short_name_size":5,"hover":"","comments":"","spell":"2106:37-2106:42|2106:27-2106:42|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2108:35-2108:40|4|-1"]},{"usr":10001110855633366529,"detailed_name":"std::__c_locale __tmp","qual_name_offset":16,"short_name_offset":16,"short_name_size":5,"hover":"","comments":"","spell":"1916:17-1916:22|1916:6-1916:22|2|-1","type":14775529620120560523,"kind":13,"parent_kind":9,"storage":0,"declarations":[],"uses":["1917:31-1917:36|4|-1","1918:35-1918:40|4|-1","1919:32-1919:37|4|-1"]},{"usr":10012448334155544702,"detailed_name":"std::__num_base::_S_izero","qual_name_offset":0,"short_name_offset":17,"short_name_size":8,"hover":"std::__num_base::_S_izero = 4","comments":"","spell":"1582:7-1582:15|1582:7-1582:15|1026|-1","type":8118321725494135046,"kind":22,"parent_kind":5,"storage":0,"declarations":[],"uses":["1583:15-1583:23|4|-1","1584:15-1584:23|4|-1"]},{"usr":10048428430047109672,"detailed_name":"int __m","qual_name_offset":4,"short_name_offset":4,"short_name_size":3,"hover":"","comments":"","spell":"1291:23-1291:26|1291:18-1291:26|1026|-1","type":114,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":10060511052660409022,"detailed_name":"const std::ctype::char_type *__hi","qual_name_offset":29,"short_name_offset":29,"short_name_size":4,"hover":"","comments":"","spell":"646:52-646:56|646:35-646:56|1026|-1","type":2029653507280428489,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":10076485872576190403,"detailed_name":"std::num_put::char_type __sep","qual_name_offset":24,"short_name_offset":24,"short_name_size":5,"hover":"","comments":"","spell":"2484:16-2484:21|2484:6-2484:21|1026|-1","type":18263523835391732858,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":10120071710305279532,"detailed_name":"static locale::id id","qual_name_offset":7,"short_name_offset":15,"short_name_size":2,"hover":"static locale::id id = id","comments":"Numpunct facet id.","spell":"2277:42-2277:44|2276:3-2277:44|1026|-1","type":702300912587928919,"kind":8,"parent_kind":5,"storage":2,"declarations":["1963:27-1963:29|1963:7-1963:29|1025|-1"],"uses":[]},{"usr":10156251295682887050,"detailed_name":"ios_base::iostate &__err","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2140:23-2140:28|2140:4-2140:28|1026|-1","type":2712928445144601234,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2141:48-2141:53|4|-1"]},{"usr":10186961462915689554,"detailed_name":"char __dfault","qual_name_offset":5,"short_name_offset":5,"short_name_size":8,"hover":"","comments":"","spell":"1161:8-1161:16|1161:3-1161:16|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":10220243806813576736,"detailed_name":"ios_base::iostate &__err","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2058:23-2058:28|2058:4-2058:28|1026|-1","type":2712928445144601234,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2059:48-2059:53|4|-1"]},{"usr":10259620691928663319,"detailed_name":"char __c","qual_name_offset":5,"short_name_offset":5,"short_name_size":3,"hover":"","comments":"","spell":"1084:21-1084:24|1084:16-1084:24|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["1085:16-1085:19|12|-1"]},{"usr":10295847893734745278,"detailed_name":"std::num_get::iter_type __end","qual_name_offset":24,"short_name_offset":24,"short_name_size":5,"hover":"","comments":"","spell":"2041:37-2041:42|2041:27-2041:42|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2043:35-2043:40|4|-1"]},{"usr":10347866103299081001,"detailed_name":"std::num_get::iter_type __in","qual_name_offset":24,"short_name_offset":24,"short_name_size":4,"hover":"","comments":"","spell":"2041:21-2041:25|2041:11-2041:25|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2043:29-2043:33|4|-1"]},{"usr":10348964861567074327,"detailed_name":"bool std::ctype<wchar_t>::_M_narrow_ok","qual_name_offset":5,"short_name_offset":26,"short_name_size":12,"hover":"","comments":"Pre-computed narrowed and widened chars.","spell":"1198:33-1198:45|1198:7-1198:45|1026|-1","type":98,"kind":8,"parent_kind":5,"storage":0,"declarations":[],"uses":[]},{"usr":10382638110836620330,"detailed_name":"ios_base::iostate &__err","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2037:23-2037:28|2037:4-2037:28|1026|-1","type":2712928445144601234,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2038:48-2038:53|4|-1"]},{"usr":10469937654430108441,"detailed_name":"std::num_get::iter_type __in","qual_name_offset":24,"short_name_offset":24,"short_name_size":4,"hover":"","comments":"","spell":"2139:21-2139:25|2139:11-2139:25|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2141:29-2141:33|4|-1"]},{"usr":10585377049236246399,"detailed_name":"std::ctype<char>::char_type *__lo","qual_name_offset":29,"short_name_offset":29,"short_name_size":4,"hover":"","comments":"","spell":"852:26-852:30|852:15-852:30|1026|-1","type":14753062342232613330,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["853:33-853:37|12|-1"]},{"usr":10676967130900290721,"detailed_name":"std::num_put::char_type __sep","qual_name_offset":24,"short_name_offset":24,"short_name_size":5,"hover":"","comments":"","spell":"2474:18-2474:23|2474:8-2474:23|1026|-1","type":18263523835391732858,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":10682816027433802759,"detailed_name":"const std::locale &__loc","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2575:39-2575:44|2575:25-2575:44|1026|-1","type":15288937763540599420,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2576:40-2576:45|4|-1"]},{"usr":10737852565477696367,"detailed_name":"const std::ctype<char>::char_type *__lo","qual_name_offset":35,"short_name_offset":35,"short_name_size":4,"hover":"","comments":"","spell":"964:31-964:35|964:14-964:35|1026|-1","type":14753062342232613330,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["969:35-969:39|12|-1","970:31-970:35|12|-1","970:44-970:48|12|-1","975:25-975:29|12|-1"]},{"usr":10737902627561813998,"detailed_name":"std::__ctype_abstract_base::char_type __c","qual_name_offset":38,"short_name_offset":38,"short_name_size":3,"hover":"","comments":"","spell":"232:25-232:28|232:15-232:28|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["233:33-233:36|4|-1"]},{"usr":10762150730812457512,"detailed_name":"const std::locale &__loc","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2587:39-2587:44|2587:25-2587:44|1026|-1","type":15288937763540599420,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2588:40-2588:45|4|-1"]},{"usr":10781530840581491727,"detailed_name":"static const std::ctype_base::mask std::ctype_base::xdigit","qual_name_offset":35,"short_name_offset":52,"short_name_size":6,"hover":"static const std::ctype_base::mask std::ctype_base::xdigit = _ISxdigit","comments":"","type":0,"kind":8,"parent_kind":0,"storage":2,"declarations":[],"uses":["2618:62-2618:68|4|-1"]},{"usr":10875149396507022054,"detailed_name":"std::size_t __refs","qual_name_offset":12,"short_name_offset":12,"short_name_size":6,"hover":"std::size_t __refs = 0","comments":"","spell":"1507:46-1507:52|1507:39-1507:56|1026|-1","type":107,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":[]},{"usr":10956542746536256325,"detailed_name":"int __ret","qual_name_offset":4,"short_name_offset":4,"short_name_size":5,"hover":"int __ret = -1","comments":"","spell":"2185:8-2185:13|2185:4-2185:18|2|-1","type":114,"kind":13,"parent_kind":6,"storage":0,"declarations":[],"uses":["2189:8-2189:13|20|-1","2190:12-2190:17|12|-1","2191:3-2191:8|4|-1","2193:11-2193:16|4|-1"]},{"usr":10987355291942981656,"detailed_name":"_LOCALE_FACETS_H","qual_name_offset":0,"short_name_offset":0,"short_name_size":16,"hover":"#define _LOCALE_FACETS_H 1","comments":"","spell":"35:9-35:25|35:9-35:27|2|-1","type":0,"kind":255,"parent_kind":1,"storage":0,"declarations":[],"uses":[]},{"usr":10988795943466635300,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2220:58-2220:62|2220:48-2220:62|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2222:45-2222:49|4|-1"]},{"usr":11006071037473366967,"detailed_name":"std::__ctype_abstract_base::char_type __c","qual_name_offset":38,"short_name_offset":38,"short_name_size":3,"hover":"","comments":"","spell":"169:30-169:33|169:20-169:33|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["170:33-170:36|4|-1"]},{"usr":11040957329443915776,"detailed_name":"long &__v","qual_name_offset":6,"short_name_offset":6,"short_name_size":3,"hover":"","comments":"","spell":"2216:39-2216:42|2216:33-2216:42|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2217:58-2217:61|4|-1"]},{"usr":11077377551371497338,"detailed_name":"const std::ctype<char>::char_type *__hi","qual_name_offset":35,"short_name_offset":35,"short_name_size":4,"hover":"","comments":"","spell":"819:49-819:53|819:32-819:53|1026|-1","type":14753062342232613330,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["820:39-820:43|12|-1"]},{"usr":11143492693806725561,"detailed_name":"std::num_put::char_type __fill","qual_name_offset":24,"short_name_offset":24,"short_name_size":6,"hover":"","comments":"","spell":"2388:52-2388:58|2388:42-2388:58|1026|-1","type":18263523835391732858,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2390:40-2390:46|4|-1"]},{"usr":11152576743136099844,"detailed_name":"std::num_put::iter_type __s","qual_name_offset":24,"short_name_offset":24,"short_name_size":3,"hover":"","comments":"","spell":"2441:21-2441:24|2441:11-2441:24|1026|-1","type":9714744024952045946,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2443:29-2443:32|4|-1"]},{"usr":11194562196001097024,"detailed_name":"unsigned int &__v","qual_name_offset":14,"short_name_offset":14,"short_name_size":3,"hover":"","comments":"","spell":"2226:47-2226:50|2226:33-2226:50|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2227:58-2227:61|4|-1"]},{"usr":11225629202751246829,"detailed_name":"std::ctype<char>::char_type __c","qual_name_offset":28,"short_name_offset":28,"short_name_size":3,"hover":"","comments":"","spell":"802:25-802:28|802:15-802:28|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["803:33-803:36|12|-1"]},{"usr":11246506959003795607,"detailed_name":"std::ctype<wchar_t>::char_type *__to","qual_name_offset":32,"short_name_offset":32,"short_name_size":4,"hover":"","comments":"","spell":"1418:63-1418:67|1418:52-1418:67|1026|-1","type":3021622049330364817,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":11263306465336552878,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2528:39-2528:43|2528:29-2528:43|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2530:35-2530:39|4|-1"]},{"usr":11277078696199195066,"detailed_name":"char __c","qual_name_offset":5,"short_name_offset":5,"short_name_size":3,"hover":"","comments":"","spell":"872:18-872:21|872:13-872:21|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["875:47-875:50|12|-1","877:24-877:27|12|-1"]},{"usr":11281590148149097445,"detailed_name":"const std::ctype::char_type *__lo","qual_name_offset":29,"short_name_offset":29,"short_name_size":4,"hover":"","comments":"","spell":"636:45-636:49|636:28-636:49|1026|-1","type":2029653507280428489,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":11311290310185803309,"detailed_name":"static const std::ctype_base::mask std::ctype_base::graph","qual_name_offset":35,"short_name_offset":52,"short_name_size":5,"hover":"static const std::ctype_base::mask std::ctype_base::graph = _ISalpha | _ISdigit | _ISpunct","comments":"","type":0,"kind":8,"parent_kind":0,"storage":2,"declarations":[],"uses":["2630:62-2630:67|4|-1"]},{"usr":11311898511379222225,"detailed_name":"const std::__ctype_abstract_base::char_type *__lo","qual_name_offset":45,"short_name_offset":45,"short_name_size":4,"hover":"","comments":"","spell":"353:31-353:35|353:14-353:35|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["355:32-355:36|4|-1"]},{"usr":11328836237310727952,"detailed_name":"const std::ctype<char>::char_type *__lo","qual_name_offset":35,"short_name_offset":35,"short_name_size":4,"hover":"","comments":"","spell":"1160:34-1160:38|1160:17-1160:38|1026|-1","type":14753062342232613330,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["1163:31-1163:35|12|-1","1164:27-1164:31|12|-1","1164:40-1164:44|12|-1"]},{"usr":11358193028621213453,"detailed_name":"std::num_put::iter_type __s","qual_name_offset":24,"short_name_offset":24,"short_name_size":3,"hover":"","comments":"","spell":"2437:21-2437:24|2437:11-2437:24|1026|-1","type":9714744024952045946,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2438:29-2438:32|4|-1"]},{"usr":11362880392927495530,"detailed_name":"std::__num_base::_S_oend = _S_oudigits_end","qual_name_offset":0,"short_name_offset":17,"short_name_size":7,"hover":"","comments":"","spell":"1562:2-1562:9|1562:2-1562:27|1026|-1","type":6941766153757428009,"kind":22,"parent_kind":5,"storage":0,"declarations":[],"uses":["1611:42-1611:49|4|-1"]},{"usr":11372936247879305797,"detailed_name":"std::num_put::iter_type __s","qual_name_offset":24,"short_name_offset":24,"short_name_size":3,"hover":"","comments":"","spell":"2528:24-2528:27|2528:14-2528:27|1026|-1","type":9714744024952045946,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2530:30-2530:33|4|-1"]},{"usr":11392124707144827634,"detailed_name":"std::size_t __refs","qual_name_offset":12,"short_name_offset":12,"short_name_size":6,"hover":"std::size_t __refs = 0","comments":"","spell":"1925:49-1925:55|1925:42-1925:59|1026|-1","type":107,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":["1926:38-1926:44|4|-1"]},{"usr":11419590692274003228,"detailed_name":"const std::ctype_base::mask *__table","qual_name_offset":29,"short_name_offset":29,"short_name_size":7,"hover":"const std::ctype_base::mask *__table = 0","comments":"","spell":"731:44-731:51|731:32-731:55|1026|-1","type":11345864896923813661,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":[]},{"usr":11425896928247963790,"detailed_name":"std::num_put::iter_type __s","qual_name_offset":24,"short_name_offset":24,"short_name_size":3,"hover":"","comments":"","spell":"2384:21-2384:24|2384:11-2384:24|1026|-1","type":9714744024952045946,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2385:29-2385:32|4|-1"]},{"usr":11507936265047579827,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2510:39-2510:43|2510:29-2510:43|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":11508026753460104001,"detailed_name":"std::num_put::char_type __fill","qual_name_offset":24,"short_name_offset":24,"short_name_size":6,"hover":"","comments":"","spell":"2441:52-2441:58|2441:42-2441:58|1026|-1","type":18263523835391732858,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2443:40-2443:46|4|-1"]},{"usr":11549250603111446269,"detailed_name":"std::__c_locale std::ctype<char>::_M_c_locale_ctype","qual_name_offset":16,"short_name_offset":34,"short_name_size":17,"hover":"","comments":"Data Members:","spell":"690:19-690:36|690:7-690:36|1026|-1","type":14775529620120560523,"kind":8,"parent_kind":5,"storage":0,"declarations":[],"uses":[]},{"usr":11562153835187740310,"detailed_name":"std::__num_base::_S_oe = _S_odigits + 14","qual_name_offset":0,"short_name_offset":17,"short_name_size":5,"hover":"","comments":"For scientific notation, 'e'","spell":"1560:2-1560:7|1560:2-1560:25|1026|-1","type":6941766153757428009,"kind":22,"parent_kind":5,"storage":0,"declarations":[],"uses":[]},{"usr":11616132608290134848,"detailed_name":"char __c","qual_name_offset":5,"short_name_offset":5,"short_name_size":3,"hover":"","comments":"","spell":"655:21-655:24|655:16-655:24|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":11650370299836274964,"detailed_name":"_CharT __c","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2599:20-2599:23|2599:13-2599:23|1026|-1","type":4430832183032181938,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2600:69-2600:72|4|-1"]},{"usr":11657938273876568463,"detailed_name":"std::ctype<char>::char_type __c","qual_name_offset":28,"short_name_offset":28,"short_name_size":3,"hover":"","comments":"","spell":"1014:28-1014:31|1014:18-1014:31|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":11702601022215098023,"detailed_name":"const std::num_get::char_type *__q","qual_name_offset":31,"short_name_offset":31,"short_name_size":3,"hover":"const std::num_get::char_type *__q = char_traits<_CharT2>::find(__zero, __len, __c)","comments":"","spell":"2186:21-2186:24|2186:4-2186:73|2|-1","type":9948867150301655399,"kind":13,"parent_kind":6,"storage":0,"declarations":[],"uses":["2187:8-2187:11|4|-1","2189:16-2189:19|4|-1"]},{"usr":11709715187799896373,"detailed_name":"_OutIter __s","qual_name_offset":9,"short_name_offset":9,"short_name_size":3,"hover":"","comments":"","spell":"129:22-129:25|129:13-129:25|1026|-1","type":6601165318175214004,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["131:47-131:50|28|-1","132:3-132:6|4|-1","133:14-133:17|4|-1"]},{"usr":11721097644128018158,"detailed_name":"unsigned long &__v","qual_name_offset":15,"short_name_offset":15,"short_name_size":3,"hover":"","comments":"","spell":"2052:45-2052:48|2052:30-2052:48|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2053:55-2053:58|4|-1"]},{"usr":11757214796361360964,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2225:58-2225:62|2225:48-2225:62|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2227:45-2227:49|4|-1"]},{"usr":11771438486446292244,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","type":0,"kind":0,"parent_kind":0,"storage":0,"declarations":[],"uses":["1934:1-1934:29|64|-1"]},{"usr":11817378192250406685,"detailed_name":"long long __v","qual_name_offset":10,"short_name_offset":10,"short_name_size":3,"hover":"","comments":"","spell":"2524:17-2524:20|2524:7-2524:20|1026|-1","type":116,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2525:49-2525:52|4|-1"]},{"usr":11899403611487706932,"detailed_name":"ios_base::iostate &__err","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2000:23-2000:28|2000:4-2000:28|1026|-1","type":2712928445144601234,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2001:48-2001:53|4|-1"]},{"usr":11900712588806683473,"detailed_name":"std::num_put::iter_type __s","qual_name_offset":24,"short_name_offset":24,"short_name_size":3,"hover":"","comments":"","spell":"2374:21-2374:24|2374:11-2374:24|1026|-1","type":9714744024952045946,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2375:29-2375:32|4|-1"]},{"usr":12013292041218960293,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","type":0,"kind":0,"parent_kind":0,"storage":0,"declarations":[],"uses":["52:1-52:33|64|-1","1542:1-1542:33|64|-1"]},{"usr":12044361255112002111,"detailed_name":"static const std::ctype_base::mask std::ctype_base::digit","qual_name_offset":35,"short_name_offset":52,"short_name_size":5,"hover":"static const std::ctype_base::mask std::ctype_base::digit = _ISdigit","comments":"","type":0,"kind":8,"parent_kind":0,"storage":2,"declarations":[],"uses":["2606:62-2606:67|4|-1"]},{"usr":12073266343361121682,"detailed_name":"std::num_get::iter_type __beg","qual_name_offset":24,"short_name_offset":24,"short_name_size":5,"hover":"","comments":"","spell":"2220:24-2220:29|2220:14-2220:29|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2222:31-2222:36|4|-1"]},{"usr":12082082429473871873,"detailed_name":"std::num_get::iter_type __beg","qual_name_offset":24,"short_name_offset":24,"short_name_size":5,"hover":"","comments":"","spell":"2236:24-2236:29|2236:14-2236:29|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2238:31-2238:36|4|-1"]},{"usr":12091102604337945067,"detailed_name":"std::__num_base::_S_oudigits = _S_odigits_end","qual_name_offset":0,"short_name_offset":17,"short_name_size":11,"hover":"","comments":"","spell":"1558:2-1558:13|1558:2-1558:30|1026|-1","type":6941766153757428009,"kind":22,"parent_kind":5,"storage":0,"declarations":[],"uses":["1559:20-1559:31|4|-1","1561:10-1561:21|4|-1"]},{"usr":12131733028280971544,"detailed_name":"static const std::ctype_base::mask std::ctype_base::space","qual_name_offset":35,"short_name_offset":52,"short_name_size":5,"hover":"static const std::ctype_base::mask std::ctype_base::space = _ISspace","comments":"","type":0,"kind":8,"parent_kind":0,"storage":2,"declarations":[],"uses":["2570:62-2570:67|4|-1"]},{"usr":12143845735739924443,"detailed_name":"_CharT2 __c","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2160:48-2160:51|2160:40-2160:51|1026|-1","type":15565147008365205914,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2165:12-2165:15|4|-1","2165:35-2165:38|4|-1","2166:11-2166:14|4|-1","2170:12-2170:15|4|-1","2170:35-2170:38|4|-1","2171:11-2171:14|4|-1","2172:17-2172:20|4|-1","2172:40-2172:43|4|-1","2173:17-2173:20|4|-1","2174:17-2174:20|4|-1","2174:40-2174:43|4|-1","2175:17-2175:20|4|-1"]},{"usr":12213102757231881555,"detailed_name":"static const std::ctype_base::mask std::ctype_base::alnum","qual_name_offset":35,"short_name_offset":52,"short_name_size":5,"hover":"static const std::ctype_base::mask std::ctype_base::alnum = _ISalpha | _ISdigit","comments":"","type":0,"kind":8,"parent_kind":0,"storage":2,"declarations":[],"uses":["2624:62-2624:67|4|-1"]},{"usr":12233924169647494137,"detailed_name":"_CharT std::__numpunct_cache::_M_thousands_sep","qual_name_offset":7,"short_name_offset":30,"short_name_size":16,"hover":"","comments":"","spell":"1605:17-1605:33|1605:7-1605:33|1026|-1","type":2793105535086544185,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1626:2-1626:18|20|-1"]},{"usr":12242779868760936593,"detailed_name":"ios_base::iostate &__err","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2242:26-2242:31|2242:7-2242:31|1026|-1","type":2712928445144601234,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2243:51-2243:56|4|-1"]},{"usr":12258030642153329786,"detailed_name":"std::ctype<wchar_t>::char_type *__lo","qual_name_offset":32,"short_name_offset":32,"short_name_size":4,"hover":"","comments":"","spell":"1343:29-1343:33|1343:18-1343:33|1026|-1","type":3021622049330364817,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":12261560240024460586,"detailed_name":"const char *__lo","qual_name_offset":12,"short_name_offset":12,"short_name_size":4,"hover":"","comments":"","spell":"899:25-899:29|899:13-899:29|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["903:35-903:39|12|-1","904:31-904:35|12|-1","904:44-904:48|12|-1","909:24-909:28|12|-1"]},{"usr":12296147626865426811,"detailed_name":"ios_base::iostate &__err","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2042:23-2042:28|2042:4-2042:28|1026|-1","type":2712928445144601234,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2043:48-2043:53|4|-1"]},{"usr":12394457319338098401,"detailed_name":"std::ctype::char_type *__lo","qual_name_offset":23,"short_name_offset":23,"short_name_size":4,"hover":"","comments":"","spell":"652:29-652:33|652:18-652:33|1026|-1","type":2029653507280428489,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":12422246231075698755,"detailed_name":"std::ctype_base::mask __m","qual_name_offset":22,"short_name_offset":22,"short_name_size":3,"hover":"","comments":"","spell":"218:21-218:24|218:16-218:24|1026|-1","type":105,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["219:34-219:37|4|-1"]},{"usr":12438062033184945207,"detailed_name":"const char *__s","qual_name_offset":12,"short_name_offset":12,"short_name_size":3,"hover":"","comments":"","spell":"1910:35-1910:38|1910:23-1910:38|1026|-1","type":0,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":["1913:23-1913:26|12|-1","1914:26-1914:29|12|-1","1917:38-1917:41|4|-1"]},{"usr":12449237587904174755,"detailed_name":"const char *__gbeg","qual_name_offset":12,"short_name_offset":12,"short_name_size":6,"hover":"","comments":"","spell":"110:18-110:24|110:6-110:24|1026|-1","type":0,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":[]},{"usr":12453339272148195431,"detailed_name":"static const std::ctype_base::mask std::ctype_base::print","qual_name_offset":35,"short_name_offset":52,"short_name_size":5,"hover":"static const std::ctype_base::mask std::ctype_base::print = _ISprint","comments":"","type":0,"kind":8,"parent_kind":0,"storage":2,"declarations":[],"uses":["2576:62-2576:67|4|-1"]},{"usr":12459480052940934495,"detailed_name":"const char *__lo","qual_name_offset":12,"short_name_offset":12,"short_name_size":4,"hover":"","comments":"","spell":"658:28-658:32|658:16-658:32|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":12487802903129854962,"detailed_name":"std::size_t __refs","qual_name_offset":12,"short_name_offset":12,"short_name_size":6,"hover":"std::size_t __refs = 0","comments":"","spell":"623:20-623:26|623:13-623:30|1026|-1","type":107,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":["623:64-623:70|4|-1"]},{"usr":12521999698056926907,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2479:37-2479:41|2479:27-2479:41|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":12562402245551871367,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","type":0,"kind":0,"parent_kind":0,"storage":0,"declarations":[],"uses":["1534:1-1534:31|64|-1","2652:1-2652:31|64|-1"]},{"usr":12562602456416352206,"detailed_name":"unsigned long __v","qual_name_offset":14,"short_name_offset":14,"short_name_size":3,"hover":"","comments":"","spell":"2379:18-2379:21|2379:4-2379:21|1026|-1","type":107,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2380:48-2380:51|4|-1"]},{"usr":12612465627228032980,"detailed_name":"char *__to","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"590:24-590:28|590:18-590:28|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":12613044412151380953,"detailed_name":"std::ctype_base::mask *__vec","qual_name_offset":23,"short_name_offset":23,"short_name_size":5,"hover":"","comments":"","spell":"186:62-186:67|186:56-186:67|1026|-1","type":11345864896923813661,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["187:40-187:45|4|-1"]},{"usr":12651950838408886392,"detailed_name":"const char *__lo","qual_name_offset":12,"short_name_offset":12,"short_name_size":4,"hover":"","comments":"","spell":"759:22-759:26|759:10-759:26|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":12661619166227132573,"detailed_name":"const std::__ctype_abstract_base::char_type *__lo","qual_name_offset":45,"short_name_offset":45,"short_name_size":4,"hover":"","comments":"","spell":"435:46-435:50|435:29-435:50|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":12671812491138581898,"detailed_name":"const std::__ctype_abstract_base::char_type *__lo","qual_name_offset":45,"short_name_offset":45,"short_name_size":4,"hover":"","comments":"","spell":"397:30-397:34|397:13-397:34|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":12684116186441779989,"detailed_name":"const std::locale &__loc","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2629:39-2629:44|2629:25-2629:44|1026|-1","type":15288937763540599420,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2630:40-2630:45|4|-1"]},{"usr":12708830565495861908,"detailed_name":"char *__to","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"665:24-665:28|665:18-665:28|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":12720096324826273908,"detailed_name":"const std::ctype<char>::char_type *__hi","qual_name_offset":35,"short_name_offset":35,"short_name_size":4,"hover":"","comments":"","spell":"964:54-964:58|964:37-964:58|1026|-1","type":14753062342232613330,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["969:27-969:31|12|-1","970:37-970:41|12|-1","971:13-971:17|12|-1","975:31-975:35|12|-1"]},{"usr":12748376759315454027,"detailed_name":"const char *__hi","qual_name_offset":12,"short_name_offset":12,"short_name_size":4,"hover":"","comments":"","spell":"658:46-658:50|658:34-658:50|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":12810618897075962507,"detailed_name":"const _CharT *__ws","qual_name_offset":14,"short_name_offset":14,"short_name_size":4,"hover":"","comments":"","spell":"129:41-129:45|129:27-129:45|1026|-1","type":4488806322037410780,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["132:9-132:13|4|-1"]},{"usr":12966560415995987769,"detailed_name":"const char *__hi","qual_name_offset":12,"short_name_offset":12,"short_name_size":4,"hover":"","comments":"","spell":"759:40-759:44|759:28-759:44|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":13043402101775413309,"detailed_name":"unsigned long long __v","qual_name_offset":19,"short_name_offset":19,"short_name_size":3,"hover":"","comments":"","spell":"2389:23-2389:26|2389:4-2389:26|1026|-1","type":108,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2390:48-2390:51|4|-1"]},{"usr":13049869503193919861,"detailed_name":"std::__num_base::_S_ix","qual_name_offset":0,"short_name_offset":17,"short_name_size":5,"hover":"std::__num_base::_S_ix = 2","comments":"","spell":"1580:7-1580:12|1580:7-1580:12|1026|-1","type":8118321725494135046,"kind":22,"parent_kind":5,"storage":0,"declarations":[],"uses":[]},{"usr":13067310252781701721,"detailed_name":"const std::ctype_base::mask *__table","qual_name_offset":29,"short_name_offset":29,"short_name_size":7,"hover":"const std::ctype_base::mask *__table = 0","comments":"","spell":"718:25-718:32|718:13-718:36|1026|-1","type":11345864896923813661,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":[]},{"usr":13072248567942986397,"detailed_name":"std::__num_base::_S_odigits_end = _S_odigits + 16","qual_name_offset":0,"short_name_offset":17,"short_name_size":14,"hover":"","comments":"","spell":"1557:2-1557:16|1557:2-1557:34|1026|-1","type":6941766153757428009,"kind":22,"parent_kind":5,"storage":0,"declarations":[],"uses":["1558:16-1558:30|4|-1"]},{"usr":13074542164159631014,"detailed_name":"bool std::ctype<char>::_M_del","qual_name_offset":5,"short_name_offset":23,"short_name_size":6,"hover":"","comments":"","spell":"691:14-691:20|691:7-691:20|1026|-1","type":98,"kind":8,"parent_kind":5,"storage":0,"declarations":[],"uses":[]},{"usr":13095496124359632115,"detailed_name":"const std::locale &__loc","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2636:39-2636:44|2636:25-2636:44|1026|-1","type":15288937763540599420,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2637:40-2637:45|4|-1"]},{"usr":13126850758434311011,"detailed_name":"std::__c_locale __cloc","qual_name_offset":16,"short_name_offset":16,"short_name_size":6,"hover":"","comments":"","spell":"1722:27-1722:33|1722:16-1722:33|1026|-1","type":14775529620120560523,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":["1724:32-1724:38|4|-1"]},{"usr":13197374515639655469,"detailed_name":"std::size_t std::__numpunct_cache::_M_falsename_size","qual_name_offset":12,"short_name_offset":35,"short_name_size":17,"hover":"","comments":"","spell":"1603:41-1603:58|1603:7-1603:58|1026|-1","type":107,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1625:2-1625:19|20|-1"]},{"usr":13203365778527952842,"detailed_name":"std::size_t std::__numpunct_cache::_M_truename_size","qual_name_offset":12,"short_name_offset":35,"short_name_size":16,"hover":"","comments":"","spell":"1601:41-1601:57|1601:7-1601:57|1026|-1","type":107,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1624:18-1624:34|20|-1"]},{"usr":13242440903662151334,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2441:36-2441:40|2441:26-2441:40|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2443:34-2443:38|4|-1"]},{"usr":13253451954387188547,"detailed_name":"long __v","qual_name_offset":5,"short_name_offset":5,"short_name_size":3,"hover":"","comments":"","spell":"2374:65-2374:68|2374:60-2374:68|1026|-1","type":115,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2375:48-2375:51|4|-1"]},{"usr":13283397823887970175,"detailed_name":"std::size_t __refs","qual_name_offset":12,"short_name_offset":12,"short_name_size":6,"hover":"std::size_t __refs = 0","comments":"","spell":"1484:44-1484:50|1484:37-1484:54|1026|-1","type":107,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":[]},{"usr":13286923092846320362,"detailed_name":"char *__to","qual_name_offset":6,"short_name_offset":6,"short_name_size":4,"hover":"","comments":"","spell":"354:29-354:33|354:23-354:33|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["355:54-355:58|4|-1"]},{"usr":13306965718745825910,"detailed_name":"std::num_put::char_type __fill","qual_name_offset":24,"short_name_offset":24,"short_name_size":6,"hover":"","comments":"","spell":"2384:52-2384:58|2384:42-2384:58|1026|-1","type":18263523835391732858,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2385:40-2385:46|4|-1"]},{"usr":13349305170953528609,"detailed_name":"std::num_get::iter_type __end","qual_name_offset":24,"short_name_offset":24,"short_name_size":5,"hover":"","comments":"","spell":"2036:37-2036:42|2036:27-2036:42|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2038:35-2038:40|4|-1"]},{"usr":13350333618462709780,"detailed_name":"ios_base::iostate &__err","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2221:26-2221:31|2221:7-2221:31|1026|-1","type":2712928445144601234,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2222:51-2222:56|4|-1"]},{"usr":13357291896581573196,"detailed_name":"const std::locale &__loc","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"1632:30-1632:35|1632:16-1632:35|1026|-1","type":15288937763540599420,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":13394779726336266933,"detailed_name":"static const std::ctype_base::mask std::ctype_base::cntrl","qual_name_offset":35,"short_name_offset":52,"short_name_size":5,"hover":"static const std::ctype_base::mask std::ctype_base::cntrl = _IScntrl","comments":"","type":0,"kind":8,"parent_kind":0,"storage":2,"declarations":[],"uses":["2582:62-2582:67|4|-1"]},{"usr":13419481119687701999,"detailed_name":"std::__num_base::_S_ie = _S_izero + 14","qual_name_offset":0,"short_name_offset":17,"short_name_size":5,"hover":"","comments":"","spell":"1583:7-1583:12|1583:7-1583:28|1026|-1","type":8118321725494135046,"kind":22,"parent_kind":5,"storage":0,"declarations":[],"uses":[]},{"usr":13433274516932576108,"detailed_name":"std::__num_base::_S_iminus","qual_name_offset":0,"short_name_offset":17,"short_name_size":9,"hover":"std::__num_base::_S_iminus = 0","comments":"","spell":"1578:7-1578:16|1578:7-1578:16|1026|-1","type":8118321725494135046,"kind":22,"parent_kind":5,"storage":0,"declarations":[],"uses":[]},{"usr":13466808990644889193,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","type":0,"kind":0,"parent_kind":0,"storage":0,"declarations":[],"uses":["2147:7-2147:31|64|-1","2153:2-2153:26|64|-1"]},{"usr":13521874402138769569,"detailed_name":"_CharT std::__numpunct_cache::_M_atoms_in[26]","qual_name_offset":7,"short_name_offset":30,"short_name_size":11,"hover":"","comments":"A list of valid numeric literals for input: in the standard\n\"C\" locale, this is \"-+xX0123456789abcdefABCDEF\"\nThis array contains the chars after having been passed\nthrough the current locale's ctype<_CharT>.widen().","spell":"1617:17-1617:28|1617:7-1617:49|1026|-1","type":2793105535086544185,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":[]},{"usr":13530208667745972078,"detailed_name":"const char *__hi","qual_name_offset":12,"short_name_offset":12,"short_name_size":4,"hover":"","comments":"","spell":"787:56-787:60|787:44-787:60|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":13641031814664665773,"detailed_name":"std::size_t __grouping_size","qual_name_offset":12,"short_name_offset":12,"short_name_size":15,"hover":"","comments":"","spell":"2483:51-2483:66|2483:44-2483:66|1026|-1","type":107,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":13674343242582197690,"detailed_name":"std::__ctype_abstract_base::char_type __c","qual_name_offset":38,"short_name_offset":38,"short_name_size":3,"hover":"","comments":"","spell":"331:24-331:27|331:14-331:27|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["332:32-332:35|4|-1"]},{"usr":13705239459640197219,"detailed_name":"long __v","qual_name_offset":5,"short_name_offset":5,"short_name_size":3,"hover":"","comments":"","spell":"2513:68-2513:71|2513:63-2513:71|1026|-1","type":115,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2514:49-2514:52|4|-1"]},{"usr":13772592513953030279,"detailed_name":"const std::ctype<char>::char_type *__hi","qual_name_offset":35,"short_name_offset":35,"short_name_size":4,"hover":"","comments":"","spell":"1064:52-1064:56|1064:35-1064:56|1026|-1","type":14753062342232613330,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":13799096206288258533,"detailed_name":"int &__len","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"2485:28-2485:33|2485:23-2485:33|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":13925097804034755609,"detailed_name":"std::size_t __refs","qual_name_offset":12,"short_name_offset":12,"short_name_size":6,"hover":"std::size_t __refs = 0","comments":"","spell":"359:36-359:42|359:29-359:46|1026|-1","type":107,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":["359:55-359:61|4|-1"]},{"usr":13928302088726245908,"detailed_name":"bool __v","qual_name_offset":5,"short_name_offset":5,"short_name_size":3,"hover":"","comments":"","spell":"2332:65-2332:68|2332:60-2332:68|1026|-1","type":98,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2333:48-2333:51|4|-1"]},{"usr":14064066985211152197,"detailed_name":"int *__vec","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"1273:65-1273:70|1273:59-1273:70|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":14090179677327305299,"detailed_name":"std::num_get::iter_type __in","qual_name_offset":24,"short_name_offset":24,"short_name_size":4,"hover":"","comments":"","spell":"2051:21-2051:25|2051:11-2051:25|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2053:29-2053:33|4|-1"]},{"usr":14091333883377843272,"detailed_name":"std::size_t __refs","qual_name_offset":12,"short_name_offset":12,"short_name_size":6,"hover":"std::size_t __refs = 0","comments":"","spell":"718:65-718:71|718:58-718:75|1026|-1","type":107,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":[]},{"usr":14124893918061333427,"detailed_name":"const std::string &__s","qual_name_offset":19,"short_name_offset":19,"short_name_size":3,"hover":"","comments":"","spell":"1507:34-1507:37|1507:20-1507:37|1026|-1","type":14151982074805896770,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":[]},{"usr":14199400607678456384,"detailed_name":"std::ctype<char>::char_type *__lo","qual_name_offset":29,"short_name_offset":29,"short_name_size":4,"hover":"","comments":"","spell":"819:26-819:30|819:15-819:30|1026|-1","type":14753062342232613330,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["820:33-820:37|12|-1"]},{"usr":14212856712201165624,"detailed_name":"std::ctype_base::__to_type std::ctype<char>::_M_toupper","qual_name_offset":27,"short_name_offset":45,"short_name_size":10,"hover":"","comments":"","spell":"692:19-692:29|692:7-692:29|1026|-1","type":6875089324386397551,"kind":8,"parent_kind":5,"storage":0,"declarations":[],"uses":[]},{"usr":14229547951310424013,"detailed_name":"std::ctype_base::mask __m","qual_name_offset":22,"short_name_offset":22,"short_name_size":3,"hover":"","comments":"","spell":"435:24-435:27|435:19-435:27|1026|-1","type":105,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":14232114661927631346,"detailed_name":"const std::__ctype_abstract_base::char_type *__hi","qual_name_offset":45,"short_name_offset":45,"short_name_size":4,"hover":"","comments":"","spell":"397:53-397:57|397:36-397:57|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":14315526035835545096,"detailed_name":"const std::__ctype_abstract_base::char_type *__lo","qual_name_offset":45,"short_name_offset":45,"short_name_size":4,"hover":"","comments":"","spell":"186:27-186:31|186:10-186:31|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["187:28-187:32|4|-1"]},{"usr":14329398082545804745,"detailed_name":"const char *__hi","qual_name_offset":12,"short_name_offset":12,"short_name_size":4,"hover":"","comments":"","spell":"1107:46-1107:50|1107:34-1107:50|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["1109:23-1109:27|12|-1","1110:33-1110:37|12|-1","1111:9-1111:13|12|-1"]},{"usr":14340129327804025790,"detailed_name":"std::num_put::char_type *__new","qual_name_offset":25,"short_name_offset":25,"short_name_size":5,"hover":"","comments":"","spell":"2484:50-2484:55|2484:39-2484:55|1026|-1","type":18263523835391732858,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":14367896638233015679,"detailed_name":"ios_base::iostate &__err","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2097:23-2097:28|2097:4-2097:28|1026|-1","type":2712928445144601234,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2098:48-2098:53|4|-1"]},{"usr":14447494294073188782,"detailed_name":"ios_base::iostate &__err","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2107:23-2107:28|2107:4-2107:28|1026|-1","type":2712928445144601234,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2108:48-2108:53|4|-1"]},{"usr":14525756011508281509,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2036:54-2036:58|2036:44-2036:58|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2038:42-2038:46|4|-1"]},{"usr":14576120695286053089,"detailed_name":"const std::ctype<wchar_t>::char_type *__hi","qual_name_offset":38,"short_name_offset":38,"short_name_size":4,"hover":"","comments":"","spell":"1291:68-1291:72|1291:51-1291:72|1026|-1","type":3021622049330364817,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":14616187977878541119,"detailed_name":"std::num_get::iter_type __end","qual_name_offset":24,"short_name_offset":24,"short_name_size":5,"hover":"","comments":"","spell":"2096:37-2096:42|2096:27-2096:42|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2098:35-2098:40|4|-1"]},{"usr":14624026118405427410,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","type":0,"kind":0,"parent_kind":0,"storage":0,"declarations":[],"uses":["50:15-50:34|64|-1","1540:15-1540:34|64|-1"]},{"usr":14665190449433908613,"detailed_name":"_CharT *__s","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"109:28-109:31|109:20-109:31|1026|-1","type":10042642843407977652,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":[]},{"usr":14782147755752069451,"detailed_name":"std::num_get::iter_type __end","qual_name_offset":24,"short_name_offset":24,"short_name_size":5,"hover":"","comments":"","spell":"2220:41-2220:46|2220:31-2220:46|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2222:38-2222:43|4|-1"]},{"usr":14795595978069915682,"detailed_name":"_ValueT __v","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2470:24-2470:27|2470:16-2470:27|1026|-1","type":9717920339719404876,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":14963469859150497179,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2378:36-2378:40|2378:26-2378:40|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2380:34-2380:38|4|-1"]},{"usr":14994775562859562978,"detailed_name":"int __len","qual_name_offset":4,"short_name_offset":4,"short_name_size":5,"hover":"","comments":"","spell":"119:70-119:75|119:66-119:75|1026|-1","type":114,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":[]},{"usr":14998910250863627444,"detailed_name":"char __dfault","qual_name_offset":5,"short_name_offset":5,"short_name_size":8,"hover":"","comments":"","spell":"590:8-590:16|590:3-590:16|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":15032249158881355516,"detailed_name":"std::num_get::iter_type __in","qual_name_offset":24,"short_name_offset":24,"short_name_size":4,"hover":"","comments":"","spell":"2062:21-2062:25|2062:11-2062:25|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2064:29-2064:33|4|-1"]},{"usr":15150707423382507627,"detailed_name":"std::num_put::char_type __fill","qual_name_offset":24,"short_name_offset":24,"short_name_size":6,"hover":"","comments":"","spell":"2510:55-2510:61|2510:45-2510:61|1026|-1","type":18263523835391732858,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":15201975492155069100,"detailed_name":"std::num_put::iter_type __s","qual_name_offset":24,"short_name_offset":24,"short_name_size":3,"hover":"","comments":"","spell":"2388:21-2388:24|2388:11-2388:24|1026|-1","type":9714744024952045946,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2390:29-2390:32|4|-1"]},{"usr":15229646516558115422,"detailed_name":"const std::__ctype_abstract_base::char_type *__hi","qual_name_offset":45,"short_name_offset":45,"short_name_size":4,"hover":"","comments":"","spell":"417:21-417:25|417:4-417:25|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":15288820751023274559,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2106:54-2106:58|2106:44-2106:58|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2108:42-2108:46|4|-1"]},{"usr":15308520365828049522,"detailed_name":"const char __t","qual_name_offset":11,"short_name_offset":11,"short_name_size":3,"hover":"const char __t = do_narrow(__c, __dfault)","comments":"","spell":"935:13-935:16|935:2-935:43|2|-1","type":110,"kind":13,"parent_kind":6,"storage":0,"declarations":[],"uses":["936:6-936:9|12|-1","937:49-937:52|12|-1","938:9-938:12|12|-1"]},{"usr":15402856002689398827,"detailed_name":"const std::ctype<wchar_t>::char_type *__lo","qual_name_offset":38,"short_name_offset":38,"short_name_size":4,"hover":"","comments":"","spell":"1467:34-1467:38|1467:17-1467:38|1026|-1","type":3021622049330364817,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":15423923713827085216,"detailed_name":"const char *__hi","qual_name_offset":12,"short_name_offset":12,"short_name_size":4,"hover":"","comments":"","spell":"773:55-773:59|773:43-773:59|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":15452495147428508422,"detailed_name":"_CharT __c","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2636:20-2636:23|2636:13-2636:23|1026|-1","type":1639491032900410303,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2637:69-2637:72|4|-1"]},{"usr":15466338848476631560,"detailed_name":"std::__num_base::_S_oplus","qual_name_offset":0,"short_name_offset":17,"short_name_size":8,"hover":"std::__num_base::_S_oplus = 1","comments":"","spell":"1553:2-1553:10|1553:2-1553:10|1026|-1","type":6941766153757428009,"kind":22,"parent_kind":5,"storage":0,"declarations":[],"uses":[]},{"usr":15467794114308468081,"detailed_name":"std::__ctype_abstract_base::char_type *__to","qual_name_offset":39,"short_name_offset":39,"short_name_size":4,"hover":"","comments":"","spell":"312:60-312:64|312:49-312:64|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["313:43-313:47|4|-1"]},{"usr":15599727783004694209,"detailed_name":"int __j","qual_name_offset":4,"short_name_offset":4,"short_name_size":3,"hover":"int __j = 0","comments":"","spell":"131:16-131:19|131:12-131:23|2|-1","type":114,"kind":13,"parent_kind":12,"storage":0,"declarations":[],"uses":["131:25-131:28|12|-1","131:38-131:41|28|-1","132:14-132:17|4|-1"]},{"usr":15618954561405263265,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","type":0,"kind":0,"parent_kind":0,"storage":0,"declarations":[],"uses":["2559:1-2559:28|64|-1"]},{"usr":15627526360733008724,"detailed_name":"char __dfault","qual_name_offset":5,"short_name_offset":5,"short_name_size":8,"hover":"","comments":"","spell":"661:33-661:41|661:28-661:41|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":15697522111765798774,"detailed_name":"std::ctype_base::mask __m","qual_name_offset":22,"short_name_offset":22,"short_name_size":3,"hover":"","comments":"","spell":"378:18-378:21|378:13-378:21|1026|-1","type":105,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":15785319904509949619,"detailed_name":"std::__ctype_abstract_base::char_type __c","qual_name_offset":38,"short_name_offset":38,"short_name_size":3,"hover":"","comments":"","spell":"453:28-453:31|453:18-453:31|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":15928216406559866162,"detailed_name":"const std::ctype<char>::char_type *__hi","qual_name_offset":35,"short_name_offset":35,"short_name_size":4,"hover":"","comments":"","spell":"1160:57-1160:61|1160:40-1160:61|1026|-1","type":14753062342232613330,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["1163:23-1163:27|12|-1","1164:33-1164:37|12|-1","1165:9-1165:13|12|-1"]},{"usr":15936134403698777909,"detailed_name":"std::num_put::char_type __fill","qual_name_offset":24,"short_name_offset":24,"short_name_size":6,"hover":"","comments":"","spell":"2513:55-2513:61|2513:45-2513:61|1026|-1","type":18263523835391732858,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2514:41-2514:47|4|-1"]},{"usr":15947596048237006375,"detailed_name":"const char *__hi","qual_name_offset":12,"short_name_offset":12,"short_name_size":4,"hover":"","comments":"","spell":"312:43-312:47|312:31-312:47|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["313:37-313:41|4|-1"]},{"usr":15948098045652486180,"detailed_name":"std::ctype::mask __m","qual_name_offset":17,"short_name_offset":17,"short_name_size":3,"hover":"","comments":"","spell":"639:24-639:27|639:19-639:27|1026|-1","type":15612257525702208121,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":16015997538270791939,"detailed_name":"const _CharT *std::__numpunct_cache::_M_falsename","qual_name_offset":14,"short_name_offset":37,"short_name_size":12,"hover":"","comments":"","spell":"1602:23-1602:35|1602:7-1602:35|1026|-1","type":2793105535086544185,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1624:39-1624:51|20|-1","1649:14-1649:26|4|-1"]},{"usr":16074214744841602339,"detailed_name":"std::size_t __refs","qual_name_offset":12,"short_name_offset":12,"short_name_size":6,"hover":"std::size_t __refs = 0","comments":"","spell":"2314:22-2314:28|2314:15-2314:32|1026|-1","type":107,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":["2314:42-2314:48|4|-1"]},{"usr":16088994417983362804,"detailed_name":"std::__num_base::_S_iX","qual_name_offset":0,"short_name_offset":17,"short_name_size":5,"hover":"std::__num_base::_S_iX = 3","comments":"","spell":"1581:7-1581:12|1581:7-1581:12|1026|-1","type":8118321725494135046,"kind":22,"parent_kind":5,"storage":0,"declarations":[],"uses":[]},{"usr":16102378876027325314,"detailed_name":"char __dfault","qual_name_offset":5,"short_name_offset":5,"short_name_size":8,"hover":"","comments":"","spell":"354:13-354:21|354:8-354:21|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["355:44-355:52|4|-1"]},{"usr":16109088441368679320,"detailed_name":"_CharT __c","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2593:20-2593:23|2593:13-2593:23|1026|-1","type":7506746510476428612,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2594:69-2594:72|4|-1"]},{"usr":16156812752229410887,"detailed_name":"std::ctype<wchar_t>::char_type __c","qual_name_offset":31,"short_name_offset":31,"short_name_size":3,"hover":"","comments":"","spell":"1359:28-1359:31|1359:18-1359:31|1026|-1","type":112,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":16194747091621534944,"detailed_name":"std::size_t __refs","qual_name_offset":12,"short_name_offset":12,"short_name_size":6,"hover":"std::size_t __refs = 0","comments":"","spell":"1230:39-1230:45|1230:32-1230:49|1026|-1","type":107,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":[]},{"usr":16256266404090314811,"detailed_name":"unsigned int &__v","qual_name_offset":14,"short_name_offset":14,"short_name_size":3,"hover":"","comments":"","spell":"2047:44-2047:47|2047:30-2047:47|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2048:55-2048:58|4|-1"]},{"usr":16260488501567279891,"detailed_name":"std::num_put::char_type __fill","qual_name_offset":24,"short_name_offset":24,"short_name_size":6,"hover":"","comments":"","spell":"2488:24-2488:30|2488:14-2488:30|1026|-1","type":18263523835391732858,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":16290579758490173211,"detailed_name":"const std::ctype::char_type *__lo","qual_name_offset":29,"short_name_offset":29,"short_name_size":4,"hover":"","comments":"","spell":"639:46-639:50|639:29-639:50|1026|-1","type":2029653507280428489,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":16374677854423399575,"detailed_name":"std::ctype_base::__to_type std::ctype<char>::_M_tolower","qual_name_offset":27,"short_name_offset":45,"short_name_size":10,"hover":"","comments":"","spell":"693:19-693:29|693:7-693:29|1026|-1","type":6875089324386397551,"kind":8,"parent_kind":5,"storage":0,"declarations":[],"uses":[]},{"usr":16381347621455820859,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2469:39-2469:43|2469:29-2469:43|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":16451577013538198344,"detailed_name":"std::__num_base::_S_oE = _S_oudigits + 14","qual_name_offset":0,"short_name_offset":17,"short_name_size":5,"hover":"","comments":"For scientific notation, 'E'","spell":"1561:2-1561:7|1561:2-1561:26|1026|-1","type":6941766153757428009,"kind":22,"parent_kind":5,"storage":0,"declarations":[],"uses":[]},{"usr":16453129504817795174,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2484:33-2484:37|2484:23-2484:37|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":16472268641991819487,"detailed_name":"static const std::size_t std::ctype<char>::table_size","qual_name_offset":25,"short_name_offset":43,"short_name_size":10,"hover":"static const std::size_t std::ctype<char>::table_size = 1 + static_cast<unsigned char>(-1)","comments":"The size of the mask table.  It is SCHAR_MAX + 1.","type":107,"kind":8,"parent_kind":5,"storage":2,"declarations":["705:32-705:42|705:7-705:79|1025|-1"],"uses":[]},{"usr":16474317231704303812,"detailed_name":"std::ctype_base::mask __m","qual_name_offset":22,"short_name_offset":22,"short_name_size":3,"hover":"","comments":"","spell":"787:21-787:24|787:16-787:24|1026|-1","type":105,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":16509004432586361522,"detailed_name":"_CharT __c","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2623:20-2623:23|2623:13-2623:23|1026|-1","type":12910155154557861287,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2624:69-2624:72|4|-1"]},{"usr":16549906201987845222,"detailed_name":"double &__v","qual_name_offset":8,"short_name_offset":8,"short_name_size":3,"hover":"","comments":"","spell":"2102:38-2102:41|2102:30-2102:41|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2103:55-2103:58|4|-1"]},{"usr":16572819180283445091,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2384:36-2384:40|2384:26-2384:40|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2385:34-2385:38|4|-1"]},{"usr":16645497319810189584,"detailed_name":"std::num_get::iter_type __end","qual_name_offset":24,"short_name_offset":24,"short_name_size":5,"hover":"","comments":"","spell":"2241:41-2241:46|2241:31-2241:46|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2243:38-2243:43|4|-1"]},{"usr":16671222507944853704,"detailed_name":"std::size_t __gsize","qual_name_offset":12,"short_name_offset":12,"short_name_size":7,"hover":"","comments":"","spell":"110:33-110:40|110:26-110:40|1026|-1","type":107,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":[]},{"usr":16680044437381557939,"detailed_name":"_CharT __c","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2587:20-2587:23|2587:13-2587:23|1026|-1","type":5180330286487157231,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2588:69-2588:72|4|-1"]},{"usr":16747295942375365648,"detailed_name":"unsigned long &__v","qual_name_offset":15,"short_name_offset":15,"short_name_size":3,"hover":"","comments":"","spell":"2231:48-2231:51|2231:33-2231:51|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2232:58-2232:61|4|-1"]},{"usr":16800758051599239067,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2488:58-2488:62|2488:48-2488:62|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":16854565201862893864,"detailed_name":"std::__c_locale __cloc","qual_name_offset":16,"short_name_offset":16,"short_name_size":6,"hover":"","comments":"","spell":"1230:24-1230:30|1230:13-1230:30|1026|-1","type":14775529620120560523,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":[]},{"usr":16875197621505479055,"detailed_name":"std::__cxx11::numpunct::__cache_type *__cache","qual_name_offset":38,"short_name_offset":38,"short_name_size":7,"hover":"","comments":"","spell":"1708:30-1708:37|1708:16-1708:37|1026|-1","type":10922748494482251071,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":["1709:32-1709:39|4|-1"]},{"usr":16916898913437186482,"detailed_name":"const std::__ctype_abstract_base::char_type *__hi","qual_name_offset":45,"short_name_offset":45,"short_name_size":4,"hover":"","comments":"","spell":"186:50-186:54|186:33-186:54|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["187:34-187:38|4|-1"]},{"usr":16947762201490980038,"detailed_name":"static locale::id id","qual_name_offset":7,"short_name_offset":15,"short_name_size":2,"hover":"static locale::id id = id","comments":"Numpunct facet id.","spell":"2557:43-2557:45|2556:3-2557:45|1026|-1","type":702300912587928919,"kind":8,"parent_kind":5,"storage":2,"declarations":["2304:26-2304:28|2304:7-2304:28|1025|-1"],"uses":[]},{"usr":16981968638845282144,"detailed_name":"std::size_t __refs","qual_name_offset":12,"short_name_offset":12,"short_name_size":6,"hover":"std::size_t __refs = 0","comments":"","spell":"1521:44-1521:50|1521:37-1521:54|1026|-1","type":107,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":[]},{"usr":16987640377740913860,"detailed_name":"unsigned long __v","qual_name_offset":14,"short_name_offset":14,"short_name_size":3,"hover":"","comments":"","spell":"2518:21-2518:24|2518:7-2518:24|1026|-1","type":107,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2519:49-2519:52|4|-1"]},{"usr":17029281458032238944,"detailed_name":"static const char *std::__num_base::_S_atoms_in","qual_name_offset":19,"short_name_offset":36,"short_name_size":11,"hover":"","comments":"String literal of acceptable (narrow) input, for num_get.\n\"-+xX0123456789abcdefABCDEF\"","type":0,"kind":8,"parent_kind":5,"storage":2,"declarations":["1574:24-1574:35|1574:5-1574:35|1025|-1"],"uses":[]},{"usr":17093107041933289749,"detailed_name":"static const std::ctype_base::mask std::ctype_base::upper","qual_name_offset":35,"short_name_offset":52,"short_name_size":5,"hover":"static const std::ctype_base::mask std::ctype_base::upper = _ISupper","comments":"","type":0,"kind":8,"parent_kind":0,"storage":2,"declarations":[],"uses":["2588:62-2588:67|4|-1"]},{"usr":17124005174388669353,"detailed_name":"double __v","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2437:67-2437:70|2437:60-2437:70|1026|-1","type":144,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2438:48-2438:51|4|-1"]},{"usr":17132171962538319066,"detailed_name":"std::num_get::iter_type __end","qual_name_offset":24,"short_name_offset":24,"short_name_size":5,"hover":"","comments":"","spell":"2230:41-2230:46|2230:31-2230:46|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2232:38-2232:43|4|-1"]},{"usr":17142283208439030719,"detailed_name":"const std::ctype<wchar_t>::char_type *__lo","qual_name_offset":38,"short_name_offset":38,"short_name_size":4,"hover":"","comments":"","spell":"1291:45-1291:49|1291:28-1291:49|1026|-1","type":3021622049330364817,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":17142767138455637844,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2057:54-2057:58|2057:44-2057:58|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2059:42-2059:46|4|-1"]},{"usr":17218677171744663398,"detailed_name":"ios_base::iostate &__err","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2237:26-2237:31|2237:7-2237:31|1026|-1","type":2712928445144601234,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2238:51-2238:56|4|-1"]},{"usr":17224195012411058362,"detailed_name":"static const std::ctype_base::mask std::ctype_base::blank","qual_name_offset":35,"short_name_offset":52,"short_name_size":5,"hover":"static const std::ctype_base::mask std::ctype_base::blank = _ISblank","comments":"","type":0,"kind":8,"parent_kind":0,"storage":2,"declarations":[],"uses":["2637:62-2637:67|4|-1"]},{"usr":17244570239110070238,"detailed_name":"std::size_t __len","qual_name_offset":12,"short_name_offset":12,"short_name_size":5,"hover":"","comments":"","spell":"2183:40-2183:45|2183:33-2183:45|1026|-1","type":107,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2186:62-2186:67|4|-1"]},{"usr":17343408572677266924,"detailed_name":"const std::locale &__loc","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2623:39-2623:44|2623:25-2623:44|1026|-1","type":15288937763540599420,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2624:40-2624:45|4|-1"]},{"usr":17371460778622729353,"detailed_name":"static locale::id id","qual_name_offset":7,"short_name_offset":15,"short_name_size":2,"hover":"static locale::id id = id","comments":"Numpunct facet id.","spell":"1883:34-1883:36|1882:3-1883:36|1026|-1","type":702300912587928919,"kind":8,"parent_kind":5,"storage":2,"declarations":["1686:27-1686:29|1686:7-1686:29|1025|-1"],"uses":[]},{"usr":17452249573812094414,"detailed_name":"char __c","qual_name_offset":5,"short_name_offset":5,"short_name_size":3,"hover":"","comments":"","spell":"744:25-744:28|744:20-744:28|1026|-1","type":110,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":17492071016828621043,"detailed_name":"const char *std::__numpunct_cache::_M_grouping","qual_name_offset":12,"short_name_offset":35,"short_name_size":11,"hover":"","comments":"","spell":"1597:21-1597:32|1597:7-1597:32|1026|-1","type":0,"kind":8,"parent_kind":23,"storage":0,"declarations":[],"uses":["1622:24-1622:35|20|-1","1647:14-1647:25|12|-1"]},{"usr":17522353891574941263,"detailed_name":"std::num_put::iter_type __s","qual_name_offset":24,"short_name_offset":24,"short_name_size":3,"hover":"","comments":"","spell":"2462:21-2462:24|2462:11-2462:24|1026|-1","type":9714744024952045946,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2464:29-2464:32|4|-1"]},{"usr":17524922077213171856,"detailed_name":"_CharT __c","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2611:20-2611:23|2611:13-2611:23|1026|-1","type":10807881050017906786,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2612:69-2612:72|4|-1"]},{"usr":17528073274528587492,"detailed_name":"std::num_put::iter_type __s","qual_name_offset":24,"short_name_offset":24,"short_name_size":3,"hover":"","comments":"","spell":"2513:24-2513:27|2513:14-2513:27|1026|-1","type":9714744024952045946,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2514:30-2514:33|4|-1"]},{"usr":17559752671365823352,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2230:58-2230:62|2230:48-2230:62|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2232:45-2232:49|4|-1"]},{"usr":17588921434708558108,"detailed_name":"std::num_get::iter_type __end","qual_name_offset":24,"short_name_offset":24,"short_name_size":5,"hover":"","comments":"","spell":"2236:41-2236:46|2236:31-2236:46|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2238:38-2238:43|4|-1"]},{"usr":17653631415281903941,"detailed_name":"int &__len","qual_name_offset":5,"short_name_offset":5,"short_name_size":5,"hover":"","comments":"","spell":"2489:53-2489:58|2489:48-2489:58|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":17676814198806553192,"detailed_name":"std::__cxx11::numpunct::__cache_type *std::__cxx11::numpunct::_M_data","qual_name_offset":38,"short_name_offset":62,"short_name_size":7,"hover":"","comments":"","spell":"1682:23-1682:30|1682:7-1682:30|1026|-1","type":10922748494482251071,"kind":8,"parent_kind":5,"storage":0,"declarations":[],"uses":["1695:24-1695:31|20|-1","1709:24-1709:31|20|-1","1723:24-1723:31|20|-1","1824:16-1824:23|4|-1","1836:16-1836:23|4|-1","1849:16-1849:23|4|-1","1862:16-1862:23|4|-1","1875:16-1875:23|4|-1"]},{"usr":17680659788905582530,"detailed_name":"_CharT __c","qual_name_offset":7,"short_name_offset":7,"short_name_size":3,"hover":"","comments":"","spell":"2617:21-2617:24|2617:14-2617:24|1026|-1","type":5016465227836504302,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":["2618:70-2618:73|4|-1"]},{"usr":17767340107024136908,"detailed_name":"std::num_get::iter_type __end","qual_name_offset":24,"short_name_offset":24,"short_name_size":5,"hover":"","comments":"","spell":"2057:37-2057:42|2057:27-2057:42|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2059:35-2059:40|4|-1"]},{"usr":17784750746299066912,"detailed_name":"const std::ctype<wchar_t>::char_type *__lo","qual_name_offset":38,"short_name_offset":38,"short_name_size":4,"hover":"","comments":"","spell":"1309:46-1309:50|1309:29-1309:50|1026|-1","type":3021622049330364817,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":17909520220262075339,"detailed_name":"std::ctype_base::mask __m","qual_name_offset":22,"short_name_offset":22,"short_name_size":3,"hover":"","comments":"","spell":"744:15-744:18|744:10-744:18|1026|-1","type":105,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":17914329236071238310,"detailed_name":"std::size_t __refs","qual_name_offset":12,"short_name_offset":12,"short_name_size":6,"hover":"std::size_t __refs = 0","comments":"","spell":"1219:20-1219:26|1219:13-1219:30|1026|-1","type":107,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":[]},{"usr":17925221069550467387,"detailed_name":"std::ctype<char>::char_type *__lo","qual_name_offset":29,"short_name_offset":29,"short_name_size":4,"hover":"","comments":"","spell":"1031:29-1031:33|1031:18-1031:33|1026|-1","type":14753062342232613330,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":17955552664606397910,"detailed_name":"static locale::id id","qual_name_offset":7,"short_name_offset":15,"short_name_size":2,"hover":"static locale::id id = id","comments":"The facet id for ctype<char_type>","spell":"669:31-669:33|668:3-669:33|1026|-1","type":702300912587928919,"kind":8,"parent_kind":5,"storage":2,"declarations":["620:27-620:29|620:7-620:29|1025|-1"],"uses":[]},{"usr":17977408919502726566,"detailed_name":"std::ios_base &__io","qual_name_offset":15,"short_name_offset":15,"short_name_size":4,"hover":"","comments":"","spell":"2096:54-2096:58|2096:44-2096:58|1026|-1","type":14911526508283337092,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2098:42-2098:46|4|-1"]},{"usr":17988747231754060972,"detailed_name":"std::num_get::iter_type __in","qual_name_offset":24,"short_name_offset":24,"short_name_size":4,"hover":"","comments":"","spell":"2046:21-2046:25|2046:11-2046:25|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2048:29-2048:33|4|-1"]},{"usr":18060420165224904657,"detailed_name":"std::size_t __refs","qual_name_offset":12,"short_name_offset":12,"short_name_size":6,"hover":"std::size_t __refs = 0","comments":"","spell":"1694:23-1694:29|1694:16-1694:33|1026|-1","type":107,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":["1695:15-1695:21|4|-1"]},{"usr":18061070210526052643,"detailed_name":"ios_base::iostate &__err","qual_name_offset":19,"short_name_offset":19,"short_name_size":5,"hover":"","comments":"","spell":"2231:26-2231:31|2231:7-2231:31|1026|-1","type":2712928445144601234,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2232:51-2232:56|4|-1"]},{"usr":18085604822106609874,"detailed_name":"const char *__hi","qual_name_offset":12,"short_name_offset":12,"short_name_size":4,"hover":"","comments":"","spell":"899:43-899:47|899:31-899:47|1026|-1","type":0,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["903:27-903:31|12|-1","904:37-904:41|12|-1","905:13-905:17|12|-1","909:30-909:34|12|-1"]},{"usr":18105101044678724571,"detailed_name":"","qual_name_offset":0,"short_name_offset":0,"short_name_size":0,"hover":"","comments":"","type":0,"kind":0,"parent_kind":0,"storage":0,"declarations":[],"uses":["1486:5-1486:16|64|-1","1505:5-1505:16|64|-1","1523:5-1523:16|64|-1","1923:5-1923:16|64|-1","2632:5-2632:16|64|-1"]},{"usr":18114032915574366475,"detailed_name":"std::num_get::iter_type __end","qual_name_offset":24,"short_name_offset":24,"short_name_size":5,"hover":"","comments":"","spell":"1999:37-1999:42|1999:27-1999:42|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2001:35-2001:40|4|-1"]},{"usr":18147610730741396988,"detailed_name":"const _CharT *__ws","qual_name_offset":14,"short_name_offset":14,"short_name_size":4,"hover":"","comments":"","spell":"119:60-119:64|119:46-119:64|1026|-1","type":14249981498136291665,"kind":253,"parent_kind":12,"storage":0,"declarations":[],"uses":[]},{"usr":18155881437971381414,"detailed_name":"std::num_put::char_type __fill","qual_name_offset":24,"short_name_offset":24,"short_name_size":6,"hover":"","comments":"","spell":"2479:53-2479:59|2479:43-2479:59|1026|-1","type":18263523835391732858,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":18199774586768746083,"detailed_name":"std::num_get::iter_type __end","qual_name_offset":24,"short_name_offset":24,"short_name_size":5,"hover":"","comments":"","spell":"2139:37-2139:42|2139:27-2139:42|1026|-1","type":14718921033193416797,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2141:35-2141:40|4|-1"]},{"usr":18208584990290248789,"detailed_name":"const std::string &__s","qual_name_offset":19,"short_name_offset":19,"short_name_size":3,"hover":"","comments":"","spell":"1525:34-1525:37|1525:20-1525:37|1026|-1","type":14151982074805896770,"kind":253,"parent_kind":9,"storage":0,"declarations":[],"uses":[]},{"usr":18295932085585125807,"detailed_name":"std::ctype_base::mask *__vec","qual_name_offset":23,"short_name_offset":23,"short_name_size":5,"hover":"","comments":"","spell":"759:52-759:57|759:46-759:57|1026|-1","type":11345864896923813661,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]},{"usr":18366788933111164535,"detailed_name":"std::ctype<wchar_t>::__wmask_type std::ctype<wchar_t>::_M_wmask[16]","qual_name_offset":34,"short_name_offset":55,"short_name_size":8,"hover":"","comments":"","spell":"1204:33-1204:41|1204:7-1204:45|1026|-1","type":9601658843973835534,"kind":8,"parent_kind":5,"storage":0,"declarations":[],"uses":[]},{"usr":18378753395691494509,"detailed_name":"long long __v","qual_name_offset":10,"short_name_offset":10,"short_name_size":3,"hover":"","comments":"","spell":"2384:70-2384:73|2384:60-2384:73|1026|-1","type":116,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2385:48-2385:51|4|-1"]},{"usr":18401773769219029171,"detailed_name":"std::num_put::iter_type __s","qual_name_offset":24,"short_name_offset":24,"short_name_size":3,"hover":"","comments":"","spell":"2332:21-2332:24|2332:11-2332:24|1026|-1","type":9714744024952045946,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":["2333:29-2333:32|4|-1"]},{"usr":18444634223243932019,"detailed_name":"const std::__ctype_abstract_base::char_type *__hi","qual_name_offset":45,"short_name_offset":45,"short_name_size":4,"hover":"","comments":"","spell":"470:52-470:56|470:35-470:56|1026|-1","type":6868622468513517582,"kind":253,"parent_kind":6,"storage":0,"declarations":[],"uses":[]}]}